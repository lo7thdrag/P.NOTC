unit uDataModuleTTT;

interface

uses
  DB, ZAbstractRODataset, ZAbstractDataset, ZDataset, Classes, ZConnection,
  Dialogs, SysUtils, uDBGame_Defaults, uDBAsset_Bomb, uDBAsset_Gun,
  uDBAsset_Scripted,
  uDBRainfall, tttData, newClassASTT, uDBAssetObject, uDBAsset_Vehicle,
  uDBAsset_Sensor,
  uDBAsset_Sonobuoy, uDBAsset_GameEnvironment, uDBAsset_Cubicle, uDBFormation,
  uDBAsset_Satellite, uDBAsset_Fitted, uDBBlind_Zone, uDBPattern, uDBLink,
  uDBAsset_Sonar,
  uDBAsset_Radar, uDBAsset_Deploy, uDBAsset_Countermeasure, uDBAsset_Weapon,
  uDBAsset_Geo, uDBNote_Storage, uDBAsset_MotionCharacteristics,
  uDBAssets_SubAreaEnviroDefinition, uDBAsset_Runtime_Platform_Library,
  uDBAsset_Filter, uDBAsset_Reference_Point, uHelicopter_Land_Launch_Limits,
  ZAbstractConnection, uDBAsset_Logistics, uDBAsset_UserLogin,
  uDBAsset_FontTaktis, uDBAsset_Base, uBrigadePersonel,
  uDBAsset_Plotting_Definition, uDBAsset_GameReport,uDBAsset_Transport;
// ,uDBStudentRole;

type

  TIntegerArray = array of Integer;

  TdmTTT = class(TDataModule)
    ZQ: TZQuery;
    ZConn: TZConnection;
    ZQ2: TZQuery;

  private

    { Private declarations }
  public
    { Public declarations }
    function InitZDB(const zDbServer, zDBProto, zDBname, zDBuser, zDBPass: string): boolean;


    {$REGION ' Exercise Section '}

    {$REGION ' Scenario '}
    function GetAllScenarioDef(var aList: TList): Integer;
    function GetScenarioDef(const aScenarioIdentifier: string): Integer; overload;

    function InsertScenarioDef(var aRec: TRecScenario_Definition): Boolean;
    function UpdateScenarioDef(var aRec: TRecScenario_Definition): Boolean;
    function DeleteScenarioDef(const aScenarioID: Integer): Boolean;

    //=Asset Deployment
    function GetAssetDeployment(const aScenarioID: Integer; var aResult: TAsset_Deployment): Boolean;
    function InsertAssetDeployment( var aRec: TRecAsset_Deployment_Definition): Boolean;
    function UpdateAssetDeployment( var aRec: TRecAsset_Deployment_Definition): Boolean;

    //==Platform Activation
    function GetPlatformActivation(const aDeploymentID: Integer; var aList: TList): Integer; overload;
    function GetPlatformActivation(const aDeploymentID, aPlatformIndex: Integer; var aPIActivation : TRecPlatform_Activation): Integer; overload;
    function GetPlatformActivationByTransport(const aDeploymentID, aPlatformIndex: Integer; var aList: TList): Integer; overload;

    function InsertPlatformActivation(var aRec: TRecPlatform_Activation): Boolean;
    function UpdatePlatformActivation(var aRec: TRecPlatform_Activation): Boolean; overload;
    function UpdateHostIdPlatformActivation(var aDeploymentIndex, aHostID : Integer): Boolean; overload;
    function DeletePlatformActivation(const aDeleteType: Byte; const aIndex: Integer): Boolean; overload;

    //==Cubicle Group Assignment
    function GetCubicleGroupAssignmentResidu(const aResourceAllocID, aForce,aDeploymentID: Integer; var aList: TList): Integer;
    function GetCubicleGroupAssignment(const aCubicleGroupID: Integer;var aList: TList): Integer; overload;
    function GetCubicleGroupAssignment(const aPlatformIndex: Integer): Integer; overload;
    function InsertCubicleGroupAssignment(var aRec: TRecCubicle_Group_Assignment): Boolean;
    function UpdateCubicleGroupAssignment(var aRec: TRecCubicle_Group_Assignment): Boolean;
    function DeleteCubicleGroupAssignment(const aDeleteType: Byte;const aIndex: Integer): Boolean; overload;

    //==Cubicle Group Channel Assignment
    function GetCubicleGroupChannelAssignmentResidu(const aResourceAllocID,aGroupIndex: Integer; var aList: TList): Integer;
    function GetCubicleGroupChannelAssignment(const aCubicleGroupID: Integer;var aList: TList): Integer;
    function InsertCubicleGroupChannelAssignment(var aRec: TRecCubicle_Group_Channel_Assgnmnt): Boolean;
    function UpdateCubicleGroupChannelAssignment( var aRec: TRecCubicle_Group_Channel_Assgnmnt): Boolean;
    function DeleteCubicleGroupChannelAssignment(const aDeleteType: Byte;const aIndex: Integer): Boolean; overload;
    function DeleteCubicleGroupChannelAssignment(const aGroupIndex,aCommChannelIndex: Integer): Boolean; overload;

     //==Cubicle Group
    function GetCubicleGroup(const aDeploymentIndex, aForce: Integer; var aList: TList): Integer; overload;
    function GetCubicleGroup(const aDeployIndex: Integer;const aIdentifier: string): Integer; overload;
    function InsertCubicleGroup(var aRec: TRecCubicle_Group): Boolean;
    function UpdateCubicleGroup(var aRec: TRecCubicle_Group): Boolean;
    function DeleteCubicleGroup(const aDeleteType: Byte; const aIndex: Integer): Boolean;
//
//
//    function GetScenario(const id: Integer; var rec: TScenario_Definition): boolean;
//    function getAllScenario_Definition(var aRec: TList): Integer;
//    function updateScenario(rec: TScenario_Definition; value: string): Integer;
//    function updateScenario_ByRA(new,old: string): Integer;
//    function insertScenario(rec: TScenario_Definition): Integer;
//    function DeleteScenario_Definition(const id: string): Integer;
//
//    function DeleteAsset_Deployment_Definition(const id: string): Integer;
//    function DeleteScenario(const aScenarioId: Integer): Boolean;
//
//    //=Scenario
//    function GetScenarioDef(var aList: TList): Integer; overload;
//    function GetScenarioDef(const aIdentifier: string;
//      var aResult: TScenario_Definition): Boolean; overload;
//
//
//    // Gak dulu
//    function GetPlatformActivation(const aPlatformIndex: Integer): Integer; overload;
    {$ENDREGION}

    {$REGION ' Resource Allocation '}
    function GetAllResourceAllocationDef(var aList: TList): Integer;
    function GetResourceAllocationDef(const aResAllocID: Integer; var aResult: TResource_Allocation): Boolean; overload;

    function InsertResourceAllocationDef(var aRec: TRecResource_Allocation): Boolean;
    function UpdateResourceAllocationDef(var aRec: TRecResource_Allocation): Boolean;
    function DeleteResourceAllocationDef(const aResAllocID: Integer): Boolean;

    //==Platform Instance
    function GetPlatformInstance(const aResourceAllocID, aPlatformType, aGetType: Integer; aName: string): Integer; overload;
    function GetPlatformInstance(const aResourceAllocID, aPlatformType, aForce: Integer; var aList: TList): Integer; overload;

    function GetPlatformInstanceCount(const aPlatformType, aPlatformIndex: Integer): Integer;
    function GetPlatformInstance(const aPlatformID: Integer; var aResult: TPlatform_Instance): Boolean; overload;
    function GetPlatformInstance(const aCubicleGroupID: Integer; var aList: TList): Integer; overload;

    function InsertPlatformInstance(var aRec: TRecPlatform_Instance): Boolean; overload;
    function UpdatePlatformInstance(var aRec: TRecPlatform_Instance): Boolean; overload;
    function DeletePlatformInstance(const aDeleteType: Byte;const aIndex: Integer): Boolean; overload;

    //==Resource RPL Mapping
    function GetResourceRPLMapping(const aResourceAllocID: Integer;var aList: TList): Integer;
    function InsertResourceRPLMapping(var aRec: TRecResource_Library_Mapping): Boolean;
    function DeleteResourceRPLMapping(const aDeleteType, aResourceAllocID,aLibraryID: Integer): Boolean; overload;

    //==Overlays
    function GetResourceOverlayMapping(const aResourceAllocID, aForce: Integer; var aList: TList): Integer;
    function InsertResourceOverlayMapping(var aRec: TRecResource_Overlay_Mapping): Boolean;
    function DeleteResourceOverlayMapping(const aDeleteType: Byte;const aIndex: Integer): Boolean;

    //==Base
    function GetResourceBaseMapping(const aResourceAllocID, aForce: Integer; var aList: TList): Integer;
    function GetResourceBaseMappingCount(const aResourceAllocID, aIndex: Integer): Boolean;
    function InsertResourceBaseMapping(var aRec: TResource_Base_Mapping): Boolean;
    function UpdateResourceBaseMapping(var aRec: TRecResource_Base_Mapping): Boolean;
    function DeleteResourceBaseMapping(const aDeleteType: Byte;const aResourceAllocID, aIndex, aForce: Integer): Boolean;

    //==Waypoint
    function GetResourceWaypointMapping(const aResourceAllocID : Integer;var aList: TList): Integer;
    function InsertResourceWaypointMapping(var aRec: TResource_Waypoint_Mapping): Boolean;
    function DeleteResourceWaypointMapping(const aDeleteType, aResourceAllocID,aWaypointID: Integer): Boolean;

    {$ENDREGION}

    {$REGION ' Environtment '}
    function GetAllEnvironmentDef(var aList: TList): Integer; {New}
    function GetEnvironmentDef(const aEnviIdentifier: string): Integer; overload;
    function GetEnvironmentDef(const aGameEnviID: Integer; var aResult: TGame_Environment_Definition): Boolean; overload;

    function InsertEnvironmentDef(var aRec: TRecGame_Environment_Definition): Boolean;
    function UpdateEnvironmentDef(var aRec: TRecGame_Environment_Definition): Boolean;
    function DeleteEnvironmentDef(const aGameEnviID: Integer): Boolean;

//    //==Sub Area Environment
//    function GetSubAreaEnviroDefCount(const aGameEnviIdent: string): Integer;
//    function GetSubAreaEnviroDef(const aGameEnviID: Integer;var aList: TList): Integer;
//    function InsertSubAreaEnviroDef(var aRec: TRecSubArea_Enviro_Definition): Boolean;
//    function UpdateSubAreaEnviroDef(var aRec: TRecSubArea_Enviro_Definition): Boolean;
//    function DeleteSubAreaEnviroDef(const aDeleteType: Byte;const aIndex: Integer): Boolean;
//
    //==Global Convergence Zone
    function InsertGlobalConvergenceZone(var aRec: TRecGlobal_Convergence_Zone): Boolean;
    function UpdateGlobalConvergenceZone(var aRec: TRecGlobal_Convergence_Zone): Boolean;
    function DeleteGlobalConvergenceZone(const aGameEnviID: Integer): Boolean;

    {$ENDREGION}

    {$REGION ' Game Area '}
    function GetAllGameAreaDef(var aList: TList): Integer; {New}
    function GetFilterGameAreaDef(var aList: TList; aFilter: String): Integer;
    function GetGameAreaDef(const aAreaIdentifier: string): Integer; overload;
    function GetGameAreaDef(const aGameAreaID: Integer; var aResult: TGame_Area_Definition): Boolean; overload;

    function InsertGameAreaDef(var aRec: TRecGame_Area_Definition): Boolean;
    function UpdateGameAreaDef(var aRec: TRecGame_Area_Definition): Boolean;
    function DeleteGameAreaDef(const aGameAreaID: Integer): Boolean;

    {$ENDREGION}

    {$ENDREGION}

    {$REGION ' Platforms Section '}

    {$REGION ' Vehicle '}
    function GetFilterVehicleDef(var aList: TList; aFilter: String): Integer;
    function GetFilterVehicleDefByDomain(var aList: TList; aFilter: Integer): Integer;
    function GetFilterVehicleForLandDomain(var aList: TList; aFilter: Integer): Integer;
    function GetAllVehicleDef(var aList: TList): Integer;
    function GetVehicleDef(const aClassName: string): Integer; overload;
    function GetVehicleDef(const aVehicleID: Integer; var aResult: TVehicle_Definition): boolean; overload;

    function InsertVehicleDef(var aRec: TRecVehicle_Definition): Boolean;
    function UpdateVehicleDef(var aRec: TRecVehicle_Definition): Boolean;
    function DeleteVehicleDef(const aVehicleID: Integer): Boolean;

    // Keperluan data lama
    function DeleteHelicopterLimit(const aVehicleID: Integer): Boolean;

    //==Platform Instance
    function DeletePlatformInstance(const aIndex: Integer): Boolean; overload;

    //==Platform Instance Identifier
    function GetAllPlatformInstanceIdentifier(const aVehicleID: Integer; var aList: TList): Boolean;
    function GetPlatformInstanceIdentifier(const aVehicleID: Integer; const aClassName: string): Integer;
    function InsertPlatformInstanceIdentifier(var aRec: TRecPlatform_Instance_Identifier): Boolean;
    function UpdatePlatformInstanceIdentifier(var aRec: TRecPlatform_Instance_Identifier): Boolean;
    function DeletePlatformInstanceIdentifier(const aDeleteType: Byte; const aIndex: Integer): Boolean;

    //==Asset-Hosted / Embarked Platform
    function GetHostPlatformCount(const aVehicleID: Integer): Integer;
    function GetAllVehicleAtHostPlatform (const aVehicleID: Integer; var aList: TList): Integer;
    function GetHostedPlatform(const aVehicleID: Integer;var aList: TList): Integer;
    function InsertHostedPlatform(var aRec: TRecHosted_Platform): Boolean;
    function UpdateHostedPlatform(var aRec: TRecHosted_Platform): Boolean;
    function DeleteHostedPlatform(const aDeleteType: Byte; aIndex: Integer): Boolean;

    {$ENDREGION}

    {$ENDREGION}

    {$REGION ' Sensor Section '}

    {$REGION ' Radar Definition '}
    function GetAllRadarDef(var aList: TList): Integer; {New}
    function GetFilterRadarDef(var aList: TList; aFilter: String): Integer;
    function GetRadarDef(const aClassName: string): Integer; overload;

    function InsertRadarDef(var aRec: TRecRadar_Definition): Boolean;
    function UpdateRadarDef(var aRec: TRecRadar_Definition): Boolean;
    function DeleteRadarDef(const aRadarIndex: Integer): Boolean;

    function GetRadarVerticalCoverage(const aRadarID, aCoverageID: Integer; var aList: TList): Integer;

    function InsertRadarNew_Vertical_Coverage(var aRec: TRadar_Vertical): Boolean;
    function UpdateRadar_Vertical_Coverage(var aRec: TRadar_Vertical): Boolean;
    function DeleteRadar_Vertical_Coverage(const aDeleteType, aOwnerIndex, aValue: Integer): integer;
//    function DeleteRadarNew_Vertical_Coverage(const aDeleteType: Byte; const aIndex: Integer): Boolean;

    {$ENDREGION}

    {$REGION ' Sonar Definition '}
    function GetAllSonarDef(var aList: TList): Integer; {New}
    function GetFilterSonarDef(var aList: TList; aFilter: String): Integer;
    function GetSonarDef(const aClassName: string): Integer; overload;
    function GetSonarDef(const aClassID: Integer; var aSonar: TSonar_On_Board): Boolean; overload;

    function InsertSonarDef(var aRec: TRecSonar_Definition): Boolean;
    function UpdateSonarDef(var aRec: TRecSonar_Definition): Boolean;
    function DeleteSonarDef(const aSonarIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' ESM Definition '}
    function GetAllESMDef(var aList: TList): Integer; {New}
    function GetFilterESMDef(var aList: TList; aFilter: String): Integer; {New}
    function GetESMDef(const aClassName: string): Integer; overload;

    function InsertESMDef(var aRec: TRecESM_Definition): Boolean;
    function UpdateESMDef(var aRec: TRecESM_Definition): Boolean;
    function DeleteESMDef(const aESMIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' EOD Definition '}
    function GetAllEODef(var aList: TList): Integer; {New}
    function GetFilterEODef(var aList: TList; aFilter: String): Integer;
    function GetEODef(const aClassName: string): Integer; overload;

    function InsertEODef(var aRec: TRecEO_Detection_Definition): Boolean;
    function UpdateEODef(var aRec: TRecEO_Detection_Definition): Boolean;
    function DeleteEODef(const aEOIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Sonobuoy Definition '}
    function GetAllSonobuoyDef(var aList: TList): Integer; {New}
    function GetFilterSonobuoyDef(var aList: TList; aFilter: String): Integer;
    function GetSonobuoyDef(const aClassName: string): Integer; overload;

    function GetSonobuoyDefByRuntimeLibId(const aRPLID: Integer; var aList: TList): Integer;

    function InsertSonobuoyDef(var aRec: TRecSonobuoy_Definition): Boolean;
    function UpdateSonobuoyDef(var aRec: TRecSonobuoy_Definition): Boolean;
    function DeleteSonobuoyDef(const aSonobuoyIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' MAD Definition '}
    function GetAllMADDef(var aList: TList): Integer; {New}
    function GetFilterMADDef(var aList: TList; aFilter: String): Integer;
    function GetMADDef(const aClassName: string): Integer; overload;

    function InsertMADDef(var aRec: TRecMAD_Definition): Boolean;
    function UpdateMADDef(var aRec: TRecMAD_Definition): Boolean;
    function DeleteMADDef(const aMADIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Sensor On Board '}
    {Digunakan untuk pengecekan data sensor apakah sedang terhubung dengan suatu kapal (untuk delete sensor definition)}
    function GetSensor_On_Board_By_Index(const typeOnBoard, id: Integer): Boolean;

    {Digunakan untuk mengambil data sensor yang ada di suatu kapal (OnBoard)}
    function GetRadarOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetSonarOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetESMOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetEOOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetSonobuoyOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetMADOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetIFFOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetVisualOnBoard(const aVehicleID: Integer; var aList: TList): Integer;

    {Digunakan untuk pengecekan 1 jenis sensor tidak boleh menempati mount yg sama}
    function GetRadarOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetSonarOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetESMOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetMADOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetEOOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetSonobuoyOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetIFFOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetVisualDetectorOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;

    function InsertRadarOnBoard(var aRec: TRecRadar_On_Board): Boolean;
    function InsertEOOnBoard(var aRec: TRecEO_On_Board): Boolean;
    function InsertESMOnBoard(var aRec: TRecESM_On_Board): Boolean;
    function InsertSonarOnBoard(var aRec: TRecSonar_On_Board): Boolean;
    function InsertSonobuoyOnBoard(var aRec: TRecSonobuoy_On_Board): Boolean;
    function InsertIFFOnBoard(var aRec: TRecIFF_Sensor_On_Board): Boolean;
    function InsertVisualOnBoard(var aRec: TRecVisual_Sensor_On_Board): Boolean;
    function InsertMADOnBoard(var aRec: TRecMAD_Sensor_On_Board): Boolean;

    function UpdateRadarOnBoard(var aRec: TRecRadar_On_Board): Boolean;
    function UpdateEOOnBoard(var aRec: TRecEO_On_Board): Boolean;
    function UpdateESMOnBoard(var aRec: TRecESM_On_Board): Boolean;
    function UpdateSonarOnBoard(var aRec: TRecSonar_On_Board): Boolean;
    function UpdateSonobuoyOnBoard(var aRec: TRecSonobuoy_On_Board): Boolean;
    function UpdateIFFOnBoard(var aRec: TRecIFF_Sensor_On_Board): Boolean;
    function UpdateVisualOnBoard(var aRec: TRecVisual_Sensor_On_Board): Boolean;
    function UpdateMADOnBoard(var aRec: TRecMAD_Sensor_On_Board): Boolean;

    function DeleteRadarOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;
    function DeleteSonarOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;
    function DeleteESMOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;
    function DeleteEOOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;
    function DeleteSonobuoyOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
    function DeleteMADOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;
    function DeleteIFFOnBoard(const aDeleteType: Byte;const aIndex: Integer): Boolean;
    function DeleteVisualOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;

    {$ENDREGION}

    {$ENDREGION}

    {$REGION ' Weapons Section '}

    {$REGION ' Missile Definition '}
    function GetAllMissileDef(var aList: TList): Integer; {New}
    function GetFilterMissileDef(var aList: TList; aFilter: String): Integer;
    function GetMissileDef(const aClassName: string): Integer; overload;

//    function GetMissileDefByRuntimeLibId(const aRPLID: Integer; var aList: TList): Integer;

    function InsertMissileDef(var aRec: TRecMissile_Definition): Boolean;
    function UpdateMissileDef(var aRec: TRecMissile_Definition): Boolean;
    function DeleteMissileDef(const aMissileIndex: Integer): Boolean;

    function GetHybridDef(const aMissileIndex: Integer; var aResult: THybrid_On_Board): Boolean;

    function insertHybrid(rec: THybrid_On_Board): Integer;
    function updateHybrid(rec: THybrid_On_Board): Integer;
    function deleteHybrid(const id: Integer): Integer;
    {$ENDREGION}

    {$REGION ' Torpedo Definition '}
    function GetAllTorpedoDef(var aList: TList): Integer; {New}
    function GetFilterTorpedoDef(var aList: TList; aFilter: String): Integer;
    function GetTorpedoDef(const aClassName: string): Integer; overload;

//    function GetTorpedoDefByRuntimeLibId(const aRPLID: Integer; var aList: TList): Integer;

    function InsertTorpedoDef(var aRec: TRecTorpedo_Definition): Boolean;
    function UpdateTorpedoDef(var aRec: TRecTorpedo_Definition): Boolean;
    function DeleteTorpedoDef(const aTorpedoIndex: Integer): Boolean;

    function GetTorpedoPOHModifier(const aTopedoID: integer; const aTargetType: Byte; var aList: TList): Integer;
    function InsertTorpedoPOHModifier(var aRec: TRecTorpedo_POH_Modifier): Boolean;
    function UpdateTorpedoPOHModifier(var aRec: TRecTorpedo_POH_Modifier): Boolean;
    function DeleteTorpedoPOHModifier(const aDeleteType: Byte; const aIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Mine Definition '}
    function GetAllMineDef(var aList: TList): Integer; {New}
    function GetFilterMineDef(var aList: TList; aFilter: String): Integer;
    function GetMineDef(const aClassName: string): Integer; overload;

//    function GetMineDefByRuntimeLibId(const aRPLID: Integer; var aList: TList): Integer;

    function InsertMineDef(var aRec: TRecMine_Definition): Boolean;
    function UpdateMineDef(var aRec: TRecMine_Definition): Boolean;
    function DeleteMineDef(const aMineIndex: Integer): Boolean;

    function GetMinePODvsRange(const aMineID: Integer; const aTargetType: Byte; var aList: TList): Integer;
    function InsertMinePODvsRange(var aRec: TRecMine_POD_vs_Range): Boolean;
    function UpdateMinePODvsRange(var aRec: TRecMine_POD_vs_Range): Boolean;
    function DeleteMinePODvsRange(const aDeleteType: Byte; const aIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Gun Definition '}
    function GetFilterGunDef(var aList: TList; aFilter: String): Integer;
    function GetAllGunDef(var aList: TList): Integer; {New}
    function GetGunDef(const aClassName: string): Integer; overload;

    function InsertGunDef(var aRec: TRecGun_Definition): Boolean;
    function UpdateGunDef(var aRec: TRecGun_Definition): Boolean;
    function DeleteGunDef(const aGunIndex: Integer): Boolean;

    function GetGunPOHvsRange(const aGunID: Integer; const aTargetType: Byte; var aList: TList): Integer;
    function InsertGunPOHvsRange(var aRec: TRecGun_POH_vs_Range): Boolean;
    function UpdateGunPOHvsRange(var aRec: TRecGun_POH_vs_Range): Boolean;
    function DeleteGunPOHvsRange(const aDeleteType: Byte; const aIndex: Integer): Boolean;

    {$ENDREGION}

    {$REGION ' Bomb Definition '}
    function GetAllBombDef(var aList: TList): Integer; {New}
    function GetFilterBombDef(var aList: TList; aFilter: String): Integer;
    function GetBombDef(const aClassName: string): Integer; overload;

    function InsertBombDef(var aRec: TRecBomb_Definition): Boolean;
    function UpdateBombDef(var aRec: TRecBomb_Definition): Boolean;
    function DeleteBombDef(const aBombIndex: Integer): Boolean;

    function GetBombPOHvsRange(const aBombID: Integer; const aTargetType: Byte; var aList: TList): Integer;
    function InsertBombPOHvsRange(var aRec: TRecBomb_POH_vs_Range): Boolean;
    function UpdateBombPOHvsRange(var aRec: TRecBomb_POH_vs_Range): Boolean;
    function DeleteBombPOHvsRange(const aDeleteType: Byte; const aIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Weapon On Board '}

    function GetMissileOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetTorpedoOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetMineOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetGunOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetBombOnBoard(const aVehicleID: Integer; var aList: TList): Integer;

    function GetFittedWeaponOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetPointEffectOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetFittedWeaponLauncherOnBoardCount(const aFittedWeapID: Integer; const aType: Integer): Boolean;
    function GetFittedWeaponLauncherOnBoard(const aWeaponID: Integer; var aList: TList): Boolean;

    function InsertFittedWeaponOnBoard(const aInsertType: Byte;var aRec: TRecFitted_Weapon_On_Board): Boolean;
    function UpdateFittedWeaponOnBoard(const aUpdateType: Byte;var aRec: TRecFitted_Weapon_On_Board): Boolean;
    function DeleteFittedWeaponOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;

    function InsertPointEffectOnBoard(const aInsertType: Byte;var aRec: TRecPoint_Effect_On_Board): Boolean;
    function UpdatePointEffectOnBoard(const aUpdateType: Byte;var aRec: TRecPoint_Effect_On_Board): Boolean;
    function DeletePointEffectOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;

    function InsertFittedWeaponLauncherOnBoard(const aRec: TRecFitted_Weap_Launcher_On_Board): Boolean;
    function UpdateFittedWeaponLauncherOnBoard(const aRec: TRecFitted_Weap_Launcher_On_Board): Boolean;
    function DeleteFittedWeaponLauncherOnBoard(const aWeaponID, aLauncherType: Integer): Boolean; overload;
    function DeleteFittedWeaponLauncherOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean; overload;

    {$ENDREGION}

    {$ENDREGION}

    {$REGION ' Countermeasures Section '}

    {$REGION ' Acoustic Decoy Definition '}
    function GetAllAcousticDecoyDef(var aList: TList): Integer; {New}
    function GetFilterAcousticDecoyDef(var aList: TList; aFilter: String): Integer;
    function GetAcousticDecoyDef(const aClassName: string): Integer; overload;

    function InsertAcousticDecoyDef(var aRec: TRecAcoustic_Decoy_Definition): Boolean;
    function UpdateAcousticDecoyDef(var aRec: TRecAcoustic_Decoy_Definition): Boolean;
    function DeleteAcousticDecoyDef(const aAcousticDecoyIndex: Integer): Boolean;

    function GetAcousticDecoyPOHModifier(const aDecoyIndex: Integer; var aList: TList): Integer;
    function InsertAcoustic_Decoy_POH_Modifier(var rec: TAcoustic_Decoy_POH_Modifier): integer;
    function UpdateAcoustic_Decoy_POH_Modifier(const id,torpedo,aspect: Integer; var rec: TAcoustic_Decoy_POH_Modifier): integer;
    function DeleteAcoustic_Decoy_POH_Modifier(const id: Integer): integer;
    {$ENDREGION}

    {$REGION ' Air Bubble Definition '}
    function GetAllAirBubbleDef(var aList: TList): Integer; {New}
    function GetFilterAirBubbleDef(var aList: TList; aFilter: String): Integer;
    function GetAirBubbleDef(const aClassName: string): Integer; overload;

    function InsertAirBubbleDef(var aRec: TRecAir_Bubble_Definition): Boolean;
    function UpdateAirBubbleDef(var aRec: TRecAir_Bubble_Definition): Boolean;
    function DeleteAirBubbleDef(const aAirBubbleIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Chaff Definition '}
    function GetAllChaffDef(var aList: TList): Integer; {New}
    function GetFilterChaffDef(var aList: TList; aFilter: String): Integer;
    function GetChaffDef(const aClassName: string): Integer; overload;

    function InsertChaffDef(var aRec: TRecChaff_Definition): Boolean;
    function UpdateChaffDef(var aRec: TRecChaff_Definition): Boolean;
    function DeleteChaffDef(const aChaffIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Infrared Decoy Definition '}
    function GetAllInfraredDecoyDef(var aList: TList): Integer; {New}
    function GetFilterInfraredDecoyDef(var aList: TList; aFilter: String): Integer;
    function GetInfraredDecoyDef(const aClassName: string): Integer; overload;

    function InsertInfraredDecoyDef(var aRec: TRecInfrared_Decoy_Definition): Boolean;
    function UpdateInfraredDecoyDef(var aRec: TRecInfrared_Decoy_Definition): Boolean;
    function DeleteInfraredDecoyDef(const aInfraredDecoyIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Floating Decoy Definition '}
    function GetAllFloatingDecoyDef(var aList: TList): Integer; {New}
    function GetFilterFloatingDecoyDef(var aList: TList; aFilter: String): Integer;
    function GetFloatingDecoyDef(const aClassName: string): Integer; overload;

    function InsertFloatingDecoyDef(var aRec: TRecFloating_Decoy_Definition): Boolean;
    function UpdateFloatingDecoyDef(var aRec: TRecFloating_Decoy_Definition): Boolean;
    function DeleteFloatingDecoyDef(const aFloatingDecoyIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Self Defensive Jammer Definition '}
    function GetAllSelfDefensiveJammerDef(var aList: TList): Integer; {New}
    function GetFilterSelfDefensiveJammerDef(var aList: TList; aFilter: String): Integer;
    function GetSelfDefensiveJammerDef(const aClassName: string): Integer; overload;

    function InsertSelfDefensiveJammerDef(var aRec: TRecDefensive_Jammer_Definition): Boolean;
    function UpdateSelfDefensiveJammerDef(var aRec: TRecDefensive_Jammer_Definition): Boolean;
    function DeleteSelfDefensiveJammerDef(const aSelfDefensiveJammerIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Towed Jammer / Decoy Definition '}
    function GetAllTowedJammerDecoyDef(var aList: TList): Integer; {New}
    function GetFilterTowedJammerDecoyDef(var aList: TList; aFilter: String): Integer;
    function GetTowedJammerDecoyDef(const aClassName: string): Integer; overload;

    function InsertTowedJammerDef(var aRec: TRecTowed_Jammer_Decoy_Definition): Boolean;
    function UpdateTowedJammerDef(var aRec: TRecTowed_Jammer_Decoy_Definition): Boolean;
    function DeleteTowedJammerDef(const aTowedJammerIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Radar Noise Jammer Definition '}
    function GetAllRadarNoiseJammerDef(var aList: TList): Integer; {New}
    function GetFilterRadarNoiseJammerDef(var aList: TList; aFilter: String): Integer;
    function GetRadarNoiseJammerDef(const aClassName: string): Integer; overload;

    function InsertRadarNoiseJammerDef(var aRec: TRecRadar_Noise_Jammer_Definition): Boolean;
    function UpdateRadarNoiseJammerDef(var aRec: TRecRadar_Noise_Jammer_Definition): Boolean;
    function DeleteRadarNoiseJammerDef(const aRadarNoiseJammer: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Countermeasure On Board '}

    function GetCountermeasure_On_Board_By_Index(const typeOnBoard, id: Integer): Boolean; {New}

    function GetAcousticDecoyOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetAirBubbleOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetRadarNoiseJammerOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetSelfDefensiveJammerOnBoard(const aVehicleID: Integer;var aList: TList): Integer;
    function GetTowedJammerDecoyOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetFloatingDecoyOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetInfraredDecoyOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetChaffOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
    function GetChaffLauncherOnBoard(const aVehicleID: Integer; var aList: TList): Integer;

    {Digunakan untuk pengecekan 1 jenis sensor tidak boleh menempati mount yg sama}
    function GetAcousticDecoyOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetAirBubbleOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetChaffOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetFloatingDecoyOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetInfraredDecoyOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetRadarNoiseJammerOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetSelfDefensiveJammerOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetTowedJammerOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
    function GetChaffLauncherOnBoardCount(const aVehicleID, aLauncherID: Integer): Boolean;

    function InsertRadarNoiseJammerOnBoard(var aRec: TRecRadar_Noise_Jammer_On_Board): Boolean;
    function InsertAirBubbleOnBoard(var aRec: TRecAir_Bubble_On_Board): Boolean;
    function InsertAcousticDecoyOnBoard(var aRec: TRecAcoustic_Decoy_On_Board): Boolean;
    function InsertSelfDefensiveJammerOnBoard(var aRec: TRecDefensive_Jammer_On_Board): Boolean;
    function InsertTowedJammerDecoyOnBoard(var aRec: TRecTowed_Jammer_Decoy_On_Board): Boolean;
    function InsertFloatingDecoyOnBoard( var aRec: TRecFloating_Decoy_On_Board): Boolean;
    function InsertInfraredDecoyOnBoard(var aRec: TRecInfrared_Decoy_On_Board): Boolean;
    function InsertChaffOnBoard(var aRec: TRecChaff_On_Board): Boolean;
    function InsertChaffLauncherOnBoard( var aRec: TRecChaff_Launcher_On_Board): Boolean;

    function UpdateRadarNoiseJammerOnBoard( var aRec: TRecRadar_Noise_Jammer_On_Board): Boolean;
    function UpdateAirBubbleOnBoard(var aRec: TRecAir_Bubble_On_Board): Boolean;
    function UpdateAcousticDecoyOnBoard(var aRec: TRecAcoustic_Decoy_On_Board): Boolean;
    function UpdateSelfDefensiveJammerOnBoard(var aRec: TRecDefensive_Jammer_On_Board): Boolean;
    function UpdateTowedJammerDecoyOnBoard(var aRec: TRecTowed_Jammer_Decoy_On_Board): Boolean;
    function UpdateFloatingDecoyOnBoard(var aRec: TRecFloating_Decoy_On_Board): Boolean;
    function UpdateInfraredDecoyOnBoard(var aRec: TRecInfrared_Decoy_On_Board): Boolean;
    function UpdateChaffOnBoard(var aRec: TRecChaff_On_Board): Boolean;
    function UpdateChaffLauncherOnBoard( var aRec: TRecChaff_Launcher_On_Board): Boolean;

    function DeleteAcousticDecoyOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
    function DeleteAirBubbleOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
    function DeleteRadarNoiseJammerOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
    function DeleteSelfDefensiveJammerOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
    function DeleteTowedJammerDecoyOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
    function DeleteFloatingDecoyOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
    function DeleteInfraredDecoyOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
    function DeleteChaffOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
    function DeleteChaffLauncherOnBoard( const aVehicleIndex: Integer): Boolean; overload;
    function DeleteChaffLauncherOnBoard(const aVehicleIndex, aLauncherNumber: Integer): Boolean; overload;

    {$ENDREGION}

    {$ENDREGION}

    {$REGION ' Other Section '}

    {$REGION ' Runtime Platform Library '}

    function GetAllRuntimePlatformLibraryDef(var aList: TList): Integer;
    function GetFilterRuntimePlatformLibraryDef(var aList: TList; aFilter: String): Integer;
    function GetRuntimePlatformLibraryDef(const aClassName: string): Integer; overload;

    function InsertRuntimePlatformLibraryDef(var aRec: TRecRuntime_Platform_Library): Boolean;
    function UpdateRuntimePlatformLibraryDef(var aRec: TRecRuntime_Platform_Library): Boolean;
    function DeleteRuntimePlatformLibraryDef(const aPlatformLibID: Integer): Boolean;

    // Platform Library Entry
    function GetAllVehiclePlatformLibraryEntry(const aRPLID : Integer;var aList: TList): Integer;
    function GetAllMissilePlatformLibraryEntry(const aRPLID: Integer; var aList: TList): Integer;
    function GetAllTorpedoPlatformLibraryEntry(const aRPLID: Integer; var aList: TList): Integer;
    function GetAllMinePlatformLibraryEntry(const aRPLID: Integer; var aList: TList): Integer;
    function GetAllSonobuoyPlatformLibraryEntry(const aRPLID: Integer; var aList: TList): Integer;

    function GetPlatformAtPlatformLibraryEntry(const typePlatformInstance, id: Integer; var rec: TList): Integer;

    function InsertPlatformLibraryEntry(var aRec: TRecPlatform_Library_Entry): Boolean; overload;
    function UpdatePlatformLibraryEntry(var aRec: TRecPlatform_Library_Entry): Boolean; overload;
    function DeletePlatformLibraryEntry(const aDeleteType: Byte; const aIndex: Integer): Boolean; overload;

//    function InsertPlatformLibraryEntry(const aLibraryID, aPlatformType, aPlatformIndex: Integer): Boolean; overload;
//    function DeletePlatformLibraryEntry(const aLibraryID, aPlatformType, aPlatformIndex: Integer): Boolean; overload;

    {$ENDREGION}

    {$REGION ' Overlays '}
    function GetAllOverlayDef(var aList: TList): Integer;
    function GetFilterOverlayDef(var aList: TList; aFilter: String): Integer;
    function GetOverlayDef(const aClassName: string): Integer; overload;

    function InsertOverlayDef(var aRec: TRecOverlay_Definition): Boolean;
    function UpdateOverlayDef(var aRec: TRecOverlay_Definition): Boolean;
    function DeleteOverlayDef(const aOverlayID: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Motion '}
    function GetFilterMotionDef(var aList: TList; aFilter: String): Integer;
    function GetAllMotionCharacteristicDef(aList: TList): Integer;
    function GetMotionCharacteristicDef(const aClassName: string): Integer; overload;
    function GetMotionCharacteristicDef(const aClassID: Integer; var aMotion: TMotion_Characteristics): Boolean; overload;

    function InsertMotionCharacteristicDef(var aRec: TRecMotion_Characteristics): Boolean;
    function UpdateMotionCharacteristicDef(var aRec: TRecMotion_Characteristics): Boolean;
    function DeleteMotionCharacteristicDef(const aMotionIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' Logistic '}
    function GetAllLogisticDef(var aList: TList): Integer;
    function GetFilterLogisticDef(var aList: TList; aFilter: String): Integer;
    function GetLogisticDef(const aClassName: string): Integer; overload;
    function GetLogisticDef(const aClassID: Integer; var aLogistic: TLogistics): Boolean; overload;

    function InsertLogisticDef(var aRec: TRecLogisticsCapability): Boolean;
    function UpdateLogisticDef(var aRec: TRecLogisticsCapability): Boolean;
    function DeleteLogisticDef(const aLogisticIndex: Integer): boolean;
    {$ENDREGION}

    {$REGION ' Transport '}
    function GetAllTransportDef(var aList: TList): Integer;
    function GetFilterTransportDef(var aList: TList; aFilter: String): Integer;
    function GetTransportDef(const aClassName: string): Integer; overload;
    function GetTransportDef(const aClassID: Integer; var aTransport: TTransport): Boolean; overload;

    function InsertTransportDef(var aRec: TRecTransport): Boolean;
    function UpdateTransportDef(var aRec: TRecTransport): Boolean;
    function DeleteTransportDef(const aTransportIndex: Integer): boolean;
    {$ENDREGION}

    {$REGION ' Base '}
    function GetAllBaseDef(var aList: TList): Integer;
    function GetFilterBaseDef(var aList: TList; aFilter: String): Integer;
    function GetBaseDef(const aClassName: string): Integer; overload;

    function InsertBaseDef(var aRec: TRecBaseDefinition): Boolean;
    function UpdateBaseDef(var aRec: TRecBaseDefinition): Boolean;
    function DeleteBaseDef(const aBaseIndex: Integer): boolean;

    function GetAllVehicle_OnBase(const aBaseID: Integer; var pList: TList): Boolean;
    function GetVehicle_OnBase(const id: Integer; var pList: TList; var rec: TBase): Boolean;
    function InsertVehicle_OnBase(var aRec: TRecVehicle_On_Base): Boolean;
    function UpdateVehicle_OnBase(var aRec: TRecVehicle_On_Base) : Boolean;
    function DeleteVehicle_OnBase(const VehicleOnBaseIndex: Integer): Boolean;

    function InsertPlatform_Embark_Library(var rec: TVehicle_On_Base): Integer;
    function GetPlatform_Embark_Library(const id: Integer; var pList: TList; rec: TVehicle_On_Base): integer;
    function DeletePlatform_Embark_Library(const lib_id: string): Integer;
    {$ENDREGION}

    {$REGION ' Waypoint '}
    function GetAllWaypointDef(var aList: TList): Integer;
    function GetFilterWaypointDef(var aList: TList; aFilter: String): Integer;
    function GetWaypointDef(const aClassName: string): Integer; overload;

    function InsertWaypointDef(var aRec: TRecWaypoint_Def): Boolean;
    function UpdateWaypointDef(const aRec: TRecWaypoint_Def): Boolean;
    function DeleteWaypointDef(const aWaypointIndex: Integer): Boolean;

    function GetWaypointData(aWaypointIndex : Integer; aList: TList): Integer;
    function InsertWaypointData(aWaypointIndex : Integer; aRec : TRecWaypoint_Data): Boolean;
    function DeleteWaypointData(const aWaypointIndex: Integer): Boolean;
    {$ENDREGION}

    {$REGION ' SNR vs POD Curve '}
    function GetAllPODvsSNRCurveDef(var aList: TList): Integer;
    function GetFilterPODvsSNRCurveDef(var aList: TList; aFilter: String): Integer;
    function GetPODvsSNRCurveDef(const aClassName: string): Integer; overload;
    function GetPODvsSNRCurveDef(const aClassID: Integer; var aPODvsSNRCurve: TRecPOD_vs_SNR_Curve_Definition): Boolean; overload;{u/ pick list}

    function InsertPODvsSNRCurveDef(var aRec: TRecPOD_vs_SNR_Curve_Definition): Boolean;
    function UpdatePODvsSNRCurveDef(var aRec: TRecPOD_vs_SNR_Curve_Definition): Boolean;
    function DeletePODvsSNRCurveDef(const aCurveID: Integer): Boolean;

    // SNR vs POD Point
    function GetPODvsSNRCurvePoint(const aCurveID: Integer; var aList: TList): Integer;
    function InsertPODvsSNRCurvePoint(var aRec: TRecPOD_vs_SNR_Point): Boolean;
    function UpdatePODvsSNRCurvePoint(var aRec: TRecPOD_vs_SNR_Point): Boolean;
    function DeletePODvsSNRCurvePoint(const aDeleteType: Byte;const aIndex: Integer): Boolean;

    {$ENDREGION}

    {$REGION ' Student Roles '}

    // Student Role Definition
    function GetStudentRoleDef(const aStudentRoleID: Integer;var aList: TList): Integer; overload;
    function InsertStudentRoleDef(var aRec: TRecStudent_Role_Definition): Boolean;
    function UpdateStudentRoleDef(var aRec: TRecStudent_Role_Definition): Boolean;
    function DeleteStudentRoleDef(const aDeleteType: Byte; const aIndex: Integer): Boolean;

    // Student Roles List
    function GetStudentRoleList(var aList: TList): Integer; overload;
    function GetFilterStudentRoleList(var aList: TList; aFilter: String): Integer;  overload;
    function GetStudentRoleList(const aClassName: string): Integer; overload;
    function InsertStudentRoleList(var aRec: TRecStudent_Role_List): Boolean;
    function UpdateStudentRoleList(var aRec: TRecStudent_Role_List): Boolean;
    function DeleteStudentRoleList(const aStudentRoleID: Integer): Boolean;

    {$ENDREGION}

    {$REGION ' Game Defaults '}
    // Game Defaults

    function GetAllGameDefaultDef(var aList: TList): Integer;
    function GetFilterGameDefaultDef(var aList: TList; aFilter: String): Integer;
    function GetGameDefaultDef(const aClassName: string): Integer; overload;

    function InsertGameDefaultDef(var aRec: TRecGame_Defaults): Boolean;
    function UpdateGameDefaultDef(var aRec: TRecGame_Defaults): Boolean;
    function DeleteGameDefaultDef(const aDefaultID: Integer): Boolean;

    {$REGION ' Effect Table On Game Default'}
    //===Rainfall On Radar
    function GetGameRainfallOnRadar(const aDefaultID: Integer; var aList: TList): Integer;
    function InsertGameRainfallOnRadar(var aRec: TRecGame_Rainfall_On_Radar): Boolean;
    function UpdateGameRainfallOnRadar(var aRec: TRecGame_Rainfall_On_Radar): Boolean;
    function DeleteGameRainfallOnRadar(const aDefaultID: Integer): Boolean;

    //===Cloud On Radar
    function GetGameCloudOnRadar(const aDefaultID: Integer;var aList: TList): Integer;
    function InsertGameCloudOnRadar(var aRec: TRecGame_Cloud_On_Radar): Boolean;
    function UpdateGameCloudOnRadar(var aRec: TRecGame_Cloud_On_Radar): Boolean;
    function DeleteGameCloudOnRadar(const aDefaultID: Integer): Boolean;

    //===SeaState On Radar
    function GetGameSeaStateOnRadar(const aDefaultID: Integer;var aList: TList): Integer;
    function InsertGameSeaStateOnRadar(var aRec: TRecGame_Sea_On_Radar): Boolean;
    function UpdateGameSeaStateOnRadar(var aRec: TRecGame_Sea_On_Radar): Boolean;
    function DeleteGameSeaStateOnRadar(const aDefaultID: Integer): Boolean;

    //===Rainfall On ESM
    function GetGameRainfallOnESM(const aDefaultID: Integer;var aList: TList): Integer;
    function InsertGameRainfallOnESM(var aRec: TRecGame_Rainfall_On_ESM): Boolean;
    function UpdateGameRainfallOnESM(var aRec: TRecGame_Rainfall_On_ESM): Boolean;
    function DeleteGameRainfallOnESM(const aDefaultID: Integer): Boolean;

    //===Cloud On ESM
    function GetGameCloudOnESM(const aDefaultID: Integer;var aList: TList): Integer;
    function InsertGameCloudOnESM(var aRec: TRecGame_Cloud_On_ESM): Boolean;
    function UpdateGameCloudOnESM(var aRec: TRecGame_Cloud_On_ESM): Boolean;
    function DeleteGameCloudOnESM(const aDefaultID: Integer): Boolean;

    //===Rainfall On Missile
    function GetGameRainfallOnMissile(const aDefaultID: Integer;var aList: TList): Integer;
    function InsertGameRainfallOnMissile(var aRec: TRecGame_Rainfall_On_Missile_Seeker): Boolean;
    function UpdateGameRainfallOnMissile(var aRec: TRecGame_Rainfall_On_Missile_Seeker): Boolean;
    function DeleteGameRainfallOnMissile(const aDefaultID: Integer): Boolean;

    //===Seastate On Missile
    function GetGameSeaStateOnMissile(const aDefaultID: Integer;var aList: TList): Integer;
    function InsertGameSeaStateOnMissile(var aRec: TRecGame_Sea_On_Missile_Safe_Altitude): Boolean;
    function UpdateGameSeaStateOnMissile(var aRec: TRecGame_Sea_On_Missile_Safe_Altitude): Boolean;
    function DeleteGameSeaStateOnMissile(const aDefaultID: Integer): Boolean;

    //===Rainfall On Sonar
    function GetGameRainfallOnSonar(const aDefaultID: Integer;var aList: TList): Integer;
    function InsertGameRainfallOnSonar(var aRec: TRecGame_Rainfall_On_Sonar): Boolean;
    function UpdateGameRainfallOnSonar(var aRec: TRecGame_Rainfall_On_Sonar): Boolean;
    function DeleteGameRainfallOnSonar(const aDefaultID: Integer): Boolean;

    //===Shiping Noise On Sonar
    function GetGameShipNoiseOnSonar(const aDefaultID: Integer;var aList: TList): Integer;
    function InsertGameShipNoiseOnSonar(var aRec: TRecGame_Ship_On_Sonar): Boolean;
    function UpdateGameShipNoiseOnSonar(var aRec: TRecGame_Ship_On_Sonar): Boolean;
    function DeleteGameShipNoiseOnSonar(const aDefaultID: Integer): Boolean;
    //===Seastate On Sonar
    function GetGameSeaStateOnSonar(const aDefaultID: Integer;var aList: TList): Integer;
    function InsertGameSeaStateOnSonar(var aRec: TRecGame_Sea_On_Sonar): Boolean;
    function UpdateGameSeaStateOnSonar(var aRec: TRecGame_Sea_On_Sonar): Boolean;
    function DeleteGameSeaStateOnSonar(const aDefaultID: Integer): Boolean;

    //==IFF Mode/Code
    function GetIFFModeCode(const aDefaultID: Integer;var aList: TList): Integer;
    function InsertIFFModeCode(var aRec: TRecGame_Default_IFF_Mode_Code): Boolean;
    function UpdateIFFModeCode(var aRec: TRecGame_Default_IFF_Mode_Code): Boolean;
    function DeleteIFFModeCode(const aDefaultID: Integer): Boolean;
    {$ENDREGION}

    {$ENDREGION}

    {$ENDREGION}

    {$REGION ' Additional Section '}

    {$REGION ' Blind Zone '}

    function GetBlindZone(const aOnBoardType, aOnBoardrIndex: Integer; var aList: TList): Integer;
    function InsertBlindZone(var aRec: TRecBlind_Zone_Definition): Boolean;
    function UpdateBlindZone(var aRec: TRecBlind_Zone_Definition): Boolean;

    function DeleteBlindZone(const aVehicleID: Integer): Boolean; overload;
    function DeleteBlindZone(const aOnBoardType, aOnBoardIndex: Integer): Boolean; overload;
    function DeleteBlindZone(const aOnBoardType, aOnBoardIndex, aBlindZoneNumber: Integer): Boolean; overload;

    {$ENDREGION}

    {$REGION ' Note Storage '}
    function InsertNoteStorage(const aOwnerType: Byte; const aOwnerIndex: Integer; var aRec: TNote_Storage): Boolean;
    function UpdateNoteStorage(const aOwnerIndex: Integer; var aRec: TNote_Storage): Boolean;
    function DeleteNoteStorage(const aOwnerType: Integer; const aOwnerIndex: Integer): Integer;
    {$ENDREGION}

    {$REGION ' Usage '}

    {$REGION ' Exercise Usage '}

    function GetPlatformInstanceAtResourceAllocation(const typePlatformInstance, id: Integer; var pList: TList): boolean; {new}
    function GetPlatformInstanceIdentifierAtResourceAllocation(const aInsatanceId: Integer; var pList: TList): boolean; {new}

//    function GetEnvironmentAtResourceAllocation(const id: Integer; var pList: TList): boolean; {new}
//
    function GetGameAreaAtEnvironment(const id: Integer; var pList: TList): boolean; {new}
    function GetGameAreaAtOverlayDef(const id: Integer; var pList: TList): boolean; {new}

    {$ENDREGION}

    {$REGION ' Platform Usage '}

    function GetMotionCharacteristicAtVehicleDef(const id: Integer; var pList: TList): boolean;
    function GetMotionCharacteristicAtMissileDef(const id: Integer; var pList: TList): boolean;
    function GetMotionCharacteristicAtTorpedoDef(const id: Integer; var pList: TList): boolean;

    {$ENDREGION}

    {$REGION ' Sensor Usage '}
    function GetRadarAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetSonarAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetSonarAtSonobuoyDef(const id: Integer; var pList: TList): boolean;
    function GetESMAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetEOAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetMADAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetSonobuoyAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    {$ENDREGION}

    {$REGION ' Weapon Usage '}
    function GetFittedWeaponAtVehicleOnBoard(const index,id: Integer; var pList: TList): boolean;
    function GetTorpedoAtMissileDef (const id: Integer; var pList: TList): boolean;
//    function GetTorpedoAtResourceAllocation (const id: Integer; var pList: TList): boolean;
    function GetPointEffectAtVehicleOnBoard(const index,id: Integer; var pList: TList): boolean;
    {$ENDREGION}

    {$REGION ' Countermeasure Usage '}
    function GetAcousticDecoyAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetAirBubbleAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetChaffAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetInfraredDecoyAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetFloatingDecoyAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetSelfDefensiveAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetTowedJammerAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    function GetRadarNoiseAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
    {$ENDREGION}

    {$REGION ' Other Usage '}

    function GetRPLAtResourceAllocation(const id: Integer; var pList: TList): boolean;
    function GetOverlayAtResourceAllocation(const id: Integer; var pList: TList): boolean;
    function GetStudentRoleAtResourceAllocation(const id: Integer; var pList: TList): boolean;
    function GetGameDefaultAtResourceAllocation(const id: Integer; var pList: TList): boolean;
    function GetRadarByPOD_vs_SNR(const id: Integer; var pList: TList): boolean;
    function GetSonarByPOD_vs_SNR(const id: Integer; var pList: TList): boolean;

    function GetLogisticAtVehicle(const id: Integer; var pList: TList): boolean;
    function GetTransportAtVehicle(const id: Integer; var pList: TList): boolean;

    function GetBaseAtResourceAllocation(const id: Integer; var pList: TList): boolean;
    function GetWaypointAtResourceAllocation(const id: Integer; var pList: TList): boolean;

    {$ENDREGION}

    {$ENDREGION}

    {$ENDREGION}

    {$REGION ' Nanti Dulu '}
    // --- 1 -- Scenario ----------------------------------------------------------
    function GetScenario(const id: Integer; var rec: TScenario_Definition)
      : boolean;
    function getAllScenario_Definition(var aRec: TList): Integer;


    function getAllWaypoint(var aRec: TList): Integer;
    function DeleteWaypointByID(const id : integer) : Integer;
    function GetWaypointBySce(const id: Integer; var pList: TList): boolean;
    function DeleteAllResource_Waypoint_Mapping(const id: string): Integer;
    function InsertWaypointByResourceAlloc(const id: string;
      var rec: TWaypoint_Def): Integer;
    function CekWaypointName(WaypointName : String) : Boolean;
//    function InsertWaypointDef(WaypointDef : TWaypoint_Def) : integer;
    procedure InsertWaypointDataPoint(WaypointIndex : Integer; Waypoint : TRecWaypoint_Data);
    procedure getWaypointDataByID(const id : integer; var wpDataList : TList);
//    function UpdateWaypointDef(WaypointDef : TWaypoint_Def) : integer;
    function DeleteWaypointDataByID(const id: Integer): Integer;
    function GetWaypointByResourceAlloc(const id: Integer;
      var pList: TList): boolean;


    //==================target================
    function GetTargetListFromVec_Def(var pList : TList):boolean;
    function GetTargetIdentifierFromClass(const vId : integer; var pList : TList):boolean;
    function GetIDVecTarget(const Ident : string): Integer;
    function isTargetFromPlatformInst(const vId : Integer): Boolean;

    //--------------------------------------------

    function updateScenario(rec: TScenario_Definition; value: string): Integer;
    function updateScenario_ByRA(new,old: string): Integer;
    function insertScenario(rec: TScenario_Definition): Integer;
    function DeleteScenario_Definition(const id: string): Integer;

    function DeleteAsset_Deployment_Definition(const id: string): Integer;
    function CekScenarioNameAlreadyExist(const aName : string):Boolean;

    // --- 2 ---------------------------------------------------------------------
    function GetResourceAlloc(const id: Integer; var rec: TResource_Allocation)
      : boolean;
    function GetResourceAlloc_byGameDef(const id: Integer; var aRec: TList): Integer;

    function GetResource_Overlay_Mapping(const id: Integer; var recList: TList): boolean;

    function getAllResource_Allocation(var aRec: TList): Integer;
    function GetMaxResource_Allocation(var id: Integer): boolean;
    function updateResource(rec: TResource_Allocation; id: string): Integer;
    function insertResource(var rec: TResource_Allocation): Integer;
    function DeleteResource_Allocation(const id: string): Integer;

    // --- 2.1 -- Resource Alloc --------------------------------------------------
    function GetPlatformIdentIndex(var aRec : TList) : Boolean;
    function GetIdentIndex(const aPI : TPlatform_Instance) : integer;
    function UpdateIdentIndex(const aPI : TPlatform_Instance; const id : integer) : Boolean;
    function getAllPlatFormInstance(const id: Integer;
      var aRec: TList): Integer;
    function getPlatformInstanceByIndex(const id:integer;var rec:TPlatform_Instance):boolean;
    function getAllPlatFormInstanceForceClassification(const v_id,id: integer;
      var aRec: TList;force:integer;classification:integer): Integer;

//    function getPlatFormInstance(const ra_id,force: integer;const instance:string;
//    var aRec: TList): Integer;
    function filterPlatFormInstance(const ra_id,force,clas,deployed: integer;
    var aRec: TList): Integer;

    function getPlatformInstanceByGroup(const group_id:integer;var cList:TList)
    :integer;
    function getPlatformInstanceByName(const id,ra_id,force:string;var rec:TPlatform_Instance):boolean;
    function getPlatformInstanceByMissile(const miss_id:integer;var cList:TList):integer;
    function getPlatformInstanceByHybrid(const hyb_id:integer;var cList:TList):integer;

    function GetPlatform_Instance_Identifier(const v_id: integer;const v_ident:string;var vList:TList;
    var rec: TPlatform_Instance_Identifier): boolean;
    function InsertPlatform_Instance_Identifier(var rec: TPlatform_Instance_Identifier): integer;
    function DeletePlatform_Instance_Identifier(const id: string): integer;
    function DeletePlatform_Instance_IdentifierByVec(const id: string): integer;
    function UpdatePlatform_Instance_ModelPathByInx(const ins_ident, vbsName, modelPath: string): Integer;
    function UpdatePlatform_Instance_Identifier(const id, aIdent: string): integer;
    function GetIdentifierById(const id : integer): string;

    function getMaxIDPlatformInstance(var id: Integer): boolean;
//    function updatePlatformInstance(const rec:TPlatform_Instance;const id:integer):integer;
//    function insertPlatformInstance(const rec:TPlatform_Instance;const id:integer):integer;

//    function updatePlatformInstance(var rec: TPlatform_Instance;const pi_id,mis_id,tor_id,mine_id,hybrid_id,satelit_id,son_id:integer):Integer;
    function updatePlatformInst(const index: Integer; rec: TPlatform_Instance;pi_id:string):integer;

    function GetPlatform_ActivationByPlatformInstance(const id: integer;var rec: TPlatform_Activation): boolean;
    function GetPlatform_ActivationToPlatformInstance(const id: integer;
    var rec: TPlatform_Instance): boolean;
    function updatePlatformAct(var rec: TPlatform_Instance; pi_id: Integer):Integer;
    function InsertPlatform_Activation(var rec: TPlatform_Instance): integer;
    function CekPlatformAlreadyExist(rec : TPlatform_Instance):Boolean;

    function GetDomainFromVehicleID(const VID: Integer) : Integer;

    function deletePlatform_ActivationByIndex(const platform_instace_index: string)
      : Integer;
    function deletePlatformActivationByDeploy(const deploy_id: string): Integer;

    function getPlatformType(var aRec: TList): Integer;

    // --- 2.1.1 -- Platform Instance Detail --------------------------------------
    function GetVehicle_Definition(const id: Integer;  //dngvehicle
      var rec: TVehicle_Definition): boolean;
    function GetAllVehicle_Def(var vList: TList; var id: Integer;  //dngvehicle
      var rec: TVehicle_Definition): Integer;
    function GetVehicleBy(const domain, tipe,embarked: string;  //dngvehicle
      var vList: TList): Integer;
    function getVehicleByLibrary(const id_Library: Integer; //dngvehicle
      var vList: TList): Integer;
    function updateVehicle_Def(var rec: TVehicle_Definition; //dngvehicle
      const id: string): Integer;
    function insertVehicle_Def(rec: TVehicle_Definition): Integer; //dngvehicle
    function deleteVehicle(const id: Integer): Integer;
    function GetVehicleIdentifierByID(const id: Integer): string;
    function updatePredifened_Pattern(rec: TPredefined_Pattern; id: string;
      pattern_id: string): Integer;
    function insertPredifened_Pattern(rec: TPredefined_Pattern): Integer;
    function DeleteAllSensorAssetFromVehicle(const id: string): Integer;
    function DeleteAllWeaponAssetFromVehicle(const id: string): Integer;
    function DeleteAllCountermsAssetFromVehicle(const id: string): Integer;
    function getSensor_On_Board(const index, id: Integer; sens_name: string): Boolean;
    function getWeapon_On_Board(const index, id: Integer; weap_name: string): Boolean;
    function getCountermeasure_On_Board(const index, id: Integer; count_name: string): Boolean;

    function getInstance_Ident_Index(const VIndex : Integer; const Inst_Identifier : string): Integer;
    function getVecIndexFromIdent(const aIdent : string): integer;

    
    // ---- 2.1.1.1 Vehicle Details -----------------------------------------------
    // -- sensor --
    // EC
    function getAllEO_On_Board(const id, index: Integer;
      var aRec: TList): Integer;
    function updateEO(rec: TEOD_On_Board; id: string): Integer;
    function insertEO(rec: TEOD_On_Board): Integer;
    function DeleteEO_On_Board(const id: string): Integer;

    function getEO_Def(const id: Integer; var aRec: TList;
      var rec: TEOD_On_Board): Integer;
    function updateEO_Def(rec: TEOD_On_Board; id: string): Integer;
    function insertEO_Def(rec: TEOD_On_Board): Integer;
    function deleteEO_Def(id: Integer): Integer;

    function getFilterVehicle(const aSrch: string; const negara, domain,tipe,weapon,wpn_id,sensor,
    sensor_id,emb_id: Integer;var vList: TList):integer;

    //== dng simbol taktis filtersearch
    function getFilterSimbol(const aSrch :string; const FontType : Byte; var FontTaktisList: TList):integer;

    // ESM
    function getAllESM_On_Board(const id, index: Integer;
      var aRec: TList): Integer;
    function updateESM(rec: TESM_On_Board; id: string): Integer;
    function insertESM(rec: TESM_On_Board): Integer;
    function UpdateESM_On_Board(const id: string;
      var rec: TESM_On_Board): integer;
    function DeleteESM_On_Board(const id: string): Integer;
    function deleteESM(id: string): Integer;
    function getESM_Def(var aRec: TList): boolean;
    function updateESM_Def(rec: TESM_On_Board; id: string): Integer;
    function insertESM_Def(rec: TESM_On_Board): Integer;

    // IFF
    function getAllIFF_Sensor_On_Board(const id, index: Integer;
      var aRec: TList): Integer;
    function updateScriptIFF(rec: TScripted_IFF_Event; id: string): Integer;
    function updateIFF(rec: TIFF_Sensor_On_Board; id: string): Integer;
    function insertIFF(rec: TIFF_Sensor_On_Board): Integer;
    function DeleteIFF_Sensor_On_Board(const id: string): Integer;

    // MAD
    function getAllMAD_Sensor_On_Board(const id, index: Integer;
      var aRec: TList): Integer;
    function updateMAD(rec: TMAD_On_Board; id: string): Integer;
    function insertMAD(rec: TMAD_On_Board): Integer;
    function DeleteMAD_Sensor_On_Board(const id: string): Integer;
    function getMAD_Def(const id: Integer; var aRec: TList;
      var rec: TMAD_On_Board): Integer;
    function updateMAD_Def(rec: TMAD_On_Board; id: string): Integer;
    function insertMAD_Def(rec: TMAD_On_Board): Integer;
    function deleteMAD_Def(id: Integer): Integer;

    // Visual
    function getAllVisual_Sensor_On_Board(const id, index: Integer;
      var aRec: TList): Integer;
    function updateVisual(rec: TVisual_Sensor_On_Board; id: string): Integer;
    function insertVisual(rec: TVisual_Sensor_On_Board): Integer;
    function DeleteVisual_Sensor_On_Board(const id: string): Integer;

    // FCR
    function getAllFCR_On_Board(const id: Integer; var aRec: TList): Integer;

    // Radar
    function getAllRadar_On_Board(const id, index: Integer;
      var aRec: TList): Integer;
    function updateScriptRadar(rec: TScripted_Radar_Event; id: string): Integer;
    function GetRadar_Definition(var aRec: TList): boolean;
    function InsertRadar_On_Board(var rec: TRadar_On_Board): Integer;
    function UpdateRadar_On_Board(const id: string;
      var rec: TRadar_On_Board): integer;
    function DeleteRadar_On_Board(const id: string): Integer;
    function DeleteRadar_On_Board_ByRadarIndex(const id: string): Integer;
    function insertRadar_Def(rec: TRadar_On_Board): Integer;
    function updateRadar_Def(rec: TRadar_On_Board; id: string): Integer;
    function DeleteRadar_Definition(const id: string): Integer;
    function insertPatern_Radar_Event(var rec: TPattern_Radar_Event): integer;
    function getRadar_Vertical_Coverage(const tipe,id: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
    function getAllRadar_Vertical_Coverage(const id: Integer; var aRec: TList): Integer;
//    function DeleteRadar_Vertical_Coverage(const id,tipe: string): integer;
    function insertRadar_Vertical_Coverage(rec: TRadar_Vertical): Integer;
    function CekRadarNameAlreadyExist(aName : String): Boolean;

    // Sonar
    function getAllSonar_On_Board(const id, index: Integer;
      var aRec: TList): Integer;
    function updateSonar(rec: TSonar_On_Board; id: string): Integer;
    function insertSonar(rec: TSonar_On_Board): Integer;
    function UpdateSonar_On_Board(const id: string;
      var rec: TSonar_On_Board): integer;
    function DeleteSonar_On_Board(const id: string): Integer;
    function getSonar_Def(const id: Integer; var aRec: TList;
      var rec: TSonar_On_Board): boolean;
    function getAllSonar_Def(var aRec: TList): boolean;
    function updateSonar_Def(rec: TSonar_On_Board; id: string): Integer;
    function insertSonar_Def(rec: TSonar_On_Board): Integer;
    function deleteSonar_Def(id: Integer): Integer;
    function updateScriptSonar(rec: TScripted_Sonar_Event; id: string): Integer;

    function getAllSonarCategory(var cList: TList): Integer;

// -- weapons --
    // Missile
    function getAllMissile_OnBoard(const id, index: Integer;
      var aRec: TList): Integer;
    function getAllMissile_OnBoard2(const id, index: Integer;
      var aRec: TList): Integer;
    function getMissile_OnBoard_Distinct(const id: Integer;
      var aRec: TList): Integer;
    function getAllMissile(const id: Integer; var mList: TList;
      var rec: TMissile_On_Board): Integer;
    function getPIMissile(var mList: TList; ra_id, force: Integer): Integer;
    function getMissile_Def(rec: TMissile_Definition; id: Integer): Integer;
    function updateMissile_Def(rec: TMissile_On_Board; id: string): Integer;
    function insertMissile_Def(rec: TMissile_On_Board): Integer;
    function deleteMissile_Def(id: Integer): Integer;
    function getMissileByLibrary(const id_Library: Integer;
      var vList: TList): Integer;

    //Fitted Weapon
    function GetFitted_Weapon_On_Board(const id: integer;
    var rec: TFitted_Weapon_On_Board): boolean;
    function GetFitted_Weapon_On_Board_byMissile(const id: integer;
    var aRec: TList): boolean;
    function GetFitted_Weapon_On_Board_byHybrid(const id: integer;
    var aRec: TList): boolean;
    function InsertFitted_Weapon_On_Board(const index :integer;
      var rec: TFitted_Weapon_On_Board): Integer;
    function DeleteFitted_Weapon_On_Board(const id: string):integer;
    function UpdateFitted_Weapon_OnBoard(const id: string;const index:integer;
      var rec: TRecFitted_Weapon_On_Board): Integer;

    function GetFitted_Weap_Launcher_On_Board(const id,tipe: integer;
    var rec: TFitted_Weap_Launcher_On_Board;var wList: TList): boolean;
    function UpdateFitted_Weap_Launcher_On_Board(const id,launch: string;
    var rec: TFitted_Weap_Launcher_On_Board): integer;
    function InsertFitted_Weap_Launcher_On_Board(
    var rec: TRecFitted_Weap_Launcher_On_Board): integer;
    function DeleteFitted_Weap_Launcher_On_Board(index: integer;const id,launch: string): integer;

    // Torpedo
    function getAllTorpedo_OnBoard(const id, index: Integer;
      var aRec: TList): Integer;
    function getTorpedo_OnBoard(const id: Integer;
      var aRec: TList): Integer;
    function getAllTorpedo(const id: Integer; var mList: TList;
      var rec: TTorpedo_On_Board): Integer;
    function getPITorpedo(var mList: TList; ra_id, force: Integer): Integer;
    function updateTorpedo_Def(rec: TTorpedo_On_Board; id: string): Integer;
    function insertTorpedo_Def(rec: TTorpedo_On_Board): Integer;
    function deleteTorpedo_Def(id: Integer): Integer;
    function getTorpedo_Def(rec: TTorpedo_Definition; id: Integer): Integer;
    function getTorpedoByLibrary(const id_Library: Integer;
      var vList: TList): Integer;

    function getAllTorpedo_POH_Modifier(const id: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
    function DeleteTorpedo_POH_Modifier(const id: string): integer;
    function insertTorpedo_POH_Modifier(rec: TTorpedo_On_Board): Integer;


    function getAllMines_OnBoard(const id, index: Integer;
      var aRec: TList): Integer;
    function getMine_OnBoard(const id: Integer;
      var aRec: TList): Integer;
    function getAllMine(const id: Integer; var mList: TList;
      var rec: TMine_On_Board): Integer;
    function getPIMine(var mList: TList; ra_id, force: Integer): Integer;
    function updateMine_Def(rec: TMine_On_Board; id: string): Integer;
    function insertMine_Def(rec: TMine_On_Board): Integer;
    function deleteMine_Def(id: Integer): Integer;
    function getMine_def(rec: TMine_Definition; id: Integer): Integer;
    function getMineByLibrary(const id_Library: Integer;
      var vList: TList): Integer;
    function getAllMine_POD_vs_Range(const id: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
    function DeleteMine_POD_vs_Range(const id: string): integer;
    function insertMine_POD_vs_Range(rec: TMine_On_Board): Integer;

    function updateScriptWeapon(rec: TScripted_Weapon_Event;
      id: string): Integer;
    function updateFittedWeapon_Launch(rec: TFitted_Weap_Launcher_On_Board;
      id: string): Integer;
    function insertFittedWeapon_Launcher(rec: TFitted_Weap_Launcher_On_Board)
      : Integer;
    { skipped.
      function getAllHybrid_OnBoard(const id: integer;
      var aRec: TList): Integer; }

// -- countermeasure --

    //Accoustic Decoy
    function getAllAcoustic_Decoy_On_Board(const id: Integer;
      var aRec: TList): Integer;
    function getAllAcoustic_Decoy_POH_Modifier(const id: integer;
      var aRec: TList): Integer;
    function getAccoustic_Decoy_On_Board(const id:integer;var aRec:TList):integer;
    function getAccoustic_Decoy(const id: Integer; var aRec: TList): Integer;
    function updateAcoustic_Decoy_Def(rec: TAcoustic_Decoy_On_Board;
      id: string): Integer;
    function insertAcoustic_Decoy_Def(rec: TAcoustic_Decoy_On_Board): Integer;
    function deleteAccoustic_Decoy_Def(id: Integer): Integer;
    function UpdateAcoustic_Decoy_On_Board(const id: string;
    var rec: TAcoustic_Decoy_On_Board): integer;
    function InsertAcoustic_Decoy_On_Board(var rec: TAcoustic_Decoy_On_Board): Integer;
    function DeleteAcoustic_Decoy_On_Board(const id: string): Integer;

    // Air_Buble
    function getAllAir_Bubble_Mount(const id: Integer;
      var aRec: TList): Integer;
    function getAir_Buble_Mount(const id:integer;var aRec:TList):integer;
    function getAir_Bubble_Def(const id: Integer; var aRec: TList): Integer;
    function updateAir_Bubble(rec: TAir_Bubble_On_Board; id: string): Integer;
    function insertAir_Bubble(rec: TAir_Bubble_On_Board): Integer;
    function DeleteAir_Bubble_Mount(const id: string): Integer;
    function updateAir_Bubble_Def(rec: TAir_Bubble_On_Board; id: string): Integer;
    function insertAir_Bubble_Def(rec: TAir_Bubble_On_Board): Integer;
    function deleteAir_Bubble_Def(id: Integer): Integer;

    // Chaff
    function getAllChaff_Definition(
        var aRec: TList): Integer;
    function getChaff_Def(const id: Integer; var aRec: TList;
      var rec: TChaff_On_Board): Integer;
      function updateChaff_Def(var rec: TChaff_On_Board; id: string): Integer;
    function insertChaff_Def(rec: TChaff_On_Board): Integer;
    function deleteChaff_Def(id: Integer): Integer;

    function updateScriptChaff(rec: TScripted_Chaff_Event; id: String): Integer;

    function getAllChaff_On_Board(const id: Integer; var aRec: TList): Integer;
    function updateChaff(rec: TChaff_On_Board; id: string): Integer;
    function insertChaff(rec: TChaff_On_Board): Integer;
    function DeleteChaff_On_Board(const id: string): integer;

    function getAllChaff_Launcher_On_Board(const id: Integer;
    var aRec: TList): Integer;

    function GetChaff_Launcher_On_Board(const id,num: integer;var rec: TChaff_Launcher_On_Board): boolean;
    function InsertChaff_Launcher_On_Board(var rec: TChaff_Launcher_On_Board): integer;
    function UpdateChaff_Launcher_On_Board(const id,num: string;var rec: TChaff_Launcher_On_Board): integer;
    function DeleteChaff_Launcher_On_Board(const id,num: string): integer;

    // Defensive_Jammer

    function getAllDefensive_Jammer_On_Board(const id: Integer;
      var aRec: TList): Integer;
    function getAllDefensive_Jammer_Definition(
        var aRec: TList): Integer;
    function getDefensive_Jammer_Def(const id: Integer; var aRec: TList): Integer;
    function updateDefensive_Jammer_Def(rec: TDefensive_Jammer_On_Board;
      id: string): Integer;
    function insertDefensive_Jammer_Def(rec: TDefensive_Jammer_On_Board)
      : Integer;
    function DeleteDefensive_Jammer_On_Board(const id: string): Integer;
    function InsertDefensive_Jammer_On_Board(var rec: TDefensive_Jammer_On_Board): Integer;
    function UpdateDefensive_Jammer_On_Board(const id: string;
      var rec: TDefensive_Jammer_On_Board): Integer;
    function deleteDefensive_Jammer_Def(id: Integer): Integer;

    // Floating_Decoy
    function getAllFloating_Decoy_Definition(
        var aRec: TList): Integer;
    function getAllFloating_Decoy_On_Board(const id: Integer;
      var aRec: TList): Integer;
    function getFloating_Decoy(const id: Integer; var aRec: TList): Integer;
    function updateFloating_Decoy(rec: TFloating_Decoy_On_Board;
      id: string): Integer;
    function insertFloating_Decoy(rec: TFloating_Decoy_On_Board): Integer;
    function DeleteFloating_Decoy_On_Board(const id: string): integer;
    function updateFloating_Decoy_Def(rec: TFloating_Decoy_On_Board;
      id: string): Integer;
    function insertFloating_Decoy_Def(rec: TFloating_Decoy_On_Board): Integer;
    function deleteFloating_Decoy_Def(id: Integer): Integer;

    // Infrared
    function getAllInfrared_Decoy_On_Board(const id: Integer;
      var aRec: TList): Integer;
    function getInfrared_Decoy_Definition(const id: Integer;
      var aRec: TList; var rec: TInfrared_Decoy_On_Board): Integer;
    function InsertInfrared_Decoy_Definition(
      var rec: TInfrared_Decoy_On_Board): integer;
    function UpdateInfrared_Decoy_Definition(const id: string;
      var rec: TInfrared_Decoy_On_Board): integer;
    function deleteInfrared_Decoy_Definition(id: Integer): Integer;
    function updateScriptInfrared(rec: TScripted_Infrared_Decoy_Event;
      id: string): Integer;
    function updateInfrared_Decoy_On_Board(rec: TInfrared_Decoy_On_Board;
      id: string): Integer;
    function deleteInfrared_Decoy_On_Board(id: Integer): Integer;
    function InsertInfrared_Decoy_On_Board(
      var rec: TInfrared_Decoy_On_Board): integer;

    //Jammer
    function getAllJammer_On_Board(const id: Integer; var aRec: TList): Integer;
    function getJammer_OnBoard_Distinct(const id:integer;var aRec:TList):integer;
    function getJammer_Def(const id:integer;var aRec:TList):integer;
    function updateJammer(rec: TRadar_Noise_Jammer_On_Board; id: string): Integer;
    function insertJammer(var rec: TRadar_Noise_Jammer_On_Board): Integer;
    function DeleteJammer_On_Board(const id: string): Integer;
    function updateJammer_Def(rec: TRadar_Noise_Jammer_On_Board; id: string): Integer;
    function insertJammer_Def(rec: TRadar_Noise_Jammer_On_Board): Integer;

    //radar_jammer
    function getRadar_Jammer(const id: Integer; var aRec: TList;
      var rec: TRadar_Noise_Jammer_On_Board): Integer;
    function InsertRadar_Jammer(var rec: TRadar_Noise_Jammer_On_Board): integer;
    function UpdateRadar_Jammer(const id: string;
      var rec: TRadar_Noise_Jammer_On_Board): integer;
    function DeleteRadar_Jammer(id: Integer): Integer;

    //Point_Effect
    function getAllPoint_Effect_On_Board(const id: Integer;
      var aRec: TList): Integer;
    function getAllTowed_Jammer_Decoy_On_Board_Only(const id: integer;
        var aRec: TList): Integer;
    function getAllTowed_Jammer_Decoy_On_Board(const id: Integer;
      var aRec: TList): Integer;
    function getAllTowed_Jammer_Decoy_Definition(
        var aRec: TList): Integer;
    function getTowed_Jammer_Def(const id: Integer; var aRec: TList;
      var rec: TTowed_Jammer_Decoy_On_Board): Integer;
    function updateTowed_Jammer(rec: TTowed_Jammer_Decoy_On_Board;
      id: string): Integer;
    function insertTowed_Jammer(rec: TTowed_Jammer_Decoy_On_Board): Integer;
    function DeleteTowed_Jammer_Decoy_On_Board(const id: string): integer;
    function updateTowed_Jammer_Def(rec: TTowed_Jammer_Decoy_On_Board;
      id: string): Integer;
    function insertTowed_Jammer_Def(rec: TTowed_Jammer_Decoy_On_Board): Integer;
    function deleteTowed_Jammer_Def(id: Integer): Integer;

    // Game_Envi
    function GetGame_Environment_Definition(const id: Integer;
      var rec: TGame_Environment_Definition): boolean;
    function GetGame_Environment_Definition_By_Identifier(const id: String;
      var rec: TGame_Environment_Definition): boolean;
    function GetGame_Environment_Definition_By_Game_Def(const DefName : string;
      var rec: TGame_Environment_Definition): boolean;
    function GetAllGame_Environment_Definition(var gList: TList): Integer;
    function updateGame_Environment_Def(rec: TGame_Environment_Definition;
      id: string): Integer;
    function insertGame_Environment_Def(rec: TGame_Environment_Definition)
      : TGame_Environment_Definition;
    function deleteGame_Environment_Def(id: Integer): Integer;

    // Game Area Def
    function GetGame_Area_Def(var gList: TList): Integer;
    function GetGame_Area_Def_ByIdentifier(const Game_Identifier : string;
      var gameArea: TGame_Environment_Definition): Integer;
    function GetGame_Area_DefByID(const id: Integer;
      var gameArea: TGame_Environment_Definition): Integer;
    function getGame_Area_Identifier(id: string; gList: TList;
      var rec: TGame_Environment_Definition): Integer;
    function updateGame_Area_Def(rec: TGame_Environment_Definition;
      id: string): Integer;
    function insertGame_Area_Def(rec: TGame_Environment_Definition): Integer;
    function deleteGame_Area_Def(id: Integer): Integer;
    function getGame_Area_By_Envi(id: string; gList: TList;
      var rec: TGame_Environment_Definition): Integer;


    // Cubicle_Group

    function getCubicle_GroupsByScenario(const scenario_id, force:integer;
    var aRec: TList): Integer;

    function getCubicle_GroupMemberResidu(const deploy_id, ra_id,
      force: Integer; var gList: TList): boolean;

    function getAllCubicle_Groups(const id, force: Integer; var cList: TList;
      var rec: TCubicle_Group): boolean;

    function getCubicle_GroupsByResource(const ra_id, force: Integer;
      var aRec: TList): Integer;


    function getPlatform_GroupsByResource(const ra_id, force: Integer;
      var aRec: TList): Integer;
    function getCubicle_GroupsByGroup(const id: Integer;
      var rec: TCubicle_Group): boolean;
    function getCubicle_GroupMember(var cGroup: TCubicle_Group;
      var pfList: TList): Integer;
    function getCubicle_GroupMemberByPlatform(const pi: Integer;
      var rec: TCubicle_Group_Assignment): Integer;
    function getMaxCubicle_Group(var recMax: Integer): boolean;
    function deleteAllCubicle_Group(deploy_id: string): Integer;
    function deleteCubicle_Group(id: string): Integer;

    function updateCubicle_Groups(var rec: TCubicle_Group; id: string): Integer;
    function insertCubicle_Groups(var rec: TCubicle_Group): Integer;

    function GetAllCubicle_Group_Assignment(const id: Integer;
      var cList: TList): boolean;

    function GetAllCubicle_Group_AssignmentByDeployID(const id: Integer;
      var cList: TList): boolean;

    function UpdateCubicle_Group_Assignment(const id: string;
      var rec: TCubicle_Group_Assignment): Integer;
    function InsertCubicle_Group_Assignment(var rec: TCubicle_Group_Assignment)
      : Integer;
    function CekPlatformAlreadyInsertInGroupAssignment(var rec: TCubicle_Group_Assignment)
      : Boolean;
    function CekCubicleGroupAlreadyExist(var rec: TCubicle_Group) : Boolean;
    function DeleteCubicle_Group_Assignment(const id: Integer): Integer;
    function DeleteCubicle_Group_Channel_Assgnmnt(const Group_id, comm_id: Integer): Integer;

    function GetCubicle_Group_Assignment(const id: Integer): Integer;

    function GetAllCubicle_Group_Channel_Assgnmnt(const id: Integer;
      var cList: TList): boolean;
    function GetCubicle_Group_Channel_Assgnmnt(const group_id, id,
      sign: Integer; var cList: TList): boolean;
    function InsertCubicle_Group_Channel_Assgnmnt
      (var rec: TCubicle_Group_Assignment): Integer;
    function UpdateCubicle_Group_Channel_Assgnmnt(const id: string;
      var rec: TCubicle_Group_Assignment): Integer;

    // Game Default
    function GetAllGame_Defaults(const id: Integer; var pList: TList): Integer;
    function GetGame_Defaults(const id: Integer; var rec: TRecGame_Defaults)
      : boolean;
    function GetGame_Cloud_On_ESM(const id: Integer;
      var rec: TRecGame_Cloud_On_ESM): boolean;
    function GetGame_Cloud_On_Radar(const id: Integer;
      var rec: TRecGame_Cloud_On_Radar): boolean;
    function GetGame_Default_IFF_Mode_Code(const id: Integer;
      var rec: TRecGame_Default_IFF_Mode_Code): boolean;
    function GetGame_Rainfall_On_ESM(const id: Integer;
      var rec: TRecGame_Rainfall_On_ESM): boolean;
    function GetGame_Rainfall_On_Missile_Seeker(const id: Integer;
      var rec: TRecGame_Rainfall_On_Missile_Seeker): boolean;
    function GetGame_Rainfall_On_Radar(const id: Integer;
      var rec: TRecGame_Rainfall_On_Radar): boolean;
    function GetGame_Rainfall_On_Sonar(const id: Integer;
      var rec: TRecGame_Rainfall_On_Sonar): boolean;
    function GetGame_Sea_On_Missile_Safe_Altitude(const id: Integer;
      var rec: TRecGame_Sea_On_Missile_Safe_Altitude): boolean;
    function GetGame_Sea_On_Radar(const id: Integer;
      var rec: TRecGame_Sea_On_Radar): boolean;
    function GetGame_Sea_On_Sonar(const id: Integer;
      var rec: TRecGame_Sea_On_Sonar): boolean;
    function GetGame_Ship_On_Sonar(const id: Integer;
      var rec: TRecGame_Ship_On_Sonar): boolean;
    function getAllGame_Default_IFF_Mode_Code(const id: integer;
      var aRec: TList): Integer;
    function InsertGame_Default_IFF_Mode_Code(var rec: TGame_Default_IFF_Mode_Code): integer;
    function UpdateGame_Default_IFF_Mode_Code(const id,force,iff_type,iff_mode: Integer;
      var rec: TGame_Default_IFF_Mode_Code): integer;
    function DeleteGame_Default_IFF_Mode_Code(const id: string): integer;

    function updateGame_Defaults(rec: TGame_Defaults; id: string): Integer;
    function insertGame_Defaults(var rec: TGame_Defaults): Integer;
    function deleteGame_Defaults(id: Integer): Integer;

    // Scripted
    function GetScripted_Behav(const id: Integer;
      var rec: TScripted_Behav_Definition): boolean;
    function GetScripted_Pattern(const id: Integer;
      var rec: TScripted_Pattern_Point): boolean;

    function InsertScripted_Pattern_Point(var rec: TScripted_Pattern_Point): integer;

    // Rainfall
    function GetRainfall_On_ESM(var aRec: TList): boolean;
    function updateRainfall_On_ESM(rec: TRainfall_On_ESM; id: string): Integer;
    function insertRainfall_On_ESM(rec: TRainfall_On_ESM): Integer;
    function GetRainfall_On_Missile(var aRec: TList): boolean;
    function GetRainfall_On_Radar(var aRec: TList): boolean;
    function updateRainfall_On_Radar(rec: TRainfall_On_Radar;
      id: string): Integer;
    function insertRainfall_On_Radar(rec: TRainfall_On_Radar): Integer;

    function GetRainfall_On_Sonar(var aRec: TList): boolean;
    function updateRainfall_On_Sonar(rec: TRainfall_On_Sonar;
      id: string): Integer;
    function insertRainfall_On_Sonar(rec: TRainfall_On_Sonar): Integer;

    // Game Rainfall
    function getAllGame_Rainfall_On_Radar(const id: integer;
      var aRec: TList): Integer;
    function UpdateGame_Rainfall_On_Radar(const id,freq: string;
      var rec: TGame_Rainfall_On_Radar): integer;
    function InsertGame_Rainfall_On_Radar(const id,freq: string;
      var rec: TGame_Rainfall_On_Radar): integer;
    function DeleteGame_Rainfall_On_Radar(const id: string): integer;
    function getAllGame_Rainfall_On_ESM(const id: integer;
      var aRec: TList): Integer;
    function UpdateGame_Rainfall_On_ESM(const id,freq: string;
      var rec: TGame_Rainfall_On_ESM): integer;
    function InsertGame_Rainfall_On_ESM(const id,freq: string;
      var rec: TGame_Rainfall_On_ESM): integer;
    function DeleteGame_Rainfall_On_ESM(const id: string): integer;
    function getAllGame_Rainfall_On_Missile_Seeker(const id: integer;
      var aRec: TList): Integer;
    function UpdateGame_Rainfall_On_Missile_Seeker(const id,gType: string;
      var rec: TGame_Rainfall_On_Missile_Seeker): integer;
    function InsertGame_Rainfall_On_Missile_Seeker(const id,gType: string;
      var rec: TGame_Rainfall_On_Missile_Seeker): integer;
    function DeleteGame_Rainfall_On_Missile_Seeker(const id: string): integer;
    function getAllGame_Rainfall_On_Sonar(const id: integer;
      var aRec: TList): Integer;
    function UpdateGame_Rainfall_On_Sonar(const id,freq: string;
      var rec: TGame_Rainfall_On_Sonar): integer;
    function InsertGame_Rainfall_On_Sonar(const id,freq: string;
      var rec: TGame_Rainfall_On_Sonar): integer;
    function DeleteGame_Rainfall_On_Sonar(const id: string): integer;

    // Cloud Effects
    function GetCloud_Effect_On_ESM(var aRec: TList): boolean;
    function updateCloud_Effects_On_ESM(rec: TCloud_Effects_On_ESM;
      id: string): Integer;
    function insertCloud_Effects_On_ESM(rec: TCloud_Effects_On_ESM): Integer;
    function GetCloud_Effect_On_Radar(var aRec: TList): boolean;
    function updateCloud_Effects_On_Radar(rec: TCloud_Effects_On_Radar;
      id: string): Integer;
    function insertCloud_Effects_On_Radar(rec: TCloud_Effects_On_Radar)
      : Integer;

    // Game Cloud
    function getAllGame_Cloud_On_Radar(const id: integer;
      var aRec: TList): Integer;
    function UpdateGame_Cloud_On_Radar(const id,freq: string;
      var rec: TGame_Cloud_On_Radar): integer;
    function InsertGame_Cloud_On_Radar(const id,freq: string;
      var rec: TGame_Cloud_On_Radar): integer;
    function DeleteGame_Cloud_On_Radar(const id: string): integer;
    function getAllGame_Cloud_On_ESM(const id: integer;
      var aRec: TList): Integer;
    function UpdateGame_Cloud_On_ESM(const id,freq: string;
      var rec: TGame_Cloud_On_ESM): integer;
    function InsertGame_Cloud_On_ESM(const id,freq: string;
      var rec: TGame_Cloud_On_ESM): integer;
    function DeleteGame_Cloud_On_ESM(const id: string): integer;

    // Hosted
    function GetHosted_Platform(const v_id, host_id: Integer;
      var aRec: TList): integer;
    function updateHosted_Platform(const id: string;
      var rec: THosted_Platform): Integer;
    function insertHosted_Platform(var rec: THosted_Platform): Integer;
    function deleteHosted_Platform(const id: string):integer;
    function DeleteHosted_PlatformByVehicle(const id: string): integer;

    // Sonobuoy
    function getAllSonobuoy_On_Board(const id, index: Integer;
      var aRec: TList): Integer;
    function getAllSonobuoy(const id_vec,id: Integer; var sList: TList;
      var rec: TSonobuoy_On_Board): Integer;
    function getPISonobuoy(var sList: TList; ra_id, force: Integer): Integer;
    function updateSonobuoy_Def(rec: TSonobuoy_On_Board; id: string): Integer;
    function insertSonobuoy_Def(rec: TSonobuoy_On_Board): Integer;
    function deleteSonobuoy_Def(id: Integer): Integer;
    function DeleteSonobuoy_On_Board(const id: string): Integer;
    function InsertSonobuoy_On_Board(var rec: TSonobuoy_On_Board): Integer;
    function UpdateSonobuoy_On_Board(const id: string;
      var rec: TSonobuoy_On_Board): integer;
    function getSonobuoyByLibrary(const id_Library: Integer;
      var vList: TList): Integer;
    function SonouboytoSonarClassification(id: Integer): Integer;
    function GetSonarOnBoardIndexBySonobuoy(Vid, aSonarID, aInstance_Type, aSonar_Instance_Index : Integer):Boolean;
    // Bomb
    function GetAllBomb(const id: Integer; var aRec: TList): Integer;
    function GetBomb_OnBoard(const id: Integer; var aRec: TList): Integer;
    function GetBomb(const id: Integer; var sList: TList;
      var rec: TBomb_Definition): Integer;
    function updateBomb_Def(rec: TBomb_Definition; id: string): Integer;
    function insertBomb_Def(rec: TBomb_Definition): Integer;
    function deleteBomb(id: Integer): Integer;

    //Bomb_POH
    function getAllBomb_POH_vs_Range(const id: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
    function DeleteBomb_POH_vs_Range(const id: string): integer;
    function insertBomb_POH_vs_Range(rec: TBomb_Definition): Integer;

    // Gun
    function GetAllGun(const id: Integer; var aRec: TList): Integer;
    function GetGun_OnBoard (const id: Integer; var aRec: TList): Integer;
    function GetGun(const id: Integer; var sList: TList;
      var rec: TGun_Definition): Integer;
    function updateGun_Def(rec: TGun_Definition; id: string): Integer;
    function insertGun_Def(rec: TGun_Definition): Integer;
    function deleteGun(id: Integer): Integer;

    // Gun POH
    function getAllGun_POH_vs_Range(const id,tipe: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
    function DeleteGun_POH_vs_Range(const id,tipe: string): integer;
    function insertGun_POH_vs_Range(rec: TGun_Definition): Integer;

    // Sea State
    function GetSeaStateOnMissile(var sea: TSingleArray): boolean;
    function GetSeaStateOnRadar(var sea: TSingleArray): boolean;
    function GetSea_State_On_Missile(var aRec: TList): boolean;
    function GetSea_State_On_Radar(var aRec: TList): boolean;

    function updateSeaState_On_Radar(rec: TSea_State_On_Radar;
      id: string): Integer;
    function insertSeaState_On_Radar(rec: TSea_State_On_Radar): Integer;

    function GetSeaStateOnSonar(var sea: TSeaStateSonarArray): boolean;
    function GetSea_State_On_Sonar(var aRec: TList): boolean;
    function updateSeaStateOnSonar(rec: TSea_State_On_Sonar;
      id: string): Integer;
    function insertSeaStateOnSonar(rec: TSea_State_On_Sonar): Integer;

    // Game Sea State
    function getAllGame_Sea_On_Radar(const id: integer;
      var aRec: TList): Integer;
    function UpdateGame_Sea_On_Radar(const id,sea: string;
      var rec: TGame_Sea_On_Radar): integer;
    function InsertGame_Sea_On_Radar(const id,sea: string;
      var rec: TGame_Sea_On_Radar): integer;
    function DeleteGame_Sea_On_Radar(const id: string): integer;
    function getAllGame_Sea_On_Missile_Safe_Altitude(const id: integer;
      var aRec: TList): Integer;
    function UpdateGame_Sea_On_Missile_Safe_Altitude(const id,sea: string;
      var rec: TGame_Sea_On_Missile_Safe_Altitude): integer;
    function InsertGame_Sea_On_Missile_Safe_Altitude(const id,sea: string;
      var rec: TGame_Sea_On_Missile_Safe_Altitude): integer;
    function DeleteGame_Sea_On_Missile_Safe_Altitude(const id: string): integer;
    function getAllGame_Sea_On_Sonar(const id: integer;
      var aRec: TList): Integer;
    function UpdateGame_Sea_On_Sonar(const id,freq: string;
      var rec: TGame_Sea_On_Sonar): integer;
    function InsertGame_Sea_On_Sonar(const id,freq: string;
      var rec: TGame_Sea_On_Sonar): integer;
    function DeleteGame_Sea_On_Sonar(const id: string): integer;

    // Ship
    function GetShipNoiseOnSonar(var ship: TShipNoiseOnSonarArray): boolean;
    function GetShip_Noise_On_Sonar(var aRec: TList): boolean;
    function updateShipNoiseOnSonar(rec: TShip_Noise_On_Sonar;
      id: string): Integer;
    function insertShipNoiseOnSonar(rec: TShip_Noise_On_Sonar): Integer;

    // Game Ship
    function getAllGame_Ship_On_Sonar(const id: integer;
      var aRec: TList): Integer;
    function UpdateGame_Ship_On_Sonar(const id,freq: string;
      var rec: TGame_Ship_On_Sonar): integer;
    function InsertGame_Ship_On_Sonar(const id,freq: string;
      var rec: TGame_Ship_On_Sonar): integer;
    function DeleteGame_Ship_On_Sonar(const id: string): integer;

    // Operating Mode
    function GetOperatingMode(var operate: TString): boolean;

    // Link
    function GetLinkDefinition(const id: Integer; var aRec: TList): Integer;
    function GetLinkParticipant(lPart: TLink; pfList: TList): Integer;

    function updateLink_Def(rec: TLink; id: string): Integer;
    function insertLink_Def(rec: TLink): Integer;
    function updateLink_Part(rec: TLink; link_id: string;
      deploy_id: string): Integer;
    function insertLink_Part(rec: TLink): Integer;
    function deleteLink_Part(link_id: string; deploy_id: string): Integer;
    function deleteAllLink_Part(deploy_id: string): Integer;
    function deleteAllLink_Def(deploy_id: string): Integer;

    // Formation
    function GetFormationDefinition(const id: Integer;
      var aRec: TList): Integer;
    function DeleteFormationDefinition_ByLeader(const id: string): Integer;
    function GetFormationAssignment(var fAssign: TFormation;
      var pfList: TList): Integer;
    function GetFormation_Assignment(const id: Integer;
      var pfList: TList): Integer;
    function GetFormation_ByPlatform(const id: string): Integer;

    function updateFormation_Def(rec: TFormation; id: string): Integer;
    function insertFormation_Def(rec: TFormation): Integer;
    function updateFormation_Assign(rec: TFormation; form_id: string;
      pi_id: string): Integer;
    function insertFormation_Assign(rec: TFormation): Integer;
    function deleteFormation_Assign(form_id: string; pi_id: string): Integer;
    function deleteAllFormation_Assign(form_id: string): Integer;
    function deleteFormation_Def(id: string): Integer;
    function deleteFormation_AssignByPI_Index(PI_id: string): Integer;
    function CekMemberAlreadyExist(rec : TFormation):Boolean;
    function CekFormationAlreadyExist(rec : TFormation):Boolean;

    // function GetFormation_Definition (const id: integer; var rec: TFormation_Definition): boolean;
    // Asset Deployment
    // Default
    function GetDefaultDefinition(var def: TDefaultDef): boolean;
    function GetDefaultIFFMode(var iff: TIFFMode): boolean;

    // Geo Area
    function GetGeoAreaDefinition(const id: Integer; var aRec: TList): Integer;
    function GetGeoAreaDefinition_byGA(const id: Integer; var aRec: TList): Integer;
    function updateGeo_Area_Def(rec: TGeo_Area_Def; id: string): Integer;
    function insertGeo_Area_Def(rec: TGeo_Area_Def): Integer;

    function updateGeo_Area_Point(rec: TGeo_Area_Point; id: string;
      point: string): Integer;
    function insertGeo_Area_Point(rec: TGeo_Area_Point): Integer;

    function updateResourceGeo_Area_Map(rec: TResource_Geo_Area_Map;
      geo_id: string): Integer;
    function insertResourceGeo_Area_Map(rec: TResource_Geo_Area_Map): Integer;
    function insertResourceOverlay_Map(rec: TResource_Overlay_Mapping): Integer;

    // Hybrid
    function GetHybrid_Definition(const id: Integer; var aRec: TList): Integer;
    function GetHybrid_ByMissile(const id:Integer; var rec: THybrid_On_Board): Boolean;

    // Reference
    function updateReference(rec: TRecReference_Point; id: string): Integer;
    function insertReference(var rec: TRecReference_Point): Integer;
    function DeleteReference_Point(const ra_id,force: Integer): integer;
    function getAllReference_Point(const ra_id,force: integer;
      var aRec: TList): Integer;
    function DeleteAllReference_Point(const ra_id: string): integer;

    // Resource_Pattern_Mapping
    function GetResource_Pattern_Mapping(const ra_id: integer; var recList: TList): Boolean;
    function UpdateResource_Pattern_Mapping(const id: integer; rec: TRecResource_Pattern_Mapping): Integer;
    function InsertResource_Pattern_Mapping(rec: TRecResource_Pattern_Mapping): Integer;
    function DeleteResource_Pattern_Mapping(const pat_id: integer): integer;
    function DeleteAllResource_Pattern_Mapping(const ra_id: string): integer;

    // Resource_Interval_List_Mapping
    function GetResource_Interval_List_Mapping(const id: Integer; var aRec: TList): Integer;
    function DeleteAllResource_Interval_List_Mapping(const ra_id: string): integer;
    function InsertResource_Interval_List_Mapping(rec: TResource_Allocation): Boolean;
    function UpdateResource_Interval_List_Mapping(const id: integer;
             rec: TResource_Allocation): integer;

    // External Comm
    function GetExternal_Communication_Channel(var aRec: TList;
      const ra_id, com_id: string; var rec: TExternal_Communication_Channel)
      : Integer;
    function updateComm(rec: TRecExternal_Communication_Channel;
      id: string): Integer;
    function insertComm(rec: TRecExternal_Communication_Channel): Integer;
    function DeleteExternal_Communication_Channel(const id: string): Integer;
    function DeleteAllExternal_Communication_Channel(const id: string): Integer;

    // Note Storage
    function updateNote(rec: TNote_Storage; index: Integer; id: string): Integer;
    function insertNote(rec: TNote_Storage; index: Integer; id: string): Integer;
    function deleteNote(index: Integer; id: string): Integer;
    function GetNote(const index,id: integer): boolean;

    // Blind Zone
    function getBlind(var bList: TList;const index,id,number :integer):integer;
    function updateBlind(var rec: TBlind_Zone;const blind_id: string): Integer;
    function insertBlind(var rec: TBlind_Zone;const index,id: Integer): Integer;
    function deleteBlind(index: integer; const id: string): Integer;
    function deleteBlind_byNum(index: integer; const id,num: integer): Integer;

    // Helicopter
    function updateHelicopter(rec: THelicopter_Land_Launch_Limits;
      index: string): Integer;
    function insertHelicopter(rec: THelicopter_Land_Launch_Limits): Integer;
    function GetHelicopter(const id: Integer;
      var aRec: TList): Integer;
    function deleteHelicopter(const id: string): Integer;

    // Motion
    function GetMotion_Characteristics(const id: Integer;
      var rec: TMotion_Characteristics): boolean;
    function getAllMotion_Characteristics(mList: TList): Integer;
    function getAllMotion_CharacteristicsUsedByVec(mList: TList): Integer;
    function updateMotion(rec: TMotion_Characteristics; index: string): Integer;
    function insertMotion(rec: TMotion_Characteristics): Integer;
    function deleteMotion(id: Integer): Integer;
    function CekMotionNameAlreadyExist(aName : String): Boolean;

    //PlatformCapability  dng
    function getAllPlatformCapability(mList: TList ): Integer;
    function getPlatform_Capability(const id: Integer;
      var rec: TTransport): Boolean;
    function insertPlatformCapability(rec: TTransport ): Integer;
    function updatePlatformCapability(rec: TTransport): Integer;
//    function getVehicleCapability(const id : Integer;
//      var rec: TCapability): Boolean;
    function CekPlatformCapabilityIdentifier(CapIdent : string ): Boolean;
    function DeletePlatformCapability(id: integer): integer;

    //fontTaktis
    function getAllFontTaktis(mList: TList; aFontType : Byte): Integer;
    function getFontByID(const id: Integer; var FontTaktis: TFontTaktis): Integer;


    //PlatformLogistics
    function GetPlatform_Logistics(const id: Integer;
      var rec: TLogistics): boolean;
    function insertPlatformLogistics(rec: TLogistics): Integer;
    function UpdatePlatformLogistics(rec: TLogistics): Integer;
    function deletePlatformLogistics(id: Integer): Integer;


    //UserLogin
    function GetAllUserLogin(mList: TList): Integer;
    function GetValidasiUserLogin(const aUser, aPass : string; rec: TUser_Login):Boolean;
    function CekUserLoginNameAlreadyExist(const aUserName : string):Boolean;
    function InsertUserLogin(rec : TUser_Login): Integer;
    function DeleteUserLogin(id: Integer): Integer;
    function UpdateUserLogin(rec : TUser_Login): Integer;

    // Sub-Area
    function GetSubArea_Enviro_Definition(const id: Integer;
      var rectList: TList): boolean;
    function InsertSubArea_Enviro_Definition
      (var rec: TSubArea_Enviro_Definition): Integer;
    function UpdateSubArea_Enviro_Definition(const id: string;
      var rec: TSubArea_Enviro_Definition): Integer;
    function InsertGlobal_Convergence_Zone
      (var rec: TGlobal_Convergence_Zone): Integer;
    /// <param>
    /// id_enviro = id subarea
    /// id_gameArea = id game area
    /// </param>
    function DeleteSubArea_Enviro_Definition(const id_enviro: Integer;
      const id_gameArea: Integer): Integer;
    function DeleteAllSubArea_Enviro_Definition(const id: Integer): Integer;

    // Runtime Platform Library
    function GetRuntime_Platform_Library(const id: Integer; var pList: TList;
      var rec: TRuntime_Platform_Library): boolean;
    function GetNameRuntime_Platform_LibraryByID(const id: Integer): string;
    function GetRuntime_Platform_LibraryByResourceAlloc(const id: Integer;
      var pList: TList; var rec: TRuntime_Platform_Library): boolean;
    function InsertRuntime_Platform_Library(var rec: TRuntime_Platform_Library)
      : Integer;
    function InsertRuntime_Platform_LibraryByResourceAlloc(const id: string;
      var rec: TRuntime_Platform_Library): Integer;
    function UpdateRuntime_Platform_Library(const id: string;
      var rec: TRuntime_Platform_Library): Integer;
    function DeleteRuntime_Platform_Library(const id: string): Integer;
    function DeleteRuntime_Platform_LibraryByResourceAlloc(const id: string)
      : Integer;
    function DeleteAllResource_Library_Mapping(const id: string): Integer;

    function CekRuntimeDefault(const RA_ID: Integer):Boolean;
    function CekRuntimePlatformInsert(aName : string):Boolean;

    // Platform Library Entry
    function InsertPlatform_Library_Entry(var rec: TPlatform_Library_Entry)
      : Integer;
    function GetPlatform_Library_Entry(const id: Integer;
      var rec: TPlatform_Library_Entry): boolean;
    function GetPlatform_Library_Entry_byMiss(const id: Integer;
      var rec: TList): boolean;
    function GetPlatform_Library_Entry_byHybrid(const id: Integer;
      var rec: TList): boolean;
    function getAllPlatform_Library_Entry(const id: Integer;
      var aRec: TList): Integer;
    function UpdatePlatform_Library_Entry(const index,id,lib_id: Integer): Integer;
    function DeletePlatform_Library_Entry(const index,lib_id,id: integer): Integer;

    // Radar Interval
    function GetRadar_Interval_List(const id: Integer; var pList: TList;
      var rec: TRadar_Interval_List): boolean;
    function UpdateRadar_Interval_List(const id: integer;
      var rec: TRadar_Interval_List): Integer;
    function InsertRadar_Interval_List(var rec: TRadar_Interval_List): Integer;
    function DeleteRadar_Interval_List(const id: string): Integer;
    function GetRadar_Interval_Def(const id: Integer; var pList: TList;
      var rec: TRadar_Interval_Definition): boolean;
    function updateRadar_Interval_Def(rec: TRadar_Interval_Definition;
      id: string): Integer;
    function insertRadar_Interval_Def(rec: TRadar_Interval_Definition): Integer;
    function DeleteRadar_Interval_Def(const id: Integer): Integer;

    // Overlay
    function GetOverlay_Definition_List(const id: Integer; var pList: TList; var rec: TMainOverlay_Definition): boolean;
    function GetOverlay_Definition_ByID(const id: Integer; var rec: TMainOverlay_Definition): boolean;
    function UpdateOverlay_Definition_List(const id: string; var rec: TMainOverlay_Definition): Integer;
    function InsertOverlay_Definition_List(const id: string; var rec: TMainOverlay_Definition): Integer;
    function DeleteOverlay_Definition(const id: string): Integer;

    //Overlay
    function getAllOverlay_Definition(aRec: TList): Integer;
    function GetOverlay_Definition(const id: Integer; var aRec: TList): Integer;
    function GetOverlay_DefinitionByID(const id: Integer; var rec: TMainOverlay_Definition): Integer;
    function CekOverlayInsert(aName: String): Boolean;
    function updateOverlay_Definition(rec: TMainOverlay_Definition; id: string): Integer;
    function insertOverlay_Definition(rec: TMainOverlay_Definition): Integer;
    function insertOverlay_Shape(rec: TRec_OverlayShape): Integer;
    function GetAllOverlay_Shape(const id: Integer; var aRec: TList): Integer;
    function DeleteOverlay_Shape(const id: Integer): Integer;
    function insert_Resource_Overlay_Mapping(rec: TResource_Allocation) : Integer;
    function updateResourceOverlay_Map(var rec: TResource_Overlay_Mapping;const id:integer):integer;
    function delete_Resource_Overlay_Mapping(var rec: TResource_Overlay_Mapping; const id : integer) : integer;
    function deleteAll_Resource_Overlay_Mapping(const id : string) : integer;

    // Student Role
    function GetStudent_Role_Definition(const role_id, id: Integer;
      var pList: TList; var rec: TStudent_Role_Definition): boolean;
    function GetStudentRoleByResource(const ra_id: Integer;
      var sList: TList): boolean;

    function updateStudent_Def(rec: TStudent_Role_Definition;
      id: string): Integer;
    function insertStudent_Def(rec: TStudent_Role_Definition): Integer;
    function DeleteStudent_Role_Definition(const id: string;const index:integer): Integer;

    function GetStudent_Role_List(const id: Integer; var pList: TList;
      var rec: TStudent_Role_List): boolean;
    function GetMaxRecStudent_Role_List(var rec: TStudent_Role_List): boolean;
    function updateStudent_List(rec: TStudent_Role_List; id: string): Integer;
    function insertStudent_List(rec: TStudent_Role_List): Integer;
    function DeleteStudent_Role_List(const id: string): Integer;

    // POD vs SNR
    function GetPOD_vs_SNR_Curve_Definition(const id: Integer; pList: TList;
      var rec: TPOD_vs_SNR_Curve_Definition): boolean;
    function UpdatePOD_vs_SNR_Curve_Definition(const id: string;
      var rec: TPOD_vs_SNR_Curve_Definition): Integer;
//    function InsertPOD_vs_SNR_Curve_Definition(var rec: TPOD_vs_SNR_Curve_Definition): Integer;
    function DeletePOD_vs_SNR_Curve_Definition(const id: string): Integer;

    function getAllPOD_vs_SNR_Point(const id: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
    function updatePOD_vs_SNR_Point(rec: TPOD_vs_SNR_Point;
      index: string): Integer;
    function insertPOD_vs_SNR_Point(rec: TPOD_vs_SNR_Point): Integer;
    function DeletePOD_vs_SNR_Point(const id: string): integer;

    //
    function getAllVehicleProperties(vIndex: Integer;
      vehicle: TVehicle_Definition): Integer;
    function getAllRuntimePlatform(allocIndex: Integer;
      var list: TList): Integer;
    procedure GetCubicle_GroupMemberPlatformID(const grpId: Integer;
      var pi: TIntegerArray);

    // Predefined Pattern
    function GetPredefined_Pattern(const id: Integer; var mList: TList;
      var rec: TPredefined_Pattern): boolean;
    function InsertPredefined_Pattern(var rec: TPredefined_Pattern): Integer;
    function UpdatePredefined_Pattern(const id: string;
      var rec: TPredefined_Pattern): Integer;
    function DeletePredefined_Pattern(const id: string;
      var rec: TPredefined_Pattern): Integer;

    //Point Effect On Board
    function GetPoint_Effect_On_Board(const id: integer;
    var rec: TPoint_Effect_On_Board): boolean;
    function InsertPoint_Effect_On_Board(const index:integer;
    var rec: TPoint_Effect_On_Board): integer;
    function UpdatePoint_Effect_On_Board(const id: string;const index:integer;
    var rec: TPoint_Effect_On_Board): integer;
    function DeletePoint_Effect_On_Board(const id: string): integer;


    // Usage
    function GetLibrary_MappingByRA(const index,id: Integer; var pList: TList): boolean;
    function GetRadarByVec(const id: Integer; var pList: TList): boolean;
    function GetSonarByVec(const id: Integer; var pList: TList): boolean;
    function GetSonarBySonobuoy(const id: Integer; var pList: TList): boolean;
    function GetESMByVec(const id: Integer; var pList: TList): boolean;
    function GetEOByVec(const id: Integer; var pList: TList): boolean;
    function GetMADByVec(const id: Integer; var pList: TList): boolean;
    function GetSonobuoyByVec(const id: Integer; var pList: TList): boolean;
    function GetSonobuoyByRPL(const id: Integer; var pList: TList): boolean;
    function GetLogisticsByVec(const id: Integer; var pList: TList): boolean;
    function GetCapabilityByVec(const id: Integer; var pList: TList): boolean; //dng

//    function GetFitted_WeaponByVec(const index,id: Integer; var pList: TList): boolean;
//    function GetFitted_WeaponByRPL(const index,id: Integer; var pList: TList): boolean;
    function GetPoint_EffectByVec(const index,id: Integer; var pList: TList): boolean;
//    function GetAcoustic_DecoyByVec(const id: Integer; var pList: TList): boolean;
//    function GetAir_BubbleByVec(const id: Integer; var pList: TList): boolean;
//    function GetChaffByVec(const id: Integer; var pList: TList): boolean;
//    function GetFloating_DecoyByVec(const id: Integer; var pList: TList): boolean;
//    function GetSelf_DefensiveByVec(const id: Integer; var pList: TList): boolean;
//    function GetTowed_JammerByVec(const id: Integer; var pList: TList): boolean;
//    function GetRadar_NoiseByVec(const id: Integer; var pList: TList): boolean;
//    function GetInfrared_DecoyByVec(const id: Integer; var pList: TList): boolean;
    function GetPlatform_InstanceBySce(const index,id: Integer;
      var pList: TList; instance_name: String): boolean;
    function GetRuntime_PlatformBySce(const id: Integer; var pList: TList): boolean;
    function GetPlatform_Instance_And_PredefinedByVehicle(const id: Integer; var pList: TList): boolean;
    function GetVehicleByRPL(const id: Integer; var pList: TList): boolean;
    function GetVehicleByHostedPlatform(const id: Integer; var pList: TList): boolean; // digunakan untuk cek apakah vehicle ini sebagai embark dari vec lain
    function GetScenario_ByRA(const id: Integer; var pList: TList): boolean;
    function GetResourceAllocation_ByEnvi(const id: Integer; var pList: TList): boolean;
    function GetEnvironment_And_Overlay_ByGameArea(const id: Integer; var pList: TList): boolean;
    function GetPlatform_Instance_SatelliteByRA(const id: Integer; var pList: TList): boolean;
    function GetVehicle_DefByMotion(const id: Integer; var pList: TList): boolean;

    function GetGlobalConverge_ByEnvi(const id: Integer; var pList: TList): boolean;
    function updateGlobalConverge(rec: TGlobal_Convergence_Zone; id: string): Integer;

    // Embark Library
//    function GetEmbark_Library(const id: Integer; var pList: TList; var rec: TBase): Boolean;
//    function GetAllEmbark_library(const id: Integer; var pList: TList; var rec: TBase ): Boolean;
//    function InsertEmbark_LIbrary(var rec: TBase): Integer;
//    function UpdateEmbark_Library(const id: string; var rec: TBase) : Integer;
//    function DeleteEmbark_Library(const id: string): Integer;
    function DeleteAllResource_Embark_Library_Mapping(const id: string): Integer;



    function GetResource_Embark_Library(const res_id: Integer;
      var pList: Tlist): Boolean;
    function InsertResource_Embark_Library(const res_id: string; var rec:
      TResource_Base_Mapping): Integer;
    function GetEmbark_LibBySce(const id: Integer; var pList: TList): boolean;
    function CekEmbarkLibrary(aName: String): Boolean;
    function GetBase_Location(const id: Integer; var pList: TList;
      var rec: TBase_Location): Boolean;
    function InsertBase_Location(var rec: TBase_Location): Integer;
    function DeleteBase_Location(const id: String): Integer;
    function CekBase_Location(aName: String): Boolean;
    function GetDomainVehicle(const Air, Amphibi, Land : Integer;
      var pList: TList): Integer;
    function GetCarriable_Vehicle(const id: Integer; var pList: TList): Boolean; //dng
    function GetPersonel(const id: Integer; var pList: TList;
      var rec: Tpersonel): Boolean;
    function GetAll_Brigade(var pList: TList): Boolean;
    function InsertPersonel_All(var rec: TPersonel; IdAction,
      IdPersonel: Integer): Integer;
    function DeletePersonel_ByIdBrigade(const id: String): Integer;
    function DeletePersonelBrigade_ByIdBrigade(const id: String): Integer;
    function GetBatalyon(const id: Integer; var pList: TList): Boolean;
    function GetKompi(const id: Integer; var pList: TList): Boolean;
    function GetPlatoon(const id: Integer; var pList: TList): Boolean;
    function GetGroup(const id: Integer; var pList: TList): Boolean;
    function UpdatePersonel_Brigade(const idx: Integer; var rec : TPersonel): Integer;
    {Plotting}
    function InsertPlotting_Definition(aRec : TrecPlotting_Definition): Integer;
    function GetAllPlotting_Definition(var pList : TList ): Boolean;
    function GetPlotting_Definition(const id : Integer ; var pList: TList;
      rec: TRuntime_Plotting_Definition) : Integer;
    function GetPlotting_DefinitionById(const id : Integer ;
      rec: TRuntime_Plotting_Definition) : Integer;
    function GetAllPlotting_DefinitionByID(const id : Integer; var pList: TList; rec: TRuntime_Plotting_Definition) : Integer;
    function DeletePlotting(const id : String) : Boolean;
    function CekPlottingInsert(aName : string):Boolean;
    function UpdatePlotting (aRec : TrecPlotting_Definition; id : string) : Boolean;
    function GetFontNameTaktis(var pList : tlist):Boolean;
    function InsertPlottingMapping(var aRec : TResource_Allocation): Integer;
    function DeleteAll_Resource_Plotting_mapping(const id : string): Integer;
    function GetAll_Resource_Plotting_Mapping(const id: Integer; var recList: TList): Boolean;
    function Get_IdResourceAlloc(const id: Integer; var recList: TList): Boolean;
    {Game Report}
    function GetAllGameReport(plist : TList; rec: TRuntime_Game_Report): integer;
    function DeleteAll_GameReport( rec: TRuntime_Game_Report): Integer;
    function DeleteByID_GameReport(const id : String): Boolean;


    function GetPersonel_Mapping(const id: Integer; var pList: TList): Boolean;
    function GetPersonel_ByRes(const id: Integer; var pList: TList): Boolean;
    function GetPersonel_Embark_Library(const id: Integer; var pList: Tlist;
      rec: TPersonel{_Embark_Library}): Boolean;
    function InsertPersonel_Embark_Library(var rec: TPersonel_Embark_Library)
      : Integer;
    function DeletePersonel_Embark_Library(const lib_id: string): Integer;
    {$ENDREGION}

  end;

  function IntToDateTime(const int: Integer):TDateTime;
  function DateTimeToInt(const dt:TDateTime):integer;

var

  dmTTT: TdmTTT;

implementation

uses Winapi.Windows;

{$R *.dfm}

{$REGION ' Converter '}

function IntToDateTime(const int: Integer):TDateTime;
begin
  result := int / (60 * 60 * 24 ) ;

end;

function DateTimeToInt(const dt: TDateTime):integer;
begin
  result := Round(frac(dt) * (60 * 60 * 24));
end;

{$ENDREGION}

{$REGION ' Exercise Section '}

{$REGION ' Scenario '}

function TdmTTT.GetAllScenarioDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TScenario_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Scenario_Definition');
    SQL.Add('ORDER BY Scenario_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TScenario_Definition.Create;

        with rec.FData do
        begin
          Scenario_Index := FieldByName('Scenario_Index').AsInteger;
          Scenario_Identifier := FieldByName('Scenario_Identifier').AsString;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetScenarioDef(const aScenarioIdentifier: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Scenario_Definition');
    SQL.Add('WHERE Scenario_Identifier LIKE ' + QuotedStr(aScenarioIdentifier));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertScenarioDef(var aRec: TRecScenario_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Scenario_Definition');
    SQL.Add('(Scenario_Identifier, Resource_Alloc_Index, scenario_code)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Scenario_Identifier) + ', ');
      SQL.Add(IntToStr(Resource_Alloc_Index) + ', ');
      SQL.Add(IntToStr(Scenario_Code) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Scenario_Definition');
      SQL.Add('WHERE Scenario_Identifier = ' + QuotedStr(Scenario_Identifier));
      Open;

      Result := RecordCount > 0;

      if not IsEmpty then
      begin
        First;

        Scenario_Index := FieldByName('Scenario_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.UpdateScenarioDef(var aRec: TRecScenario_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Scenario_Definition');

    with aRec do
    begin
      SQL.Add('SET Scenario_Identifier = ' + QuotedStr(Scenario_Identifier));
      SQL.Add(', Resource_Alloc_Index=' + IntToStr(Resource_Alloc_Index));
      SQL.Add(', scenario_code=' + IntToStr(Scenario_Code));
      SQL.Add('WHERE Scenario_Index = ' + IntToStr(Scenario_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteScenarioDef(const aScenarioID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Asset_Deployment_Definition');
    SQL.Add('WHERE Scenario_Index = ' + IntToStr(aScenarioID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('DELETE FROM Scenario_Definition');
    SQL.Add('WHERE Scenario_Index = ' + IntToStr(aScenarioID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Scenario_Definition');
    SQL.Add('WHERE Scenario_Index = ' + IntToStr(aScenarioID));
    Open;

    Result := RecordCount = 0;
  end;
end;

//==Platform Activation

function TdmTTT.GetPlatformActivation(const aDeploymentID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TPlatform_Instance;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Activation a JOIN Platform_Instance b');
    SQL.Add('ON a.Platform_Instance_Index = b.Platform_Instance_Index');
    SQL.Add('WHERE Deployment_Index = ' + IntToStr(aDeploymentID));
    SQL.Add('ORDER BY b.Instance_Name');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPlatform_Instance.Create;

        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;

        with rec.FActivation do
        begin
          Platform_Event_Index := FieldByName('Platform_Event_Index').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
          Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
          Platform_Activation_Time := FieldByName('Platform_Activation_Time').AsInteger;
          Init_Guidance_Type := FieldByName('Init_Guidance_Type').AsInteger;
          Init_Position_Latitude := FieldByName('Init_Position_Latitude').AsFloat;
          Init_Position_Longitude := FieldByName('Init_Position_Longitude').AsFloat;
          Init_Position_Cartesian_X := FieldByName('Init_Position_Cartesian_X').AsSingle;
          Init_Position_Cartesian_Y := FieldByName('Init_Position_Cartesian_Y').AsSingle;
          Init_Altitude := FieldByName('Init_Altitude').AsSingle;
          Init_Course := FieldByName('Init_Course').AsSingle;
          Init_Helm_Angle := FieldByName('Init_Helm_Angle').AsSingle;
          Init_Ground_Speed := FieldByName('Init_Ground_Speed').AsInteger;
          Init_Vertical_Speed := FieldByName('Init_Vertical_Speed').AsInteger;
          Init_Command_Altitude := FieldByName('Init_Command_Altitude').AsSingle;
          Init_Command_Course := FieldByName('Init_Command_Course').AsSingle;
          Init_Command_Helm_Angle := FieldByName('Init_Command_Helm_Angle').AsSingle;
          Init_Command_Ground := FieldByName('Init_Command_Ground').AsInteger;
          Init_Command_Vert := FieldByName('Init_Command_Vert').AsInteger;
          Deg_of_Rotation := FieldByName('Deg_of_Rotation').AsSingle;
          Radius_of_Travel := FieldByName('Radius_of_Travel').AsSingle;
          Direction_of_Travel := FieldByName('Direction_of_Travel').AsInteger;
          Circle_Latitude := FieldByName('Circle_Latitude').AsFloat;
          Circle_Longitude := FieldByName('Circle_Longitude').AsFloat;
          Circle_X := FieldByName('Circle_X').AsSingle;
          Circle_Y := FieldByName('Circle_Y').AsSingle;
          Dynamic_Circle_Range_Offset := FieldByName('Dynamic_Circle_Range_Offset').AsSingle;
          Dynamic_Circle_Angle_Offset := FieldByName('Dynamic_Circle_Angle_Offset').AsInteger;
          Dynamic_Circle_Offset_Mode := FieldByName('Dynamic_Circle_Offset_Mode').AsInteger;
          Period_Distance := FieldByName('Period_Distance').AsSingle;
          Amplitude_Distance := FieldByName('Amplitude_Distance').AsSingle;
          Zig_Zag_Leg_Type := FieldByName('Zig_Zag_Leg_Type').AsInteger;
          Target_Angle_Offset := FieldByName('Target_Angle_Offset').AsSingle;
          Target_Angle_Type := FieldByName('Target_Angle_Type').AsInteger;
          Target_Range := FieldByName('Target_Range').AsSingle;
          Guidance_Target := FieldByName('Guidance_Target').AsInteger;
          Pattern_Instance_Index := FieldByName('Pattern_Instance_Index') .AsInteger;
          Angular_Offset := FieldByName('Angular_Offset').AsSingle;
          Anchor_Cartesian_X := FieldByName('Anchor_Cartesian_X').AsSingle;
          Anchor_Cartesian_Y := FieldByName('Anchor_Cartesian_Y').AsSingle;
          Anchor_Latitude := FieldByName('Anchor_Latitude').AsSingle;
          Anchor_Longitude := FieldByName('Anchor_Longitude').AsSingle;
          Current_Drift := FieldByName('Current_Drift').AsInteger;
          Waypoint_Termination := FieldByName('Waypoint_Termination').AsInteger;
          Termination_Heading := FieldByName('Termination_Heading').AsSingle;
          Cond_List_Instance_Index := FieldByName('Cond_List_Instance_Index').AsInteger;
          Damage := FieldByName('Damage').AsSingle;
          Init_Fuel := FieldByName('Init_Fuel').AsSingle;
          Init_Lubricants := FieldByName('Init_Lubricants').AsSingle;
          Init_Freshwater := FieldByName('Init_Freshwater').AsSingle;
          Init_Water := FieldByName('Init_Water').AsSingle;
          Init_Food := FieldByName('Init_Ration').AsSingle;
          Host_ID := FieldByName('Host_ID').AsInteger;
          State_Transport := FieldByName('State_Transport').AsBoolean;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPlatformActivation(const aDeploymentID, aPlatformIndex: Integer; var aPIActivation : TRecPlatform_Activation): Integer;
var
  i : Integer;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Activation');
    SQL.Add('WHERE Deployment_Index = ' + IntToStr(aDeploymentID));
    SQL.Add('And Platform_Instance_Index = ' + IntToStr(aPlatformIndex));
    Open;

    Result := RecordCount;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin

        with aPIActivation do
        begin
          Platform_Event_Index := FieldByName('Platform_Event_Index').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
          Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
          Platform_Activation_Time := FieldByName('Platform_Activation_Time').AsInteger;
          Init_Guidance_Type := FieldByName('Init_Guidance_Type').AsInteger;
          Init_Position_Latitude := FieldByName('Init_Position_Latitude').AsFloat;
          Init_Position_Longitude := FieldByName('Init_Position_Longitude').AsFloat;
          Init_Position_Cartesian_X := FieldByName('Init_Position_Cartesian_X').AsSingle;
          Init_Position_Cartesian_Y := FieldByName('Init_Position_Cartesian_Y').AsSingle;
          Init_Altitude := FieldByName('Init_Altitude').AsSingle;
          Init_Course := FieldByName('Init_Course').AsSingle;
          Init_Helm_Angle := FieldByName('Init_Helm_Angle').AsSingle;
          Init_Ground_Speed := FieldByName('Init_Ground_Speed').AsInteger;
          Init_Vertical_Speed := FieldByName('Init_Vertical_Speed').AsInteger;
          Init_Command_Altitude := FieldByName('Init_Command_Altitude').AsSingle;
          Init_Command_Course := FieldByName('Init_Command_Course').AsSingle;
          Init_Command_Helm_Angle := FieldByName('Init_Command_Helm_Angle').AsSingle;
          Init_Command_Ground := FieldByName('Init_Command_Ground').AsInteger;
          Init_Command_Vert := FieldByName('Init_Command_Vert').AsInteger;
          Deg_of_Rotation := FieldByName('Deg_of_Rotation').AsSingle;
          Radius_of_Travel := FieldByName('Radius_of_Travel').AsSingle;
          Direction_of_Travel := FieldByName('Direction_of_Travel').AsInteger;
          Circle_Latitude := FieldByName('Circle_Latitude').AsFloat;
          Circle_Longitude := FieldByName('Circle_Longitude').AsFloat;
          Circle_X := FieldByName('Circle_X').AsSingle;
          Circle_Y := FieldByName('Circle_Y').AsSingle;
          Dynamic_Circle_Range_Offset := FieldByName('Dynamic_Circle_Range_Offset').AsSingle;
          Dynamic_Circle_Angle_Offset := FieldByName('Dynamic_Circle_Angle_Offset').AsInteger;
          Dynamic_Circle_Offset_Mode := FieldByName('Dynamic_Circle_Offset_Mode').AsInteger;
          Period_Distance := FieldByName('Period_Distance').AsSingle;
          Amplitude_Distance := FieldByName('Amplitude_Distance').AsSingle;
          Zig_Zag_Leg_Type := FieldByName('Zig_Zag_Leg_Type').AsInteger;
          Target_Angle_Offset := FieldByName('Target_Angle_Offset').AsSingle;
          Target_Angle_Type := FieldByName('Target_Angle_Type').AsInteger;
          Target_Range := FieldByName('Target_Range').AsSingle;
          Guidance_Target := FieldByName('Guidance_Target').AsInteger;
          Pattern_Instance_Index := FieldByName('Pattern_Instance_Index') .AsInteger;
          Angular_Offset := FieldByName('Angular_Offset').AsSingle;
          Anchor_Cartesian_X := FieldByName('Anchor_Cartesian_X').AsSingle;
          Anchor_Cartesian_Y := FieldByName('Anchor_Cartesian_Y').AsSingle;
          Anchor_Latitude := FieldByName('Anchor_Latitude').AsSingle;
          Anchor_Longitude := FieldByName('Anchor_Longitude').AsSingle;
          Current_Drift := FieldByName('Current_Drift').AsInteger;
          Waypoint_Termination := FieldByName('Waypoint_Termination').AsInteger;
          Termination_Heading := FieldByName('Termination_Heading').AsSingle;
          Cond_List_Instance_Index := FieldByName('Cond_List_Instance_Index').AsInteger;
          Damage := FieldByName('Damage').AsSingle;
          Init_Fuel := FieldByName('Init_Fuel').AsSingle;
          Init_Lubricants := FieldByName('Init_Lubricants').AsSingle;
          Init_Freshwater := FieldByName('Init_Freshwater').AsSingle;
          Init_Water := FieldByName('Init_Water').AsSingle;
          Init_Food := FieldByName('Init_Ration').AsSingle;
          Host_ID := FieldByName('Host_ID').AsInteger;
          State_Transport := FieldByName('State_Transport').AsBoolean;
        end;

        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPlatformActivationByTransport(const aDeploymentID, aPlatformIndex: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TPlatform_Instance;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Activation');
    SQL.Add('WHERE Deployment_Index = ' + IntToStr(aDeploymentID));
    SQL.Add('And Host_ID = ' + IntToStr(aPlatformIndex));
    SQL.Add('ORDER BY Instance_Name');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPlatform_Instance.Create;

        with rec.FActivation do
        begin
          Platform_Event_Index := FieldByName('Platform_Event_Index').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
          Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
          Platform_Activation_Time := FieldByName('Platform_Activation_Time').AsInteger;
          Init_Guidance_Type := FieldByName('Init_Guidance_Type').AsInteger;
          Init_Position_Latitude := FieldByName('Init_Position_Latitude').AsFloat;
          Init_Position_Longitude := FieldByName('Init_Position_Longitude').AsFloat;
          Init_Position_Cartesian_X := FieldByName('Init_Position_Cartesian_X').AsSingle;
          Init_Position_Cartesian_Y := FieldByName('Init_Position_Cartesian_Y').AsSingle;
          Init_Altitude := FieldByName('Init_Altitude').AsSingle;
          Init_Course := FieldByName('Init_Course').AsSingle;
          Init_Helm_Angle := FieldByName('Init_Helm_Angle').AsSingle;
          Init_Ground_Speed := FieldByName('Init_Ground_Speed').AsInteger;
          Init_Vertical_Speed := FieldByName('Init_Vertical_Speed').AsInteger;
          Init_Command_Altitude := FieldByName('Init_Command_Altitude').AsSingle;
          Init_Command_Course := FieldByName('Init_Command_Course').AsSingle;
          Init_Command_Helm_Angle := FieldByName('Init_Command_Helm_Angle').AsSingle;
          Init_Command_Ground := FieldByName('Init_Command_Ground').AsInteger;
          Init_Command_Vert := FieldByName('Init_Command_Vert').AsInteger;
          Deg_of_Rotation := FieldByName('Deg_of_Rotation').AsSingle;
          Radius_of_Travel := FieldByName('Radius_of_Travel').AsSingle;
          Direction_of_Travel := FieldByName('Direction_of_Travel').AsInteger;
          Circle_Latitude := FieldByName('Circle_Latitude').AsFloat;
          Circle_Longitude := FieldByName('Circle_Longitude').AsFloat;
          Circle_X := FieldByName('Circle_X').AsSingle;
          Circle_Y := FieldByName('Circle_Y').AsSingle;
          Dynamic_Circle_Range_Offset := FieldByName('Dynamic_Circle_Range_Offset').AsSingle;
          Dynamic_Circle_Angle_Offset := FieldByName('Dynamic_Circle_Angle_Offset').AsInteger;
          Dynamic_Circle_Offset_Mode := FieldByName('Dynamic_Circle_Offset_Mode').AsInteger;
          Period_Distance := FieldByName('Period_Distance').AsSingle;
          Amplitude_Distance := FieldByName('Amplitude_Distance').AsSingle;
          Zig_Zag_Leg_Type := FieldByName('Zig_Zag_Leg_Type').AsInteger;
          Target_Angle_Offset := FieldByName('Target_Angle_Offset').AsSingle;
          Target_Angle_Type := FieldByName('Target_Angle_Type').AsInteger;
          Target_Range := FieldByName('Target_Range').AsSingle;
          Guidance_Target := FieldByName('Guidance_Target').AsInteger;
          Pattern_Instance_Index := FieldByName('Pattern_Instance_Index') .AsInteger;
          Angular_Offset := FieldByName('Angular_Offset').AsSingle;
          Anchor_Cartesian_X := FieldByName('Anchor_Cartesian_X').AsSingle;
          Anchor_Cartesian_Y := FieldByName('Anchor_Cartesian_Y').AsSingle;
          Anchor_Latitude := FieldByName('Anchor_Latitude').AsSingle;
          Anchor_Longitude := FieldByName('Anchor_Longitude').AsSingle;
          Current_Drift := FieldByName('Current_Drift').AsInteger;
          Waypoint_Termination := FieldByName('Waypoint_Termination').AsInteger;
          Termination_Heading := FieldByName('Termination_Heading').AsSingle;
          Cond_List_Instance_Index := FieldByName('Cond_List_Instance_Index').AsInteger;
          Damage := FieldByName('Damage').AsSingle;
          Init_Fuel := FieldByName('Init_Fuel').AsSingle;
          Init_Lubricants := FieldByName('Init_Lubricants').AsSingle;
          Init_Freshwater := FieldByName('Init_Freshwater').AsSingle;
          Init_Water := FieldByName('Init_Water').AsSingle;
          Init_Food := FieldByName('Init_Ration').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertPlatformActivation(var aRec: TRecPlatform_Activation): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Platform_Activation');
    SQL.Add('(Deployment_Index, Platform_Instance_Index,');
    SQL.Add('Platform_Activation_Time, Init_Guidance_Type,');
    SQL.Add('Init_Position_Latitude, Init_Position_Longitude,');
    SQL.Add('Init_Position_Cartesian_X, Init_Position_Cartesian_Y,');
    SQL.Add('Init_Altitude, Init_Course, Init_Helm_Angle, Init_Ground_Speed,');
    SQL.Add('Init_Vertical_Speed, Init_Command_Altitude, Init_Command_Course,');
    SQL.Add('Init_Command_Helm_Angle, Init_Command_Ground, Init_Command_Vert,');
    SQL.Add('Deg_of_Rotation, Radius_of_Travel, Direction_of_Travel,');
    SQL.Add('Circle_Latitude, Circle_Longitude, Circle_X, Circle_Y,');
    SQL.Add('Dynamic_Circle_Range_Offset, Dynamic_Circle_Angle_Offset,');
    SQL.Add('Dynamic_Circle_Offset_Mode, Period_Distance, Amplitude_Distance,');
    SQL.Add('Zig_Zag_Leg_Type, Target_Angle_Offset, Target_Angle_Type,');
    SQL.Add('Target_Range,');

    if aRec.Guidance_Target <> 0 then
      SQL.Add('Guidance_Target,');

    if aRec.Pattern_Instance_Index <> 0 then
      SQL.Add('Pattern_Instance_Index,');

    SQL.Add('Angular_Offset, Anchor_Cartesian_X, Anchor_Cartesian_Y,');
    SQL.Add('Anchor_Latitude, Anchor_Longitude, Current_Drift,');
    SQL.Add('Waypoint_Termination, Termination_Heading, Host_ID, State_Transport,');

    if aRec.Cond_List_Instance_Index <> 0 then
      SQL.Add('Cond_List_Instance_Index,');

    SQL.Add('Damage, Init_Fuel, Init_Lubricants, Init_Freshwater, Init_Water,');
    SQL.Add('Init_Ration)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Deployment_Index) + ', ');
      SQL.Add(IntToStr(Platform_Instance_Index) + ', ');
      SQL.Add(IntToStr(Platform_Activation_Time) + ', ');
      SQL.Add(IntToStr(Init_Guidance_Type) + ', ');
      SQL.Add(FloatToStr(Init_Position_Latitude) + ', ');
      SQL.Add(FloatToStr(Init_Position_Longitude) + ', ');
      SQL.Add(FloatToStr(Init_Position_Cartesian_X) + ', ');
      SQL.Add(FloatToStr(Init_Position_Cartesian_Y) + ', ');
      SQL.Add(FloatToStr(Init_Altitude) + ', ');
      SQL.Add(FloatToStr(Init_Course) + ', ');
      SQL.Add(FloatToStr(Init_Helm_Angle) + ', ');
      SQL.Add(IntToStr(Init_Ground_Speed) + ', ');
      SQL.Add(IntToStr(Init_Vertical_Speed) + ', ');
      SQL.Add(FloatToStr(Init_Command_Altitude) + ', ');
      SQL.Add(FloatToStr(Init_Command_Course) + ', ');
      SQL.Add(FloatToStr(Init_Command_Helm_Angle) + ', ');
      SQL.Add(IntToStr(Init_Command_Ground) + ', ');
      SQL.Add(IntToStr(Init_Command_Vert) + ', ');
      SQL.Add(FloatToStr(Deg_of_Rotation) + ', ');
      SQL.Add(FloatToStr(Radius_of_Travel) + ', ');
      SQL.Add(IntToStr(Direction_of_Travel) + ', ');
      SQL.Add(FloatToStr(Circle_Latitude) + ', ');
      SQL.Add(FloatToStr(Circle_Longitude) + ', ');
      SQL.Add(FloatToStr(Circle_X) + ', ');
      SQL.Add(FloatToStr(Circle_Y) + ', ');
      SQL.Add(FloatToStr(Dynamic_Circle_Range_Offset) + ', ');
      SQL.Add(IntToStr(Dynamic_Circle_Angle_Offset) + ', ');
      SQL.Add(IntToStr(Dynamic_Circle_Offset_Mode) + ', ');
      SQL.Add(FloatToStr(Period_Distance) + ', ');
      SQL.Add(FloatToStr(Amplitude_Distance) + ', ');
      SQL.Add(IntToStr(Zig_Zag_Leg_Type) + ', ');
      SQL.Add(FloatToStr(Target_Angle_Offset) + ', ');
      SQL.Add(IntToStr(Target_Angle_Type) + ', ');
      SQL.Add(FloatToStr(Target_Range) + ', ');

      if Guidance_Target <> 0 then
        SQL.Add(IntToStr(Guidance_Target)+', ');

      if Pattern_Instance_Index <> 0 then
        SQL.Add(IntToStr(Pattern_Instance_Index) + ', ');

      SQL.Add(FloatToStr(Angular_Offset) + ', ');
      SQL.Add(FloatToStr(Anchor_Cartesian_X) + ', ');
      SQL.Add(FloatToStr(Anchor_Cartesian_Y) + ', ');
      SQL.Add(FloatToStr(Anchor_Latitude) + ', ');
      SQL.Add(FloatToStr(Anchor_Longitude) + ', ');
      SQL.Add(IntToStr(Current_Drift) + ', ');
      SQL.Add(IntToStr(Waypoint_Termination) + ', ');
      SQL.Add(FloatToStr(Termination_Heading) + ', ');
      SQL.Add(IntToStr(Host_ID) + ', ');
      SQL.Add(BoolToStr(State_Transport) + ', ');

      if Cond_List_Instance_Index <> 0 then
        SQL.Add(IntToStr(Cond_List_Instance_Index) + ', ');

      SQL.Add(FloatToStr(Damage) + ', ');
      SQL.Add(FloatToStr(Init_Fuel) + ', ');
      SQL.Add(FloatToStr(Init_Lubricants) + ', ');
      SQL.Add(FloatToStr(Init_Freshwater) + ', ');
      SQL.Add(FloatToStr(Init_Water) + ', ');
      SQL.Add(FloatToStr(Init_Food) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Activation');

    with aRec do
    begin
      SQL.Add('WHERE Deployment_Index = ' + IntToStr(Deployment_Index));
      SQL.Add('AND Platform_Instance_Index = ' +
        IntToStr(Platform_Instance_Index));
    end;

    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Platform_Event_Index := FieldByName('Platform_Event_Index')
        .AsInteger;
    end;
  end;
end;

function TdmTTT.UpdatePlatformActivation(var aRec: TRecPlatform_Activation): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Platform_Activation');

    with aRec do
    begin
      SQL.Add('SET Platform_Activation_Time = ' + IntToStr(Platform_Activation_Time));
      SQL.Add(', Init_Guidance_Type = ' + IntToStr(Init_Guidance_Type));
      SQL.Add(', Init_Position_Latitude = ' + FloatToStr(Init_Position_Latitude));
      SQL.Add(', Init_Position_Longitude = ' + FloatToStr(Init_Position_Longitude));
      SQL.Add(', Init_Position_Cartesian_X = ' + FloatToStr(Init_Position_Cartesian_X));
      SQL.Add(', Init_Position_Cartesian_Y = ' + FloatToStr(Init_Position_Cartesian_Y));
      SQL.Add(', Init_Altitude = ' + FloatToStr(Init_Altitude));
      SQL.Add(', Init_Course = ' + FloatToStr(Init_Course));

      SQL.Add(',Init_Fuel =' + FloatToStr(Init_Fuel));
      SQL.Add(',Init_Lubricants =' + FloatToStr(Init_Lubricants));
      SQL.Add(',Init_Freshwater =' + FloatToStr(Init_Freshwater));
      SQL.Add(',Init_Water =' + FloatToStr(Init_Water));
      SQL.Add(',Init_Ration =' + FloatToStr(Init_Food));

      SQL.Add(', Init_Helm_Angle = ' + FloatToStr(Init_Helm_Angle));
      SQL.Add(', Init_Ground_Speed = ' + IntToStr(Init_Ground_Speed));
      SQL.Add(', Init_Vertical_Speed = ' + IntToStr(Init_Vertical_Speed));
      SQL.Add(', Init_Command_Altitude = ' + FloatToStr(Init_Command_Altitude));
      SQL.Add(', Init_Command_Course = ' + FloatToStr(Init_Command_Course));
      SQL.Add(', Init_Command_Helm_Angle = ' + FloatToStr(Init_Command_Helm_Angle));
      SQL.Add(', Init_Command_Ground = ' + IntToStr(Init_Command_Ground));
      SQL.Add(', Init_Command_Vert = ' + IntToStr(Init_Command_Vert));
      SQL.Add(', Deg_of_Rotation = ' + FloatToStr(Deg_of_Rotation));
      SQL.Add(', Radius_of_Travel = ' + FloatToStr(Radius_of_Travel));
      SQL.Add(', Direction_of_Travel = ' + IntToStr(Direction_of_Travel));
      SQL.Add(', Circle_Latitude = ' + FloatToStr(Circle_Latitude));
      SQL.Add(', Circle_Longitude = ' + FloatToStr(Circle_Longitude));
      SQL.Add(', Circle_X = ' + FloatToStr(Circle_X));
      SQL.Add(', Circle_Y = ' + FloatToStr(Circle_Y));
      SQL.Add(', Dynamic_Circle_Range_Offset = ' + FloatToStr(Dynamic_Circle_Range_Offset));
      SQL.Add(', Dynamic_Circle_Angle_Offset = ' + IntToStr(Dynamic_Circle_Angle_Offset));
      SQL.Add(', Dynamic_Circle_Offset_Mode = ' + IntToStr(Dynamic_Circle_Offset_Mode));
      SQL.Add(', Period_Distance = ' + FloatToStr(Period_Distance));
      SQL.Add(', Amplitude_Distance = ' + FloatToStr(Amplitude_Distance));
      SQL.Add(', Zig_Zag_Leg_Type = ' + IntToStr(Zig_Zag_Leg_Type));
      SQL.Add(', Target_Angle_Offset = ' + FloatToStr(Target_Angle_Offset));
      SQL.Add(', Target_Angle_Type = ' + IntToStr(Target_Angle_Type));
      SQL.Add(', Target_Range = ' + FloatToStr(Target_Range));

      if Guidance_Target <> 0 then
        SQL.Add(', Guidance_Target = ' + IntToStr(Guidance_Target));

      if Pattern_Instance_Index <> 0 then
        SQL.Add(', Pattern_Instance_Index = ' + IntToStr(Pattern_Instance_Index));

      SQL.Add(', Angular_Offset = ' + FloatToStr(Angular_Offset));
      SQL.Add(', Anchor_Cartesian_X = ' + FloatToStr(Anchor_Cartesian_X));
      SQL.Add(', Anchor_Cartesian_Y = ' + FloatToStr(Anchor_Cartesian_Y));
      SQL.Add(', Anchor_Latitude = ' + FloatToStr(Anchor_Latitude));
      SQL.Add(', Anchor_Longitude = ' + FloatToStr(Anchor_Longitude));
      SQL.Add(', Current_Drift = ' + IntToStr(Current_Drift));
      SQL.Add(', Waypoint_Termination = ' + IntToStr(Waypoint_Termination));
      SQL.Add(', Termination_Heading = ' + FloatToStr(Termination_Heading));
      SQL.Add(', Host_ID = ' + IntToStr(Host_ID));
      SQL.Add(', State_Transport = ' + BoolToStr(State_Transport));

      if Cond_List_Instance_Index <> 0 then
        SQL.Add(', Cond_List_Instance_Index = ' + IntToStr(Cond_List_Instance_Index));

      SQL.Add(', Damage = ' + FloatToStr(Damage));
      SQL.Add('WHERE Deployment_Index = ' + IntToStr(Deployment_Index));
      SQL.Add('AND Platform_Instance_Index = ' + IntToStr(Platform_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateHostIdPlatformActivation(var aDeploymentIndex, aHostID : Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Platform_Activation');
    SQL.Add('SET Host_ID = 0');
    SQL.Add(', State_Transport = 0');
    SQL.Add('WHERE Deployment_Index = ' + IntToStr(aDeploymentIndex));
    SQL.Add('AND Host_ID = ' + IntToStr(aHostID));

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeletePlatformActivation(const aDeleteType: Byte;const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Activation');

    case aDeleteType of
      1: SQL.Add('WHERE Deployment_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Platform_Event_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Activation');

    case aDeleteType of
      1: SQL.Add('WHERE Deployment_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Platform_Event_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

//=Asset Deployment

function TdmTTT.GetAssetDeployment(const aScenarioID: Integer;var aResult: TAsset_Deployment): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Scenario_Definition a JOIN Asset_Deployment_Definition b');
    SQL.Add('ON a.Scenario_Index = b.Scenario_Index');
    SQL.Add('WHERE a.Scenario_Index = ' + IntToStr(aScenarioID));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      with aResult.FData do
      begin
        Deployment_Index := FieldByName('Deployment_Index').AsInteger;
        Deployment_Identifier := FieldByName('Deployment_Identifier').AsString;
        Scenario_Index := FieldByName('Scenario_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.InsertAssetDeployment(var aRec: TRecAsset_Deployment_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Asset_Deployment_Definition');
    SQL.Add('(Deployment_Identifier, Scenario_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Deployment_Identifier) + ', ');
      SQL.Add(IntToStr(Scenario_Index) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Asset_Deployment_Definition');

    with aRec do
    begin
      SQL.Add('WHERE Deployment_Identifier = ' +
        QuotedStr(Deployment_Identifier));
      SQL.Add('AND Scenario_Index = ' + IntToStr(Scenario_Index));
    end;

    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Deployment_Index := FieldByName('Deployment_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateAssetDeployment(var aRec: TRecAsset_Deployment_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Asset_Deployment_Definition');

    with aRec do
    begin
      SQL.Add('SET Deployment_Identifier = ' + QuotedStr(Deployment_Identifier));
      SQL.Add(', Scenario_Index = ' + IntToStr(Scenario_Index));
      SQL.Add('WHERE Deployment_Index = ' + IntToStr(Deployment_Index));
      ExecSQL;
    end;
  end;
end;

//==Cubicle Group Assignment

function TdmTTT.GetCubicleGroupAssignmentResidu(const aResourceAllocID, aForce,aDeploymentID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TCubicle_Group_Assignment;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Instance');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
    SQL.Add('AND Force_Designation = ' + IntToStr(aForce));
    SQL.Add('AND Platform_Instance_Index NOT IN (');
    SQL.Add('SELECT Platform_Instance_Index ');
    SQL.Add('FROM Cubicle_Group_Assignment ');
    SQL.Add('WHERE Deployment_Index = ' + IntToStr(aDeploymentID) + ')');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;

        with rec.FPlatform do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetCubicleGroupAssignment(const aCubicleGroupID: Integer;var aList: TList): Integer;
var
  i : Integer;
  rec : TCubicle_Group_Assignment;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM PlatForm_Instance a JOIN Cubicle_group_Assignment b');
    SQL.Add('ON a.Platform_Instance_Index = b.Platform_Instance_Index');
    SQL.Add('WHERE b.Group_Index = ' + IntToStr(aCubicleGroupID));
    SQL.Add('ORDER BY b.Command_Priority');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;

        with rec.FCubicle do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Group_Index := FieldByName('Group_Index').AsInteger;
          Command_Priority := FieldByName('Command_Priority').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
        end;

        with rec.FPlatform do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger; // byte
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetCubicleGroupAssignment( const aPlatformIndex: Integer): Integer;

begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM PlatForm_Instance a JOIN Cubicle_group_Assignment b');
    SQL.Add('ON a.Platform_Instance_Index = b.Platform_Instance_Index');
    SQL.Add('WHERE a.Platform_Instance_Index = ' + IntToStr(aPlatformIndex));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertCubicleGroupAssignment(var aRec: TRecCubicle_Group_Assignment): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Cubicle_Group_Assignment');
    SQL.Add('(Platform_Instance_Index, Group_Index, Command_Priority,');
    SQL.Add('Deployment_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Platform_Instance_Index) + ', ');
      SQL.Add(IntToStr(Group_Index) + ', ');
      SQL.Add(IntToStr(Command_Priority) + ', ');
      SQL.Add(IntToStr(Deployment_Index) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateCubicleGroupAssignment(var aRec: TRecCubicle_Group_Assignment): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Cubicle_Group_Assignment');

    with aRec do
    begin
      SQL.Add('SET Group_Index = ' + IntToStr(Group_Index));
      SQL.Add(', Command_Priority = ' + IntToStr(Command_Priority));
      SQL.Add(', Deployment_Index = ' + IntToStr(Deployment_Index));
      SQL.Add('WHERE Platform_Instance_Index = ' +
        IntToStr(Platform_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteCubicleGroupAssignment(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Cubicle_Group_Assignment');

    case aDeleteType of
      1: SQL.Add('WHERE Deployment_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Group_Index = ' + IntToStr(aIndex));
      3: SQL.Add('WHERE Platform_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Cubicle_Group_Assignment');

    case aDeleteType of
      1: SQL.Add('WHERE Deployment_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Group_Index = ' + IntToStr(aIndex));
      3: SQL.Add('WHERE Platform_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

    //==Cubicle Group Channel Assignment

function TdmTTT.GetCubicleGroupChannelAssignmentResidu(const aResourceAllocID,aGroupIndex: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TCubicle_Group_Assignment;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM External_Communication_Channel');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
    SQL.Add('AND Comms_Channel_Index NOT IN (');
    SQL.Add('SELECT Comms_Channel_Index');
    SQL.Add('FROM Cubicle_Group_Channel_Assgnmnt');
    SQL.Add('WHERE Group_Index = ' + IntToStr(aGroupIndex) + ')');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;

//        with rec.FExComm do
//        begin
//          Comms_Channel_Index := FieldByName('Comms_Channel_Index').AsInteger;
//          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
//          Channel_Number := FieldByName('Channel_Number').AsInteger;
//          Channel_Identifier := FieldByName('Channel_Identifier').AsString;
//          Comms_Band := FieldByName('Comms_Band').AsInteger;
//          Channel_Freq := FieldByName('Channel_Freq').AsFloat;
//          Channel_Security := FieldByName('Channel_Security').AsInteger;
//          Channel_Code := FieldByName('Channel_Code').AsString;
//        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetCubicleGroupChannelAssignment(const aCubicleGroupID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TCubicle_Group_Assignment;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM External_Communication_Channel a JOIN Cubicle_Group_Channel_Assgnmnt b');
    SQL.Add('ON a.Comms_Channel_Index = b.Comms_Channel_Index');
    SQL.Add('WHERE b.Group_Index = ' + IntToStr(aCubicleGroupID));
    SQL.Add('ORDER BY b.Channel_Slot');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;

        with rec.FChannel do
        begin
          Group_Index := FieldByName('Group_Index').AsInteger;
          Channel_Slot := FieldByName('Channel_Slot').AsInteger;
          Comms_Channel_Index := FieldByName('Comms_Channel_Index').AsInteger;
        end;

//        with rec.FExComm do
//        begin
//          Comms_Channel_Index := FieldByName('Comms_Channel_Index').AsInteger;
//          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
//          Channel_Number := FieldByName('Channel_Number').AsInteger;
//          Channel_Identifier := FieldByName('Channel_Identifier').AsString;
//          Comms_Band := FieldByName('Comms_Band').AsInteger;
//          Channel_Freq := FieldByName('Channel_Freq').AsFloat;
//          Channel_Security := FieldByName('Channel_Security').AsInteger;
//          Channel_Code := FieldByName('Channel_Code').AsString;
//        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertCubicleGroupChannelAssignment(var aRec: TRecCubicle_Group_Channel_Assgnmnt): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Cubicle_Group_Channel_Assgnmnt');
    SQL.Add('(Group_Index, Channel_Slot, Comms_Channel_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Group_Index) + ', ');
      SQL.Add(IntToStr(Channel_Slot) + ', ');
      SQL.Add(IntToStr(Comms_Channel_Index) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateCubicleGroupChannelAssignment(var aRec: TRecCubicle_Group_Channel_Assgnmnt): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Cubicle_Group_Channel_Assgnmnt');

    with aRec do
    begin
      SQL.Add('SET Channel_Slot = ' + IntToStr(Channel_Slot));
      SQL.Add('WHERE Group_Index = ' + IntToStr(Group_Index));
      SQL.Add('AND Comms_Channel_Index = ' + IntToStr(Comms_Channel_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteCubicleGroupChannelAssignment(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Cubicle_Group_Channel_Assgnmnt');

    case aDeleteType of
      1:
      begin
        SQL.Add('WHERE Comms_Channel_Index IN');
        SQL.Add('(SELECT Comms_Channel_Index');
        SQL.Add('FROM Cubicle_Group_Channel_Assgnmnt a JOIN Cubicle_Group b');
        SQL.Add('ON a.Group_Index = b.Group_Index');
        SQL.Add('WHERE b.Deployment_Index = ' + IntToStr(aIndex) + ')');
      end;
      2: SQL.Add('WHERE Group_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Cubicle_Group_Channel_Assgnmnt');

    case aDeleteType of
      1:
      begin
        SQL.Add('WHERE Comms_Channel_Index IN');
        SQL.Add('(SELECT Comms_Channel_Index');
        SQL.Add('FROM Cubicle_Group_Channel_Assgnmnt a JOIN Cubicle_Group b');
        SQL.Add('ON a.Group_Index = b.Group_Index');
        SQL.Add('WHERE b.Deployment_Index = ' + IntToStr(aIndex) + ')');
      end;
      2: SQL.Add('WHERE Group_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.DeleteCubicleGroupChannelAssignment(const aGroupIndex,aCommChannelIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Cubicle_Group_Channel_Assgnmnt');
    SQL.Add('WHERE Group_Index = ' + IntToStr(aGroupIndex));
    SQL.Add('AND Comms_Channel_Index = ' + IntToStr(aCommChannelIndex));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Cubicle_Group_Channel_Assgnmnt');
    SQL.Add('WHERE Group_Index = ' + IntToStr(aGroupIndex));
    SQL.Add('AND Comms_Channel_Index = ' + IntToStr(aCommChannelIndex));
    Open;

    Result := RecordCount = 0;
  end;
end;

 //==Cubicle Group

function TdmTTT.GetCubicleGroup(const aDeploymentIndex, aForce: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TCubicle_Group_Assignment;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Cubicle_Group');
    SQL.Add('WHERE Deployment_Index = ' + IntToStr(aDeploymentIndex));

    if aForce <> -1 then
      SQL.Add('AND Force_Designation = ' + IntToStr(aForce));

    SQL.Add('ORDER BY Group_Index');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;

        with rec.FData do
        begin
          Group_Index := FieldByName('Group_Index').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
          Group_Identifier := FieldByName('Group_Identifier').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
//          Tracks_Block := FieldByName('Tracks_Block').AsInteger;
          Track_Block_Start := FieldByName('Track_Block_Start').AsInteger;
          Track_Block_End := FieldByName('Track_Block_End').AsInteger;
//          Zulu_Zulu := FieldByName('Zulu_Zulu').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetCubicleGroup(const aDeployIndex: Integer; const aIdentifier: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Cubicle_Group');
    SQL.Add('WHERE Deployment_Index = ' + IntToStr(aDeployIndex));
    SQL.Add('AND Group_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertCubicleGroup(var aRec: TRecCubicle_Group): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Cubicle_Group');
    SQL.Add('(Deployment_Index, Group_Identifier, Force_Designation,');
    SQL.Add('Track_Block_Start, Track_Block_End)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Deployment_Index) + ', ');
      SQL.Add(QuotedStr(Group_Identifier) + ', ');
      SQL.Add(IntToStr(Force_Designation) + ', ');
      SQL.Add(IntToStr(Track_Block_Start) + ', ');
      SQL.Add(IntToStr(Track_Block_End) + ')');
      ExecSQL;

      Close;
      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Cubicle_Group');
      SQL.Add('WHERE Deployment_Index = ' + IntToStr(Deployment_Index));
      SQL.Add('AND Group_Identifier = ' + QuotedStr(Group_Identifier));
      Open;

      Result := RecordCount > 0;

      if not IsEmpty then
      begin
        First;

        Group_Index := FieldByName('Group_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.UpdateCubicleGroup(var aRec: TRecCubicle_Group): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Cubicle_Group');

    with aRec do
    begin
      SQL.Add('SET Deployment_Index = ' + IntToStr(Deployment_Index));
      SQL.Add(', Group_Identifier = ' + QuotedStr(Group_Identifier));
      SQL.Add(', Force_Designation = ' + IntToStr(Force_Designation));
      SQL.Add(', Track_Block_Start = ' + IntToStr(Track_Block_Start));
      SQL.Add(', Track_Block_End = ' + IntToStr(Track_Block_End));
      SQL.Add('WHERE Group_Index = ' + IntToStr(Group_Index));
      ExecSQL;
    end;
  end;
end;

function TdmTTT.DeleteCubicleGroup(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Cubicle_Group');

    case aDeleteType of
      1: SQL.Add('WHERE Deployment_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Group_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Cubicle_Group');

    case aDeleteType of
      1: SQL.Add('WHERE Deployment_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Group_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;


{$ENDREGION}

{$REGION ' Resource Allocation '}

function TdmTTT.GetAllResourceAllocationDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TResource_Allocation;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Resource_Allocation');
    SQL.Add('ORDER BY Allocation_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TResource_Allocation.Create;

        with rec.FData do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier')
            .AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetResourceAllocationDef(const aResAllocID: Integer; var aResult: TResource_Allocation): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Resource_Allocation');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResAllocID));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aResult := TResource_Allocation.Create;

      with aResult.FData do
      begin
        Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
        Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Role_List_Index := FieldByName('Role_List_Index').AsInteger;
        Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        D_Day := FieldByName('D_Day').AsFloat;
      end;
    end;
  end;
end;

function TdmTTT.InsertResourceAllocationDef(var aRec: TRecResource_Allocation): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Resource_Allocation');
    SQL.Add('(Allocation_Identifier, Game_Enviro_Index, Defaults_Index,');
    SQL.Add('Role_List_Index, Game_Start_Time, D_Day)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Allocation_Identifier) + ', ');
      SQL.Add(IntToStr(Game_Enviro_Index) + ', ');
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(IntToStr(Role_List_Index) + ', ');
      SQL.Add(FloatToStr(Game_Start_Time) + ', ');
      SQL.Add(FloatToStr(D_Day) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Resource_Allocation');
      SQL.Add('WHERE Allocation_Identifier = ' +
        QuotedStr(Allocation_Identifier));
      Open;

      Result := RecordCount > 0;

      if not IsEmpty then
      begin
        First;

        Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.UpdateResourceAllocationDef( var aRec: TRecResource_Allocation): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Resource_Allocation');

    with aRec do
    begin
      SQL.Add('SET Allocation_Identifier = ' + QuotedStr(Allocation_Identifier));
      SQL.Add(', Game_Enviro_Index = ' + IntToStr(Game_Enviro_Index));
      SQL.Add(', Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add(', Role_List_Index = ' + IntToStr(Role_List_Index));
      SQL.Add(', Game_Start_Time = ' + FloatToStr(Game_Start_Time));
      SQL.Add(', D_Day = ' + FloatToStr(D_Day));
      SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteResourceAllocationDef(const aResAllocID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Allocation');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResAllocID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Resource_Allocation');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResAllocID));
    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Platform Instance '}

function TdmTTT.GetPlatformInstance(const aResourceAllocID, aPlatformType, aGetType: Integer; aName: string): Integer;
var
  i : Integer;
  rec : TPlatform_Instance;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Instance');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
    SQL.Add('AND Platform_Type = ' + IntToStr(aPlatformType));

    case aGetType of
      1: SQL.Add('AND Instance_Name = ' + QuotedStr(aName));
      2: SQL.Add('AND Track_ID = ' + QuotedStr(aName));
    end;

    SQL.Add('ORDER BY Instance_Name');
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetPlatformInstance(const aResourceAllocID, aPlatformType, aForce: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TPlatform_Instance;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Instance');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));

    if aPlatformType <> -1 then
      SQL.Add('AND Platform_Type = ' + IntToStr(aPlatformType));

    if aForce <> -1 then
      SQL.Add('AND Force_Designation = ' + IntToStr(aForce));

    SQL.Add('ORDER BY Instance_Name');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPlatform_Instance.Create;

        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
          vbs_class_name := FieldByName('vbs_class_name').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPlatformInstanceCount(const aPlatformType,aPlatformIndex: Integer): Integer;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Instance');
    SQL.Add('WHERE Platform_Type = ' + IntToStr(aPlatformType));

    case aPlatformType of
      1: SQL.Add('AND Vehicle_Index = ' + IntToStr(aPlatformIndex));
      2: SQL.Add('AND Missile_Index = ' + IntToStr(aPlatformIndex));
      3: SQL.Add('AND Torpedo_Index = ' + IntToStr(aPlatformIndex));
      4: SQL.Add('AND Sonobuoy_Index = ' + IntToStr(aPlatformIndex));
      5: SQL.Add('AND Mine_Index = ' + IntToStr(aPlatformIndex));
      6: SQL.Add('AND Satellite_Index = ' + IntToStr(aPlatformIndex));
    end;

    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetPlatFormInstance(const aPlatformID: Integer;var aResult: TPlatform_Instance): Boolean;
begin
  Result := False;
  aResult := nil;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Instance');
    SQL.Add('WHERE Platform_Instance_Index = ' + IntToStr(aPlatformID));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aResult := TPlatform_Instance.Create;

      with aResult.FData do
      begin
        Platform_Instance_Index := FieldByName('Platform_Instance_Index')
          .AsInteger;
        Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
        Platform_Type := FieldByName('Platform_Type').AsInteger;
        Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
        Missile_Index := FieldByName('Missile_Index').AsInteger;
        Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
        Mine_Index := FieldByName('Mine_Index').AsInteger;
        Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        Satellite_Index := FieldByName('Satellite_Index').AsInteger;
        Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        Instance_Name := FieldByName('Instance_Name').AsString;
        Force_Designation := FieldByName('Force_Designation').AsInteger;
        Track_ID := FieldByName('Track_ID').AsString;
      end;
    end;
  end;
end;

function TdmTTT.GetPlatFormInstance(const aCubicleGroupID: Integer;var aList: TList): Integer;
var
  i : Integer;
  rec : TCubicle_Group_Assignment;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM PlatForm_Instance a JOIN Cubicle_group_Assignment b');
    SQL.Add('ON a.Platform_Instance_Index = b.Platform_Instance_Index');
    SQL.Add('WHERE b.Group_Index = ' + IntToStr(aCubicleGroupID));
    SQL.Add('ORDER BY a.Instance_Name');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;

        with rec.FCubicle do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Group_Index := FieldByName('Group_Index').AsInteger;
          Command_Priority := FieldByName('Command_Priority').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
        end;

        with rec.FPlatform do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger; // byte
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertPlatformInstance( var aRec: TRecPlatform_Instance): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Platform_Instance');
    SQL.Add('(Resource_Alloc_Index, Platform_Type,');

    with aRec do
    begin
      case Platform_Type of
        1: SQL.Add('Vehicle_Index,');
        2: SQL.Add('Missile_Index,');
        3: SQL.Add('Torpedo_Index,');
        4: SQL.Add('Sonobuoy_Index,');
        5: SQL.Add('Mine_Index,');
        6: SQL.Add('Satellite_Index,');
      end;

      SQL.Add('Instance_Name, Force_Designation, Track_ID, vbs_class_name)');
      SQL.Add('VALUES (');
      SQL.Add(IntToStr(Resource_Alloc_Index) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');

      case Platform_Type of
        1: SQL.Add(IntToStr(Vehicle_Index) + ', ');
        2: SQL.Add(IntToStr(Missile_Index) + ', ');
        3: SQL.Add(IntToStr(Torpedo_Index) + ', ');
        4: SQL.Add(IntToStr(Sonobuoy_Index) + ', ');
        5: SQL.Add(IntToStr(Mine_Index) + ', ');
        6: SQL.Add(IntToStr(Satellite_Index) + ', ');
      end;

      SQL.Add(QuotedStr(Instance_Name) + ', ');
      SQL.Add(IntToStr(Force_Designation) + ', ');
      SQL.Add(QuotedStr(Track_ID) + ', ');
      SQL.Add(QuotedStr(vbs_class_name) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Platform_Instance');
      SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index));
      SQL.Add('AND Force_Designation = ' + IntToStr(Force_Designation));

      case Platform_Type of
        1: SQL.Add('AND Vehicle_Index = ' + IntToStr(Vehicle_Index));
        2: SQL.Add('AND Missile_Index = ' + IntToStr(Missile_Index));
        3: SQL.Add('AND Torpedo_Index = ' + IntToStr(Torpedo_Index));
        4: SQL.Add('AND Sonobuoy_Index = ' + IntToStr(Sonobuoy_Index));
        5: SQL.Add('AND Mine_Index = ' + IntToStr(Mine_Index));
        6: SQL.Add('AND Satellite_Index = ' + IntToStr(Satellite_Index));
      end;

      Open;

      Result := RecordCount > 0;

      if not IsEmpty then
      begin
        Last; //Kayanya ini mas, ada fungsinya di data.db
//        First;

        Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.UpdatePlatformInstance(var aRec: TRecPlatform_Instance): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Platform_Instance ');

    with aRec do
    begin
      SQL.Add('SET Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));

      case Platform_Type of
        1: SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
        2: SQL.Add(', Missile_Index = ' + IntToStr(Missile_Index));
        3: SQL.Add(', Torpedo_Index = ' + IntToStr(Torpedo_Index));
        4: SQL.Add(', Sonobuoy_Index = ' + IntToStr(Sonobuoy_Index));
        5: SQL.Add(', Mine_Index = ' + IntToStr(Mine_Index));
        6: SQL.Add(', Satellite_Index = ' + IntToStr(Satellite_Index));
      end;

      SQL.Add(', Instance_Name = ' + QuotedStr(Instance_Name));
      SQL.Add(', Force_Designation = ' + IntToStr(Force_Designation));
      SQL.Add(', Track_ID = ' + QuotedStr(Track_ID));
      SQL.Add('WHERE Platform_Instance_Index = ' +
        IntToStr(Platform_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeletePlatformInstance(const aDeleteType: Byte;const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Instance');

    case aDeleteType of
      1: SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Platform_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Instance');

    case aDeleteType of
      1: SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Platform_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' RPL Mapping '}

function TdmTTT.GetResourceRPLMapping(const aResourceAllocID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TResource_Library_Mapping;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Resource_Library_Mapping a JOIN Runtime_Platform_Library b');
    SQL.Add('ON a.Library_Index = b.Platform_Library_Index');
    SQL.Add('WHERE a.Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TResource_Library_Mapping.Create;

        with rec.FData do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertResourceRPLMapping(var aRec: TRecResource_Library_Mapping): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Resource_Library_Mapping ');
    SQL.Add('(Resource_Alloc_Index, Library_Index) ');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Resource_Alloc_Index) + ', ');
      SQL.Add(IntToStr(Library_Index) + ') ');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Resource_Library_Mapping');
      SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index));
      SQL.Add('AND Library_Index = ' + IntToStr(Library_Index));
      Open;

      Result := RecordCount > 0;
    end;
  end;
end;

function TdmTTT.DeleteResourceRPLMapping(const aDeleteType, aResourceAllocID, aLibraryID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Library_Mapping ');

    case aDeleteType of
      1: SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
      2:
      begin
        SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
        SQL.Add('AND Library_Index = ' + IntToStr(aLibraryID));
      end;
    end;
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT * FROM Resource_Library_Mapping');

    case aDeleteType of
      1: SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
      2:
      begin
        SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
        SQL.Add('AND Library_Index = ' + IntToStr(aLibraryID));
      end;
    end;
    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Overlays Mapping '}

function TdmTTT.InsertResourceOverlayMapping(var aRec: TRecResource_Overlay_Mapping): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Resource_Overlay_Mapping');
    SQL.Add('(Resource_Alloc_Index, Overlay_Index, Force_Designation)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Resource_Alloc_Index) + ', ');
      SQL.Add(IntToStr(Overlay_Index) + ', ');
      SQL.Add(IntToStr(Force_Designation) + ') ');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Resource_Overlay_Mapping');
      SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index));
      SQL.Add('AND Overlay_Index = ' + IntToStr(Overlay_Index));
      Open;

      Result := RecordCount > 0;

      if not IsEmpty then
      begin
        First;

        Overlay_Instance_Index := FieldByName('Overlay_Instance_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.DeleteResourceOverlayMapping(const aDeleteType: Byte;const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Overlay_Mapping');

    case aDeleteType of
      1: SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Overlay_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Resource_Overlay_Mapping');

    case aDeleteType of
      1: SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Overlay_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.GetResourceOverlayMapping(const aResourceAllocID, aForce: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TResource_Overlay_Mapping;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Overlay_Mapping a JOIN Overlay_Definition b');
    SQL.Add('ON a.Overlay_Index = b.Overlay_Index');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));

    if aForce <> 0 then
      SQL.Add('AND [Force_Designation] = ' + IntToStr(aForce));
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TResource_Overlay_Mapping.Create;
        with rec.FData do
        begin
          Overlay_Instance_Index := FieldByName('Overlay_Instance_Index').AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Overlay_Index := FieldByName('Overlay_Index').AsInteger;
          Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

{$ENDREGION}

{$REGION ' Base Mapping '}

function TdmTTT.InsertResourceBaseMapping(var aRec: TResource_Base_Mapping): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Resource_Embark_Library_Mapping');
    SQL.Add('(Resource_Alloc_Index, Embark_Library_Index, ');
    SQL.Add('Force, Longitude, Latitude ) ');
    SQL.Add('VALUES (');

    with aRec.FData do
    begin
      SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add(IntToStr(Base_Index) + ',');
      SQL.Add(IntToStr(Force) + ',');
	    SQL.Add(FloatToStr(Longitude) + ',');
	    SQL.Add(FloatToStr(Latitude)+ ')' );
      ExecSQL;
    end;
  end;
end;

function TdmTTT.UpdateResourceBaseMapping(var aRec: TRecResource_Base_Mapping): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Resource_Embark_Library_Mapping');

    with aRec do
    begin
      SQL.Add('SET Longitude = ' + FloatToStr(Longitude));
      SQL.Add(', Latitude = ' + FloatToStr(Latitude));
      SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index));
      SQL.Add('AND Embark_Library_Index = ' + IntToStr(Base_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteResourceBaseMapping(const aDeleteType: Byte; const aResourceAllocID, aIndex, aForce: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Embark_Library_Mapping');

    case aDeleteType of
      1: SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
      2:
      begin
        SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
        SQL.Add('AND Embark_Library_Index = ' + IntToStr(aIndex));
        SQL.Add('AND Force = ' + IntToStr(aForce));
      end;
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Resource_Embark_Library_Mapping');

    case aDeleteType of
      1: SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
      2:
      begin
        SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
        SQL.Add('AND Embark_Library_Index = ' + IntToStr(aIndex));
        SQL.Add('AND Force = ' + IntToStr(aForce));
      end;
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.GetResourceBaseMapping(const aResourceAllocID, aForce: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TResource_Base_Mapping;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Embark_Library_Mapping a JOIN Embark_Library b');
    SQL.Add('ON a.Embark_Library_Index = b.Embark_Library_Index');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));

    if aForce <> 0 then
      SQL.Add('AND Force = ' + IntToStr(aForce));

    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TResource_Base_Mapping.Create;
        with rec.FData do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Base_Identifier := FieldByName('Embark_Identifier').AsString;
          Base_Index := FieldByName('Embark_Library_Index').AsInteger;
          Force := FieldByName('Force').AsInteger;
          Longitude := FieldByName('Longitude').AsFloat;
          Latitude := FieldByName('Latitude').AsFloat;
          Base_Radius := FieldByName('Embark_Library_Radius').AsFloat;
          Base_TypeBase := FieldByName('Embark_Library_TypeBase').AsInteger;
          Fuel  := FieldByName('Fuel').AsFloat;
          Lubricants := FieldByName('Lubricants').AsFloat;
          FreshWater := FieldByName('Fresh_Water').AsFloat;
          Water := FieldByName('Water').AsFloat;
          Food := FieldByName('Food').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetResourceBaseMappingCount(const aResourceAllocID, aIndex: Integer): Boolean;
var
  i : Integer;
  rec : TResource_Base_Mapping;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Embark_Library_Mapping ');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
    SQL.Add('AND Embark_Library_Index = ' + IntToStr(aIndex));
    Open;

    Result := RecordCount > 0;
  end;
end;

{$ENDREGION}

{$REGION ' Waypoint Mapping '}

function TdmTTT.GetResourceWaypointMapping(const aResourceAllocID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TResource_Waypoint_Mapping;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Resource_Waypoint_Mapping a JOIN Waypoint b');
    SQL.Add('ON a.Waypoint_Index = b.Waypoint_Index');
    SQL.Add('WHERE a.Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TResource_Waypoint_Mapping.Create;

        with rec.FData do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Waypoint_Index := FieldByName('Waypoint_Index').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertResourceWaypointMapping(var aRec: TResource_Waypoint_Mapping): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Resource_Waypoint_Mapping ');
    SQL.Add('(Resource_Alloc_Index, Waypoint_Index) ');
    SQL.Add('VALUES (');

    with aRec.FData do
    begin
      SQL.Add(IntToStr(Resource_Alloc_Index) + ', ');
      SQL.Add(IntToStr(Waypoint_Index) + ') ');
      ExecSQL;
    end;
  end;
end;

function TdmTTT.DeleteResourceWaypointMapping(const aDeleteType, aResourceAllocID,aWaypointID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Waypoint_Mapping ');

    case aDeleteType of
      1: SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
      2:
      begin
        SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
        SQL.Add('AND Waypoint_Index = ' + IntToStr(aWaypointID));
      end;
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Resource_Waypoint_Mapping');

    case aDeleteType of
      1: SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
      2:
      begin
        SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(aResourceAllocID));
        SQL.Add('AND Waypoint_Index = ' + IntToStr(aWaypointID));
      end;
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Environtment '}

function TdmTTT.GetAllEnvironmentDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Environment_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Environment_Definition a LEFT JOIN Global_Convergence_Zone b');
    SQL.Add('ON a.Game_Enviro_Index = b.Game_Enviro_Index');
    SQL.Add('ORDER BY Game_Enviro_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Environment_Definition.Create;

        with rec.FData do
        begin
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Game_Enviro_Identifier := FieldByName('Game_Enviro_Identifier').AsString;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          Wind_Speed := FieldByName('Wind_Speed').AsSingle;
          Wind_Direction := FieldByName('Wind_Direction').AsSingle;
          Daytime_Visual_Modifier := FieldByName('Daytime_Visual_Modifier').AsSingle;
          Nighttime_Visual_Modifier := FieldByName('Nighttime_Visual_Modifier').AsSingle;
          Daytime_Infrared_Modifier := FieldByName('Daytime_Infrared_Modifier').AsSingle;
          Nighttime_Infrared_Modifier := FieldByName('Nighttime_Infrared_Modifier').AsSingle;
          Sunrise := FieldByName('Sunrise').AsInteger;
          Sunset := FieldByName('Sunset').AsInteger;
          Period_of_Twilight := FieldByName('Period_of_Twilight').AsInteger;
          Rain_Rate := FieldByName('Rain_Rate').AsInteger;
          Cloud_Base_Height := FieldByName('Cloud_Base_Height').AsSingle;
          Cloud_Attenuation := FieldByName('Cloud_Attenuation').AsInteger;
          Sea_State := FieldByName('Sea_State').AsInteger;
          Ocean_Current_Speed := FieldByName('Ocean_Current_Speed').AsSingle;
          Ocean_Current_Direction := FieldByName('Ocean_Current_Direction').AsSingle;
          Thermal_Layer_Depth := FieldByName('Thermal_Layer_Depth').AsSingle;
          Sound_Velocity_Type := FieldByName('Sound_Velocity_Type').AsInteger;
          Surface_Sound_Speed := FieldByName('Surface_Sound_Speed').AsSingle;
          Layer_Sound_Speed := FieldByName('Layer_Sound_Speed').AsSingle;
          Bottom_Sound_Speed := FieldByName('Bottom_Sound_Speed').AsSingle;
          Bottomloss_Coefficient := FieldByName('Bottomloss_Coefficient').AsInteger;
          Ave_Ocean_Depth := FieldByName('Ave_Ocean_Depth').AsSingle;
          CZ_Active := FieldByName('CZ_Active').AsInteger;
          Surface_Ducting_Active := FieldByName('Surface_Ducting_Active').AsInteger;
          Upper_Limit_Surface_Duct_Depth := FieldByName('Upper_Limit_Surface_Duct_Depth').AsSingle;
          Lower_Limit_Surface_Duct_Depth := FieldByName('Lower_Limit_Surface_Duct_Depth').AsSingle;
          Sub_Ducting_Active := FieldByName('Sub_Ducting_Active').AsInteger;
          Upper_Limit_Sub_Duct_Depth := FieldByName('Upper_Limit_Sub_Duct_Depth').AsSingle;
          Lower_Limit_Sub_Duct_Depth := FieldByName('Lower_Limit_Sub_Duct_Depth').AsSingle;
          Shipping_Rate := FieldByName('Shipping_Rate').AsInteger;
          Shadow_Zone_Trans_Loss := FieldByName('Shadow_Zone_Trans_Loss').AsSingle;
          Atmospheric_Refract_Modifier := FieldByName('Atmospheric_Refract_Modifier').AsSingle;
          Barometric_Pressure := FieldByName('Barometric_Pressure').AsSingle;
          Air_Temperature := FieldByName('Air_Temperature').AsSingle;
          Surface_Temperature := FieldByName('Surface_Temperature').AsSingle;
          Start_HF_Range_Gap := FieldByName('Start_HF_Range_Gap').AsSingle;
          End_HF_Range_Gap := FieldByName('End_HF_Range_Gap').AsSingle;
        end;

        with rec.FGlobal_Conv do
        begin
          Converge_Index := FieldByName('Converge_Index').AsInteger;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Occurance_Range := FieldByName('Occurance_Range').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Signal_Reduction_Term := FieldByName('Signal_Reduction_Term').AsSingle;
          Increase_per_CZ := FieldByName('Increase_per_CZ').AsSingle;
          Max_Sonar_Depth := FieldByName('Max_Sonar_Depth').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetEnvironmentDef(const aEnviIdentifier: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Environment_Definition');
    SQL.Add('WHERE Game_Enviro_Identifier LIKE ' + QuotedStr(aEnviIdentifier));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetEnvironmentDef(const aGameEnviID: Integer;var aResult: TGame_Environment_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Environment_Definition a LEFT JOIN Global_Convergence_Zone b');
    SQL.Add('ON a.Game_Enviro_Index = b.Game_Enviro_Index');
    SQL.Add('WHERE a.Game_Enviro_Index = ' + IntToStr(aGameEnviID));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aResult := TGame_Environment_Definition.Create;

      with aResult.FData do
      begin
        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
        Game_Enviro_Identifier := FieldByName('Game_Enviro_Identifier').AsString;
        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        Wind_Speed := FieldByName('Wind_Speed').AsSingle;
        Wind_Direction := FieldByName('Wind_Direction').AsSingle;
        Daytime_Visual_Modifier := FieldByName('Daytime_Visual_Modifier').AsSingle;
        Nighttime_Visual_Modifier := FieldByName('Nighttime_Visual_Modifier').AsSingle;
        Daytime_Infrared_Modifier := FieldByName('Daytime_Infrared_Modifier').AsSingle;
        Nighttime_Infrared_Modifier := FieldByName('Nighttime_Infrared_Modifier').AsSingle;
        Sunrise := FieldByName('Sunrise').AsInteger;
        Sunset := FieldByName('Sunset').AsInteger;
        Period_of_Twilight := FieldByName('Period_of_Twilight').AsInteger;
        Rain_Rate := FieldByName('Rain_Rate').AsInteger;
        Cloud_Base_Height := FieldByName('Cloud_Base_Height').AsSingle;
        Cloud_Attenuation := FieldByName('Cloud_Attenuation').AsInteger;
        Sea_State := FieldByName('Sea_State').AsInteger;
        Ocean_Current_Speed := FieldByName('Ocean_Current_Speed').AsSingle;
        Ocean_Current_Direction := FieldByName('Ocean_Current_Direction').AsSingle;
        Thermal_Layer_Depth := FieldByName('Thermal_Layer_Depth').AsSingle;
        Sound_Velocity_Type := FieldByName('Sound_Velocity_Type').AsInteger;
        Surface_Sound_Speed := FieldByName('Surface_Sound_Speed').AsSingle;
        Layer_Sound_Speed := FieldByName('Layer_Sound_Speed').AsSingle;
        Bottom_Sound_Speed := FieldByName('Bottom_Sound_Speed').AsSingle;
        Bottomloss_Coefficient := FieldByName('Bottomloss_Coefficient').AsInteger;
        Ave_Ocean_Depth := FieldByName('Ave_Ocean_Depth').AsSingle;
        CZ_Active := FieldByName('CZ_Active').AsInteger;
        Surface_Ducting_Active := FieldByName('Surface_Ducting_Active').AsInteger;
        Upper_Limit_Surface_Duct_Depth := FieldByName('Upper_Limit_Surface_Duct_Depth').AsSingle;
        Lower_Limit_Surface_Duct_Depth := FieldByName('Lower_Limit_Surface_Duct_Depth').AsSingle;
        Sub_Ducting_Active := FieldByName('Sub_Ducting_Active').AsInteger;
        Upper_Limit_Sub_Duct_Depth := FieldByName('Upper_Limit_Sub_Duct_Depth').AsSingle;
        Lower_Limit_Sub_Duct_Depth := FieldByName('Lower_Limit_Sub_Duct_Depth').AsSingle;
        Shipping_Rate := FieldByName('Shipping_Rate').AsInteger;
        Shadow_Zone_Trans_Loss := FieldByName('Shadow_Zone_Trans_Loss').AsSingle;
        Atmospheric_Refract_Modifier := FieldByName('Atmospheric_Refract_Modifier').AsSingle;
        Barometric_Pressure := FieldByName('Barometric_Pressure').AsSingle;
        Air_Temperature := FieldByName('Air_Temperature').AsSingle;
        Surface_Temperature := FieldByName('Surface_Temperature').AsSingle;
        Start_HF_Range_Gap := FieldByName('Start_HF_Range_Gap').AsSingle;
        End_HF_Range_Gap := FieldByName('End_HF_Range_Gap').AsSingle;
      end;

      with aResult.FGlobal_Conv do
      begin
        Converge_Index := FieldByName('Converge_Index').AsInteger;
        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
        Occurance_Range := FieldByName('Occurance_Range').AsSingle;
        Width := FieldByName('Width').AsSingle;
        Signal_Reduction_Term := FieldByName('Signal_Reduction_Term').AsSingle;
        Increase_per_CZ := FieldByName('Increase_per_CZ').AsSingle;
        Max_Sonar_Depth := FieldByName('Max_Sonar_Depth').AsSingle;
      end;
    end;
  end;
end;

function TdmTTT.InsertEnvironmentDef(var aRec: TRecGame_Environment_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Environment_Definition');
    SQL.Add('(Game_Enviro_Identifier, Game_Area_Index, Wind_Speed,');
    SQL.Add('Wind_Direction, Daytime_Visual_Modifier,');
    SQL.Add('Nighttime_Visual_Modifier, Daytime_Infrared_Modifier,');
    SQL.Add('Nighttime_Infrared_Modifier, Sunrise, Sunset,');
    SQL.Add('Period_of_Twilight, Rain_Rate, Cloud_Base_Height,');
    SQL.Add('Cloud_Attenuation, Sea_State, Ocean_Current_Speed,');
    SQL.Add('Ocean_Current_Direction, Thermal_Layer_Depth,');
    SQL.Add('Sound_Velocity_Type, Surface_Sound_Speed, Layer_Sound_Speed,');
    SQL.Add('Bottom_Sound_Speed, Bottomloss_Coefficient, Ave_Ocean_Depth,');
    SQL.Add('CZ_Active, Surface_Ducting_Active,');
    SQL.Add('Upper_Limit_Surface_Duct_Depth, Lower_Limit_Surface_Duct_Depth,');
    SQL.Add('Sub_Ducting_Active, Upper_Limit_Sub_Duct_Depth,');
    SQL.Add('Lower_Limit_Sub_Duct_Depth, Shipping_Rate,');
    SQL.Add('Shadow_Zone_Trans_Loss, Atmospheric_Refract_Modifier,');
    SQL.Add('Barometric_Pressure, Air_Temperature, Surface_Temperature,');
    SQL.Add('Start_HF_Range_Gap, End_HF_Range_Gap)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Game_Enviro_Identifier) + ', ');
      SQL.Add(IntToStr(Game_Area_Index) + ', ');
      SQL.Add(FloatToStr(Wind_Speed) + ', ');
      SQL.Add(FloatToStr(Wind_Direction) + ', ');
      SQL.Add(FloatToStr(Daytime_Visual_Modifier) + ', ');
      SQL.Add(FloatToStr(Nighttime_Visual_Modifier) + ', ');
      SQL.Add(FloatToStr(Daytime_Infrared_Modifier) + ', ');
      SQL.Add(FloatToStr(Nighttime_Infrared_Modifier) + ', ');
      SQL.Add(IntToStr(Sunrise) + ', ');
      SQL.Add(IntToStr(Sunset) + ', ');
      SQL.Add(IntToStr(Period_of_Twilight) + ', ');
      SQL.Add(IntToStr(Rain_Rate) + ', ');
      SQL.Add(FloatToStr(Cloud_Base_Height) + ', ');
      SQL.Add(IntToStr(Cloud_Attenuation) + ', ');
      SQL.Add(IntToStr(Sea_State) + ', ');
      SQL.Add(FloatToStr(Ocean_Current_Speed) + ', ');
      SQL.Add(FloatToStr(Ocean_Current_Direction) + ', ');
      SQL.Add(FloatToStr(Thermal_Layer_Depth) + ', ');
      SQL.Add(IntToStr(Sound_Velocity_Type) + ', ');
      SQL.Add(FloatToStr(Surface_Sound_Speed) + ', ');
      SQL.Add(FloatToStr(Layer_Sound_Speed) + ', ');
      SQL.Add(FloatToStr(Bottom_Sound_Speed) + ', ');
      SQL.Add(IntToStr(Bottomloss_Coefficient) + ', ');
      SQL.Add(FloatToStr(Ave_Ocean_Depth) + ', ');
      SQL.Add(IntToStr(CZ_Active) + ', ');
      SQL.Add(IntToStr(Surface_Ducting_Active) + ', ');
      SQL.Add(FloatToStr(Upper_Limit_Surface_Duct_Depth) + ', ');
      SQL.Add(FloatToStr(Lower_Limit_Surface_Duct_Depth) + ', ');
      SQL.Add(IntToStr(Sub_Ducting_Active) + ', ');
      SQL.Add(FloatToStr(Upper_Limit_Sub_Duct_Depth) + ', ');
      SQL.Add(FloatToStr(Lower_Limit_Sub_Duct_Depth) + ', ');
      SQL.Add(IntToStr(Shipping_Rate) + ', ');
      SQL.Add(FloatToStr(Shadow_Zone_Trans_Loss) + ', ');
      SQL.Add(FloatToStr(Atmospheric_Refract_Modifier) + ', ');
      SQL.Add(FloatToStr(Barometric_Pressure) + ', ');
      SQL.Add(FloatToStr(Air_Temperature) + ', ');
      SQL.Add(FloatToStr(Surface_Temperature) + ', ');
      SQL.Add(FloatToStr(Start_HF_Range_Gap) + ', ');
      SQL.Add(FloatToStr(End_HF_Range_Gap) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Game_Environment_Definition');
      SQL.Add('WHERE Game_Enviro_Identifier = ' +
        QuotedStr(Game_Enviro_Identifier));
      Open;

      Result := RecordCount > 0;

      if not IsEmpty then
      begin
        First;

        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.UpdateEnvironmentDef(var aRec: TRecGame_Environment_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Environment_Definition');

    with aRec do
    begin
      SQL.Add('SET Game_Enviro_Identifier = ' + QuotedStr(Game_Enviro_Identifier));
      SQL.Add(', Game_Area_Index = ' + IntToStr(Game_Area_Index));
      SQL.Add(', Wind_Speed = ' + FloatToStr(Wind_Speed));
      SQL.Add(', Wind_Direction = ' + FloatToStr(Wind_Direction));
      SQL.Add(', Daytime_Visual_Modifier = ' + FloatToStr(Daytime_Visual_Modifier));
      SQL.Add(', Nighttime_Visual_Modifier = ' + FloatToStr(Nighttime_Visual_Modifier));
      SQL.Add(', Daytime_Infrared_Modifier = ' + FloatToStr(Daytime_Infrared_Modifier));
      SQL.Add(', Nighttime_Infrared_Modifier = ' + FloatToStr(Nighttime_Infrared_Modifier));
      SQL.Add(', Sunrise = ' + IntToStr(Sunrise));
      SQL.Add(', Sunset = ' + IntToStr(Sunset));
      SQL.Add(', Period_of_Twilight = ' + IntToStr(Period_of_Twilight));
      SQL.Add(', Rain_Rate = ' + IntToStr(Rain_Rate));
      SQL.Add(', Cloud_Base_Height = ' + FloatToStr(Cloud_Base_Height));
      SQL.Add(', Cloud_Attenuation = ' + IntToStr(Cloud_Attenuation));
      SQL.Add(', Sea_State = ' + FloatToStr(Sea_State));
      SQL.Add(', Ocean_Current_Speed = ' + FloatToStr(Ocean_Current_Speed));
      SQL.Add(', Ocean_Current_Direction = ' + FloatToStr(Ocean_Current_Direction));
      SQL.Add(', Thermal_Layer_Depth = ' + FloatToStr(Thermal_Layer_Depth));
      SQL.Add(', Sound_Velocity_Type = ' + IntToStr(Sound_Velocity_Type));
      SQL.Add(', Surface_Sound_Speed = ' + FloatToStr(Nighttime_Visual_Modifier));
      SQL.Add(', Layer_Sound_Speed = ' + FloatToStr(Layer_Sound_Speed));
      SQL.Add(', Bottom_Sound_Speed = ' + FloatToStr(Bottom_Sound_Speed));
      SQL.Add(', Bottomloss_Coefficient = ' + IntToStr(Bottomloss_Coefficient));
      SQL.Add(', Ave_Ocean_Depth = ' + FloatToStr(Ave_Ocean_Depth));
      SQL.Add(', CZ_Active = ' + IntToStr(CZ_Active));
      SQL.Add(', Surface_Ducting_Active = ' + IntToStr(Surface_Ducting_Active));
      SQL.Add(', Upper_Limit_Surface_Duct_Depth = ' + FloatToStr(Upper_Limit_Surface_Duct_Depth));
      SQL.Add(', Lower_Limit_Surface_Duct_Depth = ' + FloatToStr(Lower_Limit_Surface_Duct_Depth));
      SQL.Add(', Sub_Ducting_Active = ' + IntToStr(Sub_Ducting_Active));
      SQL.Add(', Upper_Limit_Sub_Duct_Depth = ' + FloatToStr(Upper_Limit_Sub_Duct_Depth));
      SQL.Add(', Lower_Limit_Sub_Duct_Depth = ' + FloatToStr(Lower_Limit_Sub_Duct_Depth));
      SQL.Add(', Shipping_Rate = ' + IntToStr(Shipping_Rate));
      SQL.Add(', Shadow_Zone_Trans_Loss = ' + FloatToStr(Shadow_Zone_Trans_Loss));
      SQL.Add(', Atmospheric_Refract_Modifier = ' + FloatToStr(Atmospheric_Refract_Modifier));
      SQL.Add(', Barometric_Pressure = ' + FloatToStr(Barometric_Pressure));
      SQL.Add(', Air_Temperature = ' + FloatToStr(Air_Temperature));
      SQL.Add(', Surface_Temperature = ' + FloatToStr(Surface_Temperature));
      SQL.Add(', Start_HF_Range_Gap = ' + FloatToStr(Start_HF_Range_Gap));
      SQL.Add(', End_HF_Range_Gap = ' + FloatToStr(End_HF_Range_Gap));
      SQL.Add('WHERE Game_Enviro_Index = ' + IntToStr(Game_Enviro_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteEnvironmentDef(const aGameEnviID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Game_Environment_Definition');
    SQL.Add('WHERE Game_Enviro_Index = ' + IntToStr(aGameEnviID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Environment_Definition');
    SQL.Add('WHERE Game_Enviro_Index = ' + IntToStr(aGameEnviID));
    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.InsertGlobalConvergenceZone(var aRec: TRecGlobal_Convergence_Zone): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Global_Convergence_Zone');
    SQL.Add('(Game_Enviro_Index, Occurance_Range, Width,');
    SQL.Add('Signal_Reduction_Term, Increase_per_CZ, Max_Sonar_Depth)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Game_Enviro_Index) + ', ');
      SQL.Add(FloatToStr(Occurance_Range) + ', ');
      SQL.Add(FloatToStr(Width) + ', ');
      SQL.Add(FloatToStr(Signal_Reduction_Term) + ', ');
      SQL.Add(FloatToStr(Increase_per_CZ) + ', ');
      SQL.Add(FloatToStr(Max_Sonar_Depth) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Global_Convergence_Zone');
      SQL.Add('WHERE Game_Enviro_Index = ' + IntToStr(Game_Enviro_Index));
      Open;

      Result := RecordCount > 0;

      if not IsEmpty then
      begin
        First;

        Converge_Index := FieldByName('Converge_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.UpdateGlobalConvergenceZone(var aRec: TRecGlobal_Convergence_Zone): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Global_Convergence_Zone');

    with aRec do
    begin
      SQL.Add('SET Occurance_Range = ' + FloatToStr(Occurance_Range));
      SQL.Add(', Width = ' + FloatToStr(Width));
      SQL.Add(', Signal_Reduction_Term = ' + FloatToStr(Signal_Reduction_Term));
      SQL.Add(', Increase_per_CZ = ' + FloatToStr(Increase_per_CZ));
      SQL.Add(', Max_Sonar_Depth = ' + FloatToStr(Max_Sonar_Depth));
      SQL.Add('WHERE Game_Enviro_Index = ' + IntToStr(Game_Enviro_Index));
    end;

    ExecSQL;
  end;
end;

function TdmTTT.DeleteGlobalConvergenceZone(const aGameEnviID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    SQL.Clear;
    SQL.Add('DELETE FROM Global_Convergence_Zone');
    SQL.Add('WHERE Game_Enviro_Index = ' + IntToStr(aGameEnviID));
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Global_Convergence_Zone');
    SQL.Add('WHERE Game_Enviro_Index = ' + IntToStr(aGameEnviID));
    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Game Area '}

function TdmTTT.GetAllGameAreaDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Environment_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Area_Definition');
    SQL.Add('ORDER BY Game_Area_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Environment_Definition.Create;

        with rec.FGameArea do
        begin
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          Game_Area_Identifier := FieldByName('Game_Area_Identifier').AsString;
          Game_Centre_Lat := FieldByName('Game_Centre_Lat').AsFloat;
          Game_Centre_Long := FieldByName('Game_Centre_Long').AsFloat;
          Game_X_Dimension := FieldByName('Game_X_Dimension').AsFloat;
          Game_Y_Dimension := FieldByName('Game_Y_Dimension').AsFloat;
          Use_Real_World := FieldByName('Use_Real_World').AsInteger;
          Use_Artificial_Landmass := FieldByName('Use_Artificial_Landmass')
            .AsInteger;
          Detail_Map := FieldByName('Detail_Map').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterGameAreaDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TGame_Environment_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Area_Definition');
    SQL.Add('WHERE Game_Area_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Game_Area_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Environment_Definition.Create;

        with rec.FGameArea do
        begin
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          Game_Area_Identifier := FieldByName('Game_Area_Identifier').AsString;
          Game_Centre_Lat := FieldByName('Game_Centre_Lat').AsFloat;
          Game_Centre_Long := FieldByName('Game_Centre_Long').AsFloat;
          Game_X_Dimension := FieldByName('Game_X_Dimension').AsFloat;
          Game_Y_Dimension := FieldByName('Game_Y_Dimension').AsFloat;
          Use_Real_World := FieldByName('Use_Real_World').AsInteger;
          Use_Artificial_Landmass := FieldByName('Use_Artificial_Landmass')
            .AsInteger;
          Detail_Map := FieldByName('Detail_Map').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetGameAreaDef(const aAreaIdentifier: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Area_Definition');
    SQL.Add('WHERE Game_Area_Identifier = ' +
      QuotedStr(aAreaIdentifier));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetGameAreaDef(const aGameAreaID: Integer; var aResult: TGame_Area_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Area_Definition');
    SQL.Add('WHERE Game_Area_Index = ' + IntToStr(aGameAreaID));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aResult := TGame_Area_Definition.Create
      ;
      with aResult.FData do
      begin
        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        Game_Area_Identifier := FieldByName('Game_Area_Identifier').AsString;
        Game_Centre_Lat := FieldByName('Game_Centre_Lat').AsFloat;
        Game_Centre_Long := FieldByName('Game_Centre_Long').AsFloat;
        Game_X_Dimension := FieldByName('Game_X_Dimension').AsFloat;
        Game_Y_Dimension := FieldByName('Game_Y_Dimension').AsFloat;
        Use_Real_World := FieldByName('Use_Real_World').AsInteger;
        Use_Artificial_Landmass := FieldByName('Use_Artificial_Landmass').AsInteger;
        Detail_Map := FieldByName('Detail_Map').AsString;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameAreaDef(var aRec: TRecGame_Area_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Area_Definition');
    SQL.Add('(Game_Area_Identifier, Game_Centre_Lat, Game_Centre_Long,');
    SQL.Add('Game_X_Dimension, Game_Y_Dimension, Use_Real_World,');
    SQL.Add('Use_Artificial_Landmass, Detail_Map)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Game_Area_Identifier) + ', ');
      SQL.Add(FloatToStr(Game_Centre_Lat) + ', ');
      SQL.Add(FloatToStr(Game_Centre_Long) + ', ');
      SQL.Add(FloatToStr(Game_X_Dimension) + ', ');
      SQL.Add(FloatToStr(Game_Y_Dimension) + ', ');
      SQL.Add(IntToStr(Use_Real_World) + ', ');
      SQL.Add(IntToStr(Use_Artificial_Landmass) + ', ');
      SQL.Add(QuotedStr(Detail_Map) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Game_Area_Definition');
      SQL.Add('WHERE Game_Area_Identifier = ' +
        QuotedStr(Game_Area_Identifier));
      Open;

      Result := RecordCount > 0;

      if not IsEmpty then
      begin
        First;

        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.UpdateGameAreaDef(var aRec: TRecGame_Area_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Area_Definition');

    with aRec do
    begin
      SQL.Add('SET Game_Area_Identifier = ' + QuotedStr(Game_Area_Identifier));
      SQL.Add(', Game_Centre_Lat = ' + FloatToStr(Game_Centre_Lat));
      SQL.Add(', Game_Centre_Long = ' + FloatToStr(Game_Centre_Long));
      SQL.Add(', Game_X_Dimension = ' + FloatToStr(Game_X_Dimension));
      SQL.Add(', Game_Y_Dimension = ' + FloatToStr(Game_Y_Dimension));
      SQL.Add(', Use_Real_World = ' + IntToStr(Use_Real_World));
      SQL.Add(', Use_Artificial_Landmass = ' +
        IntToStr(Use_Artificial_Landmass));
      SQL.Add(', Detail_Map = ' + QuotedStr(Detail_Map));
      SQL.Add('WHERE Game_Area_Index = ' + IntToStr(Game_Area_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameAreaDef(const aGameAreaID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Game_Area_Definition');
    SQL.Add('WHERE Game_Area_Index = ' + IntToStr(aGameAreaID));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$ENDREGION}

{$REGION ' Platforms Section '}

{$REGION ' Vehicle '}

function TdmTTT.GetFilterVehicleDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TVehicle_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Vehicle_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Vehicle_Index = b.Vehicle_Index');
    SQL.Add('WHERE a.Vehicle_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Vehicle_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TVehicle_Definition.Create;

        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross').AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens').AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens').AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens').AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens').AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch').AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact').AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable').AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier').AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier').AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier').AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier').AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier').AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height').AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height').AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth').AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability').AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable').AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor').AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed').AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName('Air_Drop_Torpedo_Max_Speed').AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable').AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := FieldByName('UHF_Mid_Course_Update_Capable').AsBoolean;
          Platform_Capability_Index := FieldByName('Platform_Capability_Index').AsInteger;
          Logistics_Index := FieldByName('Logistics_Index').AsInteger;
//          SATCOM_Mid_Course_Update_Capable := FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;
          Font_id := FieldByName('font_id').AsInteger;
          VBS_Class_Name := FieldByName('vbs_class_name').AsString;
          Quantity_Group_Personal := FieldByName('Quantity_Group_Personal').AsInteger;
          GangwayPosition := FieldByName('GangwayPosition').AsInteger;
          DWT := FieldByName('DWT').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterVehicleDefByDomain(var aList: TList; aFilter: Integer): Integer;
var
  i : Integer;
  rec : TVehicle_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Vehicle_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Vehicle_Index = b.Vehicle_Index');
    SQL.Add('WHERE a.Platform_Domain = ' + IntToStr(aFilter));
    SQL.Add('ORDER BY Vehicle_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TVehicle_Definition.Create;

        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics')
            .AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross')
            .AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
            .AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact')
            .AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
            .AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName
            ('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName
            ('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName
            ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName
            ('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
            .AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
            .AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier')
            .AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
            .AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
            .AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName
            ('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
            .AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
            .AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
            .AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
            .AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName
            ('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName
            ('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName
            ('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName
            ('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName
            ('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName
            ('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName
            ('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
            .AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
            .AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName
            ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName
            ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
            .AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName
            ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName
            ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName
            ('Air_Drop_Torpedo_Max_Speed')
            .AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName
            ('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName
            ('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
            .AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName
            ('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := FieldByName
            ('UHF_Mid_Course_Update_Capable').AsBoolean;
//          SATCOM_Mid_Course_Update_Capable := FieldByName
//            ('SATCOM_Mid_Course_Update_Capable').AsBoolean;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterVehicleForLandDomain(var aList: TList; aFilter : Integer): Integer;
var
  i : Integer;
  rec : TVehicle_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Vehicle_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Vehicle_Index = b.Vehicle_Index');
    SQL.Add('WHERE a.Platform_Domain = 3 and ');

    if aFilter = 0 then
    begin
      SQL.Add('a.Platform_Category = 2 and a.Platform_Type = 0');
    end
    else
    begin
      SQL.Add('a.Platform_Category <> 2 and a.Platform_Type <> 0');
    end;

    SQL.Add('ORDER BY Vehicle_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TVehicle_Definition.Create;

        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross').AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens').AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens').AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens').AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens').AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch').AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact').AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable').AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier').AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier').AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier').AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier').AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier').AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height').AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height').AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth').AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability').AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable').AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor').AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed').AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName('Air_Drop_Torpedo_Max_Speed').AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable').AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := FieldByName('UHF_Mid_Course_Update_Capable').AsBoolean;
//          SATCOM_Mid_Course_Update_Capable := FieldByName
//            ('SATCOM_Mid_Course_Update_Capable').AsBoolean;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAllVehicleDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TVehicle_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Vehicle_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Vehicle_Index = b.Vehicle_Index');
    SQL.Add('ORDER BY Vehicle_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TVehicle_Definition.Create;

        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross').AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens').AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens').AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens').AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens').AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch').AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact').AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable').AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier').AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier').AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier').AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier').AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier').AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height').AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height').AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth').AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability').AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable').AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor').AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed').AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName('Air_Drop_Torpedo_Max_Speed').AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable').AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := FieldByName('UHF_Mid_Course_Update_Capable').AsBoolean;
          Platform_Capability_Index := FieldByName('Platform_Capability_Index').AsInteger;
          Logistics_Index := FieldByName('Logistics_Index').AsInteger;
//          SATCOM_Mid_Course_Update_Capable := FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;
          Font_id := FieldByName('font_id').AsInteger;
          VBS_Class_Name := FieldByName('vbs_class_name').AsString;
          Quantity_Group_Personal := FieldByName('Quantity_Group_Personal').AsInteger;
          GangwayPosition := FieldByName('GangwayPosition').AsInteger;
          FrontGangway := FieldByName('FrontGangway').AsBoolean;
          RearGangway := FieldByName('RearGangway').AsBoolean;
          PortGangway := FieldByName('PortGangway').AsBoolean;
          StarBoardGangway := FieldByName('StarBoardGangway').AsBoolean;
          DWT := FieldByName('DWT').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetVehicleDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Vehicle_Definition');
    SQL.Add('WHERE Vehicle_Identifier = ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetVehicleDef(const aVehicleID: Integer; var aResult: TVehicle_Definition): boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Vehicle_Definition');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;
      aResult := TVehicle_Definition.Create;

      with aResult.FData do
      begin
        Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
        Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        Platform_Domain := FieldByName('Platform_Domain').AsInteger;
        Platform_Category := FieldByName('Platform_Category').AsInteger;
        Platform_Type := FieldByName('Platform_Type').AsInteger;
        Motion_Characteristics := FieldByName('Motion_Characteristics').AsInteger;
        Length := FieldByName('Length').AsSingle;
        Width := FieldByName('Width').AsSingle;
        Height := FieldByName('Height').AsSingle;
        Draft := FieldByName('Draft').AsSingle;
        Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
        Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
        Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
        Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
        Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
        Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross').AsSingle;
        Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
        Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
        Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
        LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens').AsSingle;
        Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens').AsSingle;
        Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens').AsSingle;
        HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens').AsSingle;
        Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch').AsSingle;
        Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact').AsInteger;
        Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable').AsBoolean;
        Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
        Min_Delay_Between_Chaff_Rounds := FieldByName('Min_Delay_Between_Chaff_Rounds').AsInteger;
        Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
        SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
        CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
        TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
        IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
        AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
        Active_Acoustic_Tor_POH_Mod := FieldByName('Active_Acoustic_Tor_POH_Mod').AsSingle;
        Passive_Acoustic_Tor_POH_Mod := FieldByName('Passive_Acoustic_Tor_POH_Mod').AsSingle;
        Active_Passive_Tor_POH_Mod := FieldByName('Active_Passive_Tor_POH_Mod').AsSingle;
        Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier').AsSingle;
        Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier').AsSingle;
        Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier').AsSingle;
        Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier').AsSingle;
        Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier').AsSingle;
        Acoustic_Mine_POH_Modifier := FieldByName('Acoustic_Mine_POH_Modifier').AsSingle;
        Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height').AsSingle;
        Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height').AsSingle;
        Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth').AsSingle;
        HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
        UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
        HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
        VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
        UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
        SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
        UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
        HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
        UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
        SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
        Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
        Plat_Basing_Capability := FieldByName('Plat_Basing_Capability').AsBoolean;
        Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
        Readying_Time := FieldByName('Readying_Time').AsInteger;
        Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
        Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
        Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
        Periscope_Height_Above_Water := FieldByName('Periscope_Height_Above_Water').AsSingle;
        Periscope_Front_Radar_Xsection := FieldByName('Periscope_Front_Radar_Xsection').AsSingle;
        Periscope_Side_Radar_Xsection := FieldByName('Periscope_Side_Radar_Xsection').AsSingle;
        Periscope_Front_Vis_Xsection := FieldByName('Periscope_Front_Vis_Xsection').AsSingle;
        Periscope_Side_Vis_Xsection := FieldByName('Periscope_Side_Vis_Xsection').AsSingle;
        Periscope_Front_IR_Xsection := FieldByName('Periscope_Front_IR_Xsection').AsSingle;
        Periscope_Side_IR_Xsection := FieldByName('Periscope_Side_IR_Xsection').AsSingle;
        Engagement_Range := FieldByName('Engagement_Range').AsSingle;
        Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable').AsBoolean;
        Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
        Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor').AsInteger;
        Sonobuoy_Deploy_Max_Altitude := FieldByName('Sonobuoy_Deploy_Max_Altitude').AsInteger;
        Sonobuoy_Deploy_Min_Altitude := FieldByName('Sonobuoy_Deploy_Min_Altitude').AsInteger;
        Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed').AsInteger;
        Air_Drop_Torpedo_Max_Altitude := FieldByName('Air_Drop_Torpedo_Max_Altitude').AsInteger;
        Air_Drop_Torpedo_Min_Altitude := FieldByName('Air_Drop_Torpedo_Min_Altitude').AsInteger;
        Air_Drop_Torpedo_Max_Speed := FieldByName('Air_Drop_Torpedo_Max_Speed').AsInteger;
        TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
        HMS_Noise_Reduction_Factor := FieldByName('HMS_Noise_Reduction_Factor').AsSingle;
        TAS_Noise_Reduction_Factor := FieldByName('TAS_Noise_Reduction_Factor').AsSingle;
        Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable').AsBoolean;
        HF_Mid_Course_Update_Capable := FieldByName('HF_Mid_Course_Update_Capable').AsBoolean;
        UHF_Mid_Course_Update_Capable := FieldByName('UHF_Mid_Course_Update_Capable').AsBoolean;
        Platform_Capability_Index := FieldByName('Platform_Capability_Index').AsInteger;
        Logistics_Index := FieldByName('Logistics_Index').AsInteger;
//        SATCOM_Mid_Course_Update_Capable := FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;
        Font_id := FieldByName('font_id').AsInteger;
        VBS_Class_Name := FieldByName('vbs_class_name').AsString;
        Quantity_Group_Personal := FieldByName('Quantity_Group_Personal').AsInteger;
        GangwayPosition := FieldByName('GangwayPosition').AsInteger;
        FrontGangway := FieldByName('FrontGangway').AsBoolean;
        RearGangway := FieldByName('RearGangway').AsBoolean;
        PortGangway := FieldByName('PortGangway').AsBoolean;
        StarBoardGangway := FieldByName('StarBoardGangway').AsBoolean;
        DWT := FieldByName('DWT').AsSingle;
      end;
    end;
  end;
end;

function TdmTTT.InsertVehicleDef(var aRec: TRecVehicle_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Vehicle_Definition');
    SQL.Add('(Vehicle_Identifier, Platform_Domain, Platform_Category,');
    SQL.Add('Platform_Type, Motion_Characteristics, Length, Width, Height,');
    SQL.Add('Draft, Front_Radar_Cross, Side_Radar_Cross,');
    SQL.Add('Front_Acoustic_Cross, Side_Acoustic_Cross,Magnetic_Cross,');
    SQL.Add('Front_Visual_EO_Cross, Side_Visual_EO_Cross,');
    SQL.Add('Front_Infrared_Cross, Side_Infrared_Cross,');
    SQL.Add('LSpeed_Acoustic_Intens, Below_Cav_Acoustic_Intens,');
    SQL.Add('Above_Cav_Acoustic_Intens, HSpeed_Acoustic_Intens,');
    SQL.Add('Cavitation_Speed_Switch, Time_of_Weapon_Impact,');
    SQL.Add('Chaff_Seduction_Capable, Seduction_Mode_Prob,');
    SQL.Add('Min_Delay_Between_Chaff_Rounds, Max_Chaff_Salvo_Size,');
    SQL.Add('SARH_POH_Modifier, CG_POH_Modifier, TARH_POH_Modifier,');
    SQL.Add('IR_POH_Modifier, AR_POH_Modifier,');
    SQL.Add('Active_Acoustic_Tor_POH_Mod, Passive_Acoustic_Tor_POH_Mod,');
    SQL.Add('Active_Passive_Tor_POH_Mod, Wake_Home_POH_Modifier,');
    SQL.Add('Wire_Guide_POH_Modifier, Mag_Mine_POH_Modifier,');
    SQL.Add('Press_Mine_POH_Modifier, Impact_Mine_POH_Modifier,');
    SQL.Add('Acoustic_Mine_POH_Modifier, Sub_Comm_Antenna_Height,');
    SQL.Add('Rel_Comm_Antenna_Height, Max_Comm_Operating_Depth,');
    SQL.Add('HF_Link_Capable, UHF_Link_Capable, HF_Voice_Capable,');
    SQL.Add('VHF_Voice_Capable, UHF_Voice_Capable, SATCOM_Voice_Capable,');
    SQL.Add('UWT_Voice_Capable, HF_MHS_Capable, UHF_MHS_Capable,');
    SQL.Add('Satcom_MHS_Capable, Damage_Capacity, Plat_Basing_Capability,');
    SQL.Add('Chaff_Capability, Readying_Time, Sonobuoy_Capable,');
    SQL.Add('Nav_Light_Capable, Periscope_Depth,');
    SQL.Add('Periscope_Height_Above_Water, Periscope_Front_Radar_Xsection,');
    SQL.Add('Periscope_Side_Radar_Xsection, Periscope_Front_Vis_Xsection,');
    SQL.Add('Periscope_Side_Vis_Xsection, Periscope_Front_IR_Xsection,');
    SQL.Add('Periscope_Side_IR_Xsection, Engagement_Range,');
    SQL.Add('Auto_Air_Defense_Capable, Alert_State_Time,');
    SQL.Add('Detectability_Type, Max_Sonobuoys_To_Monitor,');
    SQL.Add('Sonobuoy_Deploy_Max_Altitude, Sonobuoy_Deploy_Min_Altitude,');
    SQL.Add('Sonobuoy_Deploy_Max_Speed, Air_Drop_Torpedo_Max_Altitude,');
    SQL.Add('Air_Drop_Torpedo_Min_Altitude, Air_Drop_Torpedo_Max_Speed,');
    SQL.Add('TMA_Rate_Factor, HMS_Noise_Reduction_Factor,');
    SQL.Add('TAS_Noise_Reduction_Factor, Infrared_Decoy_Capable,');
    SQL.Add('HF_Mid_Course_Update_Capable, UHF_Mid_Course_Update_Capable,');
    SQL.Add('Platform_Capability_Index,');
    SQL.Add('Logistics_Index,');
    SQL.Add('SATCOM_Mid_Course_Update_Capable,');
    SQL.Add('font_id, vbs_class_name, ');
    SQL.Add('Quantity_Group_Personal,');
    SQL.Add('GangwayPosition,');
    SQL.Add('FrontGangway,');
    SQL.Add('RearGangway,');
    SQL.Add('PortGangway,');
    SQL.Add('StarBoardGangway,');
    SQL.Add('DWT)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Vehicle_Identifier) + ', ');
      SQL.Add(IntToStr(Platform_Domain) + ', ');
      SQL.Add(IntToStr(Platform_Category) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');
      SQL.Add(IntToStr(Motion_Characteristics) + ', ');
      SQL.Add(FloatToStr(Length) + ', ');
      SQL.Add(FloatToStr(Width) + ', ');
      SQL.Add(FloatToStr(Height) + ', ');
      SQL.Add(FloatToStr(Draft) + ', ');
      SQL.Add(FloatToStr(Front_Radar_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Radar_Cross) + ', ');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Magnetic_Cross) + ', ');
      SQL.Add(FloatToStr(Front_Visual_EO_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Visual_EO_Cross) + ', ');
      SQL.Add(FloatToStr(Front_Infrared_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Infrared_Cross) + ', ');
      SQL.Add(FloatToStr(LSpeed_Acoustic_Intens) + ', ');
      SQL.Add(FloatToStr(Below_Cav_Acoustic_Intens) + ', ');
      SQL.Add(FloatToStr(Above_Cav_Acoustic_Intens) + ', ');
      SQL.Add(FloatToStr(HSpeed_Acoustic_Intens) + ', ');
      SQL.Add(FloatToStr(Cavitation_Speed_Switch) + ', ');
      SQL.Add(IntToStr(Time_of_Weapon_Impact) + ', ');
      SQL.Add(BoolToStr(Chaff_Seduction_Capable) + ', ');
      SQL.Add(FloatToStr(Seduction_Mode_Prob) + ', ');
      SQL.Add(IntToStr(Min_Delay_Between_Chaff_Rounds) + ', ');
      SQL.Add(IntToStr(Max_Chaff_Salvo_Size) + ', ');
      SQL.Add(FloatToStr(SARH_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(CG_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(TARH_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(IR_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(AR_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(Active_Acoustic_Tor_POH_Mod) + ', ');
      SQL.Add(FloatToStr(Passive_Acoustic_Tor_POH_Mod) + ', ');
      SQL.Add(FloatToStr(Active_Passive_Tor_POH_Mod) + ', ');
      SQL.Add(FloatToStr(Wake_Home_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(Wire_Guide_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(Mag_Mine_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(Press_Mine_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(Impact_Mine_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(Acoustic_Mine_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(Sub_Comm_Antenna_Height) + ', ');
      SQL.Add(FloatToStr(Rel_Comm_Antenna_Height) + ', ');
      SQL.Add(FloatToStr(Max_Comm_Operating_Depth) + ', ');
      SQL.Add(BoolToStr(HF_Link_Capable) + ', ');
      SQL.Add(BoolToStr(UHF_Link_Capable) + ', ');
      SQL.Add(BoolToStr(HF_Voice_Capable) + ', ');
      SQL.Add(BoolToStr(VHF_Voice_Capable) + ', ');
      SQL.Add(BoolToStr(UHF_Voice_Capable) + ', ');
      SQL.Add(BoolToStr(SATCOM_Voice_Capable) + ', ');
      SQL.Add(BoolToStr(UWT_Voice_Capable) + ', ');
      SQL.Add(BoolToStr(HF_MHS_Capable) + ', ');
      SQL.Add(BoolToStr(UHF_MHS_Capable) + ', ');
      SQL.Add(BoolToStr(SATCOM_MHS_Capable) + ', ');
      SQL.Add(IntToStr(Damage_Capacity) + ', ');
      SQL.Add(BoolToStr(Plat_Basing_Capability) + ', ');
      SQL.Add(BoolToStr(Chaff_Capability) + ', ');
      SQL.Add(IntToStr(Readying_Time) + ', ');
      SQL.Add(BoolToStr(Sonobuoy_Capable) + ', ');
      SQL.Add(BoolToStr(Nav_Light_Capable) + ', ');
      SQL.Add(FloatToStr(Periscope_Depth) + ', ');
      SQL.Add(FloatToStr(Periscope_Height_Above_Water) + ', ');
      SQL.Add(FloatToStr(Periscope_Front_Radar_Xsection) + ', ');
      SQL.Add(FloatToStr(Periscope_Side_Radar_Xsection) + ', ');
      SQL.Add(FloatToStr(Periscope_Front_Vis_Xsection) + ', ');
      SQL.Add(FloatToStr(Periscope_Side_Vis_Xsection) + ', ');
      SQL.Add(FloatToStr(Periscope_Front_IR_Xsection) + ', ');
      SQL.Add(FloatToStr(Periscope_Side_IR_Xsection) + ', ');
      SQL.Add(FloatToStr(Engagement_Range) + ', ');
      SQL.Add(BoolToStr(Auto_Air_Defense_Capable) + ', ');
      SQL.Add(FloatToStr(Alert_State_Time) + ', ');
      SQL.Add(IntToStr(Detectability_Type) + ', ');
      SQL.Add(IntToStr(Max_Sonobuoys_To_Monitor) + ', ');
      SQL.Add(IntToStr(Sonobuoy_Deploy_Max_Altitude) + ', ');
      SQL.Add(IntToStr(Sonobuoy_Deploy_Min_Altitude) + ', ');
      SQL.Add(IntToStr(Sonobuoy_Deploy_Max_Speed) + ', ');
      SQL.Add(IntToStr(Air_Drop_Torpedo_Max_Altitude) + ', ');
      SQL.Add(IntToStr(Air_Drop_Torpedo_Min_Altitude) + ', ');
      SQL.Add(IntToStr(Air_Drop_Torpedo_Max_Speed) + ', ');
      SQL.Add(FloatToStr(TMA_Rate_Factor) + ', ');
      SQL.Add(FloatToStr(HMS_Noise_Reduction_Factor) + ', ');
      SQL.Add(FloatToStr(TAS_Noise_Reduction_Factor) + ', ');
      SQL.Add(BoolToStr(Infrared_Decoy_Capable) + ', ');
      SQL.Add(BoolToStr(HF_Mid_Course_Update_Capable) + ', ');
      SQL.Add(BoolToStr(UHF_Mid_Course_Update_Capable) + ', ');
      SQL.Add(IntToStr(Platform_Capability_Index) + ', ');
      SQL.Add(IntToStr(Logistics_Index) + ', ');
      SQL.Add(BoolToStr(SATCOM_Mid_Course_Update_Capable) + ',');
      SQL.Add(IntToStr(Font_id) + ', ');
      SQL.Add(QuotedStr(VBS_Class_Name) + ', ');
      SQL.Add(IntToStr(Quantity_Group_Personal) + ', ');
      SQL.Add(IntToStr(GangwayPosition) + ', ');
      SQL.Add(BoolToStr(FrontGangway) + ', ');
      SQL.Add(BoolToStr(RearGangway) + ', ');
      SQL.Add(BoolToStr(PortGangway) + ', ');
      SQL.Add(BoolToStr(StarBoardGangway) + ', ');
      SQL.Add(FloatToStr(DWT) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Vehicle_Definition');
      SQL.Add('WHERE Vehicle_Identifier = ' + QuotedStr(Vehicle_Identifier));
      Open;

      Result := RecordCount > 0;

      if not IsEmpty then
      begin
        First;

        Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.UpdateVehicleDef(var aRec: TRecVehicle_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Vehicle_Definition');

    with aRec do
    begin
      SQL.Add('SET Vehicle_Identifier = ' + QuotedStr(Vehicle_Identifier));
      SQL.Add(', Platform_Domain = ' + IntToStr(Platform_Domain));
      SQL.Add(', Platform_Category = ' + IntToStr(Platform_Category));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));
      SQL.Add(', Motion_Characteristics = ' + IntToStr(Motion_Characteristics));
      SQL.Add(', Length = ' + FloatToStr(Length));
      SQL.Add(', Width = ' + FloatToStr(Width));
      SQL.Add(', Height = ' + FloatToStr(Height));
      SQL.Add(', Draft = ' + FloatToStr(Draft));
      SQL.Add(', Front_Radar_Cross = ' + FloatToStr(Front_Radar_Cross));
      SQL.Add(', Side_Radar_Cross = ' + FloatToStr(Side_Radar_Cross));
      SQL.Add(', Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross));
      SQL.Add(', Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross));
      SQL.Add(', Magnetic_Cross = ' + FloatToStr(Magnetic_Cross));
      SQL.Add(', Front_Visual_EO_Cross = ' + FloatToStr(Front_Visual_EO_Cross));
      SQL.Add(', Side_Visual_EO_Cross = ' + FloatToStr(Side_Visual_EO_Cross));
      SQL.Add(', Front_Infrared_Cross = ' + FloatToStr(Front_Infrared_Cross));
      SQL.Add(', Side_Infrared_Cross = ' + FloatToStr(Side_Infrared_Cross));
      SQL.Add(', LSpeed_Acoustic_Intens = ' + FloatToStr(LSpeed_Acoustic_Intens));
      SQL.Add(', Below_Cav_Acoustic_Intens = ' + FloatToStr(Below_Cav_Acoustic_Intens));
      SQL.Add(', Above_Cav_Acoustic_Intens = ' + FloatToStr(Above_Cav_Acoustic_Intens));
      SQL.Add(', HSpeed_Acoustic_Intens = ' + FloatToStr(HSpeed_Acoustic_Intens));
      SQL.Add(', Cavitation_Speed_Switch = ' + FloatToStr(Cavitation_Speed_Switch));
      SQL.Add(', Time_of_Weapon_Impact = ' + IntToStr(Time_of_Weapon_Impact));
      SQL.Add(', Chaff_Seduction_Capable = ' + BoolToStr(Chaff_Seduction_Capable));
      SQL.Add(', Seduction_Mode_Prob = ' + FloatToStr(Seduction_Mode_Prob));
      SQL.Add(', Min_Delay_Between_Chaff_Rounds = ' + IntToStr(Min_Delay_Between_Chaff_Rounds));
      SQL.Add(', Max_Chaff_Salvo_Size = ' + IntToStr(Max_Chaff_Salvo_Size));
      SQL.Add(', SARH_POH_Modifier = ' + FloatToStr(SARH_POH_Modifier));
      SQL.Add(', CG_POH_Modifier = ' + FloatToStr(CG_POH_Modifier));
      SQL.Add(', TARH_POH_Modifier = ' + FloatToStr(TARH_POH_Modifier));
      SQL.Add(', IR_POH_Modifier = ' + FloatToStr(IR_POH_Modifier));
      SQL.Add(', AR_POH_Modifier = ' + FloatToStr(AR_POH_Modifier));
      SQL.Add(', Active_Acoustic_Tor_POH_Mod = ' + FloatToStr(Active_Acoustic_Tor_POH_Mod));
      SQL.Add(', Passive_Acoustic_Tor_POH_Mod = ' + FloatToStr(Passive_Acoustic_Tor_POH_Mod));
      SQL.Add(', Active_Passive_Tor_POH_Mod = ' + FloatToStr(Active_Passive_Tor_POH_Mod));
      SQL.Add(', Wake_Home_POH_Modifier = ' + FloatToStr(Wake_Home_POH_Modifier));
      SQL.Add(', Wire_Guide_POH_Modifier = ' + FloatToStr(Wire_Guide_POH_Modifier));
      SQL.Add(', Mag_Mine_POH_Modifier = ' + FloatToStr(Mag_Mine_POH_Modifier));
      SQL.Add(', Press_Mine_POH_Modifier = ' + FloatToStr(Press_Mine_POH_Modifier));
      SQL.Add(', Impact_Mine_POH_Modifier = ' + FloatToStr(Impact_Mine_POH_Modifier));
      SQL.Add(', Acoustic_Mine_POH_Modifier = ' + FloatToStr(Acoustic_Mine_POH_Modifier));
      SQL.Add(', Sub_Comm_Antenna_Height = ' + FloatToStr(Sub_Comm_Antenna_Height));
      SQL.Add(', Rel_Comm_Antenna_Height = ' + FloatToStr(Rel_Comm_Antenna_Height));
      SQL.Add(', Max_Comm_Operating_Depth = ' + FloatToStr(Max_Comm_Operating_Depth));
      SQL.Add(', HF_Link_Capable = ' + BoolToStr(HF_Link_Capable));
      SQL.Add(', UHF_Link_Capable = ' + BoolToStr(UHF_Link_Capable));
      SQL.Add(', HF_Voice_Capable = ' + BoolToStr(HF_Voice_Capable));
      SQL.Add(', VHF_Voice_Capable = ' + BoolToStr(VHF_Voice_Capable));
      SQL.Add(', UHF_Voice_Capable = ' + BoolToStr(UHF_Voice_Capable));
      SQL.Add(', SATCOM_Voice_Capable = ' + BoolToStr(SATCOM_Voice_Capable));
      SQL.Add(', UWT_Voice_Capable = ' + BoolToStr(UWT_Voice_Capable));
      SQL.Add(', HF_MHS_Capable = ' + BoolToStr(HF_MHS_Capable));
      SQL.Add(', UHF_MHS_Capable = ' + BoolToStr(UHF_MHS_Capable));
      SQL.Add(', SATCOM_MHS_Capable = ' + BoolToStr(SATCOM_MHS_Capable));
      SQL.Add(', Damage_Capacity = ' + IntToStr(Damage_Capacity));
      SQL.Add(', Plat_Basing_Capability = ' + BoolToStr(Plat_Basing_Capability));
      SQL.Add(', Chaff_Capability = ' + BoolToStr(Chaff_Capability));
      SQL.Add(', Readying_Time = ' + IntToStr(Readying_Time));
      SQL.Add(', Sonobuoy_Capable = ' + BoolToStr(Sonobuoy_Capable));
      SQL.Add(', Nav_Light_Capable = ' + BoolToStr(Nav_Light_Capable));
      SQL.Add(', Periscope_Depth = ' + FloatToStr(Periscope_Depth));
      SQL.Add(', Periscope_Height_Above_Water = ' + FloatToStr(Periscope_Height_Above_Water));
      SQL.Add(', Periscope_Front_Radar_Xsection = ' + FloatToStr(Periscope_Front_Radar_Xsection));
      SQL.Add(', Periscope_Side_Radar_Xsection = ' + FloatToStr(Periscope_Side_Radar_Xsection));
      SQL.Add(', Periscope_Front_Vis_Xsection = ' + FloatToStr(Periscope_Front_Vis_Xsection));
      SQL.Add(', Periscope_Side_Vis_Xsection = ' +  FloatToStr(Periscope_Side_Vis_Xsection));
      SQL.Add(', Periscope_Front_IR_Xsection = ' + FloatToStr(Periscope_Front_IR_Xsection));
      SQL.Add(', Periscope_Side_IR_Xsection = ' + FloatToStr(Periscope_Side_IR_Xsection));
      SQL.Add(', Engagement_Range = ' + FloatToStr(Engagement_Range));
      SQL.Add(', Auto_Air_Defense_Capable = ' + BoolToStr(Auto_Air_Defense_Capable));
      SQL.Add(', Alert_State_Time = ' + FloatToStr(Alert_State_Time));
      SQL.Add(', Detectability_Type = ' + IntToStr(Detectability_Type));
      SQL.Add(', Max_Sonobuoys_To_Monitor = ' + IntToStr(Max_Sonobuoys_To_Monitor));
      SQL.Add(', Sonobuoy_Deploy_Max_Altitude = ' + IntToStr(Sonobuoy_Deploy_Max_Altitude));
      SQL.Add(', Sonobuoy_Deploy_Min_Altitude = ' + IntToStr(Sonobuoy_Deploy_Min_Altitude));
      SQL.Add(', Sonobuoy_Deploy_Max_Speed = ' + IntToStr(Sonobuoy_Deploy_Max_Speed));
      SQL.Add(', Air_Drop_Torpedo_Max_Altitude = ' + IntToStr(Air_Drop_Torpedo_Max_Altitude));
      SQL.Add(', Air_Drop_Torpedo_Min_Altitude = ' + IntToStr(Air_Drop_Torpedo_Min_Altitude));
      SQL.Add(', Air_Drop_Torpedo_Max_Speed = ' + IntToStr(Air_Drop_Torpedo_Max_Speed));
      SQL.Add(', TMA_Rate_Factor = ' + FloatToStr(TMA_Rate_Factor));
      SQL.Add(', HMS_Noise_Reduction_Factor = ' + FloatToStr(HMS_Noise_Reduction_Factor));
      SQL.Add(', TAS_Noise_Reduction_Factor = ' + FloatToStr(TAS_Noise_Reduction_Factor));
      SQL.Add(', Infrared_Decoy_Capable = ' + BoolToStr(Infrared_Decoy_Capable));
      SQL.Add(', HF_Mid_Course_Update_Capable = ' + BoolToStr(HF_Mid_Course_Update_Capable));
      SQL.Add(', UHF_Mid_Course_Update_Capable = ' + BoolToStr(UHF_Mid_Course_Update_Capable));
      SQL.Add(', Platform_Capability_Index = ' + IntToStr(Platform_Capability_Index));
      SQL.Add(', Logistics_Index = ' + IntToStr(Logistics_Index));
      SQL.Add(', SATCOM_Mid_Course_Update_Capable = ' + BoolToStr(SATCOM_Mid_Course_Update_Capable));
      SQL.Add(', font_id = ' + IntToStr(Font_id));
      SQL.Add(', vbs_class_name = ' + QuotedStr(VBS_Class_Name));
      SQL.Add(', Quantity_Group_Personal = ' + IntToStr(Quantity_Group_Personal));
      SQL.Add(', GangwayPosition = ' + IntToStr(GangwayPosition));
      SQL.Add(', FrontGangway = ' + BoolToStr(FrontGangway));
      SQL.Add(', RearGangway = ' + BoolToStr(RearGangway));
      SQL.Add(', PortGangway = ' + BoolToStr(PortGangway));
      SQL.Add(', StarBoardGangway = ' + BoolToStr(StarBoardGangway));
      SQL.Add(', DWT = ' + FloatToStr(DWT));
      SQL.Add('WHERE Vehicle_Index = ' + IntToStr(Vehicle_Index));
      ExecSQL;
    end;
    Result := True;
  end;
end;

function TdmTTT.DeleteVehicleDef(const aVehicleID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Vehicle_Definition');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.GetAllPlatformInstanceIdentifier(const aVehicleID: Integer; var aList: TList): Boolean;
var
  i : Integer;
  rec : TPlatform_Instance_Identifier;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Instance_Identifier');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    Open;

    Result := RecordCount > 0;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPlatform_Instance_Identifier.Create;

        with rec.FData do
        begin
          Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          vbs_class_name := FieldByName('vbs_class_name').AsString;
          model_path := FieldByName('model_path').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPlatformInstanceIdentifier(const aVehicleID: Integer; const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Instance_Identifier');
    SQL.Add('WHERE Instance_Identifier = ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertPlatformInstanceIdentifier( var aRec: TRecPlatform_Instance_Identifier): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    with aRec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Platform_Instance_Identifier');
      SQL.Add('(Vehicle_Index, Instance_Identifier, vbs_class_name, model_path)');
      SQL.Add('VALUES (');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(QuotedStr(Instance_Identifier) + ',');
      SQL.Add(QuotedStr(vbs_class_name) + ',');
      SQL.Add(QuotedStr(model_path) + ')');
      ExecSQL;

      Result := True;
    end;
  end;
end;

function TdmTTT.UpdatePlatformInstanceIdentifier(var aRec: TRecPlatform_Instance_Identifier): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Platform_Instance_Identifier');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier  = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', vbs_class_name = ' + QuotedStr(vbs_class_name));
      SQL.Add(', model_path = ' + QuotedStr(model_path));
      SQL.Add('WHERE Instance_Ident_Index = ' + IntToStr(Instance_Ident_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeletePlatformInstance(const aIndex: integer): Boolean;
var
  rec: TPlatform_Instance;
begin
  result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Platform_Instance ');
      SQL.Add('WHERE Platform_Instance_Index =' + IntToStr(aIndex));
      ExecSQL;

      Result := True;
    end;
  end;
end;

function TdmTTT.DeletePlatformInstanceIdentifier(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Instance_Identifier');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Instance_Ident_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.GetHostPlatformCount(const aVehicleID: Integer): Integer;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Hosted_Platform');
    SQL.Add('WHERE Hosted_Vehicle_Index = ' + IntToStr(aVehicleID));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetAllVehicleAtHostPlatform(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec: THosted_Platform;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Hosted_Platform a RIGHT JOIN Vehicle_Definition b');
    SQL.Add('ON a.Hosted_Vehicle_Index = b.Vehicle_Index ');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY b.Vehicle_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := THosted_Platform.Create;

        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Hosted_Vehicle_Index := FieldByName('Hosted_Vehicle_Index').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;

  end;
end;

function TdmTTT.GetHostedPlatform(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : THosted_Platform;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Hosted_Platform a JOIN Vehicle_Definition b ');
    SQL.Add('ON a.Vehicle_Index = b.Vehicle_Index ');
    SQL.Add('WHERE a.Hosted_Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY b.Vehicle_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := THosted_Platform.Create;

        with rec.FData do
        begin
          FieldByName('Vehicle_Index').AsInteger;
          Slave_Index := FieldByName('Slave_Index').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Hosted_Vehicle_Index := FieldByName('Hosted_Vehicle_Index').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics')
            .AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross')
            .AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
            .AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact')
            .AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
            .AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName
            ('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName
            ('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName
            ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName
            ('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
            .AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
            .AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier')
            .AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
            .AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
            .AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName
            ('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
            .AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
            .AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
            .AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
            .AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName
            ('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName
            ('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName
            ('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName
            ('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName
            ('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName
            ('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName
            ('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
            .AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
            .AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName
            ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName
            ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
            .AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName
            ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName
            ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName
            ('Air_Drop_Torpedo_Max_Speed')
            .AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName
            ('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName
            ('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
            .AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName
            ('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := FieldByName
            ('UHF_Mid_Course_Update_Capable').AsBoolean;
          // SATCOM_Mid_Course_Update_Capable    := FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertHostedPlatform(var aRec: TRecHosted_Platform): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Hosted_Platform');
    SQL.Add('(Vehicle_Index, Hosted_Vehicle_Index, Quantity)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Hosted_Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Quantity) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Hosted_Platform');
      SQL.Add('WHERE Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add('AND Hosted_Vehicle_Index = ' + IntToStr(Hosted_Vehicle_Index));
      Open;

      Slave_Index := FieldByName('Slave_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateHostedPlatform(var aRec: TRecHosted_Platform): Boolean;
begin
  Result := True;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Hosted_Platform ');

    with aRec do
    begin
      SQL.Add('SET Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Hosted_Vehicle_Index = ' + IntToStr(Hosted_Vehicle_Index));
      SQL.Add(', Quantity = ' + IntToStr(Quantity));
      SQL.Add('WHERE Slave_Index = ' + IntToStr(Slave_Index));
    end;

    ExecSQL;
  end;
end;

function TdmTTT.DeleteHelicopterLimit(const aVehicleID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Helicopter_Land_Launch_Limits');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    ExecSQL;
    Result := True;
  end;
end;

function TdmTTT.DeleteHostedPlatform(const aDeleteType: Byte; aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Hosted_Platform');

    case aDeleteType of
      1: SQL.Add('WHERE Hosted_Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Slave_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;
  end;
end;

{$ENDREGION}

{$ENDREGION}

{$REGION ' Sensor Section '}

{$REGION ' Radar Definition '}

function TdmTTT.GetAllRadarDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TRadar_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Radar_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Radar_Index = b.Radar_Index');
    SQL.Add('ORDER BY a.Radar_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TRadar_On_Board.Create;

        with rec.FDef do
        begin
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Radar_Identifier := FieldByName('Radar_Identifier').AsString;
          Radar_Emitter := FieldByName('Radar_Emitter').AsString;
          Radar_Type := FieldByName('Radar_Type').AsInteger;
          Frequency := FieldByName('Frequency').AsSingle;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Radar_Power := FieldByName('Radar_Power').AsSingle;
          Detection_Range := FieldByName('Detection_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Unambig_Detect_Range := FieldByName('Max_Unambig_Detect_Range').AsSingle;
          IFF_Capability := FieldByName('IFF_Capability').AsBoolean;
          Altitude_Data_Capability := FieldByName('Altitude_Data_Capability').AsBoolean;
          Ground_Speed_Data_Capability := FieldByName('Ground_Speed_Data_Capability').AsBoolean;
          Heading_Data_Capability := FieldByName('Heading_Data_Capability').AsBoolean;
          Plat_Type_Recog_Capability := FieldByName('Plat_Type_Recog_Capability').AsBoolean;
          Plat_Class_Recog_Capability := FieldByName('Plat_Class_Recog_Capability').AsBoolean;
          Clutter_Rejection := FieldByName('Clutter_Rejection').AsSingle;
          Anti_Jamming_Capable := FieldByName('Anti_Jamming_Capable').AsBoolean;
          Curve_Definition_Index := FieldByName('Curve_Definition_Index').AsInteger;
          Second_Vert_Coverage := FieldByName('Second_Vert_Coverage').AsBoolean;
          Jamming_A_Resistant := FieldByName('Jamming_A_Resistant').AsBoolean;
          Jamming_B_Resistant := FieldByName('Jamming_B_Resistant').AsBoolean;
          Jamming_C_Resistant := FieldByName('Jamming_C_Resistant').AsBoolean;
          Anti_Jamming_A_Resistant := FieldByName('Anti_Jamming_A_Resistant').AsBoolean;
          Anti_Jamming_B_Resistant := FieldByName('Anti_Jamming_B_Resistant').AsBoolean;
          Anti_Jamming_C_Resistant := FieldByName('Anti_Jamming_C_Resistant').AsBoolean;
          Anti_Jamming_Range_Reduction := FieldByName('Anti_Jamming_Range_Reduction').AsSingle;
          Beam_Width := FieldByName('Beam_Width').AsSingle;
          Sector_Scan_Capable := FieldByName('Sector_Scan_Capable').AsBoolean;
          Off_Axis_Jammer_Reduction := FieldByName('Off_Axis_Jammer_Reduction').AsSingle;
          Num_FCR_Channels := FieldByName('Num_FCR_Channels').AsInteger;
          Radar_Spot_Number := FieldByName('Radar_Spot_Number').AsInteger;
          Radar_Horizon_Factor := FieldByName('Radar_Horizon_Factor').AsSingle;
          Main_Lobe_Gain := FieldByName('Main_Lobe_Gain').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor').AsSingle;
          ECCM_Type := FieldByName('ECCM_Type').AsInteger;
          MTI_Capable := FieldByName('MTI_Capable').AsBoolean;
          MTI_MinTargetSpeed := FieldByName('MTI_MinTargetSpeed').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterRadarDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TRadar_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Radar_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Radar_Index = b.Radar_Index');
    SQL.Add('WHERE a.Radar_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY a.Radar_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TRadar_On_Board.Create;

        with rec.FDef do
        begin
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Radar_Identifier := FieldByName('Radar_Identifier').AsString;
          Radar_Emitter := FieldByName('Radar_Emitter').AsString;
          Radar_Type := FieldByName('Radar_Type').AsInteger;
          Frequency := FieldByName('Frequency').AsSingle;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Radar_Power := FieldByName('Radar_Power').AsSingle;
          Detection_Range := FieldByName('Detection_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Unambig_Detect_Range := FieldByName('Max_Unambig_Detect_Range').AsSingle;
          IFF_Capability := FieldByName('IFF_Capability').AsBoolean;
          Altitude_Data_Capability := FieldByName('Altitude_Data_Capability').AsBoolean;
          Ground_Speed_Data_Capability := FieldByName('Ground_Speed_Data_Capability').AsBoolean;
          Heading_Data_Capability := FieldByName('Heading_Data_Capability').AsBoolean;
          Plat_Type_Recog_Capability := FieldByName('Plat_Type_Recog_Capability').AsBoolean;
          Plat_Class_Recog_Capability := FieldByName('Plat_Class_Recog_Capability').AsBoolean;
          Clutter_Rejection := FieldByName('Clutter_Rejection').AsSingle;
          Anti_Jamming_Capable := FieldByName('Anti_Jamming_Capable').AsBoolean;
          Curve_Definition_Index := FieldByName('Curve_Definition_Index').AsInteger;
          Second_Vert_Coverage := FieldByName('Second_Vert_Coverage').AsBoolean;
          Jamming_A_Resistant := FieldByName('Jamming_A_Resistant').AsBoolean;
          Jamming_B_Resistant := FieldByName('Jamming_B_Resistant').AsBoolean;
          Jamming_C_Resistant := FieldByName('Jamming_C_Resistant').AsBoolean;
          Anti_Jamming_A_Resistant := FieldByName('Anti_Jamming_A_Resistant').AsBoolean;
          Anti_Jamming_B_Resistant := FieldByName('Anti_Jamming_B_Resistant').AsBoolean;
          Anti_Jamming_C_Resistant := FieldByName('Anti_Jamming_C_Resistant').AsBoolean;
          Anti_Jamming_Range_Reduction := FieldByName('Anti_Jamming_Range_Reduction').AsSingle;
          Beam_Width := FieldByName('Beam_Width').AsSingle;
          Sector_Scan_Capable := FieldByName('Sector_Scan_Capable').AsBoolean;
          Off_Axis_Jammer_Reduction := FieldByName('Off_Axis_Jammer_Reduction').AsSingle;
          Num_FCR_Channels := FieldByName('Num_FCR_Channels').AsInteger;
          Radar_Spot_Number := FieldByName('Radar_Spot_Number').AsInteger;
          Radar_Horizon_Factor := FieldByName('Radar_Horizon_Factor').AsSingle;
          Main_Lobe_Gain := FieldByName('Main_Lobe_Gain').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor').AsSingle;
          ECCM_Type := FieldByName('ECCM_Type').AsInteger;
          MTI_Capable := FieldByName('MTI_Capable').AsBoolean;
          MTI_MinTargetSpeed := FieldByName('MTI_MinTargetSpeed').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetRadarDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Radar_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Radar_Index = b.Radar_Index');
    SQL.Add('WHERE a.Radar_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertRadarDef(var aRec: TRecRadar_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Radar_Definition');
    SQL.Add('(Radar_Identifier, Radar_Emitter, Radar_Type, Frequency,');
    SQL.Add('Scan_Rate, Pulse_Rep_Freq, Pulse_Width, Radar_Power,');
    SQL.Add('Detection_Range, Known_Cross_Section, Max_Unambig_Detect_Range,');
    SQL.Add('IFF_Capability, Altitude_Data_Capability,');
    SQL.Add('Ground_Speed_Data_Capability, Heading_Data_Capability,');
    SQL.Add('Plat_Type_Recog_Capability, Plat_Class_Recog_Capability,');
    SQL.Add('Clutter_Rejection, Anti_Jamming_Capable, Curve_Definition_Index,');
    SQL.Add('Second_Vert_Coverage, Jamming_A_Resistant, Jamming_B_Resistant,');
    SQL.Add('Jamming_C_Resistant, Anti_Jamming_A_Resistant,');
    SQL.Add('Anti_Jamming_B_Resistant, Anti_Jamming_C_Resistant,');
    SQL.Add('Anti_Jamming_Range_Reduction, Beam_Width, Sector_Scan_Capable,');
    SQL.Add('Off_Axis_Jammer_Reduction, Num_FCR_Channels, Radar_Spot_Number,');
    SQL.Add('Radar_Horizon_Factor, Main_Lobe_Gain, Counter_Detection_Factor,');
    SQL.Add('ECCM_Type, MTI_Capable, MTI_MinTargetSpeed)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Radar_Identifier) + ', ');
      SQL.Add(QuotedStr(Radar_Emitter) + ', ');
      SQL.Add(IntToStr(Radar_Type) + ', ');
      SQL.Add(FloatToStr(Frequency) + ', ');
      SQL.Add(FloatToStr(Scan_Rate) + ', ');
      SQL.Add(FloatToStr(Pulse_Rep_Freq) + ', ');
      SQL.Add(FloatToStr(Pulse_Width) + ', ');
      SQL.Add(FloatToStr(Radar_Power) + ', ');
      SQL.Add(FloatToStr(Detection_Range) + ', ');
      SQL.Add(FloatToStr(Known_Cross_Section) + ', ');
      SQL.Add(FloatToStr(Max_Unambig_Detect_Range) + ', ');
      SQL.Add(BoolToStr(IFF_Capability) + ', ');
      SQL.Add(BoolToStr(Altitude_Data_Capability) + ', ');
      SQL.Add(BoolToStr(Ground_Speed_Data_Capability) + ', ');
      SQL.Add(BoolToStr(Heading_Data_Capability) + ', ');
      SQL.Add(BoolToStr(Plat_Type_Recog_Capability) + ', ');
      SQL.Add(BoolToStr(Plat_Class_Recog_Capability) + ', ');
      SQL.Add(FloatToStr(Clutter_Rejection) + ', ');
      SQL.Add(BoolToStr(Anti_Jamming_Capable) + ', ');
      SQL.Add(IntToStr(Curve_Definition_Index) + ', ');
      SQL.Add(BoolToStr(Second_Vert_Coverage) + ', ');
      SQL.Add(BoolToStr(Jamming_A_Resistant) + ', ');
      SQL.Add(BoolToStr(Jamming_B_Resistant) + ', ');
      SQL.Add(BoolToStr(Jamming_C_Resistant) + ', ');
      SQL.Add(BoolToStr(Anti_Jamming_A_Resistant) + ', ');
      SQL.Add(BoolToStr(Anti_Jamming_B_Resistant) + ', ');
      SQL.Add(BoolToStr(Anti_Jamming_C_Resistant) + ', ');
      SQL.Add(FloatToStr(Anti_Jamming_Range_Reduction) + ', ');
      SQL.Add(FloatToStr(Beam_Width) + ', ');
      SQL.Add(BoolToStr(Sector_Scan_Capable) + ', ');
      SQL.Add(FloatToStr(Off_Axis_Jammer_Reduction) + ', ');
      SQL.Add(IntToStr(Num_FCR_Channels) + ', ');
      SQL.Add(IntToStr(Radar_Spot_Number) + ', ');
      SQL.Add(FloatToStr(Radar_Horizon_Factor) + ', ');
      SQL.Add(FloatToStr(Main_Lobe_Gain) + ', ');
      SQL.Add(FloatToStr(Counter_Detection_Factor) + ', ');
      SQL.Add(IntToStr(ECCM_Type) + ', ');
      SQL.Add(BoolToStr(MTI_Capable) + ', ');
      SQL.Add(FloatToStr(MTI_MinTargetSpeed) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Radar_Definition');
      SQL.Add('WHERE Radar_Identifier = ' + QuotedStr(Radar_Identifier));
      Open;

      Radar_Index := FieldByName('Radar_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateRadarDef(var aRec: TRecRadar_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Radar_Definition');

    with aRec do
    begin
      SQL.Add('SET Radar_Identifier  = ' + QuotedStr(Radar_Identifier));
      SQL.Add(', Radar_Emitter = ' + QuotedStr(Radar_Emitter));
      SQL.Add(', Radar_Type = ' + IntToStr(Radar_Type));
      SQL.Add(', Frequency = ' + FloatToStr(Frequency));
      SQL.Add(', Scan_Rate = ' + FloatToStr(Scan_Rate));
      SQL.Add(', Pulse_Rep_Freq = ' + FloatToStr(Pulse_Rep_Freq));
      SQL.Add(', Pulse_Width = ' + FloatToStr(Pulse_Width));
      SQL.Add(', Radar_Power = ' + FloatToStr(Radar_Power));
      SQL.Add(', Detection_Range = ' + FloatToStr(Detection_Range));
      SQL.Add(', Known_Cross_Section = ' + FloatToStr(Known_Cross_Section));
      SQL.Add(', Max_Unambig_Detect_Range = ' + FloatToStr(Max_Unambig_Detect_Range));
      SQL.Add(', IFF_Capability = ' + BoolToStr(IFF_Capability));
      SQL.Add(', Altitude_Data_Capability = ' +
        BoolToStr(Altitude_Data_Capability));
      SQL.Add(', Ground_Speed_Data_Capability = ' +
        BoolToStr(Ground_Speed_Data_Capability));
      SQL.Add(', Heading_Data_Capability = ' +
        BoolToStr(Heading_Data_Capability));
      SQL.Add(', Plat_Type_Recog_Capability = ' +
        BoolToStr(Plat_Type_Recog_Capability));
      SQL.Add(', Plat_Class_Recog_Capability = ' +
        BoolToStr(Plat_Class_Recog_Capability));
      SQL.Add(', Clutter_Rejection = ' + FloatToStr(Clutter_Rejection));
      SQL.Add(', Anti_Jamming_Capable = ' + BoolToStr(Anti_Jamming_Capable));
      SQL.Add(', Curve_Definition_Index = ' + IntToStr(Curve_Definition_Index));
      SQL.Add(', Second_Vert_Coverage = ' + BoolToStr(Second_Vert_Coverage));
      SQL.Add(', Jamming_A_Resistant = ' + BoolToStr(Jamming_A_Resistant));
      SQL.Add(', Jamming_B_Resistant = ' + BoolToStr(Jamming_B_Resistant));
      SQL.Add(', Jamming_C_Resistant = ' + BoolToStr(Jamming_C_Resistant));
      SQL.Add(', Anti_Jamming_A_Resistant = ' +
        BoolToStr(Anti_Jamming_A_Resistant));
      SQL.Add(', Anti_Jamming_B_Resistant = ' +
        BoolToStr(Anti_Jamming_B_Resistant));
      SQL.Add(', Anti_Jamming_C_Resistant = ' +
        BoolToStr(Anti_Jamming_C_Resistant));
      SQL.Add(', Anti_Jamming_Range_Reduction = ' +
        FloatToStr(Anti_Jamming_Range_Reduction));
      SQL.Add(', Beam_Width = ' + FloatToStr(Beam_Width));
      SQL.Add(', Sector_Scan_Capable = ' + BoolToStr(Sector_Scan_Capable));
      SQL.Add(', Off_Axis_Jammer_Reduction = ' +
        FloatToStr(Off_Axis_Jammer_Reduction));
      SQL.Add(', Num_FCR_Channels = ' + IntToStr(Num_FCR_Channels));
      SQL.Add(', Radar_Spot_Number = ' + IntToStr(Radar_Spot_Number));
      SQL.Add(', Radar_Horizon_Factor = ' + FloatToStr(Radar_Horizon_Factor));
      SQL.Add(', Main_Lobe_Gain = ' + FloatToStr(Main_Lobe_Gain));
      SQL.Add(', Counter_Detection_Factor = ' +
        FloatToStr(Counter_Detection_Factor));
      SQL.Add(', ECCM_Type = ' + IntToStr(ECCM_Type));
      SQL.Add(', MTI_Capable = ' + BoolToStr(MTI_Capable));
      SQL.Add(', MTI_MinTargetSpeed = ' + FloatToStr(MTI_MinTargetSpeed));
      SQL.Add('WHERE Radar_Index = ' + IntToStr(Radar_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteRadarDef(const aRadarIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE FROM Radar_Definition');
    SQL.Add('WHERE Radar_Index = ' + IntToStr(aRadarIndex));
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.GetRadarVerticalCoverage(const aRadarID, aCoverageID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TRadar_Vertical;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Radar_Vertical_Coverage');
    SQL.Add('WHERE Radar_Index = ' + IntToStr(aRadarID));
    SQL.Add(' AND Coverage_Diagram = ' + IntToStr(aCoverageID));
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TRadar_Vertical.Create;

        with rec.FRadar_Coverage do
        begin
          Coverage_Index := FieldByName('Coverage_Index').AsInteger;
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Coverage_Diagram := FieldByName('Coverage_Diagram').AsInteger;
          Vert_Coverage_Range := FieldByName('Vert_Coverage_Range').AsSingle;
          Vert_Cover_Min_Elevation := FieldByName('Vert_Cover_Min_Elevation').AsSingle;
          Vert_Cover_Max_Elevation := FieldByName('Vert_Cover_Max_Elevation').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.DeleteRadar_Vertical_Coverage(const aDeleteType, aOwnerIndex, aValue: Integer): integer;
begin
  result := -1;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Radar_Vertical_Coverage  ');

    case aDeleteType of
      1: SQL.Add('WHERE Radar_Index = ' + IntToStr(aOwnerIndex));
      2:
      begin
        SQL.Add('WHERE Radar_Index = ' + IntToStr(aOwnerIndex));
        SQL.Add('AND Coverage_Diagram = ' +  IntToStr(aValue));
      end;
      3: SQL.Add('WHERE RadarCoverage_Index = ' + IntToStr(aValue));
    end;

    ExecSQL;
   end;
end;

function TdmTTT.InsertRadarNew_Vertical_Coverage(var aRec: TRadar_Vertical): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Radar_Vertical_Coverage ');
    SQL.Add('(Radar_Index,Coverage_Diagram,Vert_Coverage_Range,Vert_Cover_Min_Elevation,Vert_Cover_Max_Elevation)');
    SQL.Add(' VALUES (');

    with aRec.FRadar_Coverage do
    begin
      SQL.Add(IntToStr(Radar_Index) + ',');
      SQL.Add(IntToStr(Coverage_Diagram) + ',');
      SQL.Add(FloatToStr(Vert_Coverage_Range) + ',');
      SQL.Add(FloatToStr(Vert_Cover_Min_Elevation) + ',');
      SQL.Add(FloatToStr(Vert_Cover_Max_Elevation) + ')');
    end;

    ExecSQL;

//    SQL.Clear;
//    SQL.Add('SELECT *');
//    SQL.Add('FROM Radar_Vertical_Coverage');
//    Open;
//
//    Result := RecordCount > 0;
  end;
end;

function TdmTTT.UpdateRadar_Vertical_Coverage(var aRec: TRadar_Vertical): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Radar_Vertical_Coverage');

    with aRec do
    begin
//      SQL.Add('SET Prob_of_Hit = ' + FloatToStr(Prob_of_Hit));
//      SQL.Add(', Range = ' + FloatToStr(Range));
//      SQL.Add('WHERE List_Index = ' + IntToStr(List_Index));
//      SQL.Add('AND RadarCoverage_Index = ' + IntToStr(RadarCoverage_Index));
//      SQL.Add('AND Target_Type = ' + IntToStr(Target_Type));
    end;

    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Sonar Definition '}

function TdmTTT.GetAllSonarDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TSonar_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonar_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Sonar_Index = b.Sonar_Index');
    SQL.Add('ORDER BY Sonar_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TSonar_On_Board.Create;

        with rec.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
          Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
          Sonar_Classification := FieldByName('Sonar_Classification').AsInteger;
          Passive_Int_Period := FieldByName('Passive_Int_Period').AsInteger;
          Active_Int_Period := FieldByName('Active_Int_Period').AsInteger;
          TIOW_Short_Range := FieldByName('TIOW_Short_Range').AsSingle;
          TIOW_Medium_Range := FieldByName('TIOW_Medium_Range').AsSingle;
          TIOW_Long_Range := FieldByName('TIOW_Long_Range').AsSingle;
          Passive_Detect_Range := FieldByName('Passive_Detect_Range').AsSingle;
          Active_Detect_Range := FieldByName('Active_Detect_Range').AsSingle;
          Max_Detect_Range := FieldByName('Max_Detect_Range').AsSingle;
          Known_Signal_Source := FieldByName('Known_Signal_Source').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Sonar_Directivity_Index := FieldByName('Sonar_Directivity_Index')
            .AsSingle;
          Active_Operating_Power := FieldByName('Active_Operating_Power')
            .AsSingle;
          Active_Freq_of_Op := FieldByName('Active_Freq_of_Op').AsSingle;
          Passive_Freq_of_Op := FieldByName('Passive_Freq_of_Op').AsSingle;
          Max_Operating_Depth := FieldByName('Max_Operating_Depth').AsSingle;
          Sonar_Depth_Rate_of_Change := FieldByName
            ('Sonar_Depth_Rate_of_Change').AsSingle;
          Depth_per_Speed := FieldByName('Depth_per_Speed').AsSingle;
          Kinking_Processing := FieldByName('Kinking_Processing').AsBoolean;
          Turn_Rate_2_Kink := FieldByName('Turn_Rate_2_Kink').AsSingle;
          Time_2_Settle_Kinked := FieldByName('Time_2_Settle_Kinked').AsInteger;
          Bearing_Processing := FieldByName('Bearing_Processing').AsBoolean;
          Time_2_Resolve_Bearing := FieldByName('Time_2_Resolve_Bearing')
            .AsInteger;
          Passive_Processing := FieldByName('Passive_Processing').AsBoolean;
          Target_Identification := FieldByName('Target_Identification')
            .AsBoolean;
          Time_2_Identify := FieldByName('Time_2_Identify').AsInteger;
          Curve_Detection_Index := FieldByName('Curve_Detection_Index')
            .AsInteger;
          Track_Analysis := FieldByName('Track_Analysis').AsInteger;
          Time_2_Provide_Track := FieldByName('Time_2_Provide_Track').AsInteger;
          Ownship_Increase_due_to_Active := FieldByName
            ('Ownship_Increase_due_to_Active').AsSingle;
          Tow_Speed := FieldByName('Tow_Speed').AsSingle;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Maximum_Tow_Speed := FieldByName('Maximum_Tow_Speed').AsSingle;
          Maximum_Sonar_Speed := FieldByName('Maximum_Sonar_Speed').AsSingle;
          Depth_Finding_Capable := FieldByName('Depth_Finding_Capable')
            .AsBoolean;
          Tracking_Capable := FieldByName('Tracking_Capable').AsBoolean;
          Surface_Detection_Capable := FieldByName('Surface_Detection_Capable')
            .AsBoolean;
          SubSurface_Detection_Capable := FieldByName
            ('SubSurface_Detection_Capable').AsBoolean;
          Torpedo_Detection_Capable := FieldByName('Torpedo_Detection_Capable')
            .AsBoolean;
          Mine_Detection_Capable := FieldByName('Mine_Detection_Capable')
            .AsBoolean;
          Cable_Length := FieldByName('Cable_Length').AsSingle;
          Maximum_Reported_Bearing_Error := FieldByName
            ('Maximum_Reported_Bearing_Error').AsSingle;
          Average_Beam_Width := FieldByName('Average_Beam_Width').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterSonarDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TSonar_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonar_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Sonar_Index = b.Sonar_Index');
    SQL.Add('WHERE Sonar_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Sonar_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TSonar_On_Board.Create;

        with rec.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
          Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
          Sonar_Classification := FieldByName('Sonar_Classification').AsInteger;
          Passive_Int_Period := FieldByName('Passive_Int_Period').AsInteger;
          Active_Int_Period := FieldByName('Active_Int_Period').AsInteger;
          TIOW_Short_Range := FieldByName('TIOW_Short_Range').AsSingle;
          TIOW_Medium_Range := FieldByName('TIOW_Medium_Range').AsSingle;
          TIOW_Long_Range := FieldByName('TIOW_Long_Range').AsSingle;
          Passive_Detect_Range := FieldByName('Passive_Detect_Range').AsSingle;
          Active_Detect_Range := FieldByName('Active_Detect_Range').AsSingle;
          Max_Detect_Range := FieldByName('Max_Detect_Range').AsSingle;
          Known_Signal_Source := FieldByName('Known_Signal_Source').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Sonar_Directivity_Index := FieldByName('Sonar_Directivity_Index')
            .AsSingle;
          Active_Operating_Power := FieldByName('Active_Operating_Power')
            .AsSingle;
          Active_Freq_of_Op := FieldByName('Active_Freq_of_Op').AsSingle;
          Passive_Freq_of_Op := FieldByName('Passive_Freq_of_Op').AsSingle;
          Max_Operating_Depth := FieldByName('Max_Operating_Depth').AsSingle;
          Sonar_Depth_Rate_of_Change := FieldByName
            ('Sonar_Depth_Rate_of_Change').AsSingle;
          Depth_per_Speed := FieldByName('Depth_per_Speed').AsSingle;
          Kinking_Processing := FieldByName('Kinking_Processing').AsBoolean;
          Turn_Rate_2_Kink := FieldByName('Turn_Rate_2_Kink').AsSingle;
          Time_2_Settle_Kinked := FieldByName('Time_2_Settle_Kinked').AsInteger;
          Bearing_Processing := FieldByName('Bearing_Processing').AsBoolean;
          Time_2_Resolve_Bearing := FieldByName('Time_2_Resolve_Bearing')
            .AsInteger;
          Passive_Processing := FieldByName('Passive_Processing').AsBoolean;
          Target_Identification := FieldByName('Target_Identification')
            .AsBoolean;
          Time_2_Identify := FieldByName('Time_2_Identify').AsInteger;
          Curve_Detection_Index := FieldByName('Curve_Detection_Index')
            .AsInteger;
          Track_Analysis := FieldByName('Track_Analysis').AsInteger;
          Time_2_Provide_Track := FieldByName('Time_2_Provide_Track').AsInteger;
          Ownship_Increase_due_to_Active := FieldByName
            ('Ownship_Increase_due_to_Active').AsSingle;
          Tow_Speed := FieldByName('Tow_Speed').AsSingle;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Maximum_Tow_Speed := FieldByName('Maximum_Tow_Speed').AsSingle;
          Maximum_Sonar_Speed := FieldByName('Maximum_Sonar_Speed').AsSingle;
          Depth_Finding_Capable := FieldByName('Depth_Finding_Capable')
            .AsBoolean;
          Tracking_Capable := FieldByName('Tracking_Capable').AsBoolean;
          Surface_Detection_Capable := FieldByName('Surface_Detection_Capable')
            .AsBoolean;
          SubSurface_Detection_Capable := FieldByName
            ('SubSurface_Detection_Capable').AsBoolean;
          Torpedo_Detection_Capable := FieldByName('Torpedo_Detection_Capable')
            .AsBoolean;
          Mine_Detection_Capable := FieldByName('Mine_Detection_Capable')
            .AsBoolean;
          Cable_Length := FieldByName('Cable_Length').AsSingle;
          Maximum_Reported_Bearing_Error := FieldByName
            ('Maximum_Reported_Bearing_Error').AsSingle;
          Average_Beam_Width := FieldByName('Average_Beam_Width').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSonarDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonar_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Sonar_Index = b.Sonar_Index');
    SQL.Add('WHERE a.Sonar_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetSonarDef(const aClassID: Integer; var aSonar: TSonar_On_Board): Boolean;
begin
  Result := False;
  aSonar := nil;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonar_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Sonar_Index = b.Sonar_Index');
    SQL.Add('WHERE a.Sonar_Index = ' + IntToStr(aClassID));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aSonar := TSonar_On_Board.Create;

      with aSonar.FDef do
      begin
        Sonar_Index := FieldByName('Sonar_Index').AsInteger;
        Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
        Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
        Sonar_Classification := FieldByName('Sonar_Classification').AsInteger;
        Passive_Int_Period := FieldByName('Passive_Int_Period').AsInteger;
        Active_Int_Period := FieldByName('Active_Int_Period').AsInteger;
        TIOW_Short_Range := FieldByName('TIOW_Short_Range').AsSingle;
        TIOW_Medium_Range := FieldByName('TIOW_Medium_Range').AsSingle;
        TIOW_Long_Range := FieldByName('TIOW_Long_Range').AsSingle;
        Passive_Detect_Range := FieldByName('Passive_Detect_Range').AsSingle;
        Active_Detect_Range := FieldByName('Active_Detect_Range').AsSingle;
        Max_Detect_Range := FieldByName('Max_Detect_Range').AsSingle;
        Known_Signal_Source := FieldByName('Known_Signal_Source').AsSingle;
        Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
        Sonar_Directivity_Index := FieldByName('Sonar_Directivity_Index')
          .AsSingle;
        Active_Operating_Power := FieldByName('Active_Operating_Power')
          .AsSingle;
        Active_Freq_of_Op := FieldByName('Active_Freq_of_Op').AsSingle;
        Passive_Freq_of_Op := FieldByName('Passive_Freq_of_Op').AsSingle;
        Max_Operating_Depth := FieldByName('Max_Operating_Depth').AsSingle;
        Sonar_Depth_Rate_of_Change := FieldByName
          ('Sonar_Depth_Rate_of_Change').AsSingle;
        Depth_per_Speed := FieldByName('Depth_per_Speed').AsSingle;
        Kinking_Processing := FieldByName('Kinking_Processing').AsBoolean;
        Turn_Rate_2_Kink := FieldByName('Turn_Rate_2_Kink').AsSingle;
        Time_2_Settle_Kinked := FieldByName('Time_2_Settle_Kinked').AsInteger;
        Bearing_Processing := FieldByName('Bearing_Processing').AsBoolean;
        Time_2_Resolve_Bearing := FieldByName('Time_2_Resolve_Bearing')
          .AsInteger;
        Passive_Processing := FieldByName('Passive_Processing').AsBoolean;
        Target_Identification := FieldByName('Target_Identification')
          .AsBoolean;
        Time_2_Identify := FieldByName('Time_2_Identify').AsInteger;
        Curve_Detection_Index := FieldByName('Curve_Detection_Index')
          .AsInteger;
        Track_Analysis := FieldByName('Track_Analysis').AsInteger;
        Time_2_Provide_Track := FieldByName('Time_2_Provide_Track').AsInteger;
        Ownship_Increase_due_to_Active := FieldByName
          ('Ownship_Increase_due_to_Active').AsSingle;
        Tow_Speed := FieldByName('Tow_Speed').AsSingle;
        Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
        Maximum_Tow_Speed := FieldByName('Maximum_Tow_Speed').AsSingle;
        Maximum_Sonar_Speed := FieldByName('Maximum_Sonar_Speed').AsSingle;
        Depth_Finding_Capable := FieldByName('Depth_Finding_Capable')
          .AsBoolean;
        Tracking_Capable := FieldByName('Tracking_Capable').AsBoolean;
        Surface_Detection_Capable := FieldByName('Surface_Detection_Capable')
          .AsBoolean;
        SubSurface_Detection_Capable := FieldByName
          ('SubSurface_Detection_Capable').AsBoolean;
        Torpedo_Detection_Capable := FieldByName('Torpedo_Detection_Capable')
          .AsBoolean;
        Mine_Detection_Capable := FieldByName('Mine_Detection_Capable')
          .AsBoolean;
        Cable_Length := FieldByName('Cable_Length').AsSingle;
        Maximum_Reported_Bearing_Error := FieldByName
          ('Maximum_Reported_Bearing_Error').AsSingle;
        Average_Beam_Width := FieldByName('Average_Beam_Width').AsSingle;
        Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
          .AsSingle;
      end;

      with aSonar.FNote do
      begin
        Note_Index := FieldByName('Note_Index').AsInteger;
        Note_Type := FieldByName('Note_Type').AsInteger;
        Notes := FieldByName('Notes').AsString;
      end;
    end;
  end;
end;

function TdmTTT.InsertSonarDef(var aRec: TRecSonar_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Sonar_Definition');
    SQL.Add('(Sonar_Identifier, Sonar_Category_Index, Sonar_Classification,');
    SQL.Add('Passive_Int_Period, Active_Int_Period, TIOW_Short_Range,');
    SQL.Add('TIOW_Medium_Range, TIOW_Long_Range, Passive_Detect_Range,');
    SQL.Add('Active_Detect_Range, Max_Detect_Range, Known_Signal_Source,');
    SQL.Add('Known_Cross_Section, Sonar_Directivity_Index,');
    SQL.Add('Active_Operating_Power, Active_Freq_of_Op, Passive_Freq_of_Op,');
    SQL.Add('Max_Operating_Depth, Sonar_Depth_Rate_of_Change,');
    SQL.Add('Depth_per_Speed, Kinking_Processing, Turn_Rate_2_Kink,');
    SQL.Add('Time_2_Settle_Kinked, Bearing_Processing,');
    SQL.Add('Time_2_Resolve_Bearing, Passive_Processing,');
    SQL.Add('Target_Identification, Time_2_Identify, Curve_Detection_Index,');
    SQL.Add('Track_Analysis, Time_2_Provide_Track,');
    SQL.Add('Ownship_Increase_due_to_Active, Tow_Speed, Minimum_Depth,');
    SQL.Add('Maximum_Tow_Speed, Maximum_Sonar_Speed, Depth_Finding_Capable,');
    SQL.Add('Tracking_Capable, Surface_Detection_Capable,');
    SQL.Add('SubSurface_Detection_Capable, Torpedo_Detection_Capable,');
    SQL.Add('Mine_Detection_Capable, Cable_Length,');
    SQL.Add('Maximum_Reported_Bearing_Error, Average_Beam_Width,');
    SQL.Add('Counter_Detection_Factor)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Sonar_Identifier) + ', ');
      SQL.Add(IntToStr(Sonar_Category_Index) + ', ');
      SQL.Add(IntToStr(Sonar_Classification) + ', ');
      SQL.Add(IntToStr(Passive_Int_Period) + ', ');
      SQL.Add(IntToStr(Active_Int_Period) + ', ');
      SQL.Add(FloatToStr(TIOW_Short_Range) + ', ');
      SQL.Add(FloatToStr(TIOW_Medium_Range) + ', ');
      SQL.Add(FloatToStr(TIOW_Long_Range) + ', ');
      SQL.Add(FloatToStr(Passive_Detect_Range) + ', ');
      SQL.Add(FloatToStr(Active_Detect_Range) + ', ');
      SQL.Add(FloatToStr(Max_Detect_Range) + ', ');
      SQL.Add(FloatToStr(Known_Signal_Source) + ', ');
      SQL.Add(FloatToStr(Known_Cross_Section) + ', ');
      SQL.Add(FloatToStr(Sonar_Directivity_Index) + ', ');
      SQL.Add(FloatToStr(Active_Operating_Power) + ', ');
      SQL.Add(FloatToStr(Active_Freq_of_Op) + ', ');
      SQL.Add(FloatToStr(Passive_Freq_of_Op) + ', ');
      SQL.Add(FloatToStr(Max_Operating_Depth) + ', ');
      SQL.Add(FloatToStr(Sonar_Depth_Rate_of_Change) + ', ');
      SQL.Add(FloatToStr(Depth_per_Speed) + ', ');
      SQL.Add(BoolToStr(Kinking_Processing) + ', ');
      SQL.Add(FloatToStr(Turn_Rate_2_Kink) + ', ');
      SQL.Add(IntToStr(Time_2_Settle_Kinked) + ', ');
      SQL.Add(BoolToStr(Bearing_Processing) + ', ');
      SQL.Add(IntToStr(Time_2_Resolve_Bearing) + ', ');
      SQL.Add(BoolToStr(Passive_Processing) + ', ');
      SQL.Add(BoolToStr(Target_Identification) + ', ');
      SQL.Add(IntToStr(Time_2_Identify) + ', ');
      SQL.Add(IntToStr(Curve_Detection_Index) + ', ');
      SQL.Add(IntToStr(Track_Analysis) + ', ');
      SQL.Add(IntToStr(Time_2_Provide_Track) + ', ');
      SQL.Add(FloatToStr(Ownship_Increase_due_to_Active) + ', ');
      SQL.Add(FloatToStr(Tow_Speed) + ', ');
      SQL.Add(FloatToStr(Minimum_Depth) + ', ');
      SQL.Add(FloatToStr(Maximum_Tow_Speed) + ', ');
      SQL.Add(FloatToStr(Maximum_Sonar_Speed) + ', ');
      SQL.Add(BoolToStr(Depth_Finding_Capable) + ', ');
      SQL.Add(BoolToStr(Tracking_Capable) + ', ');
      SQL.Add(BoolToStr(Surface_Detection_Capable) + ', ');
      SQL.Add(BoolToStr(SubSurface_Detection_Capable) + ', ');
      SQL.Add(BoolToStr(Torpedo_Detection_Capable) + ', ');
      SQL.Add(BoolToStr(Mine_Detection_Capable) + ', ');
      SQL.Add(FloatToStr(Cable_Length) + ', ');
      SQL.Add(FloatToStr(Maximum_Reported_Bearing_Error) + ', ');
      SQL.Add(FloatToStr(Average_Beam_Width) + ', ');
      SQL.Add(FloatToStr(Counter_Detection_Factor) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Sonar_Definition');
      SQL.Add('WHERE Sonar_Identifier = ' + QuotedStr(Sonar_Identifier));
      Open;

      Sonar_Index := FieldByName('Sonar_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateSonarDef(var aRec: TRecSonar_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Sonar_Definition');

    with aRec do
    begin
      SQL.Add('SET Sonar_Identifier = ' + QuotedStr(Sonar_Identifier));
      SQL.Add(', Sonar_Category_Index  = ' + IntToStr(Sonar_Category_Index));
      SQL.Add(', Sonar_Classification = ' + IntToStr(Sonar_Classification));
      SQL.Add(', Passive_Int_Period = ' + IntToStr(Passive_Int_Period));
      SQL.Add(', Active_Int_Period = ' + IntToStr(Active_Int_Period));
      SQL.Add(', TIOW_Short_Range = ' + FloatToStr(TIOW_Short_Range));
      SQL.Add(', TIOW_Medium_Range = ' + FloatToStr(TIOW_Medium_Range));
      SQL.Add(', TIOW_Long_Range = ' + FloatToStr(TIOW_Long_Range));
      SQL.Add(', Passive_Detect_Range = ' + FloatToStr(Passive_Detect_Range));
      SQL.Add(', Active_Detect_Range  = ' + FloatToStr(Active_Detect_Range));
      SQL.Add(', Max_Detect_Range = ' + FloatToStr(Max_Detect_Range));
      SQL.Add(', Known_Signal_Source = ' + FloatToStr(Known_Signal_Source));
      SQL.Add(', Known_Cross_Section = ' + FloatToStr(Known_Cross_Section));
      SQL.Add(', Sonar_Directivity_Index = ' +
        FloatToStr(Sonar_Directivity_Index));
      SQL.Add(', Active_Operating_Power = ' +
        FloatToStr(Active_Operating_Power));
      SQL.Add(', Active_Freq_of_Op = ' + FloatToStr(Active_Freq_of_Op));
      SQL.Add(', Passive_Freq_of_Op = ' + FloatToStr(Passive_Freq_of_Op));
      SQL.Add(', Max_Operating_Depth = ' + FloatToStr(Max_Operating_Depth));
      SQL.Add(', Sonar_Depth_Rate_of_Change = ' +
        FloatToStr(Sonar_Depth_Rate_of_Change));
      SQL.Add(', Depth_per_Speed = ' + FloatToStr(Depth_per_Speed));
      SQL.Add(', Kinking_Processing = ' + BoolToStr(Kinking_Processing));
      SQL.Add(', Turn_Rate_2_Kink = ' + FloatToStr(Turn_Rate_2_Kink));
      SQL.Add(', Time_2_Settle_Kinked = ' + IntToStr(Time_2_Settle_Kinked));
      SQL.Add(', Bearing_Processing = ' + BoolToStr(Bearing_Processing));
      SQL.Add(', Time_2_Resolve_Bearing = ' + IntToStr(Time_2_Resolve_Bearing));
      SQL.Add(', Passive_Processing = ' + BoolToStr(Passive_Processing));
      SQL.Add(', Target_Identification = ' + BoolToStr(Target_Identification));
      SQL.Add(', Time_2_Identify = ' + IntToStr(Time_2_Identify));
      SQL.Add(', Curve_Detection_Index = ' + IntToStr(Curve_Detection_Index));
      SQL.Add(', Track_Analysis = ' + IntToStr(Track_Analysis));
      SQL.Add(', Time_2_Provide_Track = ' + IntToStr(Time_2_Provide_Track));
      SQL.Add(', Ownship_Increase_due_to_Active = ' +
        FloatToStr(Ownship_Increase_due_to_Active));
      SQL.Add(', Tow_Speed = ' + FloatToStr(Tow_Speed));
      SQL.Add(', Minimum_Depth = ' + FloatToStr(Minimum_Depth));
      SQL.Add(', Maximum_Tow_Speed = ' + FloatToStr(Maximum_Tow_Speed));
      SQL.Add(', Maximum_Sonar_Speed = ' + FloatToStr(Maximum_Sonar_Speed));
      SQL.Add(', Depth_Finding_Capable = ' + BoolToStr(Depth_Finding_Capable));
      SQL.Add(', Tracking_Capable = ' + BoolToStr(Tracking_Capable));
      SQL.Add(', Surface_Detection_Capable = ' +
        BoolToStr(Surface_Detection_Capable));
      SQL.Add(', SubSurface_Detection_Capable = ' +
        BoolToStr(SubSurface_Detection_Capable));
      SQL.Add(', Torpedo_Detection_Capable = ' +
        BoolToStr(Torpedo_Detection_Capable));
      SQL.Add(', Mine_Detection_Capable = ' +
        BoolToStr(Mine_Detection_Capable));
      SQL.Add(', Cable_Length = ' + FloatToStr(Cable_Length));
      SQL.Add(', Maximum_Reported_Bearing_Error = ' +
        FloatToStr(Maximum_Reported_Bearing_Error));
      SQL.Add(', Average_Beam_Width = ' + FloatToStr(Average_Beam_Width));
      SQL.Add(', Counter_Detection_Factor = ' +
        FloatToStr(Counter_Detection_Factor));
      SQL.Add('WHERE Sonar_Index = ' + IntToStr(Sonar_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteSonarDef(const aSonarIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE FROM Sonar_Definition');
    SQL.Add('WHERE Sonar_Index = ' + IntToStr(aSonarIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' ESM Definition '}

function TdmTTT.GetAllESMDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TESM_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM ESM_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.ESM_Index = b.ESM_Index');
    SQL.Add('ORDER BY a.Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TESM_On_Board.Create;

        with rec.FESM_Def do
        begin
          ESM_Index := FieldByName('ESM_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Low_Detect_Frequency1 := FieldByName('Low_Detect_Frequency1').AsFloat;
          High_Detect_Frequency1 := FieldByName('High_Detect_Frequency1').AsFloat;
          Low_Detect_Frequency2 := FieldByName('Low_Detect_Frequency2').AsFloat;
          High_Detect_Frequency2 := FieldByName('High_Detect_Frequency2').AsFloat;
          ESM_Classification := FieldByName('ESM_Classification').AsInteger;
          Emitter_Detect_Range_Factor := FieldByName('Emitter_Detect_Range_Factor').AsSingle;
          Comm_Intercept_Capable := FieldByName('Comm_Intercept_Capable').AsInteger;
          Frequency_Identify_Range := FieldByName('Frequency_Identify_Range').AsFloat;
          PRF_Identify_Range := FieldByName('PRF_Identify_Range').AsSingle;
          Pulsewidth_Identify_Range := FieldByName('Pulsewidth_Identify_Range').AsSingle;
          Scan_Period_Identify_Range := FieldByName('Scan_Period_Identify_Range').AsSingle;
          Sector_Blank_Detection_Factor := FieldByName('Sector_Blank_Detection_Factor').AsSingle;
          Identification_Period := FieldByName('Identification_Period').AsSingle;
          Classification_Period := FieldByName('Classification_Period').AsSingle;
          Minimum_Bearing_Error_Variance := FieldByName('Minimum_Bearing_Error_Variance').AsSingle;
          Initial_Bearing_Error_Variance := FieldByName('Initial_Bearing_Error_Variance').AsSingle;
//          Second_Frequency_Detection_Capable := FieldByName('Second_Frequency_Detection_Capable').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterESMDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TESM_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM ESM_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.ESM_Index = b.ESM_Index');
    SQL.Add('WHERE a.Class_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY a.Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TESM_On_Board.Create;

        with rec.FESM_Def do
        begin
          ESM_Index := FieldByName('ESM_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Low_Detect_Frequency1 := FieldByName('Low_Detect_Frequency1').AsFloat;
          High_Detect_Frequency1 := FieldByName('High_Detect_Frequency1').AsFloat;
          Low_Detect_Frequency2 := FieldByName('Low_Detect_Frequency2').AsFloat;
          High_Detect_Frequency2 := FieldByName('High_Detect_Frequency2').AsFloat;
          ESM_Classification := FieldByName('ESM_Classification').AsInteger;
          Emitter_Detect_Range_Factor := FieldByName('Emitter_Detect_Range_Factor').AsSingle;
          Comm_Intercept_Capable := FieldByName('Comm_Intercept_Capable').AsInteger;
          Frequency_Identify_Range := FieldByName('Frequency_Identify_Range').AsFloat;
          PRF_Identify_Range := FieldByName('PRF_Identify_Range').AsSingle;
          Pulsewidth_Identify_Range := FieldByName('Pulsewidth_Identify_Range').AsSingle;
          Scan_Period_Identify_Range := FieldByName('Scan_Period_Identify_Range').AsSingle;
          Sector_Blank_Detection_Factor := FieldByName('Sector_Blank_Detection_Factor').AsSingle;
          Identification_Period := FieldByName('Identification_Period').AsSingle;
          Classification_Period := FieldByName('Classification_Period').AsSingle;
          Minimum_Bearing_Error_Variance := FieldByName('Minimum_Bearing_Error_Variance').AsSingle;
          Initial_Bearing_Error_Variance := FieldByName('Initial_Bearing_Error_Variance').AsSingle;
//          Second_Frequency_Detection_Capable := FieldByName('Second_Frequency_Detection_Capable').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetESMDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM ESM_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.ESM_Index = b.ESM_Index');
    SQL.Add('WHERE a.Class_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertESMDef(var aRec: TRecESM_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO ESM_Definition');
    SQL.Add('(Class_Identifier, Low_Detect_Frequency1,');
    SQL.Add('High_Detect_Frequency1, Low_Detect_Frequency2,');
    SQL.Add('High_Detect_Frequency2, ESM_Classification,');
    SQL.Add('Emitter_Detect_Range_Factor, Comm_Intercept_Capable,');
    SQL.Add('Frequency_Identify_Range, PRF_Identify_Range,');
    SQL.Add('Pulsewidth_Identify_Range, Scan_Period_Identify_Range,');
    SQL.Add('Sector_Blank_Detection_Factor, Identification_Period,');
    SQL.Add('Classification_Period, Minimum_Bearing_Error_Variance,');
    SQL.Add('Initial_Bearing_Error_Variance,');
    SQL.Add('Second_Frequency_Detection_Capable)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Class_Identifier) + ', ');
      SQL.Add(FloatToStr(Low_Detect_Frequency1) + ', ');
      SQL.Add(FloatToStr(High_Detect_Frequency1) + ', ');
      SQL.Add(FloatToStr(Low_Detect_Frequency2) + ', ');
      SQL.Add(FloatToStr(High_Detect_Frequency2) + ', ');
      SQL.Add(IntToStr(ESM_Classification) + ', ');
      SQL.Add(FloatToStr(Emitter_Detect_Range_Factor) + ', ');
      SQL.Add(FloatToStr(Comm_Intercept_Capable) + ', ');
      SQL.Add(FloatToStr(Frequency_Identify_Range) + ', ');
      SQL.Add(FloatToStr(PRF_Identify_Range) + ', ');
      SQL.Add(FloatToStr(Pulsewidth_Identify_Range) + ', ');
      SQL.Add(FloatToStr(Scan_Period_Identify_Range) + ', ');
      SQL.Add(FloatToStr(Sector_Blank_Detection_Factor) + ', ');
      SQL.Add(FloatToStr(Identification_Period) + ', ');
      SQL.Add(FloatToStr(Classification_Period) + ', ');
      SQL.Add(FloatToStr(Minimum_Bearing_Error_Variance) + ', ');
      SQL.Add(FloatToStr(Initial_Bearing_Error_Variance) + ', ');
      SQL.Add(FloatToStr(Second_Frequency_Detection_Capable) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM ESM_Definition');
      SQL.Add('WHERE Class_Identifier = ' + QuotedStr(Class_Identifier));
      Open;

      ESM_Index := FieldByName('ESM_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateESMDef(var aRec: TRecESM_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE ESM_Definition');

    with aRec do
    begin
      SQL.Add('SET Class_Identifier = ' + QuotedStr(Class_Identifier));
      SQL.Add(', Low_Detect_Frequency1 = ' + FloatToStr(Low_Detect_Frequency1));
      SQL.Add(', High_Detect_Frequency1 = ' +
        FloatToStr(High_Detect_Frequency1));
      SQL.Add(', Low_Detect_Frequency2 = ' + FloatToStr(Low_Detect_Frequency2));
      SQL.Add(', High_Detect_Frequency2 = ' +
        FloatToStr(High_Detect_Frequency2));
      SQL.Add(', ESM_Classification = ' + IntToStr(ESM_Classification));
      SQL.Add(', Emitter_Detect_Range_Factor = ' +
        FloatToStr(Emitter_Detect_Range_Factor));
      SQL.Add(', Comm_Intercept_Capable = ' +
        FloatToStr(Comm_Intercept_Capable));
      SQL.Add(', Frequency_Identify_Range = ' +
        FloatToStr(Frequency_Identify_Range));
      SQL.Add(', PRF_Identify_Range = ' + FloatToStr(PRF_Identify_Range));
      SQL.Add(', Pulsewidth_Identify_Range = ' +
        FloatToStr(Pulsewidth_Identify_Range));
      SQL.Add(', Scan_Period_Identify_Range = ' +
        FloatToStr(Scan_Period_Identify_Range));
      SQL.Add(', Sector_Blank_Detection_Factor = ' +
        FloatToStr(Sector_Blank_Detection_Factor));
      SQL.Add(', Identification_Period = ' + FloatToStr(Identification_Period));
      SQL.Add(', Classification_Period = ' + FloatToStr(Classification_Period));
      SQL.Add(', Minimum_Bearing_Error_Variance = ' +
        FloatToStr(Minimum_Bearing_Error_Variance));
      SQL.Add(', Initial_Bearing_Error_Variance = ' +
        FloatToStr(Initial_Bearing_Error_Variance));
      SQL.Add('WHERE ESM_Index = ' + IntToStr(ESM_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteESMDef(const aESMIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE FROM ESM_Definition');
    SQL.Add('WHERE ESM_Index = ' + IntToStr(aESMIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' EOD Definition '}

function TdmTTT.GetAllEODef(var aList: TList): Integer;
var
  i : Integer;
  rec : TEOD_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM EO_Detection_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.EO_Index = b.EO_Index');
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TEOD_On_Board.Create;

        with rec.FEO_Def do
        begin
          EO_Index := FieldByName('EO_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sensor_Type := FieldByName('Sensor_Type').AsInteger;
          Detection_Range := FieldByName('Detection_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Num_FC_Channels := FieldByName('Num_FC_Channels').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterEODef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TEOD_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM EO_Detection_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.EO_Index = b.EO_Index');
    SQL.Add('WHERE Class_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TEOD_On_Board.Create;

        with rec.FEO_Def do
        begin
          EO_Index := FieldByName('EO_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sensor_Type := FieldByName('Sensor_Type').AsInteger;
          Detection_Range := FieldByName('Detection_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Num_FC_Channels := FieldByName('Num_FC_Channels').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetEODef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM EO_Detection_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.EO_Index = b.EO_Index');
    SQL.Add('WHERE a.Class_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertEODef(var aRec: TRecEO_Detection_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO EO_Detection_Definition');
    SQL.Add('(Class_Identifier, Sensor_Type, Detection_Range,');
    SQL.Add('Known_Cross_Section, Max_Range, Scan_Rate, Num_FC_Channels)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Class_Identifier) + ', ');
      SQL.Add(IntToStr(Sensor_Type) + ', ');
      SQL.Add(FloatToStr(Detection_Range) + ', ');
      SQL.Add(FloatToStr(Known_Cross_Section) + ', ');
      SQL.Add(FloatToStr(Max_Range) + ', ');
      SQL.Add(FloatToStr(Scan_Rate) + ', ');
      SQL.Add(IntToStr(Num_FC_Channels) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM EO_Detection_Definition');
      SQL.Add('WHERE Class_Identifier = ' + QuotedStr(Class_Identifier));
      Open;

      EO_Index := FieldByName('EO_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateEODef(var aRec: TRecEO_Detection_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE EO_Detection_Definition');

    with aRec do
    begin
      SQL.Add('SET Class_Identifier = ' + QuotedStr(Class_Identifier));
      SQL.Add(', Sensor_Type = ' + IntToStr(Sensor_Type));
      SQL.Add(', Detection_Range = ' + FloatToStr(Detection_Range));
      SQL.Add(', Known_Cross_Section = ' + FloatToStr(Known_Cross_Section));
      SQL.Add(', Max_Range = ' + FloatToStr(Max_Range));
      SQL.Add(', Scan_Rate = ' + FloatToStr(Scan_Rate));
      SQL.Add(', Num_FC_Channels = ' + IntToStr(Num_FC_Channels));
      SQL.Add('WHERE EO_Index = ' + IntToStr(EO_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteEODef(const aEOIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE FROM EO_Detection_Definition');
    SQL.Add('WHERE EO_Index = ' + IntToStr(aEOIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Sonobuoy Definition '}

function TdmTTT.GetAllSonobuoyDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TSonobuoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sonobuoy_Definition a LEFT JOIN Sonar_Definition b ');
    SQL.Add('ON a.Sonar_Index = b.Sonar_Index LEFT JOIN Note_Storage c ');
    SQL.Add('ON a.Sonobuoy_Index = c.Sonobuoy_Index ');
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TSonobuoy_On_Board.Create;

        with rec.FDef do
        begin
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sonobuoy_Type := FieldByName('Sonobuoy_Type').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Endurance_Time := FieldByName('Endurance_Time').AsInteger;
          Max_Depth := FieldByName('Max_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          CPA_Detection_Capable := FieldByName('CPA_Detection_Capable')
            .AsInteger;
          CPA_Range_Limit := FieldByName('CPA_Range_Limit').AsSingle;
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
        end;

        with rec.FSonar.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
          Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
          Sonar_Classification := FieldByName('Sonar_Classification').AsInteger;
          Passive_Int_Period := FieldByName('Passive_Int_Period').AsInteger;
          Active_Int_Period := FieldByName('Active_Int_Period').AsInteger;
          TIOW_Short_Range := FieldByName('TIOW_Short_Range').AsSingle;
          TIOW_Medium_Range := FieldByName('TIOW_Medium_Range').AsSingle;
          TIOW_Long_Range := FieldByName('TIOW_Long_Range').AsSingle;
          Passive_Detect_Range := FieldByName('Passive_Detect_Range').AsSingle;
          Active_Detect_Range := FieldByName('Active_Detect_Range').AsSingle;
          Max_Detect_Range := FieldByName('Max_Detect_Range').AsSingle;
          Known_Signal_Source := FieldByName('Known_Signal_Source').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Sonar_Directivity_Index := FieldByName('Sonar_Directivity_Index')
            .AsSingle;
          Active_Operating_Power := FieldByName('Active_Operating_Power')
            .AsSingle;
          Active_Freq_of_Op := FieldByName('Active_Freq_of_Op').AsSingle;
          Passive_Freq_of_Op := FieldByName('Passive_Freq_of_Op').AsSingle;
          Max_Operating_Depth := FieldByName('Max_Operating_Depth').AsSingle;
          Sonar_Depth_Rate_of_Change := FieldByName
            ('Sonar_Depth_Rate_of_Change').AsSingle;
          Depth_per_Speed := FieldByName('Depth_per_Speed').AsSingle;
          Kinking_Processing := FieldByName('Kinking_Processing').AsBoolean;
          Turn_Rate_2_Kink := FieldByName('Turn_Rate_2_Kink').AsSingle;
          Time_2_Settle_Kinked := FieldByName('Time_2_Settle_Kinked').AsInteger;
          Bearing_Processing := FieldByName('Bearing_Processing').AsBoolean;
          Time_2_Resolve_Bearing := FieldByName('Time_2_Resolve_Bearing')
            .AsInteger;
          Passive_Processing := FieldByName('Passive_Processing').AsBoolean;
          Target_Identification := FieldByName('Target_Identification')
            .AsBoolean;
          Time_2_Identify := FieldByName('Time_2_Identify').AsInteger;
          Curve_Detection_Index := FieldByName('Curve_Detection_Index')
            .AsInteger;
          Track_Analysis := FieldByName('Track_Analysis').AsInteger;
          Time_2_Provide_Track := FieldByName('Time_2_Provide_Track').AsInteger;
          Ownship_Increase_due_to_Active := FieldByName
            ('Ownship_Increase_due_to_Active').AsSingle;
          Tow_Speed := FieldByName('Tow_Speed').AsSingle;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Maximum_Tow_Speed := FieldByName('Maximum_Tow_Speed').AsSingle;
          Maximum_Sonar_Speed := FieldByName('Maximum_Sonar_Speed').AsSingle;
          Depth_Finding_Capable := FieldByName('Depth_Finding_Capable')
            .AsBoolean;
          Tracking_Capable := FieldByName('Tracking_Capable').AsBoolean;
          Surface_Detection_Capable := FieldByName('Surface_Detection_Capable')
            .AsBoolean;
          SubSurface_Detection_Capable := FieldByName
            ('SubSurface_Detection_Capable').AsBoolean;
          Torpedo_Detection_Capable := FieldByName('Torpedo_Detection_Capable')
            .AsBoolean;
          Mine_Detection_Capable := FieldByName('Mine_Detection_Capable')
            .AsBoolean;
          Cable_Length := FieldByName('Cable_Length').AsSingle;
          Maximum_Reported_Bearing_Error := FieldByName
            ('Maximum_Reported_Bearing_Error').AsSingle;
          Average_Beam_Width := FieldByName('Average_Beam_Width').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterSonobuoyDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TSonobuoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sonobuoy_Definition a LEFT JOIN Sonar_Definition b ');
    SQL.Add('ON a.Sonar_Index = b.Sonar_Index LEFT JOIN Note_Storage c ');
    SQL.Add('ON a.Sonobuoy_Index = c.Sonobuoy_Index ');
    SQL.Add('WHERE Class_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TSonobuoy_On_Board.Create;

        with rec.FDef do
        begin
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sonobuoy_Type := FieldByName('Sonobuoy_Type').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Endurance_Time := FieldByName('Endurance_Time').AsInteger;
          Max_Depth := FieldByName('Max_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          CPA_Detection_Capable := FieldByName('CPA_Detection_Capable')
            .AsInteger;
          CPA_Range_Limit := FieldByName('CPA_Range_Limit').AsSingle;
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
        end;

        with rec.FSonar.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
          Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
          Sonar_Classification := FieldByName('Sonar_Classification').AsInteger;
          Passive_Int_Period := FieldByName('Passive_Int_Period').AsInteger;
          Active_Int_Period := FieldByName('Active_Int_Period').AsInteger;
          TIOW_Short_Range := FieldByName('TIOW_Short_Range').AsSingle;
          TIOW_Medium_Range := FieldByName('TIOW_Medium_Range').AsSingle;
          TIOW_Long_Range := FieldByName('TIOW_Long_Range').AsSingle;
          Passive_Detect_Range := FieldByName('Passive_Detect_Range').AsSingle;
          Active_Detect_Range := FieldByName('Active_Detect_Range').AsSingle;
          Max_Detect_Range := FieldByName('Max_Detect_Range').AsSingle;
          Known_Signal_Source := FieldByName('Known_Signal_Source').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Sonar_Directivity_Index := FieldByName('Sonar_Directivity_Index')
            .AsSingle;
          Active_Operating_Power := FieldByName('Active_Operating_Power')
            .AsSingle;
          Active_Freq_of_Op := FieldByName('Active_Freq_of_Op').AsSingle;
          Passive_Freq_of_Op := FieldByName('Passive_Freq_of_Op').AsSingle;
          Max_Operating_Depth := FieldByName('Max_Operating_Depth').AsSingle;
          Sonar_Depth_Rate_of_Change := FieldByName
            ('Sonar_Depth_Rate_of_Change').AsSingle;
          Depth_per_Speed := FieldByName('Depth_per_Speed').AsSingle;
          Kinking_Processing := FieldByName('Kinking_Processing').AsBoolean;
          Turn_Rate_2_Kink := FieldByName('Turn_Rate_2_Kink').AsSingle;
          Time_2_Settle_Kinked := FieldByName('Time_2_Settle_Kinked').AsInteger;
          Bearing_Processing := FieldByName('Bearing_Processing').AsBoolean;
          Time_2_Resolve_Bearing := FieldByName('Time_2_Resolve_Bearing')
            .AsInteger;
          Passive_Processing := FieldByName('Passive_Processing').AsBoolean;
          Target_Identification := FieldByName('Target_Identification')
            .AsBoolean;
          Time_2_Identify := FieldByName('Time_2_Identify').AsInteger;
          Curve_Detection_Index := FieldByName('Curve_Detection_Index')
            .AsInteger;
          Track_Analysis := FieldByName('Track_Analysis').AsInteger;
          Time_2_Provide_Track := FieldByName('Time_2_Provide_Track').AsInteger;
          Ownship_Increase_due_to_Active := FieldByName
            ('Ownship_Increase_due_to_Active').AsSingle;
          Tow_Speed := FieldByName('Tow_Speed').AsSingle;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Maximum_Tow_Speed := FieldByName('Maximum_Tow_Speed').AsSingle;
          Maximum_Sonar_Speed := FieldByName('Maximum_Sonar_Speed').AsSingle;
          Depth_Finding_Capable := FieldByName('Depth_Finding_Capable')
            .AsBoolean;
          Tracking_Capable := FieldByName('Tracking_Capable').AsBoolean;
          Surface_Detection_Capable := FieldByName('Surface_Detection_Capable')
            .AsBoolean;
          SubSurface_Detection_Capable := FieldByName
            ('SubSurface_Detection_Capable').AsBoolean;
          Torpedo_Detection_Capable := FieldByName('Torpedo_Detection_Capable')
            .AsBoolean;
          Mine_Detection_Capable := FieldByName('Mine_Detection_Capable')
            .AsBoolean;
          Cable_Length := FieldByName('Cable_Length').AsSingle;
          Maximum_Reported_Bearing_Error := FieldByName
            ('Maximum_Reported_Bearing_Error').AsSingle;
          Average_Beam_Width := FieldByName('Average_Beam_Width').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSonobuoyDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonobuoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Sonobuoy_Index = b.Sonobuoy_Index');
    SQL.Add('WHERE a.Class_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetSonobuoyDefByRuntimeLibId(const aRPLID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TPlatform_Library_Entry;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Library_Entry a JOIN Sonobuoy_Definition b');
    SQL.Add('ON a.Sonobuoy_Index = b.Sonobuoy_Index');
    SQL.Add('WHERE a.Library_Index = ' + IntToStr(aRPLID));
    SQL.Add('ORDER BY b.Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPlatform_Library_Entry.Create;

        with rec.FData do
        begin
          Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertSonobuoyDef(var aRec: TRecSonobuoy_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Sonobuoy_Definition');
    SQL.Add('(Class_Identifier, Sonobuoy_Type, Platform_Domain,');
    SQL.Add('Platform_Category, Platform_Type, Endurance_Time, Max_Depth,');
    SQL.Add('Length, Width, Height, Front_Acoustic_Cross,');
    SQL.Add('Side_Acoustic_Cross, Damage_Capacity, CPA_Detection_Capable,');
    SQL.Add('CPA_Range_Limit, Sonar_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Class_Identifier) + ', ');
      SQL.Add(IntToStr(Sonobuoy_Type) + ', ');
      SQL.Add(IntToStr(Platform_Domain) + ', ');
      SQL.Add(IntToStr(Platform_Category) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');
      SQL.Add(IntToStr(Endurance_Time) + ', ');
      SQL.Add(FloatToStr(Max_Depth) + ', ');
      SQL.Add(FloatToStr(Length) + ', ');
      SQL.Add(FloatToStr(Width) + ', ');
      SQL.Add(FloatToStr(Height) + ', ');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ', ');
      SQL.Add(IntToStr(Damage_Capacity) + ', ');
      SQL.Add(IntToStr(CPA_Detection_Capable) + ', ');
      SQL.Add(FloatToStr(CPA_Range_Limit) + ', ');
      SQL.Add(IntToStr(Sonar_Index) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Sonobuoy_Definition');
      SQL.Add('WHERE Class_Identifier = ' + QuotedStr(Class_Identifier));
      Open;

      Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateSonobuoyDef(var aRec: TRecSonobuoy_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Sonobuoy_Definition');

    with aRec do
    begin
      SQL.Add('SET Class_Identifier = ' + QuotedStr(Class_Identifier));
      SQL.Add(', Sonobuoy_Type = ' + IntToStr(Sonobuoy_Type));
      SQL.Add(', Platform_Domain = ' + IntToStr(Platform_Domain));
      SQL.Add(', Platform_Category = ' + IntToStr(Platform_Category));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));
      SQL.Add(', Endurance_Time = ' + IntToStr(Endurance_Time));
      SQL.Add(', Max_Depth = ' + FloatToStr(Max_Depth));
      SQL.Add(', Length = ' + FloatToStr(Length));
      SQL.Add(', Width = ' + FloatToStr(Width));
      SQL.Add(', Height = ' + FloatToStr(Height));
      SQL.Add(', Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross));
      SQL.Add(', Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross));
      SQL.Add(', Damage_Capacity = ' + IntToStr(Damage_Capacity));
      SQL.Add(', CPA_Detection_Capable = ' + IntToStr(CPA_Detection_Capable));
      SQL.Add(', CPA_Range_Limit = ' + FloatToStr(CPA_Range_Limit));
      SQL.Add(', Sonar_Index = ' + IntToStr(Sonar_Index));
      SQL.Add('WHERE Sonobuoy_Index = ' + IntToStr(Sonobuoy_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteSonobuoyDef(const aSonobuoyIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE FROM Sonobuoy_Definition');
    SQL.Add('WHERE Sonobuoy_Index = ' + IntToStr(aSonobuoyIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' MAD Definition '}

function TdmTTT.GetAllMADDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TMAD_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM MAD_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.MAD_Index = b.MAD_Index ');
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMAD_On_Board.Create;

        with rec.FMAD_Def do
        begin
          MAD_Index := FieldByName('MAD_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Baseline_Detect_Range := FieldByName('Baseline_Detect_Range')
            .AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterMADDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TMAD_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM MAD_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.MAD_Index = b.MAD_Index ');
    SQL.Add('WHERE Class_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMAD_On_Board.Create;

        with rec.FMAD_Def do
        begin
          MAD_Index := FieldByName('MAD_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Baseline_Detect_Range := FieldByName('Baseline_Detect_Range')
            .AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetMADDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM MAD_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.MAD_Index = b.MAD_Index');
    SQL.Add('WHERE a.Class_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertMADDef(var aRec: TRecMAD_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO MAD_Definition');
    SQL.Add('(Class_Identifier, Baseline_Detect_Range ,Known_Cross_Section)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Class_Identifier) + ',');
      SQL.Add(FloatToStr(Baseline_Detect_Range) + ',');
      SQL.Add(FloatToStr(Known_Cross_Section) + ')');

      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM MAD_Definition');
      SQL.Add('WHERE Class_Identifier = ' + QuotedStr(Class_Identifier));
      Open;

      MAD_Index := FieldByName('MAD_Index').AsInteger;

    end;
  end;
end;

function TdmTTT.UpdateMADDef(var aRec: TRecMAD_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE MAD_Definition');

    with aRec do
    begin
      SQL.Add('SET Class_Identifier = ' + QuotedStr(Class_Identifier));
      SQL.Add(', Baseline_Detect_Range = ' + FloatToStr(Baseline_Detect_Range));
      SQL.Add(', Known_Cross_Section = ' + FloatToStr(Known_Cross_Section));
      SQL.Add('WHERE MAD_Index = ' + IntToStr(MAD_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteMADDef(const aMADIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE MAD_Definition');
    SQL.Add('WHERE MAD_Index = ' + IntToStr(aMADIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Sensor On Board '}

function TdmTTT.GetSensor_On_Board_By_Index(const typeOnBoard, id: Integer): Boolean;
var
  ssql,tabel, indexField: string;
begin
  result := False;
  if not ZConn.Connected then
    exit;

  case typeOnBoard of
    1:
    begin
      tabel := 'Radar_On_Board';
      indexField := 'Radar_Index';
    end;
    2:
    begin
      tabel := 'MAD_Sensor_On_Board';
      indexField := 'MAD_Index';
    end;
    3:
    begin
      tabel := 'ESM_On_Board';
      indexField := 'ESM_Index';
    end;
    4:
    begin
      tabel := 'Sonar_On_Board';
      indexField := 'Sonar_Index';
    end;
    5:
    begin
      tabel := 'EO_On_Board';
      indexField := 'EO_Index';
    end;
    6:
    begin
      tabel := 'IFF_Sensor_On_Board';
      indexField := 'Radar_Index';
    end;
    7:
    begin
      tabel := 'Visual_Sensor_On_Board';
      indexField := 'Radar_Index';
    end;
    8:
    begin
      tabel := 'Sonobuoy_On_Board';
      indexField := 'Sonobuoy_Index';
    end;
  end;

  with ZQ do
  begin
    Close;
    SQL.Clear;

    ssql := 'SELECT * ';
    ssql := ssql + 'FROM ' + tabel;
    ssql := ssql + ' WHERE ' + indexField + ' = ';
    ssql := ssql + IntToStr(id);

    SQL.Add(ssql);
    Open;

    if not IsEmpty then
      Result := True;
  end;
end;

function TdmTTT.GetRadarOnBoard(const aVehicleID: Integer;var aList: TList): Integer;
var
  i : Integer;
  rec : TRadar_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Radar_On_Board a JOIN Radar_Definition b ');
    SQL.Add('ON a.Radar_Index = b.Radar_Index ');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TRadar_On_Board.Create;

        with rec.FData do
        begin
          Radar_Instance_Index := FieldByName('Radar_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
          Submerged_Antenna_Height := FieldByName('Submerged_Antenna_Height')
            .AsSingle;
          Max_Operational_Depth := FieldByName('Max_Operational_Depth').
            AsSingle;
        end;

        with rec.FDef do
        begin
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Radar_Identifier := FieldByName('Radar_Identifier').AsString;
          Radar_Emitter := FieldByName('Radar_Emitter').AsString;
          Radar_Type := FieldByName('Radar_Type').AsInteger;
          Frequency := FieldByName('Frequency').AsSingle;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Radar_Power := FieldByName('Radar_Power').AsSingle;
          Detection_Range := FieldByName('Detection_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Unambig_Detect_Range := FieldByName('Max_Unambig_Detect_Range')
            .AsSingle;
          IFF_Capability := FieldByName('IFF_Capability').AsBoolean;
          Altitude_Data_Capability := FieldByName('Altitude_Data_Capability')
            .AsBoolean;
          Ground_Speed_Data_Capability := FieldByName
            ('Ground_Speed_Data_Capability').AsBoolean;
          Heading_Data_Capability := FieldByName('Heading_Data_Capability')
            .AsBoolean;
          Plat_Type_Recog_Capability := FieldByName
            ('Plat_Type_Recog_Capability').AsBoolean;
          Plat_Class_Recog_Capability := FieldByName
            ('Plat_Class_Recog_Capability')
            .AsBoolean;
          Clutter_Rejection := FieldByName('Clutter_Rejection').AsSingle;
          Anti_Jamming_Capable := FieldByName('Anti_Jamming_Capable').AsBoolean;
          Curve_Definition_Index := FieldByName('Curve_Definition_Index')
            .AsInteger;
          Second_Vert_Coverage := FieldByName('Second_Vert_Coverage').AsBoolean;
          Jamming_A_Resistant := FieldByName('Jamming_A_Resistant').AsBoolean;
          Jamming_B_Resistant := FieldByName('Jamming_B_Resistant').AsBoolean;
          Jamming_C_Resistant := FieldByName('Jamming_C_Resistant').AsBoolean;
          Anti_Jamming_A_Resistant := FieldByName('Anti_Jamming_A_Resistant')
            .AsBoolean;
          Anti_Jamming_B_Resistant := FieldByName('Anti_Jamming_B_Resistant')
            .AsBoolean;
          Anti_Jamming_C_Resistant := FieldByName('Anti_Jamming_C_Resistant')
            .AsBoolean;
          Anti_Jamming_Range_Reduction := FieldByName
            ('Anti_Jamming_Range_Reduction').AsSingle;
          Beam_Width := FieldByName('Beam_Width').AsSingle;
          Sector_Scan_Capable := FieldByName('Sector_Scan_Capable').AsBoolean;
          Off_Axis_Jammer_Reduction := FieldByName('Off_Axis_Jammer_Reduction')
            .AsSingle;
          Num_FCR_Channels := FieldByName('Num_FCR_Channels').AsInteger;
          Radar_Spot_Number := FieldByName('Radar_Spot_Number').AsInteger;
          Radar_Horizon_Factor := FieldByName('Radar_Horizon_Factor').AsSingle;
          Main_Lobe_Gain := FieldByName('Main_Lobe_Gain').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
          ECCM_Type := FieldByName('ECCM_Type').AsInteger;
          MTI_Capable := FieldByName('MTI_Capable').AsBoolean;
          MTI_MinTargetSpeed := FieldByName('MTI_MinTargetSpeed').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSonarOnBoard(const aVehicleID: Integer;var aList: TList): Integer;
var
  i : Integer;
  rec : TSonar_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonar_On_Board a JOIN Sonar_Definition b');
    SQL.Add('ON a.Sonar_Index = b.Sonar_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TSonar_On_Board.Create;

        with rec.FData do
        begin
          Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Time_2_Deploy := FieldByName('Time_2_Deploy').AsInteger;
          Time_2_Stow := FieldByName('Time_2_Stow').AsInteger;
        end;

        with rec.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
          Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
          Sonar_Classification := FieldByName('Sonar_Classification').AsInteger;
          Passive_Int_Period := FieldByName('Passive_Int_Period').AsInteger;
          Active_Int_Period := FieldByName('Active_Int_Period').AsInteger;
          TIOW_Short_Range := FieldByName('TIOW_Short_Range').AsSingle;
          TIOW_Medium_Range := FieldByName('TIOW_Medium_Range').AsSingle;
          TIOW_Long_Range := FieldByName('TIOW_Long_Range').AsSingle;
          Passive_Detect_Range := FieldByName('Passive_Detect_Range').AsSingle;
          Active_Detect_Range := FieldByName('Active_Detect_Range').AsSingle;
          Max_Detect_Range := FieldByName('Max_Detect_Range').AsSingle;
          Known_Signal_Source := FieldByName('Known_Signal_Source').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Sonar_Directivity_Index := FieldByName('Sonar_Directivity_Index')
            .AsSingle;
          Active_Operating_Power := FieldByName('Active_Operating_Power')
            .AsSingle;
          Active_Freq_of_Op := FieldByName('Active_Freq_of_Op').AsSingle;
          Passive_Freq_of_Op := FieldByName('Passive_Freq_of_Op').AsSingle;
          Max_Operating_Depth := FieldByName('Max_Operating_Depth').AsSingle;
          Sonar_Depth_Rate_of_Change := FieldByName
            ('Sonar_Depth_Rate_of_Change').AsSingle;
          Depth_per_Speed := FieldByName('Depth_per_Speed').AsSingle;
          Kinking_Processing := FieldByName('Kinking_Processing').AsBoolean;
          Turn_Rate_2_Kink := FieldByName('Turn_Rate_2_Kink').AsSingle;
          Time_2_Settle_Kinked := FieldByName('Time_2_Settle_Kinked').AsInteger;
          Bearing_Processing := FieldByName('Bearing_Processing').AsBoolean;
          Time_2_Resolve_Bearing := FieldByName('Time_2_Resolve_Bearing')
            .AsInteger;
          Passive_Processing := FieldByName('Passive_Processing').AsBoolean;
          Target_Identification := FieldByName('Target_Identification')
            .AsBoolean;
          Time_2_Identify := FieldByName('Time_2_Identify').AsInteger;
          Curve_Detection_Index := FieldByName('Curve_Detection_Index')
            .AsInteger;
          Track_Analysis := FieldByName('Track_Analysis').AsInteger;
          Time_2_Provide_Track := FieldByName('Time_2_Provide_Track').AsInteger;
          Ownship_Increase_due_to_Active := FieldByName
            ('Ownship_Increase_due_to_Active').AsSingle;
          Tow_Speed := FieldByName('Tow_Speed').AsSingle;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Maximum_Tow_Speed := FieldByName('Maximum_Tow_Speed').AsSingle;
          Maximum_Sonar_Speed := FieldByName('Maximum_Sonar_Speed').AsSingle;
          Depth_Finding_Capable := FieldByName('Depth_Finding_Capable')
            .AsBoolean;
          Tracking_Capable := FieldByName('Tracking_Capable').AsBoolean;
          Surface_Detection_Capable := FieldByName('Surface_Detection_Capable')
            .AsBoolean;
          SubSurface_Detection_Capable := FieldByName
            ('SubSurface_Detection_Capable').AsBoolean;
          Torpedo_Detection_Capable := FieldByName('Torpedo_Detection_Capable')
            .AsBoolean;
          Mine_Detection_Capable := FieldByName('Mine_Detection_Capable')
            .AsBoolean;
          Cable_Length := FieldByName('Cable_Length').AsSingle;
          Maximum_Reported_Bearing_Error := FieldByName
            ('Maximum_Reported_Bearing_Error').AsSingle;
          Average_Beam_Width := FieldByName('Average_Beam_Width').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetESMOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TESM_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM ESM_On_Board a JOIN ESM_Definition b');
    SQL.Add('ON a.ESM_Index = b.ESM_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TESM_On_Board.Create;

        with rec.FData do
        begin
          ESM_Instance_Index := FieldByName('ESM_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          ESM_Index := FieldByName('ESM_Index').AsInteger;
          Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
          Max_Operational_Depth := FieldByName('Max_Operational_Depth')
            .AsSingle;
          Submerged_Antenna_Height := FieldByName('Submerged_Antenna_Height')
            .AsSingle;
        end;

        with rec.FESM_Def do
        begin
          ESM_Index := FieldByName('ESM_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Low_Detect_Frequency1 := FieldByName('Low_Detect_Frequency1').AsFloat;
          High_Detect_Frequency1 := FieldByName('High_Detect_Frequency1')
            .AsFloat;
          Low_Detect_Frequency2 := FieldByName('Low_Detect_Frequency2').AsFloat;
          High_Detect_Frequency2 := FieldByName('High_Detect_Frequency2')
            .AsFloat;
          ESM_Classification := FieldByName('ESM_Classification').AsInteger;
          Emitter_Detect_Range_Factor := FieldByName
            ('Emitter_Detect_Range_Factor').AsSingle;
          Comm_Intercept_Capable := FieldByName('Comm_Intercept_Capable')
            .AsInteger;
          Frequency_Identify_Range := FieldByName('Frequency_Identify_Range')
            .AsFloat;
          PRF_Identify_Range := FieldByName('PRF_Identify_Range').AsSingle;
          Pulsewidth_Identify_Range := FieldByName('Pulsewidth_Identify_Range')
            .AsSingle;
          Scan_Period_Identify_Range := FieldByName
            ('Scan_Period_Identify_Range').AsSingle;
          Sector_Blank_Detection_Factor := FieldByName
            ('Sector_Blank_Detection_Factor').AsSingle;
          Identification_Period := FieldByName('Identification_Period')
            .AsSingle;
          Classification_Period := FieldByName('Classification_Period')
            .AsSingle;
          Minimum_Bearing_Error_Variance := FieldByName
            ('Minimum_Bearing_Error_Variance').AsSingle;
          Initial_Bearing_Error_Variance := FieldByName
            ('Initial_Bearing_Error_Variance').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetEOOnBoard(const aVehicleID: Integer;var aList: TList): Integer;
var
  i : Integer;
  rec : TEOD_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM EO_On_Board a JOIN EO_Detection_Definition b');
    SQL.Add('ON a.EO_Index = b.EO_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TEOD_On_Board.Create;

        with rec.FData do
        begin
          EO_Instance_Index := FieldByName('EO_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          EO_Index := FieldByName('EO_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FEO_Def do
        begin
          EO_Index := FieldByName('EO_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sensor_Type := FieldByName('Sensor_Type').AsInteger;
          Detection_Range := FieldByName('Detection_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Num_FC_Channels := FieldByName('Num_FC_Channels').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSonobuoyOnBoard(const aVehicleID: Integer;var aList: TList): Integer;
var
  i : Integer;
  rec : TSonobuoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sonobuoy_On_Board a JOIN Sonobuoy_Definition b ON');
    SQL.Add('a.Sonobuoy_Index = b. Sonobuoy_Index join Sonar_Definition c ');
    SQL.Add('on b.Sonar_Index = c.Sonar_Index ');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TSonobuoy_On_Board.Create;

        with rec.FData do
        begin
          Sonobuoy_Instance_Index := FieldByName('Sonobuoy_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
        end;

        with rec.FDef do
        begin
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sonobuoy_Type := FieldByName('Sonobuoy_Type').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Endurance_Time := FieldByName('Endurance_Time').AsInteger;
          Max_Depth := FieldByName('Max_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          CPA_Detection_Capable := FieldByName('CPA_Detection_Capable')
            .AsInteger;
          CPA_Range_Limit := FieldByName('CPA_Range_Limit').AsSingle;
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
        end;

        with rec.FSonar.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
          Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
          Sonar_Classification := FieldByName('Sonar_Classification').AsInteger;
          Passive_Int_Period := FieldByName('Passive_Int_Period').AsInteger;
          Active_Int_Period := FieldByName('Active_Int_Period').AsInteger;
          TIOW_Short_Range := FieldByName('TIOW_Short_Range').AsSingle;
          TIOW_Medium_Range := FieldByName('TIOW_Medium_Range').AsSingle;
          TIOW_Long_Range := FieldByName('TIOW_Long_Range').AsSingle;
          Passive_Detect_Range := FieldByName('Passive_Detect_Range').AsSingle;
          Active_Detect_Range := FieldByName('Active_Detect_Range').AsSingle;
          Max_Detect_Range := FieldByName('Max_Detect_Range').AsSingle;
          Known_Signal_Source := FieldByName('Known_Signal_Source').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Sonar_Directivity_Index := FieldByName('Sonar_Directivity_Index')
            .AsSingle;
          Active_Operating_Power := FieldByName('Active_Operating_Power')
            .AsSingle;
          Active_Freq_of_Op := FieldByName('Active_Freq_of_Op').AsSingle;
          Passive_Freq_of_Op := FieldByName('Passive_Freq_of_Op').AsSingle;
          Max_Operating_Depth := FieldByName('Max_Operating_Depth').AsSingle;
          Sonar_Depth_Rate_of_Change := FieldByName
            ('Sonar_Depth_Rate_of_Change').AsSingle;
          Depth_per_Speed := FieldByName('Depth_per_Speed').AsSingle;
          Kinking_Processing := FieldByName('Kinking_Processing').AsBoolean;
          Turn_Rate_2_Kink := FieldByName('Turn_Rate_2_Kink').AsSingle;
          Time_2_Settle_Kinked := FieldByName('Time_2_Settle_Kinked').AsInteger;
          Bearing_Processing := FieldByName('Bearing_Processing').AsBoolean;
          Time_2_Resolve_Bearing := FieldByName('Time_2_Resolve_Bearing')
            .AsInteger;
          Passive_Processing := FieldByName('Passive_Processing').AsBoolean;
          Target_Identification := FieldByName('Target_Identification')
            .AsBoolean;
          Time_2_Identify := FieldByName('Time_2_Identify').AsInteger;
          Curve_Detection_Index := FieldByName('Curve_Detection_Index')
            .AsInteger;
          Track_Analysis := FieldByName('Track_Analysis').AsInteger;
          Time_2_Provide_Track := FieldByName('Time_2_Provide_Track').AsInteger;
          Ownship_Increase_due_to_Active := FieldByName
            ('Ownship_Increase_due_to_Active').AsSingle;
          Tow_Speed := FieldByName('Tow_Speed').AsSingle;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Maximum_Tow_Speed := FieldByName('Maximum_Tow_Speed').AsSingle;
          Maximum_Sonar_Speed := FieldByName('Maximum_Sonar_Speed').AsSingle;
          Depth_Finding_Capable := FieldByName('Depth_Finding_Capable')
            .AsBoolean;
          Tracking_Capable := FieldByName('Tracking_Capable').AsBoolean;
          Surface_Detection_Capable := FieldByName('Surface_Detection_Capable')
            .AsBoolean;
          SubSurface_Detection_Capable := FieldByName
            ('SubSurface_Detection_Capable').AsBoolean;
          Torpedo_Detection_Capable := FieldByName('Torpedo_Detection_Capable')
            .AsBoolean;
          Mine_Detection_Capable := FieldByName('Mine_Detection_Capable')
            .AsBoolean;
          Cable_Length := FieldByName('Cable_Length').AsSingle;
          Maximum_Reported_Bearing_Error := FieldByName
            ('Maximum_Reported_Bearing_Error').AsSingle;
          Average_Beam_Width := FieldByName('Average_Beam_Width').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetMADOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TMAD_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM MAD_Sensor_On_Board a JOIN MAD_Definition b');
    SQL.Add('ON a.MAD_Index = b.MAD_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMAD_On_Board.Create;

        with rec.FData do
        begin
          MAD_Instance_Index := FieldByName('MAD_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          MAD_Index := FieldByName('MAD_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FMAD_Def do
        begin
          MAD_Index := FieldByName('MAD_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Baseline_Detect_Range := FieldByName('Baseline_Detect_Range')
            .AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetIFFOnBoard(const aVehicleID: Integer;var aList: TList): Integer;
var
  i : Integer;
  rec : TIFF_Sensor_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM IFF_Sensor_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TIFF_Sensor_On_Board.Create;

        with rec.FData do
        begin
          IFF_Instance_Index := FieldByName('IFF_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          IFF_Capability := FieldByName('IFF_Capability').AsInteger;
          Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
          Submerged_Antenna_Height := FieldByName('Submerged_Antenna_Height')
            .AsSingle;
          Max_Operational_Depth := FieldByName('Max_Operational_Depth')
            .AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetVisualOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TVisual_Sensor_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Visual_Sensor_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TVisual_Sensor_On_Board.Create;

        with rec.FData do
        begin
          Visual_Instance_Index := FieldByName('Visual_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Observer_Height := FieldByName('Observer_Height').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetRadarOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Radar_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetSonarOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonar_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetESMOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM ESM_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetEOOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM EO_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetMADOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM MAD_Sensor_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetSonobuoyOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonobuoy_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetIFFOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM IFF_Sensor_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetVisualDetectorOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Visual_Sensor_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.InsertRadarOnBoard(var aRec: TRecRadar_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Radar_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index, Radar_Index,');
    SQL.Add('Rel_Antenna_Height, Submerged_Antenna_Height,');
    SQL.Add('Max_Operational_Depth)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Radar_Index) + ', ');
      SQL.Add(FloatToStr(Rel_Antenna_Height) + ', ');
      SQL.Add(FloatToStr(Submerged_Antenna_Height) + ', ');
      SQL.Add(FloatToStr(Max_Operational_Depth) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Radar_On_Board');
    SQL.Add('WHERE Instance_Identifier = ' + QuotedStr(aRec.Instance_Identifier));
    SQL.Add('AND Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Radar_Instance_Index := FieldByName('Radar_Instance_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.InsertSonarOnBoard(var aRec: TRecSonar_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Sonar_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index, Sonar_Index,');
    SQL.Add('Minimum_Depth, Time_2_Deploy, Time_2_Stow)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Sonar_Index) + ', ');
      SQL.Add(FloatToStr(Minimum_Depth) + ', ');
      SQL.Add(IntToStr(Time_2_Deploy) + ', ');
      SQL.Add(IntToStr(Time_2_Stow) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonar_On_Board');
    SQL.Add('WHERE Instance_Identifier = ' + QuotedStr(aRec.Instance_Identifier));
    SQL.Add('AND Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Sonar_Instance_Index := FieldByName('Sonar_Instance_Index')
        .AsInteger;
    end;
  end;
end;

function TdmTTT.InsertEOOnBoard(var aRec: TRecEO_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO EO_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index, EO_Index,');
    SQL.Add('Antenna_Height)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(EO_Index) + ', ');
      SQL.Add(FloatToStr(Antenna_Height) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM EO_On_Board');
    SQL.Add('WHERE Instance_Identifier = ' + QuotedStr(aRec.Instance_Identifier));
    SQL.Add('AND Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.EO_Instance_Index := FieldByName('EO_Instance_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.InsertESMOnBoard(var aRec: TRecESM_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO ESM_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index, ESM_Index,');
    SQL.Add('Rel_Antenna_Height, Max_Operational_Depth,');
    SQL.Add('Submerged_Antenna_Height)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(ESM_Index) + ', ');
      SQL.Add(FloatToStr(Rel_Antenna_Height) + ', ');
      SQL.Add(FloatToStr(Max_Operational_Depth) + ', ');
      SQL.Add(FloatToStr(Submerged_Antenna_Height) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM ESM_On_Board');
    SQL.Add('WHERE Instance_Identifier = ' + QuotedStr(aRec.Instance_Identifier));
    SQL.Add('AND Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.ESM_Instance_Index := FieldByName('ESM_Instance_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.InsertSonobuoyOnBoard(var aRec: TRecSonobuoy_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Sonobuoy_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index,');
    SQL.Add('Sonobuoy_Index, Quantity, Sonar_Instance_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Sonobuoy_Index) + ', ');
      SQL.Add(IntToStr(Quantity) + ', ');
      SQL.Add(IntToStr(Sonar_Instance_Index) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonobuoy_On_Board');
    SQL.Add('WHERE Instance_Identifier = ' + QuotedStr(aRec.Instance_Identifier));
    SQL.Add('AND Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Sonobuoy_Instance_Index := FieldByName('Sonobuoy_Instance_Index')
        .AsInteger;
    end;
  end;
end;

function TdmTTT.InsertIFFOnBoard(var aRec: TRecIFF_Sensor_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO IFF_Sensor_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index,');
    SQL.Add('IFF_Capability, Rel_Antenna_Height, Max_Operational_Depth,');
    SQL.Add('Submerged_Antenna_Height)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(IFF_Capability) + ', ');
      SQL.Add(FloatToStr(Rel_Antenna_Height) + ', ');
      SQL.Add(FloatToStr(Max_Operational_Depth) + ', ');
      SQL.Add(FloatToStr(Submerged_Antenna_Height) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM IFF_Sensor_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.IFF_Instance_Index := FieldByName('IFF_Instance_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.InsertVisualOnBoard(var aRec: TRecVisual_Sensor_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Visual_Sensor_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index,');
    SQL.Add('Observer_Height)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(FloatToStr(Observer_Height) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Visual_Sensor_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Visual_Instance_Index := FieldByName('Visual_Instance_Index')
        .AsInteger;
    end;
  end;
end;

function TdmTTT.InsertMADOnBoard(var aRec: TRecMAD_Sensor_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO MAD_Sensor_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index, MAD_Index,');
    SQL.Add('Antenna_Height)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(MAD_Index) + ', ');
      SQL.Add(FloatToStr(Antenna_Height) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM MAD_Sensor_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    SQL.Add('AND MAD_Index = ' + IntToStr(aRec.MAD_Index));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.MAD_Instance_Index := FieldByName('MAD_Instance_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateRadarOnBoard(var aRec: TRecRadar_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Radar_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Radar_Index = ' + IntToStr(Radar_Index));
      SQL.Add(', Rel_Antenna_Height = ' + FloatToStr(Rel_Antenna_Height));
      SQL.Add(', Submerged_Antenna_Height = ' +FloatToStr(Submerged_Antenna_Height));
      SQL.Add(', Max_Operational_Depth = ' + FloatToStr(Max_Operational_Depth));
      SQL.Add('WHERE Radar_Instance_Index = ' + IntToStr(Radar_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateEOOnBoard(var aRec: TRecEO_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE EO_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', EO_Index = ' + IntToStr(EO_Index));
      SQL.Add(', Antenna_Height = ' + FloatToStr(Antenna_Height));
      SQL.Add('WHERE EO_Instance_Index = ' + IntToStr(EO_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateESMOnBoard(var aRec: TRecESM_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE ESM_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', ESM_Index = ' + IntToStr(ESM_Index));
      SQL.Add(', Rel_Antenna_Height = ' + FloatToStr(Rel_Antenna_Height));
      SQL.Add(', Max_Operational_Depth = ' + FloatToStr(Max_Operational_Depth));
      SQL.Add(', Submerged_Antenna_Height = ' +
        FloatToStr(Submerged_Antenna_Height));
      SQL.Add(' WHERE ESM_Instance_Index = ' + IntToStr(ESM_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateSonarOnBoard(var aRec: TRecSonar_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Sonar_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Sonar_Index = ' + IntToStr(Sonar_Index));
      SQL.Add(', Minimum_Depth = ' + FloatToStr(Minimum_Depth));
      SQL.Add(', Time_2_Deploy = ' + IntToStr(Time_2_Deploy));
      SQL.Add(', Time_2_Stow = ' + IntToStr(Time_2_Stow));
      SQL.Add('WHERE Sonar_Instance_Index = ' + IntToStr(Sonar_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateSonobuoyOnBoard(var aRec: TRecSonobuoy_On_Board): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Sonobuoy_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Sonobuoy_Index = ' + IntToStr(Sonobuoy_Index));
      SQL.Add(', Quantity = ' + IntToStr(Quantity));
      SQL.Add(', Sonar_Instance_Index = ' + IntToStr(Sonar_Instance_Index));
      SQL.Add('WHERE Sonobuoy_Instance_Index = ' +
        IntToStr(Sonobuoy_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateIFFOnBoard(var aRec: TRecIFF_Sensor_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE IFF_Sensor_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', IFF_Capability = ' + IntToStr(IFF_Capability));
      SQL.Add(', Rel_Antenna_Height = ' + FloatToStr(Rel_Antenna_Height));
      SQL.Add(', Max_Operational_Depth = ' + FloatToStr(Max_Operational_Depth));
      SQL.Add(', Submerged_Antenna_Height = ' +
        FloatToStr(Submerged_Antenna_Height));
      SQL.Add(' WHERE IFF_Instance_Index = ' + IntToStr(IFF_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateVisualOnBoard(var aRec: TRecVisual_Sensor_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Visual_Sensor_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Observer_Height = ' + FloatToStr(Observer_Height));
      SQL.Add('WHERE Visual_Instance_Index = ' +
        IntToStr(Visual_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateMADOnBoard(var aRec: TRecMAD_Sensor_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE MAD_Sensor_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', MAD_Index = ' + IntToStr(MAD_Index));
      SQL.Add(', Antenna_Height = ' + FloatToStr(Antenna_Height));
      SQL.Add('WHERE MAD_Instance_Index = ' + IntToStr(MAD_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteRadarOnBoard(const aDeleteType: Byte;const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Radar_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Radar_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Radar_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Radar_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.DeleteSonarOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Sonar_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Sonar_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonar_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Sonar_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.DeleteESMOnBoard(const aDeleteType: Byte;const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM ESM_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE ESM_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM ESM_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE ESM_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.DeleteEOOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM EO_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE EO_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM EO_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE EO_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.DeleteSonobuoyOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Sonobuoy_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Sonobuoy_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Sonobuoy_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Sonobuoy_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.DeleteMADOnBoard(const aDeleteType: Byte;const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM MAD_Sensor_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE MAD_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM MAD_Sensor_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE MAD_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.DeleteIFFOnBoard(const aDeleteType: Byte;const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM IFF_Sensor_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE IFF_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM IFF_Sensor_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE IFF_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.DeleteVisualOnBoard(const aDeleteType: Byte;const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Visual_Sensor_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Visual_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Visual_Sensor_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Visual_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$ENDREGION}

{$REGION ' Weapons Section '}

{$REGION ' Missile Definition '}

function TdmTTT.GetAllMissileDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TMissile_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Missile_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Missile_Index = b.Missile_Index ');
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      try
        First;

        while not Eof do
        begin
          rec := TMissile_On_Board.Create;

          {$REGION ' Memasukkan data kedalam objek '}
          with rec.FDef do
          begin
            Missile_Index := FieldByName('Missile_Index').AsInteger;
            Class_Identifier := FieldByName('Class_Identifier').AsString;
            Platform_Domain := FieldByName('Platform_Domain').AsInteger;
            Platform_Category := FieldByName('Platform_Category').AsInteger;
            Platform_Type := FieldByName('Platform_Type').AsInteger;
            Max_Range := FieldByName('Max_Range').AsSingle;
            Min_Range := FieldByName('Min_Range').AsSingle;
            Motion_Index := FieldByName('Motion_Index').AsInteger;
            Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
            Second_Seeker_Pattern_Capable := FieldByName
              ('Second_Seeker_Pattern_Capable').AsInteger;
            Seeker_Bias_Capable := FieldByName('Seeker_Bias_Capable').AsInteger;
            Fixed_Seeker_Turn_On_Range := FieldByName
              ('Fixed_Seeker_Turn_On_Range')
              .AsInteger;
            Lethality := FieldByName('Lethality').AsInteger;
            Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
            Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
            Default_Altitude := FieldByName('Default_Altitude').AsSingle;
            Length := FieldByName('Length').AsSingle;
            Width := FieldByName('Width').AsSingle;
            Height := FieldByName('Height').AsSingle;
            Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
            Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
            Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
            Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
            Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
            Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
            Pursuit_Guide_Type := FieldByName('Pursuit_Guide_Type').AsInteger;
            Primary_Guide_Type := FieldByName('Primary_Guide_Type').AsInteger;
            Secondary_Guide_Type := FieldByName('Secondary_Guide_Type').AsInteger;
            Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
            Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
            Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
            Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
            Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable')
              .AsInteger;
            Primary_Target_Domain := FieldByName('Primary_Target_Domain')
              .AsInteger;
            SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
            CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
            TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
            IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
            AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
            Transmitted_Frequency := FieldByName('Transmitted_Frequency').AsFloat;
            Scan_Rate := FieldByName('Scan_Rate').AsSingle;
            Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
            Pulse_Width := FieldByName('Pulse_Width').AsSingle;
            Xmit_Power := FieldByName('Xmit_Power').AsSingle;
            TARH_Jamming_A_Probability := FieldByName
              ('TARH_Jamming_A_Probability').AsSingle;
            TARH_Jamming_B_Probability := FieldByName
              ('TARH_Jamming_B_Probability').AsSingle;
            TARH_Jamming_C_Probability := FieldByName
              ('TARH_Jamming_C_Probability').AsSingle;
            Wpt_Capable := FieldByName('Wpt_Capable').AsInteger;
            Max_Num_Wpts := FieldByName('Max_Num_Wpts').AsInteger;
            Min_Final_Leg_Length := FieldByName('Min_Final_Leg_Length').AsSingle;
            Engagement_Range := FieldByName('Engagement_Range').AsSingle;
            Max_Firing_Depth := FieldByName('Max_Firing_Depth').AsSingle;
            Upper_Received_Freq := FieldByName('Upper_Received_Freq').AsFloat;
            Lower_Received_Freq := FieldByName('Lower_Received_Freq').AsFloat;
            Fly_Out_Required := FieldByName('Fly_Out_Required').AsInteger;
            Fly_Out_Range := FieldByName('Fly_Out_Range').AsSingle;
            Fly_Out_Altitude := FieldByName('Fly_Out_Altitude').AsSingle;
            Booster_Separation_Required := FieldByName
              ('Booster_Separation_Required').AsInteger;
            Booster_Separation_Range := FieldByName('Booster_Separation_Range')
              .AsSingle;
            Booster_Separation_Box_Width := FieldByName
              ('Booster_Separation_Box_Width').AsSingle;
            Booster_Separation_Box_Length := FieldByName
              ('Booster_Separation_Box_Length').AsSingle;
            Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
            Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
            Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
            Terminal_Guidance_Capability := FieldByName
              ('Terminal_Guidance_Capability').AsInteger;
            Terminal_Altitude_Required := FieldByName
              ('Terminal_Altitude_Required')
              .AsInteger;
            Terminal_Acquisition_Altitude := FieldByName
              ('Terminal_Acquisition_Altitude').AsSingle;
            Terminal_Sinuation_Start_Range := FieldByName
              ('Terminal_Sinuation_Start_Range').AsSingle;
            Terminal_Sinuation_Period := FieldByName('Terminal_Sinuation_Period')
              .AsSingle;
            Terminal_Sinuation_Amplitude := FieldByName
              ('Terminal_Sinuation_Amplitude').AsSingle;
            Terminal_Pop_Up_Range := FieldByName('Terminal_Pop_Up_Range')
              .AsSingle;
            Terminal_Pop_Up_Altitude := FieldByName('Terminal_Pop_Up_Altitude')
              .AsSingle;
            Mid_Course_Update_Mode := FieldByName('Mid_Course_Update_Mode')
              .AsInteger;
            Home_On_Jam_Type_A_Capable := FieldByName
              ('Home_On_Jam_Type_A_Capable')
              .AsInteger;
            Home_On_Jam_Type_B_Capable := FieldByName
              ('Home_On_Jam_Type_B_Capable')
              .AsInteger;
            Home_On_Jam_Type_C_Capable := FieldByName
              ('Home_On_Jam_Type_C_Capable')
              .AsInteger;
            Launch_Method := FieldByName('Launch_Method').AsInteger;
            Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
            Launch_Speed := FieldByName('Launch_Speed').AsInteger;
            Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
              .AsInteger;
            Term_Guide_Azimuth_Narrow := FieldByName('Term_Guide_Azimuth_Narrow')
              .AsSingle;
            Term_Guide_Elevation_Narrow := FieldByName
              ('Term_Guide_Elevation_Narrow').AsSingle;
            Term_Guide_Range_Narrow := FieldByName('Term_Guide_Range_Narrow')
              .AsSingle;
            Spot_Number := FieldByName('Spot_Number').AsInteger;
            ECCM_Type := FieldByName('ECCM_Type').AsInteger;
            ECM_Detonation := FieldByName('ECM_Detonation').AsInteger;
            ECM_Detection := FieldByName('ECM_Detection').AsInteger;
            Detectability_Type := FieldByName('Detectability_Type').AsInteger;
            IRCM_Detonation := FieldByName('IRCM_Detonation').AsInteger;
            IRCM_Detection := FieldByName('IRCM_Detection').AsInteger;
            Sea_State_Modelling_Capable := FieldByName
              ('Sea_State_Modelling_Capable').AsInteger;
          end;

          with rec.FNote do
          begin
            Note_Index := FieldByName('Note_Index').AsInteger;
            Note_Type := FieldByName('Note_Type').AsInteger;
            Notes := FieldByName('Notes').AsString;
          end;

          {$ENDREGION}

          aList.Add(rec);
          Next;
        end;

      finally
      end;
    end;
  end;
end;

function TdmTTT.GetFilterMissileDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TMissile_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Missile_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Missile_Index = b.Missile_Index ');
    SQL.Add('WHERE Class_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      try
        First;

        while not Eof do
        begin
          rec := TMissile_On_Board.Create;

          {$REGION ' Memasukkan data kedalam objek '}
          with rec.FDef do
          begin
            Missile_Index := FieldByName('Missile_Index').AsInteger;
            Class_Identifier := FieldByName('Class_Identifier').AsString;
            Platform_Domain := FieldByName('Platform_Domain').AsInteger;
            Platform_Category := FieldByName('Platform_Category').AsInteger;
            Platform_Type := FieldByName('Platform_Type').AsInteger;
            Max_Range := FieldByName('Max_Range').AsSingle;
            Min_Range := FieldByName('Min_Range').AsSingle;
            Motion_Index := FieldByName('Motion_Index').AsInteger;
            Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
            Second_Seeker_Pattern_Capable := FieldByName
              ('Second_Seeker_Pattern_Capable').AsInteger;
            Seeker_Bias_Capable := FieldByName('Seeker_Bias_Capable').AsInteger;
            Fixed_Seeker_Turn_On_Range := FieldByName
              ('Fixed_Seeker_Turn_On_Range')
              .AsInteger;
            Lethality := FieldByName('Lethality').AsInteger;
            Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
            Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
            Default_Altitude := FieldByName('Default_Altitude').AsSingle;
            Length := FieldByName('Length').AsSingle;
            Width := FieldByName('Width').AsSingle;
            Height := FieldByName('Height').AsSingle;
            Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
            Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
            Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
            Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
            Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
            Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
            Pursuit_Guide_Type := FieldByName('Pursuit_Guide_Type').AsInteger;
            Primary_Guide_Type := FieldByName('Primary_Guide_Type').AsInteger;
            Secondary_Guide_Type := FieldByName('Secondary_Guide_Type').AsInteger;
            Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
            Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
            Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
            Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
            Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable')
              .AsInteger;
            Primary_Target_Domain := FieldByName('Primary_Target_Domain')
              .AsInteger;
            SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
            CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
            TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
            IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
            AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
            Transmitted_Frequency := FieldByName('Transmitted_Frequency').AsFloat;
            Scan_Rate := FieldByName('Scan_Rate').AsSingle;
            Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
            Pulse_Width := FieldByName('Pulse_Width').AsSingle;
            Xmit_Power := FieldByName('Xmit_Power').AsSingle;
            TARH_Jamming_A_Probability := FieldByName
              ('TARH_Jamming_A_Probability').AsSingle;
            TARH_Jamming_B_Probability := FieldByName
              ('TARH_Jamming_B_Probability').AsSingle;
            TARH_Jamming_C_Probability := FieldByName
              ('TARH_Jamming_C_Probability').AsSingle;
            Wpt_Capable := FieldByName('Wpt_Capable').AsInteger;
            Max_Num_Wpts := FieldByName('Max_Num_Wpts').AsInteger;
            Min_Final_Leg_Length := FieldByName('Min_Final_Leg_Length').AsSingle;
            Engagement_Range := FieldByName('Engagement_Range').AsSingle;
            Max_Firing_Depth := FieldByName('Max_Firing_Depth').AsSingle;
            Upper_Received_Freq := FieldByName('Upper_Received_Freq').AsFloat;
            Lower_Received_Freq := FieldByName('Lower_Received_Freq').AsFloat;
            Fly_Out_Required := FieldByName('Fly_Out_Required').AsInteger;
            Fly_Out_Range := FieldByName('Fly_Out_Range').AsSingle;
            Fly_Out_Altitude := FieldByName('Fly_Out_Altitude').AsSingle;
            Booster_Separation_Required := FieldByName
              ('Booster_Separation_Required').AsInteger;
            Booster_Separation_Range := FieldByName('Booster_Separation_Range')
              .AsSingle;
            Booster_Separation_Box_Width := FieldByName
              ('Booster_Separation_Box_Width').AsSingle;
            Booster_Separation_Box_Length := FieldByName
              ('Booster_Separation_Box_Length').AsSingle;
            Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
            Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
            Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
            Terminal_Guidance_Capability := FieldByName
              ('Terminal_Guidance_Capability').AsInteger;
            Terminal_Altitude_Required := FieldByName
              ('Terminal_Altitude_Required')
              .AsInteger;
            Terminal_Acquisition_Altitude := FieldByName
              ('Terminal_Acquisition_Altitude').AsSingle;
            Terminal_Sinuation_Start_Range := FieldByName
              ('Terminal_Sinuation_Start_Range').AsSingle;
            Terminal_Sinuation_Period := FieldByName('Terminal_Sinuation_Period')
              .AsSingle;
            Terminal_Sinuation_Amplitude := FieldByName
              ('Terminal_Sinuation_Amplitude').AsSingle;
            Terminal_Pop_Up_Range := FieldByName('Terminal_Pop_Up_Range')
              .AsSingle;
            Terminal_Pop_Up_Altitude := FieldByName('Terminal_Pop_Up_Altitude')
              .AsSingle;
            Mid_Course_Update_Mode := FieldByName('Mid_Course_Update_Mode')
              .AsInteger;
            Home_On_Jam_Type_A_Capable := FieldByName
              ('Home_On_Jam_Type_A_Capable')
              .AsInteger;
            Home_On_Jam_Type_B_Capable := FieldByName
              ('Home_On_Jam_Type_B_Capable')
              .AsInteger;
            Home_On_Jam_Type_C_Capable := FieldByName
              ('Home_On_Jam_Type_C_Capable')
              .AsInteger;
            Launch_Method := FieldByName('Launch_Method').AsInteger;
            Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
            Launch_Speed := FieldByName('Launch_Speed').AsInteger;
            Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
              .AsInteger;
            Term_Guide_Azimuth_Narrow := FieldByName('Term_Guide_Azimuth_Narrow')
              .AsSingle;
            Term_Guide_Elevation_Narrow := FieldByName
              ('Term_Guide_Elevation_Narrow').AsSingle;
            Term_Guide_Range_Narrow := FieldByName('Term_Guide_Range_Narrow')
              .AsSingle;
            Spot_Number := FieldByName('Spot_Number').AsInteger;
            ECCM_Type := FieldByName('ECCM_Type').AsInteger;
            ECM_Detonation := FieldByName('ECM_Detonation').AsInteger;
            ECM_Detection := FieldByName('ECM_Detection').AsInteger;
            Detectability_Type := FieldByName('Detectability_Type').AsInteger;
            IRCM_Detonation := FieldByName('IRCM_Detonation').AsInteger;
            IRCM_Detection := FieldByName('IRCM_Detection').AsInteger;
            Sea_State_Modelling_Capable := FieldByName
              ('Sea_State_Modelling_Capable').AsInteger;
          end;

          with rec.FNote do
          begin
            Note_Index := FieldByName('Note_Index').AsInteger;
            Note_Type := FieldByName('Note_Type').AsInteger;
            Notes := FieldByName('Notes').AsString;
          end;

          {$ENDREGION}

          aList.Add(rec);
          Next;
        end;

      finally
      end;
    end;
  end;
end;

function TdmTTT.GetMissileDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Missile_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Missile_Index = b.Missile_Index ');
    SQL.Add('WHERE Class_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertMissileDef(var aRec: TRecMissile_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Missile_Definition');
    SQL.Add('(Class_Identifier, Platform_Domain, Platform_Category,');
    SQL.Add('Platform_Type, Max_Range, Min_Range, Motion_Index,');
    SQL.Add('Seeker_TurnOn_Range, Second_Seeker_Pattern_Capable,');
    SQL.Add('Seeker_Bias_Capable, Fixed_Seeker_Turn_On_Range, Lethality,');
    SQL.Add('Prob_of_Hit, Damage_Capacity, Default_Altitude, Length, Width,');
    SQL.Add('Height, Front_Radar_Cross, Side_Radar_Cross, Front_Visual_Cross,');
    SQL.Add('Side_Visual_Cross, Front_Infrared_Cross, Side_Infrared_Cross,');
    SQL.Add('Pursuit_Guide_Type, Primary_Guide_Type, Secondary_Guide_Type,');
    SQL.Add('Anti_Air_Capable, Anti_Sur_Capable, Anti_SubSur_Capable,');
    SQL.Add('Anti_Land_Capable, Primary_Target_Domain, SARH_POH_Modifier,');
    SQL.Add('CG_POH_Modifier, TARH_POH_Modifier, IR_POH_Modifier,');
    SQL.Add('AR_POH_Modifier, Transmitted_Frequency, Scan_Rate,');
    SQL.Add('Pulse_Rep_Freq, Pulse_Width, Xmit_Power,');
    SQL.Add('TARH_Jamming_A_Probability, TARH_Jamming_B_Probability,');
    SQL.Add('TARH_Jamming_C_Probability, Wpt_Capable, Max_Num_Wpts,');
    SQL.Add('Min_Final_Leg_Length, Engagement_Range, Max_Firing_Depth,');
    SQL.Add('Upper_Received_Freq, Lower_Received_Freq, Fly_Out_Required,');
    SQL.Add('Fly_Out_Range, Fly_Out_Altitude, Booster_Separation_Required,');
    SQL.Add('Booster_Separation_Range, Booster_Separation_Box_Width,');
    SQL.Add('Booster_Separation_Box_Length, Term_Guide_Azimuth,');
    SQL.Add('Term_Guide_Elevation, Term_Guide_Range,');
    SQL.Add('Terminal_Guidance_Capability, Terminal_Altitude_Required,');
    SQL.Add('Terminal_Acquisition_Altitude, Terminal_Sinuation_Start_Range,');
    SQL.Add('Terminal_Sinuation_Period, Terminal_Sinuation_Amplitude,');
    SQL.Add('Terminal_Pop_Up_Range, Terminal_Pop_Up_Altitude,');
    SQL.Add('Mid_Course_Update_Mode, Home_On_Jam_Type_A_Capable,');
    SQL.Add('Home_On_Jam_Type_B_Capable, Home_On_Jam_Type_C_Capable,');
    SQL.Add('Launch_Method, Data_Entry_Method, Launch_Speed,');
    SQL.Add('Max_Target_Altitude_Delta, Term_Guide_Azimuth_Narrow,');
    SQL.Add('Term_Guide_Elevation_Narrow, Term_Guide_Range_Narrow,');
    SQL.Add('Spot_Number, ECCM_Type, ECM_Detonation, ECM_Detection,');
    SQL.Add('Detectability_Type, IRCM_Detonation, IRCM_Detection,');
    SQL.Add('Sea_State_Modelling_Capable, Anti_Amphibious_Capable)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Class_Identifier) + ', ');
      SQL.Add(IntToStr(Platform_Domain) + ', ');
      SQL.Add(IntToStr(Platform_Category) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');
      SQL.Add(FloatToStr(Max_Range) + ', ');
      SQL.Add(FloatToStr(Min_Range) + ', ');
      SQL.Add(IntToStr(Motion_Index) + ', ');
      SQL.Add(FloatToStr(Seeker_TurnOn_Range) + ', ');
      SQL.Add(IntToStr(Second_Seeker_Pattern_Capable) + ', ');
      SQL.Add(IntToStr(Seeker_Bias_Capable) + ', ');
      SQL.Add(IntToStr(Fixed_Seeker_Turn_On_Range) + ', ');
      SQL.Add(IntToStr(Lethality) + ', ');
      SQL.Add(FloatToStr(Prob_of_Hit) + ', ');
      SQL.Add(IntToStr(Damage_Capacity) + ', ');
      SQL.Add(FloatToStr(Default_Altitude) + ', ');
      SQL.Add(FloatToStr(Length) + ', ');
      SQL.Add(FloatToStr(Width) + ', ');
      SQL.Add(FloatToStr(Height) + ', ');
      SQL.Add(FloatToStr(Front_Radar_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Radar_Cross) + ', ');
      SQL.Add(FloatToStr(Front_Visual_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Visual_Cross) + ', ');
      SQL.Add(FloatToStr(Front_Infrared_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Infrared_Cross) + ', ');
      SQL.Add(IntToStr(Pursuit_Guide_Type) + ', ');
      SQL.Add(IntToStr(Primary_Guide_Type) + ', ');
      SQL.Add(IntToStr(Secondary_Guide_Type) + ', ');
      SQL.Add(IntToStr(Anti_Air_Capable) + ', ');
      SQL.Add(IntToStr(Anti_Sur_Capable) + ', ');
      SQL.Add(IntToStr(Anti_SubSur_Capable) + ', ');
      SQL.Add(IntToStr(Anti_Land_Capable) + ', ');
      SQL.Add(IntToStr(Primary_Target_Domain) + ', ');
      SQL.Add(FloatToStr(SARH_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(CG_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(TARH_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(IR_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(AR_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(Transmitted_Frequency) + ', ');
      SQL.Add(FloatToStr(Scan_Rate) + ', ');
      SQL.Add(FloatToStr(Pulse_Rep_Freq) + ', ');
      SQL.Add(FloatToStr(Pulse_Width) + ', ');
      SQL.Add(FloatToStr(Xmit_Power) + ', ');
      SQL.Add(FloatToStr(TARH_Jamming_A_Probability) + ', ');
      SQL.Add(FloatToStr(TARH_Jamming_B_Probability) + ', ');
      SQL.Add(FloatToStr(TARH_Jamming_C_Probability) + ', ');
      SQL.Add(IntToStr(Wpt_Capable) + ', ');
      SQL.Add(IntToStr(Max_Num_Wpts) + ', ');
      SQL.Add(FloatToStr(Min_Final_Leg_Length) + ', ');
      SQL.Add(FloatToStr(Engagement_Range) + ', ');
      SQL.Add(FloatToStr(Max_Firing_Depth) + ', ');
      SQL.Add(FloatToStr(Upper_Received_Freq) + ', ');
      SQL.Add(FloatToStr(Lower_Received_Freq) + ', ');
      SQL.Add(IntToStr(Fly_Out_Required) + ', ');
      SQL.Add(FloatToStr(Fly_Out_Range) + ', ');
      SQL.Add(FloatToStr(Fly_Out_Altitude) + ', ');
      SQL.Add(IntToStr(Booster_Separation_Required) + ', ');
      SQL.Add(FloatToStr(Booster_Separation_Range) + ', ');
      SQL.Add(FloatToStr(Booster_Separation_Box_Width) + ', ');
      SQL.Add(FloatToStr(Booster_Separation_Box_Length) + ', ');
      SQL.Add(FloatToStr(Term_Guide_Azimuth) + ', ');
      SQL.Add(FloatToStr(Term_Guide_Elevation) + ', ');
      SQL.Add(FloatToStr(Term_Guide_Range) + ', ');
      SQL.Add(IntToStr(Terminal_Guidance_Capability) + ', ');
      SQL.Add(IntToStr(Terminal_Altitude_Required) + ', ');
      SQL.Add(FloatToStr(Terminal_Acquisition_Altitude) + ', ');
      SQL.Add(FloatToStr(Terminal_Sinuation_Start_Range) + ', ');
      SQL.Add(FloatToStr(Terminal_Sinuation_Period) + ', ');
      SQL.Add(FloatToStr(Terminal_Sinuation_Amplitude) + ', ');
      SQL.Add(FloatToStr(Terminal_Pop_Up_Range) + ', ');
      SQL.Add(FloatToStr(Terminal_Pop_Up_Altitude) + ', ');
      SQL.Add(IntToStr(Mid_Course_Update_Mode) + ', ');
      SQL.Add(IntToStr(Home_On_Jam_Type_A_Capable) + ', ');
      SQL.Add(IntToStr(Home_On_Jam_Type_B_Capable) + ', ');
      SQL.Add(IntToStr(Home_On_Jam_Type_C_Capable) + ', ');
      SQL.Add(IntToStr(Launch_Method) + ', ');
      SQL.Add(IntToStr(Data_Entry_Method) + ', ');
      SQL.Add(IntToStr(Launch_Speed) + ', ');
      SQL.Add(IntToStr(Max_Target_Altitude_Delta) + ', ');
      SQL.Add(FloatToStr(Term_Guide_Azimuth_Narrow) + ', ');
      SQL.Add(FloatToStr(Term_Guide_Elevation_Narrow) + ', ');
      SQL.Add(FloatToStr(Term_Guide_Range_Narrow) + ', ');
      SQL.Add(IntToStr(Spot_Number) + ', ');
      SQL.Add(IntToStr(ECCM_Type) + ', ');
      SQL.Add(IntToStr(ECM_Detonation) + ', ');
      SQL.Add(IntToStr(ECM_Detection) + ', ');
      SQL.Add(IntToStr(Detectability_Type) + ', ');
      SQL.Add(IntToStr(IRCM_Detonation) + ', ');
      SQL.Add(IntToStr(IRCM_Detection) + ', ');
      SQL.Add(IntToStr(Sea_State_Modelling_Capable) + ', ');
      SQL.Add(IntToStr(Anti_Amphibious_Capable) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Missile_Definition');
      SQL.Add('WHERE Class_Identifier = ' + QuotedStr(aRec.Class_Identifier));
      Open;

      Missile_Index := FieldByName('Missile_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateMissileDef(var aRec: TRecMissile_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Missile_Definition');

    with aRec do
    begin
      SQL.Add('SET Class_Identifier = ' + QuotedStr(Class_Identifier));
      SQL.Add(', Platform_Domain = ' + IntToStr(Platform_Domain));
      SQL.Add(', Platform_Category = ' + IntToStr(Platform_Category));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));
      SQL.Add(', Max_Range = ' + FloatToStr(Max_Range));
      SQL.Add(', Min_Range = ' + FloatToStr(Min_Range));
      SQL.Add(', Motion_Index = ' + IntToStr(Motion_Index));
      SQL.Add(', Seeker_TurnOn_Range = ' + FloatToStr(Seeker_TurnOn_Range));
      SQL.Add(', Second_Seeker_Pattern_Capable = ' +
        IntToStr(Second_Seeker_Pattern_Capable));
      SQL.Add(', Seeker_Bias_Capable = ' + IntToStr(Seeker_Bias_Capable));
      SQL.Add(', Fixed_Seeker_Turn_On_Range = ' +
        IntToStr(Fixed_Seeker_Turn_On_Range));
      SQL.Add(', Lethality = ' + IntToStr(Lethality));
      SQL.Add(', Prob_of_Hit = ' + FloatToStr(Prob_of_Hit));
      SQL.Add(', Damage_Capacity = ' + IntToStr(Damage_Capacity));
      SQL.Add(', Default_Altitude = ' + FloatToStr(Default_Altitude));
      SQL.Add(', Length = ' + FloatToStr(Length));
      SQL.Add(', Width = ' + FloatToStr(Width));
      SQL.Add(', Height = ' + FloatToStr(Height));
      SQL.Add(', Front_Radar_Cross = ' + FloatToStr(Front_Radar_Cross));
      SQL.Add(', Side_Radar_Cross = ' + FloatToStr(Side_Radar_Cross));
      SQL.Add(', Front_Visual_Cross = ' + FloatToStr(Front_Visual_Cross));
      SQL.Add(', Side_Visual_Cross = ' + FloatToStr(Side_Visual_Cross));
      SQL.Add(', Front_Infrared_Cross = ' + FloatToStr(Front_Infrared_Cross));
      SQL.Add(', Side_Infrared_Cross = ' + FloatToStr(Side_Infrared_Cross));
      SQL.Add(', Pursuit_Guide_Type = ' + IntToStr(Pursuit_Guide_Type));
      SQL.Add(', Primary_Guide_Type = ' + IntToStr(Primary_Guide_Type));
      SQL.Add(', Secondary_Guide_Type = ' + IntToStr(Secondary_Guide_Type));
      SQL.Add(', Anti_Air_Capable = ' + IntToStr(Anti_Air_Capable));
      SQL.Add(', Anti_Sur_Capable = ' + IntToStr(Anti_Sur_Capable));
      SQL.Add(', Anti_SubSur_Capable = ' + IntToStr(Anti_SubSur_Capable));
      SQL.Add(', Anti_Land_Capable = ' + IntToStr(Anti_Land_Capable));
      SQL.Add(', Primary_Target_Domain = ' + IntToStr(Primary_Target_Domain));
      SQL.Add(', SARH_POH_Modifier = ' + FloatToStr(SARH_POH_Modifier));
      SQL.Add(', CG_POH_Modifier = ' + FloatToStr(CG_POH_Modifier));
      SQL.Add(', TARH_POH_Modifier = ' + FloatToStr(TARH_POH_Modifier));
      SQL.Add(', IR_POH_Modifier = ' + FloatToStr(IR_POH_Modifier));
      SQL.Add(', AR_POH_Modifier = ' + FloatToStr(AR_POH_Modifier));
      SQL.Add(', Transmitted_Frequency = ' + FloatToStr(Transmitted_Frequency));
      SQL.Add(', Scan_Rate = ' + FloatToStr(Scan_Rate));
      SQL.Add(', Pulse_Rep_Freq = ' + FloatToStr(Pulse_Rep_Freq));
      SQL.Add(', Pulse_Width = ' + FloatToStr(Pulse_Width));
      SQL.Add(', Xmit_Power = ' + FloatToStr(Xmit_Power));
      SQL.Add(', TARH_Jamming_A_Probability = ' +
        FloatToStr(TARH_Jamming_A_Probability));
      SQL.Add(', TARH_Jamming_B_Probability = ' +
        FloatToStr(TARH_Jamming_B_Probability));
      SQL.Add(', TARH_Jamming_C_Probability = ' +
        FloatToStr(TARH_Jamming_C_Probability));
      SQL.Add(', Wpt_Capable = ' + IntToStr(Wpt_Capable));
      SQL.Add(', Max_Num_Wpts = ' + IntToStr(Max_Num_Wpts));
      SQL.Add(', Min_Final_Leg_Length = ' + FloatToStr(Min_Final_Leg_Length));
      SQL.Add(', Engagement_Range = ' + FloatToStr(Engagement_Range));
      SQL.Add(', Max_Firing_Depth = ' + FloatToStr(Max_Firing_Depth));
      SQL.Add(', Upper_Received_Freq = ' + FloatToStr(Upper_Received_Freq));
      SQL.Add(', Lower_Received_Freq = ' + FloatToStr(Lower_Received_Freq));
      SQL.Add(', Fly_Out_Required = ' + IntToStr(Fly_Out_Required));
      SQL.Add(', Fly_Out_Range = ' + FloatToStr(Fly_Out_Range));
      SQL.Add(', Fly_Out_Altitude = ' + FloatToStr(Fly_Out_Altitude));
      SQL.Add(', Booster_Separation_Required = ' +
        IntToStr(Booster_Separation_Required));
      SQL.Add(', Booster_Separation_Range = ' +
        FloatToStr(Booster_Separation_Range));
      SQL.Add(', Booster_Separation_Box_Width = ' +
        FloatToStr(Booster_Separation_Box_Width));
      SQL.Add(', Booster_Separation_Box_Length = ' +
        FloatToStr(Booster_Separation_Box_Length));
      SQL.Add(', Term_Guide_Azimuth = ' + FloatToStr(Term_Guide_Azimuth));
      SQL.Add(', Term_Guide_Elevation = ' + FloatToStr(Term_Guide_Elevation));
      SQL.Add(', Term_Guide_Range = ' + FloatToStr(Term_Guide_Range));
      SQL.Add(', Terminal_Guidance_Capability = ' +
        IntToStr(Terminal_Guidance_Capability));
      SQL.Add(', Terminal_Altitude_Required = ' +
        IntToStr(Terminal_Altitude_Required));
      SQL.Add(', Terminal_Acquisition_Altitude = ' +
        FloatToStr(Terminal_Acquisition_Altitude));
      SQL.Add(', Terminal_Sinuation_Start_Range = ' +
        FloatToStr(Terminal_Sinuation_Start_Range));
      SQL.Add(', Terminal_Sinuation_Period = ' +
        FloatToStr(Terminal_Sinuation_Period));
      SQL.Add(', Terminal_Sinuation_Amplitude = ' +
        FloatToStr(Terminal_Sinuation_Amplitude));
      SQL.Add(', Terminal_Pop_Up_Range = ' + FloatToStr(Terminal_Pop_Up_Range));
      SQL.Add(', Terminal_Pop_Up_Altitude = ' +
        FloatToStr(Terminal_Pop_Up_Altitude));
      SQL.Add(', Mid_Course_Update_Mode = ' + IntToStr(Mid_Course_Update_Mode));
      SQL.Add(', Home_On_Jam_Type_A_Capable = ' +
        IntToStr(Home_On_Jam_Type_A_Capable));
      SQL.Add(', Home_On_Jam_Type_B_Capable = ' +
        IntToStr(Home_On_Jam_Type_B_Capable));
      SQL.Add(', Home_On_Jam_Type_C_Capable = ' +
        IntToStr(Home_On_Jam_Type_C_Capable));
      SQL.Add(', Launch_Method = ' + IntToStr(Launch_Method));
      SQL.Add(', Data_Entry_Method = ' + IntToStr(Data_Entry_Method));
      SQL.Add(', Launch_Speed = ' + IntToStr(Launch_Speed));
      SQL.Add(', Max_Target_Altitude_Delta = ' +
        IntToStr(Max_Target_Altitude_Delta));
      SQL.Add(', Term_Guide_Azimuth_Narrow = ' +
        FloatToStr(Term_Guide_Azimuth_Narrow));
      SQL.Add(', Term_Guide_Elevation_Narrow = ' +
        FloatToStr(Term_Guide_Elevation_Narrow));
      SQL.Add(', Term_Guide_Range_Narrow = ' +
        FloatToStr(Term_Guide_Range_Narrow));
      SQL.Add(', Spot_Number = ' + IntToStr(Spot_Number));
      SQL.Add(', ECCM_Type = ' + IntToStr(ECCM_Type));
      SQL.Add(', ECM_Detonation = ' + IntToStr(ECM_Detonation));
      SQL.Add(', ECM_Detection = ' + IntToStr(ECM_Detection));
      SQL.Add(', Detectability_Type = ' + IntToStr(Detectability_Type));
      SQL.Add(', IRCM_Detonation = ' + IntToStr(IRCM_Detonation));
      SQL.Add(', IRCM_Detection = ' + IntToStr(IRCM_Detection));
      SQL.Add(', Sea_State_Modelling_Capable = ' +
        IntToStr(Sea_State_Modelling_Capable));
      SQL.Add(', Anti_Amphibious_Capable = ' +
        IntToStr(Anti_Amphibious_Capable));
      SQL.Add('WHERE Missile_Index = ' + IntToStr(Missile_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteMissileDef(const aMissileIndex: Integer): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE Missile_Definition');
    SQL.Add('WHERE Missile_Index = ' + IntToStr(aMissileIndex));
    ExecSQL;

    Result := True;

  end;
end;

function TdmTTT.GetHybridDef(const aMissileIndex: Integer; var aResult: THybrid_On_Board): Boolean;
begin
  Result := False;
  aResult := nil;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT a.*, b.Class_Identifier as mis, c.Class_Identifier as tor');
    SQL.Add('FROM Hybrid_Definition a JOIN Missile_Definition b');
    SQL.Add('ON a.Missile_Index = b.Missile_Index JOIN Torpedo_Definition c');
    SQL.Add('ON a.Torpedo_Index = c.Torpedo_Index');
    SQL.Add('WHERE a.Missile_Index = ' + IntToStr(aMissileIndex));
    Open;

    Result := RecordCount > 0;

    aResult := THybrid_On_Board.Create;

    if not IsEmpty then
    begin
      with aResult.FData do
      begin
        Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        Missile_Index := FieldByName('Missile_Index').AsInteger;
        Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
      end;

      with aResult.FMissile_Def do
      begin
        Missile_Index := FieldByName('Missile_Index').AsInteger;
        Class_Identifier := FieldByName('mis').AsString;
      end;

      with aResult.FTorpedo_Def do
      begin
        Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
        Class_Identifier := FieldByName('tor').AsString;
      end;
    end;
  end;
end;

function TdmTTT.insertHybrid(rec: THybrid_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Hybrid_Definition ');
      SQL.Add(
        '(Missile_Index,Torpedo_Index)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(rec.FMissile_Def.Missile_Index) + ',');
      SQL.Add(IntToStr(rec.FTorpedo_Def.Torpedo_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Hybrid_Index FROM Hybrid_Definition ');
      SQL.Add('WHERE (Missile_Index = ' +
        IntToStr(rec.FMissile_Def.Missile_Index) + ') ');
      Open;

      Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.updateHybrid(rec: THybrid_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Hybrid_Definition ');
      SQL.Add('SET ');
      SQL.Add('Missile_Index = ' + IntToStr(Missile_Index) + ',');
      SQL.Add('Torpedo_Index = ' + IntToStr(Torpedo_Index) );
      SQL.Add(' WHERE Hybrid_Index = ' + IntToStr(Hybrid_Index));
    end;

    ExecSQL;

  end;
end;

function TdmTTT.deleteHybrid(const id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Hybrid_Definition ');
    SQL.Add(' WHERE Missile_Index = ' + IntToStr(id));
    ExecSQL;

  end;
end;

{$ENDREGION}

{$REGION ' Torpedo Definition '}

function TdmTTT.GetAllTorpedoDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TTorpedo_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Torpedo_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Torpedo_Index = b.Torpedo_Index ');
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TTorpedo_On_Board.Create;

        with rec.FDef do
        begin
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Lethality := FieldByName('Lethality').AsInteger;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Depth := FieldByName('Default_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Switch_Point := FieldByName('Cavitation_Switch_Point')
            .AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Pursuit_Guidance_Type := FieldByName('Pursuit_Guidance_Type')
            .AsInteger;
          Air_Drop_Capable := FieldByName('Air_Drop_Capable').AsInteger;
          Use_Terminal_Circle := FieldByName('Use_Terminal_Circle').AsInteger;
          Terminal_Circle_Radius := FieldByName('Terminal_Circle_Radius')
            .AsSingle;
          Fixed_Circle_Radius := FieldByName('Fixed_Circle_Radius').AsInteger;
          Lateral_Deceleration := FieldByName('Lateral_Deceleration').AsSingle;
          Airborne_Descent_Rate := FieldByName('Airborne_Descent_Rate').AsFloat;
          Wire_Angle_Offset := FieldByName('Wire_Angle_Offset').AsSingle;
          Guidance_Type := FieldByName('Guidance_Type').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          Active_Acoustic_POH_Mod := FieldByName('Active_Acoustic_POH_Mod')
            .AsSingle;
          Passive_Acoustic_POH_Mod := FieldByName('Passive_Acoustic_POH_Mod')
            .AsSingle;
          Active_Passive_POH_Mod := FieldByName('Active_Passive_POH_Mod')
            .AsSingle;
          WireGuide_POH_Modifier := FieldByName('WireGuide_POH_Modifier')
            .AsSingle;
          WakeHome_POH_Modifier := FieldByName('WakeHome_POH_Modifier')
            .AsSingle;
          Active_Seeker_Power := FieldByName('Active_Seeker_Power').AsSingle;
          Active_Seeker_Freq := FieldByName('Active_Seeker_Freq').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          First_Relative_Gyro_Angle := FieldByName('First_Relative_Gyro_Angle')
            .AsInteger;
          Second_Relative_Gyro_Angle := FieldByName
            ('Second_Relative_Gyro_Angle')
            .AsInteger;
          Max_Torpedo_Gyro_Angle := FieldByName('Max_Torpedo_Gyro_Angle')
            .AsSingle;
          Max_Torpedo_Search_Depth := FieldByName('Max_Torpedo_Search_Depth')
            .AsSingle;
          Acoustic_Torp_Ceiling_Depth := FieldByName
            ('Acoustic_Torp_Ceiling_Depth').AsSingle;
          Fixed_Ceiling_Depth := FieldByName('Fixed_Ceiling_Depth').AsInteger;
          Fixed_Seeker_TurnOn_Range := FieldByName('Fixed_Seeker_TurnOn_Range')
            .AsInteger;
          Sinuation_Runout := FieldByName('Sinuation_Runout').AsInteger;
          Runout_Sinuation_Period := FieldByName('Runout_Sinuation_Period')
            .AsSingle;
          Runout_Sinuation_Amplitude := FieldByName
            ('Runout_Sinuation_Amplitude').AsSingle;
          Min_Runout_Range := FieldByName('Min_Runout_Range').AsSingle;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Opt_Launch_Range_Nuc_Sub := FieldByName('Opt_Launch_Range_Nuc_Sub')
            .AsSingle;
          Opt_Launch_Range_Conv_Sub := FieldByName('Opt_Launch_Range_Conv_Sub')
            .AsSingle;
          Opt_Launch_Range_Other := FieldByName('Opt_Launch_Range_Other')
            .AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterTorpedoDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TTorpedo_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Torpedo_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Torpedo_Index = b.Torpedo_Index ');
    SQL.Add('WHERE Class_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TTorpedo_On_Board.Create;

        with rec.FDef do
        begin
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Lethality := FieldByName('Lethality').AsInteger;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Depth := FieldByName('Default_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Switch_Point := FieldByName('Cavitation_Switch_Point')
            .AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Pursuit_Guidance_Type := FieldByName('Pursuit_Guidance_Type')
            .AsInteger;
          Air_Drop_Capable := FieldByName('Air_Drop_Capable').AsInteger;
          Use_Terminal_Circle := FieldByName('Use_Terminal_Circle').AsInteger;
          Terminal_Circle_Radius := FieldByName('Terminal_Circle_Radius')
            .AsSingle;
          Fixed_Circle_Radius := FieldByName('Fixed_Circle_Radius').AsInteger;
          Lateral_Deceleration := FieldByName('Lateral_Deceleration').AsSingle;
          Airborne_Descent_Rate := FieldByName('Airborne_Descent_Rate').AsFloat;
          Wire_Angle_Offset := FieldByName('Wire_Angle_Offset').AsSingle;
          Guidance_Type := FieldByName('Guidance_Type').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          Active_Acoustic_POH_Mod := FieldByName('Active_Acoustic_POH_Mod')
            .AsSingle;
          Passive_Acoustic_POH_Mod := FieldByName('Passive_Acoustic_POH_Mod')
            .AsSingle;
          Active_Passive_POH_Mod := FieldByName('Active_Passive_POH_Mod')
            .AsSingle;
          WireGuide_POH_Modifier := FieldByName('WireGuide_POH_Modifier')
            .AsSingle;
          WakeHome_POH_Modifier := FieldByName('WakeHome_POH_Modifier')
            .AsSingle;
          Active_Seeker_Power := FieldByName('Active_Seeker_Power').AsSingle;
          Active_Seeker_Freq := FieldByName('Active_Seeker_Freq').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          First_Relative_Gyro_Angle := FieldByName('First_Relative_Gyro_Angle')
            .AsInteger;
          Second_Relative_Gyro_Angle := FieldByName
            ('Second_Relative_Gyro_Angle')
            .AsInteger;
          Max_Torpedo_Gyro_Angle := FieldByName('Max_Torpedo_Gyro_Angle')
            .AsSingle;
          Max_Torpedo_Search_Depth := FieldByName('Max_Torpedo_Search_Depth')
            .AsSingle;
          Acoustic_Torp_Ceiling_Depth := FieldByName
            ('Acoustic_Torp_Ceiling_Depth').AsSingle;
          Fixed_Ceiling_Depth := FieldByName('Fixed_Ceiling_Depth').AsInteger;
          Fixed_Seeker_TurnOn_Range := FieldByName('Fixed_Seeker_TurnOn_Range')
            .AsInteger;
          Sinuation_Runout := FieldByName('Sinuation_Runout').AsInteger;
          Runout_Sinuation_Period := FieldByName('Runout_Sinuation_Period')
            .AsSingle;
          Runout_Sinuation_Amplitude := FieldByName
            ('Runout_Sinuation_Amplitude').AsSingle;
          Min_Runout_Range := FieldByName('Min_Runout_Range').AsSingle;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Opt_Launch_Range_Nuc_Sub := FieldByName('Opt_Launch_Range_Nuc_Sub')
            .AsSingle;
          Opt_Launch_Range_Conv_Sub := FieldByName('Opt_Launch_Range_Conv_Sub')
            .AsSingle;
          Opt_Launch_Range_Other := FieldByName('Opt_Launch_Range_Other')
            .AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetTorpedoDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Torpedo_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Torpedo_Index = b.Torpedo_Index');
    SQL.Add('WHERE Class_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertTorpedoDef(var aRec: TRecTorpedo_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Torpedo_Definition');
    SQL.Add('(Class_Identifier, Platform_Domain, Platform_Category,');
    SQL.Add('Platform_Type, Max_Range, Min_Range, Motion_Index,');
    SQL.Add('Seeker_TurnOn_Range, Lethality, Damage_Capacity, Default_Depth,');
    SQL.Add('Length, Width, Height, Front_Acoustic_Cross,');
    SQL.Add('Side_Acoustic_Cross, LSpeed_Acoustic_Intens,');
    SQL.Add('Below_Cav_Acoustic_Intens, Above_Cav_Acoustic_Intens,');
    SQL.Add('HSpeed_Acoustic_Intens, Cavitation_Switch_Point,');
    SQL.Add('Term_Guide_Azimuth, Term_Guide_Elevation, Term_Guide_Range,');
    SQL.Add('Pursuit_Guidance_Type, Air_Drop_Capable, Use_Terminal_Circle,');
    SQL.Add('Terminal_Circle_Radius, Fixed_Circle_Radius,');
    SQL.Add('Lateral_Deceleration, Airborne_Descent_Rate, Wire_Angle_Offset,');
    SQL.Add('Guidance_Type, Anti_Sur_Capable, Anti_SubSur_Capable,');
    SQL.Add('Primary_Target_Domain, Active_Acoustic_POH_Mod,');
    SQL.Add('Passive_Acoustic_POH_Mod, Active_Passive_POH_Mod,');
    SQL.Add('WireGuide_POH_Modifier, WakeHome_POH_Modifier,');
    SQL.Add('Active_Seeker_Power, Active_Seeker_Freq, Engagement_Range,');
    SQL.Add('First_Relative_Gyro_Angle, Second_Relative_Gyro_Angle,');
    SQL.Add('Max_Torpedo_Gyro_Angle, Max_Torpedo_Search_Depth,');
    SQL.Add('Acoustic_Torp_Ceiling_Depth, Fixed_Ceiling_Depth,');
    SQL.Add('Fixed_Seeker_TurnOn_Range, Sinuation_Runout,');
    SQL.Add('Runout_Sinuation_Period, Runout_Sinuation_Amplitude,');
    SQL.Add('Min_Runout_Range, Launch_Method, Data_Entry_Method,');
    SQL.Add('Launch_Speed, Opt_Launch_Range_Nuc_Sub,');
    SQL.Add('Opt_Launch_Range_Conv_Sub, Opt_Launch_Range_Other,');
    SQL.Add('Detectability_Type)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Class_Identifier) + ', ');
      SQL.Add(IntToStr(Platform_Domain) + ', ');
      SQL.Add(IntToStr(Platform_Category) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');
      SQL.Add(FloatToStr(Max_Range) + ', ');
      SQL.Add(FloatToStr(Min_Range) + ', ');
      SQL.Add(IntToStr(Motion_Index) + ', ');
      SQL.Add(FloatToStr(Seeker_TurnOn_Range) + ', ');
      SQL.Add(IntToStr(Lethality) + ', ');
      SQL.Add(IntToStr(Damage_Capacity) + ', ');
      SQL.Add(FloatToStr(Default_Depth) + ', ');
      SQL.Add(FloatToStr(Length) + ', ');
      SQL.Add(FloatToStr(Width) + ', ');
      SQL.Add(FloatToStr(Height) + ', ');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(LSpeed_Acoustic_Intens) + ', ');
      SQL.Add(FloatToStr(Below_Cav_Acoustic_Intens) + ', ');
      SQL.Add(FloatToStr(Above_Cav_Acoustic_Intens) + ', ');
      SQL.Add(FloatToStr(HSpeed_Acoustic_Intens) + ', ');
      SQL.Add(FloatToStr(Cavitation_Switch_Point) + ', ');
      SQL.Add(FloatToStr(Term_Guide_Azimuth) + ', ');
      SQL.Add(FloatToStr(Term_Guide_Elevation) + ', ');
      SQL.Add(FloatToStr(Term_Guide_Range) + ', ');
      SQL.Add(IntToStr(Pursuit_Guidance_Type) + ', ');
      SQL.Add(IntToStr(Air_Drop_Capable) + ', ');
      SQL.Add(IntToStr(Use_Terminal_Circle) + ', ');
      SQL.Add(FloatToStr(Terminal_Circle_Radius) + ', ');
      SQL.Add(IntToStr(Fixed_Circle_Radius) + ', ');
      SQL.Add(FloatToStr(Lateral_Deceleration) + ', ');
      SQL.Add(FloatToStr(Airborne_Descent_Rate) + ', ');
      SQL.Add(FloatToStr(Wire_Angle_Offset) + ', ');
      SQL.Add(IntToStr(Guidance_Type) + ', ');
      SQL.Add(IntToStr(Anti_Sur_Capable) + ', ');
      SQL.Add(IntToStr(Anti_SubSur_Capable) + ', ');
      SQL.Add(IntToStr(Primary_Target_Domain) + ', ');
      SQL.Add(FloatToStr(Active_Acoustic_POH_Mod) + ', ');
      SQL.Add(FloatToStr(Passive_Acoustic_POH_Mod) + ', ');
      SQL.Add(FloatToStr(Active_Passive_POH_Mod) + ', ');
      SQL.Add(FloatToStr(WireGuide_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(WakeHome_POH_Modifier) + ', ');
      SQL.Add(FloatToStr(Active_Seeker_Power) + ', ');
      SQL.Add(FloatToStr(Active_Seeker_Freq) + ', ');
      SQL.Add(FloatToStr(Engagement_Range) + ', ');
      SQL.Add(IntToStr(First_Relative_Gyro_Angle) + ', ');
      SQL.Add(IntToStr(Second_Relative_Gyro_Angle) + ', ');
      SQL.Add(FloatToStr(Max_Torpedo_Gyro_Angle) + ', ');
      SQL.Add(FloatToStr(Max_Torpedo_Search_Depth) + ', ');
      SQL.Add(FloatToStr(Acoustic_Torp_Ceiling_Depth) + ', ');
      SQL.Add(IntToStr(Fixed_Ceiling_Depth) + ', ');
      SQL.Add(IntToStr(Fixed_Seeker_TurnOn_Range) + ', ');
      SQL.Add(IntToStr(Sinuation_Runout) + ', ');
      SQL.Add(FloatToStr(Runout_Sinuation_Period) + ', ');
      SQL.Add(FloatToStr(Runout_Sinuation_Amplitude) + ', ');
      SQL.Add(FloatToStr(Min_Runout_Range) + ', ');
      SQL.Add(IntToStr(Launch_Method) + ', ');
      SQL.Add(IntToStr(Data_Entry_Method) + ', ');
      SQL.Add(IntToStr(Launch_Speed) + ', ');
      SQL.Add(FloatToStr(Opt_Launch_Range_Nuc_Sub) + ', ');
      SQL.Add(FloatToStr(Opt_Launch_Range_Conv_Sub) + ', ');
      SQL.Add(FloatToStr(Opt_Launch_Range_Other) + ', ');
      SQL.Add(IntToStr(Detectability_Type) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Torpedo_Definition');
    SQL.Add('WHERE Class_Identifier = ' + QuotedStr(aRec.Class_Identifier));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateTorpedoDef(var aRec: TRecTorpedo_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Torpedo_Definition');

    with aRec do
    begin
      SQL.Add('SET Class_Identifier = ' + QuotedStr(Class_Identifier));
      SQL.Add(', Platform_Domain = ' + IntToStr(Platform_Domain));
      SQL.Add(', Platform_Category = ' + IntToStr(Platform_Category));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));
      SQL.Add(', Max_Range = ' + FloatToStr(Max_Range));
      SQL.Add(', Min_Range = ' + FloatToStr(Min_Range));
      SQL.Add(', Motion_Index = ' + IntToStr(Motion_Index));
      SQL.Add(', Seeker_TurnOn_Range = ' + FloatToStr(Seeker_TurnOn_Range));
      SQL.Add(', Lethality = ' + IntToStr(Lethality));
      SQL.Add(', Damage_Capacity = ' + IntToStr(Damage_Capacity));
      SQL.Add(', Default_Depth = ' + FloatToStr(Default_Depth));
      SQL.Add(', Length = ' + FloatToStr(Length));
      SQL.Add(', Width = ' + FloatToStr(Width));
      SQL.Add(', Height = ' + FloatToStr(Height));
      SQL.Add(', Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross));
      SQL.Add(', Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross));
      SQL.Add(', LSpeed_Acoustic_Intens = ' +
        FloatToStr(LSpeed_Acoustic_Intens));
      SQL.Add(', Below_Cav_Acoustic_Intens = ' +
        FloatToStr(Below_Cav_Acoustic_Intens));
      SQL.Add(', Above_Cav_Acoustic_Intens = ' +
        FloatToStr(Above_Cav_Acoustic_Intens));
      SQL.Add(', HSpeed_Acoustic_Intens = ' +
        FloatToStr(HSpeed_Acoustic_Intens));
      SQL.Add(', Cavitation_Switch_Point = ' +
        FloatToStr(Cavitation_Switch_Point));
      SQL.Add(', Term_Guide_Azimuth = ' + FloatToStr(Term_Guide_Azimuth));
      SQL.Add(', Term_Guide_Elevation = ' + FloatToStr(Term_Guide_Elevation));
      SQL.Add(', Term_Guide_Range = ' + FloatToStr(Term_Guide_Range));
      SQL.Add(', Pursuit_Guidance_Type = ' + IntToStr(Pursuit_Guidance_Type));
      SQL.Add(', Air_Drop_Capable = ' + IntToStr(Air_Drop_Capable));
      SQL.Add(', Use_Terminal_Circle = ' + IntToStr(Use_Terminal_Circle));
      SQL.Add(', Terminal_Circle_Radius = ' +
        FloatToStr(Terminal_Circle_Radius));
      SQL.Add(', Fixed_Circle_Radius = ' + IntToStr(Fixed_Circle_Radius));
      SQL.Add(', Lateral_Deceleration = ' + FloatToStr(Lateral_Deceleration));
      SQL.Add(', Airborne_Descent_Rate = ' + FloatToStr(Airborne_Descent_Rate));
      SQL.Add(', Wire_Angle_Offset = ' + FloatToStr(Wire_Angle_Offset));
      SQL.Add(', Guidance_Type = ' + IntToStr(Guidance_Type));
      SQL.Add(', Anti_Sur_Capable = ' + IntToStr(Anti_Sur_Capable));
      SQL.Add(', Anti_SubSur_Capable = ' + IntToStr(Anti_SubSur_Capable));
      SQL.Add(', Primary_Target_Domain = ' + IntToStr(Primary_Target_Domain));
      SQL.Add(', Active_Acoustic_POH_Mod = ' +
        FloatToStr(Active_Acoustic_POH_Mod));
      SQL.Add(', Passive_Acoustic_POH_Mod = ' +
        FloatToStr(Passive_Acoustic_POH_Mod));
      SQL.Add(', Active_Passive_POH_Mod = ' +
        FloatToStr(Active_Passive_POH_Mod));
      SQL.Add(', WireGuide_POH_Modifier = ' +
        FloatToStr(WireGuide_POH_Modifier));
      SQL.Add(', WakeHome_POH_Modifier = ' + FloatToStr(WakeHome_POH_Modifier));
      SQL.Add(', Active_Seeker_Power = ' + FloatToStr(Active_Seeker_Power));
      SQL.Add(', Active_Seeker_Freq = ' + FloatToStr(Active_Seeker_Freq));
      SQL.Add(', Engagement_Range = ' + FloatToStr(Engagement_Range));
      SQL.Add(', First_Relative_Gyro_Angle = ' +
        IntToStr(First_Relative_Gyro_Angle));
      SQL.Add(', Second_Relative_Gyro_Angle = ' +
        IntToStr(Second_Relative_Gyro_Angle));
      SQL.Add(', Max_Torpedo_Gyro_Angle = ' +
        FloatToStr(Max_Torpedo_Gyro_Angle));
      SQL.Add(', Max_Torpedo_Search_Depth = ' +
        FloatToStr(Max_Torpedo_Search_Depth));
      SQL.Add(', Acoustic_Torp_Ceiling_Depth = ' +
        FloatToStr(Acoustic_Torp_Ceiling_Depth));
      SQL.Add(', Fixed_Ceiling_Depth = ' + IntToStr(Fixed_Ceiling_Depth));
      SQL.Add(', Fixed_Seeker_TurnOn_Range = ' +
        IntToStr(Fixed_Seeker_TurnOn_Range));
      SQL.Add(', Sinuation_Runout = ' + IntToStr(Sinuation_Runout));
      SQL.Add(', Runout_Sinuation_Period = ' +
        FloatToStr(Runout_Sinuation_Period));
      SQL.Add(', Runout_Sinuation_Amplitude = ' +
        FloatToStr(Runout_Sinuation_Amplitude));
      SQL.Add(', Min_Runout_Range = ' + FloatToStr(Min_Runout_Range));
      SQL.Add(', Launch_Method = ' + IntToStr(Launch_Method));
      SQL.Add(', Data_Entry_Method = ' + IntToStr(Data_Entry_Method));
      SQL.Add(', Launch_Speed = ' + IntToStr(Launch_Speed));
      SQL.Add(', Opt_Launch_Range_Nuc_Sub = ' +
        FloatToStr(Opt_Launch_Range_Nuc_Sub));
      SQL.Add(', Opt_Launch_Range_Conv_Sub = ' +
        FloatToStr(Opt_Launch_Range_Conv_Sub));
      SQL.Add(', Opt_Launch_Range_Other = ' +
        FloatToStr(Opt_Launch_Range_Other));
      SQL.Add(', Detectability_Type = ' + IntToStr(Detectability_Type));
      SQL.Add('WHERE Torpedo_Index = ' + IntToStr(Torpedo_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteTorpedoDef(const aTorpedoIndex: Integer): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE Torpedo_Definition');
    SQL.Add('WHERE Torpedo_Index = ' + IntToStr(aTorpedoIndex));
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.GetTorpedoPOHModifier(const aTopedoID: integer; const aTargetType: Byte; var aList: TList): Integer;
var
  i : Integer;
  rec: TTorpedo_On_Board;
begin
  result := -1;

  if not zConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Torpedo_POH_Modifier ' );
    SQL.Add('WHERE Torpedo_Index = ' + IntToStr(aTopedoID));
    SQL.Add('ORDER BY Aspect_Angle ASC');
    Open;

    result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;
      aList.Clear

    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TTorpedo_On_Board.Create;

        with rec.FTorpedo_POH do
        begin
//          List_Index := FieldByName('List_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          POH_Modifier := FieldByName('POH_Modifier').AsFloat;
          Aspect_Angle := FieldByName('Aspect_Angle').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;

//    if not IsEmpty then begin
//
//      First;
//
//      if not Assigned(aList) then
//        aList := TList.Create
//      else
//        aList.Clear;
//
//      while not ZQ.Eof do begin
//        rec := TTorpedo_On_Board.Create;
//
//        with rec.FTorpedo_POH do
//        begin
//          Torpedo_Index  := FieldByName('Torpedo_Index').AsInteger;
//          Aspect_Angle   := FieldByName('Aspect_Angle').AsInteger;
//          POH_Modifier   := FieldByName('POH_Modifier').AsSingle;
//        end;
//
//        aList.Add(rec);
//        Next;
//      end;
//    end;
  end;
end;

function TdmTTT.InsertTorpedoPOHModifier(var aRec: TRecTorpedo_POH_Modifier): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Torpedo_POH_Modifier ');
    SQL.Add('(Torpedo_Index, POH_Modifier, Aspect_Angle)');
    SQL.Add('VALUES (');

    with aRec do
    begin
//      SQL.Add(IntToStr(Torpedo_Index) + ',');
//      SQL.Add(FloatToStr(POH_Modifier) + ')');
//      SQL.Add(FloatToStr(Aspect_Angle) + ',');
      SQL.Add(IntToStr(Torpedo_Index) + ', ');
//      SQL.Add(IntToStr(Target_Type) + ', ');
      SQL.Add(FloatToStr(POH_Modifier) + ', ');
      SQL.Add(FloatToStr(Aspect_Angle) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Torpedo_POH_Modifier');

    with aRec do
    begin
      SQL.Add('WHERE Torpedo_Index = ' + IntToStr(Torpedo_Index));
//      SQL.Add('AND Target_Type = ' + IntToStr(Target_Type));
      SQL.Add('AND POH_Modifier = ' + FloatToStr(POH_Modifier));
      SQL.Add('AND Aspect_Angle = ' + FloatToStr(Aspect_Angle));
    end;

    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

//      aRec.List_Index := FieldByName('List_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateTorpedoPOHModifier(var aRec: TRecTorpedo_POH_Modifier): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Torpedo_POH_Modifier');

    with aRec do
    begin
      SQL.Add('SET POH_Modifier = ' + FloatToStr(POH_Modifier));
      SQL.Add('WHERE Torpedo_Index = ' + IntToStr(Torpedo_Index));
      SQL.Add('AND Aspect_Angle = ' + FloatToStr(Aspect_Angle));
//      SQL.Add('SET POH_Modifier = ' + FloatToStr(POH_Modifier));
//      SQL.Add(', Aspect_Angle = ' + FloatToStr(Aspect_Angle));
//      SQL.Add('WHERE List_Index = ' + IntToStr(List_Index));
//      SQL.Add('AND Torpedo_Index = ' + IntToStr(Torpedo_Index));
//      SQL.Add('AND Target_Type = ' + IntToStr(Target_Type));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteTorpedoPOHModifier(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Torpedo_POH_Modifier');

    case aDeleteType of
      1: SQL.Add('WHERE Torpedo_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE List_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Torpedo_POH_Modifier');

    case aDeleteType of
      1: SQL.Add('WHERE Torpedo_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE List_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Mine Definition '}

function TdmTTT.GetAllMineDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TMine_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Mine_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Mine_Index = b.Mine_Index ');
    SQL.Add('ORDER BY Mine_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMine_On_Board.Create;

        with rec.FMine_Def do
        begin
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Mine_Identifier := FieldByName('Mine_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Mine_Classification := FieldByName('Mine_Classification').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Mooring_Type := FieldByName('Mooring_Type').AsInteger;
          Max_Laying_Depth := FieldByName('Max_Laying_Depth').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Mine_Lethality := FieldByName('Mine_Lethality').AsInteger;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterMineDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TMine_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Mine_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Mine_Index = b.Mine_Index ');
    SQL.Add('WHERE Mine_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Mine_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMine_On_Board.Create;

        with rec.FMine_Def do
        begin
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Mine_Identifier := FieldByName('Mine_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Mine_Classification := FieldByName('Mine_Classification').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Mooring_Type := FieldByName('Mooring_Type').AsInteger;
          Max_Laying_Depth := FieldByName('Max_Laying_Depth').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Mine_Lethality := FieldByName('Mine_Lethality').AsInteger;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetMineDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Mine_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Mine_Index = b.Mine_Index');
    SQL.Add('WHERE Mine_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertMineDef(var aRec: TRecMine_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Mine_Definition');
    SQL.Add('(Mine_Identifier, Platform_Domain, Platform_Category,');
    SQL.Add('Platform_Type, Mine_Classification, Length, Width, Height,');
    SQL.Add('Mooring_Type, Max_Laying_Depth, Front_Acoustic_Cross,');
    SQL.Add('Side_Acoustic_Cross, Mine_Lethality, Engagement_Range,');
    SQL.Add('Anti_Sur_Capable, Anti_SubSur_Capable, Detectability_Type)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Mine_Identifier) + ', ');
      SQL.Add(IntToStr(Platform_Domain) + ', ');
      SQL.Add(IntToStr(Platform_Category) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');
      SQL.Add(IntToStr(Mine_Classification) + ', ');
      SQL.Add(FloatToStr(Length) + ', ');
      SQL.Add(FloatToStr(Width) + ', ');
      SQL.Add(FloatToStr(Height) + ', ');
      SQL.Add(IntToStr(Mooring_Type) + ', ');
      SQL.Add(FloatToStr(Max_Laying_Depth) + ', ');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Mine_Lethality) + ', ');
      SQL.Add(FloatToStr(Engagement_Range) + ', ');
      SQL.Add(IntToStr(Anti_Sur_Capable) + ', ');
      SQL.Add(IntToStr(Anti_SubSur_Capable) + ', ');
      SQL.Add(IntToStr(Detectability_Type) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Mine_Definition');
    SQL.Add('WHERE Mine_Identifier = ' + QuotedStr(aRec.Mine_Identifier));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Mine_Index := FieldByName('Mine_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateMineDef(var aRec: TRecMine_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Mine_Definition');

    with aRec do
    begin
      SQL.Add('SET Mine_Identifier = ' + QuotedStr(Mine_Identifier));
      SQL.Add(', Platform_Domain = ' + IntToStr(Platform_Domain));
      SQL.Add(', Platform_Category = ' + IntToStr(Platform_Category));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));
      SQL.Add(', Mine_Classification = ' + IntToStr(Mine_Classification));
      SQL.Add(', Length = ' + FloatToStr(Length));
      SQL.Add(', Width = ' + FloatToStr(Width));
      SQL.Add(', Height = ' + FloatToStr(Height));
      SQL.Add(', Mooring_Type = ' + IntToStr(Mooring_Type));
      SQL.Add(', Max_Laying_Depth = ' + FloatToStr(Max_Laying_Depth));
      SQL.Add(', Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross));
      SQL.Add(', Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross));
      SQL.Add(', Mine_Lethality = ' + FloatToStr(Mine_Lethality));
      SQL.Add(', Engagement_Range = ' + FloatToStr(Engagement_Range));
      SQL.Add(', Anti_Sur_Capable = ' + IntToStr(Anti_Sur_Capable));
      SQL.Add(', Anti_SubSur_Capable = ' + IntToStr(Anti_SubSur_Capable));
      SQL.Add(', Detectability_Type = ' + IntToStr(Detectability_Type));
      SQL.Add('WHERE Mine_Index = ' + IntToStr(Mine_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteMineDef(const aMineIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE FROM Mine_Definition');
    SQL.Add('WHERE Mine_Index = ' + IntToStr(aMineIndex));
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.GetMinePODvsRange(const aMineID: Integer; const aTargetType: Byte; var aList: TList): Integer;
var
  i : Integer;
  rec : TMine_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Mine_POD_vs_Range');
    SQL.Add('WHERE Mine_Index = ' + IntToStr(aMineID));
    SQL.Add('ORDER BY Range');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMine_On_Board.Create;

        with rec.FMine_POD do
        begin
          List_Index := FieldByName('List_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Prob_of_Detonation := FieldByName('Prob_of_Detonation').AsFloat;
          Range := FieldByName('Range').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertMinePODvsRange(var aRec: TRecMine_POD_vs_Range): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Mine_POD_vs_Range');
    SQL.Add('(Mine_Index, Prob_of_Detonation, Range)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Mine_Index) + ', ');
      SQL.Add(FloatToStr(Prob_of_Detonation) + ', ');
      SQL.Add(FloatToStr(Range) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Mine_POD_vs_Range');

    with aRec do
    begin
      SQL.Add('WHERE Mine_Index = ' + IntToStr(Mine_Index));
      SQL.Add('AND Prob_of_Detonation = ' + FloatToStr(Prob_of_Detonation));
      SQL.Add('AND Range = ' + FloatToStr(Range));
    end;

    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.List_Index := FieldByName('List_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateMinePODvsRange(var aRec: TRecMine_POD_vs_Range): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Mine_POD_vs_Range');

    with aRec do
    begin
      SQL.Add('SET Prob_of_Detonation = ' + FloatToStr(Prob_of_Detonation));
      SQL.Add(', Range = ' + FloatToStr(Range));
      SQL.Add('WHERE List_Index = ' + IntToStr(List_Index));
      SQL.Add('AND Mine_Index = ' + IntToStr(Mine_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteMinePODvsRange(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Mine_POD_vs_Range');

    case aDeleteType of
      1: SQL.Add('WHERE Mine_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE List_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Mine_POD_vs_Range');

    case aDeleteType of
      1: SQL.Add('WHERE Mine_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE List_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Gun Definition '}

function TdmTTT.GetFilterGunDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TGun_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Gun_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Gun_Index = b.Gun_Index ');
    SQL.Add('WHERE a.Gun_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Gun_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGun_Definition.Create;

        with rec.FData do
        begin
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Gun_Identifier := FieldByName('Gun_Identifier').AsString;
          Gun_Category := FieldByName('Gun_Category').AsInteger;
          Rate_of_Fire := FieldByName('Rate_of_Fire').AsInteger;
          Lethality_per_Round := FieldByName('Lethality_per_Round').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Air_Min_Range := FieldByName('Air_Min_Range').AsSingle;
          Air_Max_Range := FieldByName('Air_Max_Range').AsSingle;
          Fire_Cntl_Director_Req := FieldByName('Fire_Cntl_Director_Req').AsInteger;
          Chaff_Capable_Gun := FieldByName('Chaff_Capable_Gun').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;
          Automode_Capable := FieldByName('Automode_Capable').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta').AsInteger;
          Gun_Average_Shell_Velocity := FieldByName('Gun_Average_Shell_Velocity').AsSingle;
          Man_Gun_Max_Elevation := FieldByName('Man_Gun_Max_Elevation').AsSingle;
          Man_Gun_Min_Elevation := FieldByName('Man_Gun_Min_Elevation').AsSingle;
          Man_Gun_Rotation_Rate := FieldByName('Man_Gun_Rotation_Rate').AsSingle;
          Man_Gun_Elevation_Rate := FieldByName('Man_Gun_Elevation_Rate').AsSingle;
          Man_Gun_Num_Rounds_Per_Load := FieldByName('Man_Gun_Num_Rounds_Per_Load').AsInteger;
          Man_Gun_Time_to_Reload := FieldByName('Man_Gun_Time_to_Reload').AsSingle;
          Man_Gun_Muzzle_Velocity := FieldByName('Man_Gun_Muzzle_Velocity').AsSingle;
          NGS_Capable := FieldByName('NGS_Capable').AsInteger;
          NGS_MinDeflectionError := FieldByName('NGS_MinDeflectionError').AsSingle;
          NGS_MaxDeflectionError := FieldByName('NGS_MaxDeflectionError').AsSingle;
          NGS_MinRangeError := FieldByName('NGS_MinRangeError').AsSingle;
          NGS_MaxRangeError := FieldByName('NGS_MaxRangeError').AsSingle;
          NGS_MaxDispersionError := FieldByName('NGS_MaxDispersionError').AsSingle;
          NGS_MaxDamageRadius := FieldByName('NGS_MaxDamageRadius').AsSingle;
          NGS_EffectiveRadius := FieldByName('NGS_EffectiveRadius').AsSingle;
          NGS_DamageRating := FieldByName('NGS_DamageRating').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAllGunDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TGun_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Gun_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Gun_Index = b.Gun_Index ');
    SQL.Add('ORDER BY Gun_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGun_Definition.Create;

        with rec.FData do
        begin
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Gun_Identifier := FieldByName('Gun_Identifier').AsString;
          Gun_Category := FieldByName('Gun_Category').AsInteger;
          Rate_of_Fire := FieldByName('Rate_of_Fire').AsInteger;
          Lethality_per_Round := FieldByName('Lethality_per_Round').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Air_Min_Range := FieldByName('Air_Min_Range').AsSingle;
          Air_Max_Range := FieldByName('Air_Max_Range').AsSingle;
          Fire_Cntl_Director_Req := FieldByName('Fire_Cntl_Director_Req')
            .AsInteger;
          Chaff_Capable_Gun := FieldByName('Chaff_Capable_Gun').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;

          Automode_Capable := FieldByName('Automode_Capable').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Gun_Average_Shell_Velocity := FieldByName
            ('Gun_Average_Shell_Velocity').AsSingle;
          Man_Gun_Max_Elevation := FieldByName('Man_Gun_Max_Elevation')
            .AsSingle;
          Man_Gun_Min_Elevation := FieldByName('Man_Gun_Min_Elevation')
            .AsSingle;
          Man_Gun_Rotation_Rate := FieldByName('Man_Gun_Rotation_Rate')
            .AsSingle;
          Man_Gun_Elevation_Rate := FieldByName('Man_Gun_Elevation_Rate')
            .AsSingle;
          Man_Gun_Num_Rounds_Per_Load := FieldByName
            ('Man_Gun_Num_Rounds_Per_Load').AsInteger;
          Man_Gun_Time_to_Reload := FieldByName('Man_Gun_Time_to_Reload')
            .AsSingle;
          Man_Gun_Muzzle_Velocity := FieldByName('Man_Gun_Muzzle_Velocity')
            .AsSingle;
          NGS_Capable := FieldByName('NGS_Capable').AsInteger;
          NGS_MinDeflectionError := FieldByName('NGS_MinDeflectionError')
            .AsSingle;
          NGS_MaxDeflectionError := FieldByName('NGS_MaxDeflectionError')
            .AsSingle;
          NGS_MinRangeError := FieldByName('NGS_MinRangeError').AsSingle;
          NGS_MaxRangeError := FieldByName('NGS_MaxRangeError').AsSingle;
          NGS_MaxDispersionError := FieldByName('NGS_MaxDispersionError')
            .AsSingle;
          NGS_MaxDamageRadius := FieldByName('NGS_MaxDamageRadius').AsSingle;
          NGS_EffectiveRadius := FieldByName('NGS_EffectiveRadius').AsSingle;
          NGS_DamageRating := FieldByName('NGS_DamageRating').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetGunDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Gun_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Gun_Index = b.Gun_Index');
    SQL.Add('WHERE Gun_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertGunDef(var aRec: TRecGun_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Gun_Definition');
    SQL.Add('(Gun_Identifier, Gun_Category, Rate_of_Fire,');
    SQL.Add('Lethality_per_Round, Min_Range, Max_Range, Air_Min_Range,');
    SQL.Add('Air_Max_Range, Fire_Cntl_Director_Req, Chaff_Capable_Gun,');
    SQL.Add('Anti_Sur_Capable, Anti_Land_Capable, Anti_Air_Capable,');
    SQL.Add('Automode_Capable, Max_Target_Altitude_Delta,');
    SQL.Add('Gun_Average_Shell_Velocity, Man_Gun_Max_Elevation,');
    SQL.Add('Man_Gun_Min_Elevation, Man_Gun_Rotation_Rate,');
    SQL.Add('Man_Gun_Elevation_Rate, Man_Gun_Num_Rounds_Per_Load,');
    SQL.Add('Man_Gun_Time_to_Reload, Man_Gun_Muzzle_Velocity, NGS_Capable,');
    SQL.Add('NGS_MinDeflectionError, NGS_MaxDeflectionError,');
    SQL.Add('NGS_MinRangeError, NGS_MaxRangeError, NGS_MaxDispersionError,');
    SQL.Add('NGS_MaxDamageRadius, NGS_EffectiveRadius, NGS_DamageRating,');
    SQL.Add('Anti_Amphibious_Capable)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Gun_Identifier) + ', ');
      SQL.Add(IntToStr(Gun_Category) + ', ');
      SQL.Add(IntToStr(Rate_of_Fire) + ', ');
      SQL.Add(IntToStr(Lethality_per_Round) + ', ');
      SQL.Add(FloatToStr(Min_Range) + ', ');
      SQL.Add(FloatToStr(Max_Range) + ', ');
      SQL.Add(FloatToStr(Air_Min_Range) + ', ');
      SQL.Add(FloatToStr(Air_Max_Range) + ', ');
      SQL.Add(IntToStr(Fire_Cntl_Director_Req) + ', ');
      SQL.Add(IntToStr(Chaff_Capable_Gun) + ', ');
      SQL.Add(IntToStr(Anti_Sur_Capable) + ', ');
      SQL.Add(IntToStr(Anti_Land_Capable) + ', ');
      SQL.Add(IntToStr(Anti_Air_Capable) + ', ');
      SQL.Add(IntToStr(Automode_Capable) + ', ');
      SQL.Add(IntToStr(Max_Target_Altitude_Delta) + ', ');
      SQL.Add(FloatToStr(Gun_Average_Shell_Velocity) + ', ');
      SQL.Add(FloatToStr(Man_Gun_Max_Elevation) + ', ');
      SQL.Add(FloatToStr(Man_Gun_Min_Elevation) + ', ');
      SQL.Add(FloatToStr(Man_Gun_Rotation_Rate) + ', ');
      SQL.Add(FloatToStr(Man_Gun_Elevation_Rate) + ', ');
      SQL.Add(IntToStr(Man_Gun_Num_Rounds_Per_Load) + ', ');
      SQL.Add(FloatToStr(Man_Gun_Time_to_Reload) + ', ');
      SQL.Add(FloatToStr(Man_Gun_Muzzle_Velocity) + ', ');
      SQL.Add(IntToStr(NGS_Capable) + ', ');
      SQL.Add(FloatToStr(NGS_MinDeflectionError) + ', ');
      SQL.Add(FloatToStr(NGS_MaxDeflectionError) + ', ');
      SQL.Add(FloatToStr(NGS_MinRangeError) + ', ');
      SQL.Add(FloatToStr(NGS_MaxRangeError) + ', ');
      SQL.Add(FloatToStr(NGS_MaxDispersionError) + ', ');
      SQL.Add(FloatToStr(NGS_MaxDamageRadius) + ', ');
      SQL.Add(FloatToStr(NGS_EffectiveRadius) + ', ');
      SQL.Add(IntToStr(NGS_DamageRating) + ', ');
      SQL.Add(IntToStr(Anti_Amphibious_Capable) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Gun_Definition');
    SQL.Add('WHERE Gun_Identifier = ' + QuotedStr(aRec.Gun_Identifier));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Gun_Index := FieldByName('Gun_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateGunDef(var aRec: TRecGun_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Gun_Definition');

    with aRec do
    begin
      SQL.Add('SET Gun_Identifier = ' + QuotedStr(Gun_Identifier));
      SQL.Add(', Gun_Category = ' + IntToStr(Gun_Category));
      SQL.Add(', Rate_of_Fire = ' + IntToStr(Rate_of_Fire));
      SQL.Add(', Lethality_per_Round = ' + IntToStr(Lethality_per_Round));
      SQL.Add(', Min_Range = ' + FloatToStr(Min_Range));
      SQL.Add(', Max_Range = ' + FloatToStr(Max_Range));
      SQL.Add(', Air_Min_Range = ' + FloatToStr(Air_Min_Range));
      SQL.Add(', Air_Max_Range = ' + FloatToStr(Air_Max_Range));
      SQL.Add(', Fire_Cntl_Director_Req = ' + IntToStr(Fire_Cntl_Director_Req));
      SQL.Add(', Chaff_Capable_Gun = ' + IntToStr(Chaff_Capable_Gun));
      SQL.Add(', Anti_Sur_Capable = ' + IntToStr(Anti_Sur_Capable));
      SQL.Add(', Anti_Land_Capable = ' + IntToStr(Anti_Land_Capable));
      SQL.Add(', Anti_Air_Capable = ' + IntToStr(Anti_Air_Capable));
      SQL.Add(', Automode_Capable = ' + IntToStr(Automode_Capable));
      SQL.Add(', Max_Target_Altitude_Delta = ' +
        IntToStr(Max_Target_Altitude_Delta));
      SQL.Add(', Gun_Average_Shell_Velocity = ' +
        FloatToStr(Gun_Average_Shell_Velocity));
      SQL.Add(', Man_Gun_Max_Elevation = ' + FloatToStr(Man_Gun_Max_Elevation));
      SQL.Add(', Man_Gun_Min_Elevation = ' + FloatToStr(Man_Gun_Min_Elevation));
      SQL.Add(', Man_Gun_Rotation_Rate = ' + FloatToStr(Man_Gun_Rotation_Rate));
      SQL.Add(', Man_Gun_Elevation_Rate = ' +
        FloatToStr(Man_Gun_Elevation_Rate));
      SQL.Add(', Man_Gun_Num_Rounds_Per_Load = ' +
        IntToStr(Man_Gun_Num_Rounds_Per_Load));
      SQL.Add(', Man_Gun_Time_to_Reload = ' +
        FloatToStr(Man_Gun_Time_to_Reload));
      SQL.Add(', Man_Gun_Muzzle_Velocity = ' +
        FloatToStr(Man_Gun_Muzzle_Velocity));
      SQL.Add(', NGS_Capable = ' + IntToStr(NGS_Capable));
      SQL.Add(', NGS_MinDeflectionError = ' +
        FloatToStr(NGS_MinDeflectionError));
      SQL.Add(', NGS_MaxDeflectionError = ' +
        FloatToStr(NGS_MaxDeflectionError));
      SQL.Add(', NGS_MinRangeError = ' + FloatToStr(NGS_MinRangeError));
      SQL.Add(', NGS_MaxRangeError = ' + FloatToStr(NGS_MaxRangeError));
      SQL.Add(', NGS_MaxDispersionError = ' +
        FloatToStr(NGS_MaxDispersionError));
      SQL.Add(', NGS_MaxDamageRadius = ' + FloatToStr(NGS_MaxDamageRadius));
      SQL.Add(', NGS_EffectiveRadius = ' + FloatToStr(NGS_EffectiveRadius));
      SQL.Add(', NGS_DamageRating = ' + IntToStr(NGS_DamageRating));
      SQL.Add(', Anti_Amphibious_Capable = ' +
        IntToStr(Anti_Amphibious_Capable));
      SQL.Add('WHERE Gun_Index = ' + IntToStr(Gun_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGunDef(const aGunIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE FROM Gun_Definition');
    SQL.Add('WHERE Gun_Index = ' + IntToStr(aGunIndex));
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.GetGunPOHvsRange(const aGunID: Integer; const aTargetType: Byte; var aList: TList): Integer;
var
  i : Integer;
  rec : TGun_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Gun_POH_vs_Range');
    SQL.Add('WHERE Gun_Index = ' + IntToStr(aGunID));
    SQL.Add('AND Target_Type = ' + IntToStr(aTargetType));
    SQL.Add('ORDER BY Range');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGun_Definition.Create;

        with rec.FGun_POH do
        begin
          List_Index := FieldByName('List_Index').AsInteger;
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Target_Type := FieldByName('Target_Type').AsInteger;
          Prob_of_Hit := FieldByName('Prob_of_Hit').AsFloat;
          Range := FieldByName('Range').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGunPOHvsRange(var aRec: TRecGun_POH_vs_Range): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Gun_POH_vs_Range');
    SQL.Add('(Gun_Index, Target_Type, Prob_of_Hit, Range)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Gun_Index) + ', ');
      SQL.Add(IntToStr(Target_Type) + ', ');
      SQL.Add(FloatToStr(Prob_of_Hit) + ', ');
      SQL.Add(FloatToStr(Range) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Gun_POH_vs_Range');

    with aRec do
    begin
      SQL.Add('WHERE Gun_Index = ' + IntToStr(Gun_Index));
      SQL.Add('AND Target_Type = ' + IntToStr(Target_Type));
      SQL.Add('AND Prob_of_Hit = ' + FloatToStr(Prob_of_Hit));
      SQL.Add('AND Range = ' + FloatToStr(Range));
    end;

    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.List_Index := FieldByName('List_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateGunPOHvsRange(var aRec: TRecGun_POH_vs_Range): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Gun_POH_vs_Range');

    with aRec do
    begin
      SQL.Add('SET Prob_of_Hit = ' + FloatToStr(Prob_of_Hit));
      SQL.Add(', Range = ' + FloatToStr(Range));
      SQL.Add('WHERE List_Index = ' + IntToStr(List_Index));
      SQL.Add('AND Gun_Index = ' + IntToStr(Gun_Index));
      SQL.Add('AND Target_Type = ' + IntToStr(Target_Type));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGunPOHvsRange(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Gun_POH_vs_Range');

    case aDeleteType of
      1: SQL.Add('WHERE Gun_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE List_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Gun_POH_vs_Range');

    case aDeleteType of
      1: SQL.Add('WHERE Gun_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE List_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Bomb Definition '}

function TdmTTT.GetAllBombDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TBomb_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Bomb_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Bomb_Index = b.Bomb_Index ');
    SQL.Add('ORDER BY Bomb_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TBomb_Definition.Create;

        with rec.FData do
        begin
          Bomb_Index := FieldByName('Bomb_Index').AsInteger;
          Bomb_Identifier := FieldByName('Bomb_Identifier').AsString;
          Bomb_Type := FieldByName('Bomb_Type').AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;
          Rocket_Launcher := FieldByName('Rocket_Launcher').AsInteger;

        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterBombDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TBomb_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Bomb_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Bomb_Index = b.Bomb_Index ');
    SQL.Add('WHERE Bomb_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Bomb_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TBomb_Definition.Create;

        with rec.FData do
        begin
          Bomb_Index := FieldByName('Bomb_Index').AsInteger;
          Bomb_Identifier := FieldByName('Bomb_Identifier').AsString;
          Bomb_Type := FieldByName('Bomb_Type').AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;
          Rocket_Launcher := FieldByName('Rocket_Launcher').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetBombDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Bomb_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Bomb_Index = b.Bomb_Index');
    SQL.Add('WHERE Bomb_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertBombDef(var aRec: TRecBomb_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Bomb_Definition');
    SQL.Add('(Bomb_Identifier, Bomb_Type, Lethality, Min_Range, Max_Range,');
    SQL.Add('Rocket_Launcher, Anti_Sur_Capable, Anti_SubSur_Capable, Anti_Land_Capable,');
    SQL.Add('Anti_Amphibious_Capable)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Bomb_Identifier) + ', ');
      SQL.Add(IntToStr(Bomb_Type) + ', ');
      SQL.Add(IntToStr(Lethality) + ', ');
      SQL.Add(FloatToStr(Min_Range) + ', ');
      SQL.Add(FloatToStr(Max_Range) + ', ');
      SQL.Add(IntToStr(Rocket_Launcher) + ', ');
      SQL.Add(IntToStr(Anti_Sur_Capable) + ', ');
      SQL.Add(IntToStr(Anti_SubSur_Capable) + ', ');
      SQL.Add(IntToStr(Anti_Land_Capable) + ', ');
      SQL.Add(IntToStr(Anti_Amphibious_Capable) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Bomb_Definition');
    SQL.Add('WHERE Bomb_Identifier = ' + QuotedStr(aRec.Bomb_Identifier));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Bomb_Index := FieldByName('Bomb_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateBombDef(var aRec: TRecBomb_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Bomb_Definition');

    with aRec do
    begin
      SQL.Add('SET Bomb_Identifier = ' + QuotedStr(Bomb_Identifier));
      SQL.Add(', Bomb_Type = ' + IntToStr(Bomb_Type));
      SQL.Add(', Lethality = ' + IntToStr(Lethality));
      SQL.Add(', Min_Range = ' + FloatToStr(Min_Range));
      SQL.Add(', Max_Range = ' + FloatToStr(Max_Range));
      SQL.Add(', Anti_Sur_Capable = ' + IntToStr(Anti_Sur_Capable));
      SQL.Add(', Anti_SubSur_Capable = ' + IntToStr(Anti_SubSur_Capable));
      SQL.Add(', Anti_Land_Capable = ' + IntToStr(Anti_Land_Capable));
      SQL.Add(', Anti_Amphibious_Capable = ' + IntToStr(Anti_Amphibious_Capable));
      SQL.Add(', Rocket_Launcher = ' + IntToStr(Rocket_Launcher));
      SQL.Add('WHERE Bomb_Index = ' + IntToStr(Bomb_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteBombDef(const aBombIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE FROM Bomb_Definition');
    SQL.Add('WHERE Bomb_Index = ' + IntToStr(aBombIndex));
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.GetBombPOHvsRange(const aBombID: Integer; const aTargetType: Byte; var aList: TList): Integer;
var
  i : Integer;
  rec : TBomb_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Bomb_POH_vs_Range');
    SQL.Add('WHERE Bomb_Index = ' + IntToStr(aBombID));
    SQL.Add('ORDER BY Range');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TBomb_Definition.Create;

        with rec.FBomb_POH do
        begin
          List_Index := FieldByName('List_Index').AsInteger;
          Bomb_Index := FieldByName('Bomb_Index').AsInteger;
          Prob_of_Hit := FieldByName('Prob_of_Hit').AsFloat;
          Range := FieldByName('Range').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertBombPOHvsRange(var aRec: TRecBomb_POH_vs_Range): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Bomb_POH_vs_Range');
    SQL.Add('(Bomb_Index, Prob_of_Hit, Range)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Bomb_Index) + ', ');
      SQL.Add(FloatToStr(Prob_of_Hit) + ', ');
      SQL.Add(FloatToStr(Range) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Bomb_POH_vs_Range');

    with aRec do
    begin
      SQL.Add('WHERE Bomb_Index = ' + IntToStr(Bomb_Index));
      SQL.Add('AND Prob_of_Hit = ' + FloatToStr(Prob_of_Hit));
      SQL.Add('AND Range = ' + FloatToStr(Range));
    end;

    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.List_Index := FieldByName('List_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateBombPOHvsRange(var aRec: TRecBomb_POH_vs_Range): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Bomb_POH_vs_Range');

    with aRec do
    begin
      SQL.Add('SET Prob_of_Hit = ' + FloatToStr(Prob_of_Hit));
      SQL.Add(', Range = ' + FloatToStr(Range));
      SQL.Add('WHERE List_Index = ' + IntToStr(List_Index));
      SQL.Add('AND Bomb_Index = ' + IntToStr(Bomb_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteBombPOHvsRange(const aDeleteType: Byte;const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Bomb_POH_vs_Range');

    case aDeleteType of
      1: SQL.Add('WHERE Bomb_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE List_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Bomb_POH_vs_Range');

    case aDeleteType of
      1: SQL.Add('WHERE Bomb_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE List_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Weapon On Board '}

function TdmTTT.GetMissileOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TMissile_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Fitted_Weapon_On_Board a ');
    SQL.Add('JOIN Missile_Definition b ');
    SQL.Add('ON a.Missile_Index = b.Missile_Index ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMissile_On_Board.Create;

        with rec.FData do
        begin
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Launch_Angle := FieldByName('Launch_Angle').AsSingle;
          Launch_Angle_Required := FieldByName('Launch_Angle_Required')
            .AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Firing_Delay := FieldByName('Firing_Delay').AsSingle;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        end;

        with rec.FDef do
        begin
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Second_Seeker_Pattern_Capable := FieldByName
            ('Second_Seeker_Pattern_Capable').AsInteger;
          Seeker_Bias_Capable := FieldByName('Seeker_Bias_Capable').AsInteger;
          Fixed_Seeker_Turn_On_Range := FieldByName
            ('Fixed_Seeker_Turn_On_Range')
            .AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Altitude := FieldByName('Default_Altitude').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          Pursuit_Guide_Type := FieldByName('Pursuit_Guide_Type').AsInteger;
          Primary_Guide_Type := FieldByName('Primary_Guide_Type').AsInteger;
          Secondary_Guide_Type := FieldByName('Secondary_Guide_Type').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable')
            .AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Transmitted_Frequency := FieldByName('Transmitted_Frequency').AsFloat;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Xmit_Power := FieldByName('Xmit_Power').AsSingle;
          TARH_Jamming_A_Probability := FieldByName
            ('TARH_Jamming_A_Probability').AsSingle;
          TARH_Jamming_B_Probability := FieldByName
            ('TARH_Jamming_B_Probability').AsSingle;
          TARH_Jamming_C_Probability := FieldByName
            ('TARH_Jamming_C_Probability').AsSingle;
          Wpt_Capable := FieldByName('Wpt_Capable').AsInteger;
          Max_Num_Wpts := FieldByName('Max_Num_Wpts').AsInteger;
          Min_Final_Leg_Length := FieldByName('Min_Final_Leg_Length').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Max_Firing_Depth := FieldByName('Max_Firing_Depth').AsSingle;
          Upper_Received_Freq := FieldByName('Upper_Received_Freq').AsFloat;
          Lower_Received_Freq := FieldByName('Lower_Received_Freq').AsFloat;
          Fly_Out_Required := FieldByName('Fly_Out_Required').AsInteger;
          Fly_Out_Range := FieldByName('Fly_Out_Range').AsSingle;
          Fly_Out_Altitude := FieldByName('Fly_Out_Altitude').AsSingle;
          Booster_Separation_Required := FieldByName
            ('Booster_Separation_Required').AsInteger;
          Booster_Separation_Range := FieldByName('Booster_Separation_Range')
            .AsSingle;
          Booster_Separation_Box_Width := FieldByName
            ('Booster_Separation_Box_Width').AsSingle;
          Booster_Separation_Box_Length := FieldByName
            ('Booster_Separation_Box_Length').AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Terminal_Guidance_Capability := FieldByName
            ('Terminal_Guidance_Capability').AsInteger;
          Terminal_Altitude_Required := FieldByName
            ('Terminal_Altitude_Required')
            .AsInteger;
          Terminal_Acquisition_Altitude := FieldByName
            ('Terminal_Acquisition_Altitude').AsSingle;
          Terminal_Sinuation_Start_Range := FieldByName
            ('Terminal_Sinuation_Start_Range').AsSingle;
          Terminal_Sinuation_Period := FieldByName('Terminal_Sinuation_Period')
            .AsSingle;
          Terminal_Sinuation_Amplitude := FieldByName
            ('Terminal_Sinuation_Amplitude').AsSingle;
          Terminal_Pop_Up_Range := FieldByName('Terminal_Pop_Up_Range')
            .AsSingle;
          Terminal_Pop_Up_Altitude := FieldByName('Terminal_Pop_Up_Altitude')
            .AsSingle;
          Mid_Course_Update_Mode := FieldByName('Mid_Course_Update_Mode')
            .AsInteger;
          Home_On_Jam_Type_A_Capable := FieldByName
            ('Home_On_Jam_Type_A_Capable')
            .AsInteger;
          Home_On_Jam_Type_B_Capable := FieldByName
            ('Home_On_Jam_Type_B_Capable')
            .AsInteger;
          Home_On_Jam_Type_C_Capable := FieldByName
            ('Home_On_Jam_Type_C_Capable')
            .AsInteger;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Term_Guide_Azimuth_Narrow := FieldByName('Term_Guide_Azimuth_Narrow')
            .AsSingle;
          Term_Guide_Elevation_Narrow := FieldByName
            ('Term_Guide_Elevation_Narrow').AsSingle;
          Term_Guide_Range_Narrow := FieldByName('Term_Guide_Range_Narrow')
            .AsSingle;
          Spot_Number := FieldByName('Spot_Number').AsInteger;
          ECCM_Type := FieldByName('ECCM_Type').AsInteger;
          ECM_Detonation := FieldByName('ECM_Detonation').AsInteger;
          ECM_Detection := FieldByName('ECM_Detection').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          IRCM_Detonation := FieldByName('IRCM_Detonation').AsInteger;
          IRCM_Detection := FieldByName('IRCM_Detection').AsInteger;
          Sea_State_Modelling_Capable := FieldByName
            ('Sea_State_Modelling_Capable').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetTorpedoOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TTorpedo_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Fitted_Weapon_On_Board a ');
    SQL.Add('JOIN Torpedo_Definition b ');
    SQL.Add('ON a.Torpedo_Index = b.Torpedo_Index ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TTorpedo_On_Board.Create;

        with rec.FData do
        begin
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Launch_Angle := FieldByName('Launch_Angle').AsSingle;
          Launch_Angle_Required := FieldByName('Launch_Angle_Required')
            .AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Firing_Delay := FieldByName('Firing_Delay').AsSingle;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        end;

        with rec.FDef do
        begin
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Lethality := FieldByName('Lethality').AsInteger;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Depth := FieldByName('Default_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Switch_Point := FieldByName('Cavitation_Switch_Point')
            .AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Pursuit_Guidance_Type := FieldByName('Pursuit_Guidance_Type')
            .AsInteger;
          Air_Drop_Capable := FieldByName('Air_Drop_Capable').AsInteger;
          Use_Terminal_Circle := FieldByName('Use_Terminal_Circle').AsInteger;
          Terminal_Circle_Radius := FieldByName('Terminal_Circle_Radius')
            .AsSingle;
          Fixed_Circle_Radius := FieldByName('Fixed_Circle_Radius').AsInteger;
          Lateral_Deceleration := FieldByName('Lateral_Deceleration').AsSingle;
          Airborne_Descent_Rate := FieldByName('Airborne_Descent_Rate').AsFloat;
          Wire_Angle_Offset := FieldByName('Wire_Angle_Offset').AsSingle;
          Guidance_Type := FieldByName('Guidance_Type').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          Active_Acoustic_POH_Mod := FieldByName('Active_Acoustic_POH_Mod')
            .AsSingle;
          Passive_Acoustic_POH_Mod := FieldByName('Passive_Acoustic_POH_Mod')
            .AsSingle;
          Active_Passive_POH_Mod := FieldByName('Active_Passive_POH_Mod')
            .AsSingle;
          WireGuide_POH_Modifier := FieldByName('WireGuide_POH_Modifier')
            .AsSingle;
          WakeHome_POH_Modifier := FieldByName('WakeHome_POH_Modifier')
            .AsSingle;
          Active_Seeker_Power := FieldByName('Active_Seeker_Power').AsSingle;
          Active_Seeker_Freq := FieldByName('Active_Seeker_Freq').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          First_Relative_Gyro_Angle := FieldByName('First_Relative_Gyro_Angle')
            .AsInteger;
          Second_Relative_Gyro_Angle := FieldByName
            ('Second_Relative_Gyro_Angle')
            .AsInteger;
          Max_Torpedo_Gyro_Angle := FieldByName('Max_Torpedo_Gyro_Angle')
            .AsSingle;
          Max_Torpedo_Search_Depth := FieldByName('Max_Torpedo_Search_Depth')
            .AsSingle;
          Acoustic_Torp_Ceiling_Depth := FieldByName
            ('Acoustic_Torp_Ceiling_Depth').AsSingle;
          Fixed_Ceiling_Depth := FieldByName('Fixed_Ceiling_Depth').AsInteger;
          Fixed_Seeker_TurnOn_Range := FieldByName('Fixed_Seeker_TurnOn_Range')
            .AsInteger;
          Sinuation_Runout := FieldByName('Sinuation_Runout').AsInteger;
          Runout_Sinuation_Period := FieldByName('Runout_Sinuation_Period')
            .AsSingle;
          Runout_Sinuation_Amplitude := FieldByName
            ('Runout_Sinuation_Amplitude').AsSingle;
          Min_Runout_Range := FieldByName('Min_Runout_Range').AsSingle;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Opt_Launch_Range_Nuc_Sub := FieldByName('Opt_Launch_Range_Nuc_Sub')
            .AsSingle;
          Opt_Launch_Range_Conv_Sub := FieldByName('Opt_Launch_Range_Conv_Sub')
            .AsSingle;
          Opt_Launch_Range_Other := FieldByName('Opt_Launch_Range_Other')
            .AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetMineOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TMine_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Fitted_Weapon_On_Board a ');
    SQL.Add('JOIN Mine_Definition b ');
    SQL.Add('ON a.Mine_Index = b.Mine_Index ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMine_On_Board.Create;

        with rec.FData do
        begin
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Launch_Angle := FieldByName('Launch_Angle').AsSingle;
          Launch_Angle_Required := FieldByName('Launch_Angle_Required')
            .AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Firing_Delay := FieldByName('Firing_Delay').AsSingle;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        end;

        with rec.FMine_Def do
        begin
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Mine_Identifier := FieldByName('Mine_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Mine_Classification := FieldByName('Mine_Classification').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Mooring_Type := FieldByName('Mooring_Type').AsInteger;
          Max_Laying_Depth := FieldByName('Max_Laying_Depth').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Mine_Lethality := FieldByName('Mine_Lethality').AsInteger;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetGunOnBoard(const aVehicleID: Integer;var aList: TList): Integer;
var
  i : Integer;
  rec : TGun_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Point_Effect_On_Board a ');
    SQL.Add('JOIN Gun_Definition b ');
    SQL.Add('ON a.Gun_Index = b.Gun_Index ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGun_Definition.Create;

        with rec.FPoint.FData do
        begin
          Point_Effect_Index := FieldByName('Point_Effect_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Quantity := FieldByName('Quantity').AsInteger;
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
        end;

        with rec.FData do
        begin
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Gun_Identifier := FieldByName('Gun_Identifier').AsString;
          Gun_Category := FieldByName('Gun_Category').AsInteger;
          Rate_of_Fire := FieldByName('Rate_of_Fire').AsInteger;
          Lethality_per_Round := FieldByName('Lethality_per_Round').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Air_Min_Range := FieldByName('Air_Min_Range').AsSingle;
          Air_Max_Range := FieldByName('Air_Max_Range').AsSingle;
          Fire_Cntl_Director_Req := FieldByName('Fire_Cntl_Director_Req')
            .AsInteger;
          Chaff_Capable_Gun := FieldByName('Chaff_Capable_Gun').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable')
            .AsInteger;
          Automode_Capable := FieldByName('Automode_Capable').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Gun_Average_Shell_Velocity := FieldByName
            ('Gun_Average_Shell_Velocity').AsSingle;
          Man_Gun_Max_Elevation := FieldByName('Man_Gun_Max_Elevation')
            .AsSingle;
          Man_Gun_Min_Elevation := FieldByName('Man_Gun_Min_Elevation')
            .AsSingle;
          Man_Gun_Rotation_Rate := FieldByName('Man_Gun_Rotation_Rate')
            .AsSingle;
          Man_Gun_Elevation_Rate := FieldByName('Man_Gun_Elevation_Rate')
            .AsSingle;
          Man_Gun_Num_Rounds_Per_Load := FieldByName
            ('Man_Gun_Num_Rounds_Per_Load').AsInteger;
          Man_Gun_Time_to_Reload := FieldByName('Man_Gun_Time_to_Reload')
            .AsSingle;
          Man_Gun_Muzzle_Velocity := FieldByName('Man_Gun_Muzzle_Velocity')
            .AsSingle;
          NGS_Capable := FieldByName('NGS_Capable').AsInteger;
          NGS_MinDeflectionError := FieldByName('NGS_MinDeflectionError')
            .AsSingle;
          NGS_MaxDeflectionError := FieldByName('NGS_MaxDeflectionError')
            .AsSingle;
          NGS_MinRangeError := FieldByName('NGS_MinRangeError').AsSingle;
          NGS_MaxRangeError := FieldByName('NGS_MaxRangeError').AsSingle;
          NGS_MaxDispersionError := FieldByName('NGS_MaxDispersionError')
            .AsSingle;
          NGS_MaxDamageRadius := FieldByName('NGS_MaxDamageRadius').AsSingle;
          NGS_EffectiveRadius := FieldByName('NGS_EffectiveRadius').AsSingle;
          NGS_DamageRating := FieldByName('NGS_DamageRating').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetBombOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TBomb_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Point_Effect_On_Board a ');
    SQL.Add('JOIN Bomb_Definition b ');
    SQL.Add('ON a.Bomb_Index = b.Bomb_Index ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TBomb_Definition.Create;

        with rec.FPoint.FData do
        begin
          Point_Effect_Index := FieldByName('Point_Effect_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Quantity := FieldByName('Quantity').AsInteger;
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Bomb_Index := FieldByName('Bomb_Index').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
        end;

        with rec.FData do
        begin
          Bomb_Index := FieldByName('Bomb_Index').AsInteger;
          Bomb_Identifier := FieldByName('Bomb_Identifier').AsString;
          Bomb_Type := FieldByName('Bomb_Type').AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable')
            .AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFittedWeaponOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Fitted_Weapon_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetPointEffectOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Point_Effect_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetFittedWeaponLauncherOnBoard(const aWeaponID: Integer;   var aList: TList): Boolean;
var
  i : Integer;
  rec : TFitted_Weap_Launcher_On_Board;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Fitted_Weap_Launcher_On_Board');
    SQL.Add('WHERE Fitted_Weap_Index = ' + IntToStr(aWeaponID));
    SQL.Add('ORDER BY Launcher_Type');
    Open;

    Result := RecordCount > 0;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TFitted_Weap_Launcher_On_Board.Create;

        with rec.FData do
        begin
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Launcher_Type := FieldByName('Launcher_Type').AsInteger;
          Launcher_Angle_Required := FieldByName('Launcher_Angle_Required')
            .AsInteger;
          Launcher_Angle := FieldByName('Launcher_Angle').AsInteger;
          Launcher_Max_Qty := FieldByName('Launcher_Max_Qty').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFittedWeaponLauncherOnBoardCount(const aFittedWeapID: Integer; const aType: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Fitted_Weap_Launcher_On_Board');
    SQL.Add('WHERE Fitted_Weap_Index = ' + IntToStr(aFittedWeapID));
    SQL.Add('AND Launcher_Type = ' + IntToStr(aType));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.InsertFittedWeaponOnBoard(const aInsertType: Byte;var aRec: TRecFitted_Weapon_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Fitted_Weapon_On_Board');
    SQL.Add('(Instance_Identifier, Vehicle_Index, Instance_Type, Mount_Type,');
    SQL.Add('Quantity, Firing_Delay,');

    case aInsertType of
      1: SQL.Add('Missile_Index)');
      2: SQL.Add('Torpedo_Index)');
      3: SQL.Add('Mine_Index)');
      4: SQL.Add('Hybrid_Index)');
    end;

    SQL.Add('VALUES ( ');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Mount_Type) + ', ');
      SQL.Add(IntToStr(Quantity) + ', ');
      SQL.Add(FloatToStr(Firing_Delay) + ', ');

      case aInsertType of
        1: SQL.Add(IntToStr(Missile_Index) + ')');
        2: SQL.Add(IntToStr(Torpedo_Index) + ')');
        3: SQL.Add(IntToStr(Mine_Index) + ')');
        4: SQL.Add(IntToStr(Hybrid_Index) + ')');
      end;
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Fitted_Weapon_On_Board');
    SQL.Add('WHERE Instance_Identifier = ' + QuotedStr(aRec.Instance_Identifier));
    SQL.Add('AND Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateFittedWeaponOnBoard(const aUpdateType: Byte;var aRec: TRecFitted_Weapon_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Fitted_Weapon_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Mount_Type = ' + IntToStr(Mount_Type));
      SQL.Add(', Firing_Delay = '+ FloatToStr(Firing_Delay));
      SQL.Add(', Quantity = ' + IntToStr(Quantity));

      case aUpdateType of
        1: SQL.Add(', Missile_Index = ' + IntToStr(Missile_Index));
        2: SQL.Add(', Torpedo_Index = ' + IntToStr(Torpedo_Index));
        3: SQL.Add(', Mine_Index = ' + IntToStr(Mine_Index));
        4: SQL.Add(', Hybrid_Index = ' + IntToStr(Hybrid_Index));
      end;

      SQL.Add('WHERE Fitted_Weap_index = ' + IntToStr(Fitted_Weap_Index));
    end;

    ExecSQL;
  end;
end;

function TdmTTT.InsertPointEffectOnBoard(const aInsertType: Byte;var aRec: TRecPoint_Effect_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Point_Effect_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index, Mount_Type,');
    SQL.Add('Quantity,');

    case aInsertType of
      1: SQL.Add('Gun_Index)');
      2: SQL.Add('Bomb_Index)');
    end;

    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Mount_Type) + ', ');
      SQL.Add(IntToStr(Quantity) + ', ');

      case aInsertType of
        1: SQL.Add(IntToStr(Gun_Index) + ')');
        2: SQL.Add(IntToStr(Bomb_Index) + ')');
      end;
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Point_Effect_On_Board');
    SQL.Add('WHERE Instance_Identifier = ' + QuotedStr(aRec.Instance_Identifier));
    SQL.Add('AND Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Point_Effect_Index := FieldByName('Point_Effect_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdatePointEffectOnBoard(const aUpdateType: Byte;var aRec: TRecPoint_Effect_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Point_Effect_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Vehicle_Index = '+ IntToStr(Vehicle_Index));
      SQL.Add(', Instance_Type = '+ IntToStr(Instance_Type));
      SQL.Add(', Mount_Type = ' + IntToStr(Mount_Type));
      SQL.Add(', Quantity = ' + IntToStr(Quantity));

      case aUpdateType of
        1: SQL.Add(', Gun_Index = ' + IntToStr(Gun_Index));
        2: SQL.Add(', Bomb_Index = ' + IntToStr(Bomb_Index));
      end;

      SQL.Add('WHERE Point_Effect_Index = ' + IntToStr(Point_Effect_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteFittedWeaponLauncherOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Fitted_Weap_Launcher_On_Board');

    case aDeleteType of
      1:
      begin
        SQL.Add('WHERE Fitted_Weap_Index IN ( SELECT Fitted_Weap_Index');
        SQL.Add('FROM Fitted_Weapon_On_Board');
        SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex) + ')');
      end;
      2: SQL.Add('WHERE Fitted_Weap_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteFittedWeaponOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Fitted_Weapon_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Fitted_Weap_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Fitted_Weapon_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Fitted_Weap_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.DeletePointEffectOnBoard(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Point_Effect_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Point_Effect_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Point_Effect_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Point_Effect_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.InsertFittedWeaponLauncherOnBoard(const aRec: TRecFitted_Weap_Launcher_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Fitted_Weap_Launcher_On_Board');
    SQL.Add('(Fitted_Weap_Index, Launcher_Type, Launcher_Angle_Required,');
    SQL.Add('Launcher_Angle, Launcher_Max_Qty)');
    SQL.Add('VALUES( ');

    with aRec do
    begin
      SQL.Add(IntToStr(Fitted_Weap_Index) + ', ');
      SQL.Add(IntToStr(Launcher_Type) + ', ');
      SQL.Add(IntToStr(Launcher_Angle_Required) + ', ');
      SQL.Add(IntToStr(Launcher_Angle) + ', ');
      SQL.Add(IntToStr(Launcher_Max_Qty) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateFittedWeaponLauncherOnBoard(const aRec: TRecFitted_Weap_Launcher_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Fitted_Weap_Launcher_On_Board');

    with aRec do
    begin
      SQL.Add('SET Launcher_Angle_Required = ' + IntToStr(Launcher_Angle_Required));
      SQL.Add(', Launcher_Type = ' + IntToStr(Launcher_Type));
      SQL.Add(', Launcher_Angle = ' + IntToStr(Launcher_Angle));
      SQL.Add(', Launcher_Max_Qty = ' + IntToStr(Launcher_Max_Qty));
      SQL.Add('WHERE Fitted_Weap_Index = ' + IntToStr(Fitted_Weap_Index));
      SQL.Add('AND Launcher_Type = ' + IntToStr(LastLauncher_Type));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteFittedWeaponLauncherOnBoard(const aWeaponID, aLauncherType: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Fitted_Weap_Launcher_On_Board');
    SQL.Add('WHERE Fitted_Weap_Index = ' + IntToStr(aWeaponID));
    SQL.Add('AND Launcher_Type = ' + IntToStr(aLauncherType));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$ENDREGION}

{$REGION ' Countermeasures Section '}

{$REGION ' Acoustic Decoy '}

function TdmTTT.GetAllAcousticDecoyDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TAcoustic_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Acoustic_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Decoy_Index = b.Decoy_Index');
    SQL.Add('ORDER BY a.Decoy_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TAcoustic_Decoy_On_Board.Create;

        with rec.FAccousticDecoy_Def do
        begin
          Decoy_Index := FieldByName('Decoy_Index').AsInteger;
          Decoy_Identifier := FieldByName('Decoy_Identifier').AsString;
          Acoustic_Intensity_Increase := FieldByName
            ('Acoustic_Intensity_Increase').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterAcousticDecoyDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TAcoustic_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Acoustic_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Decoy_Index = b.Decoy_Index');
    SQL.Add('WHERE a.Decoy_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY a.Decoy_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TAcoustic_Decoy_On_Board.Create;

        with rec.FAccousticDecoy_Def do
        begin
          Decoy_Index := FieldByName('Decoy_Index').AsInteger;
          Decoy_Identifier := FieldByName('Decoy_Identifier').AsString;
          Acoustic_Intensity_Increase := FieldByName
            ('Acoustic_Intensity_Increase').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAcousticDecoyDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Acoustic_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Decoy_Index = b.Decoy_Index');
    SQL.Add('WHERE Decoy_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertAcousticDecoyDef(var aRec: TRecAcoustic_Decoy_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Acoustic_Decoy_Definition');
    SQL.Add('(Decoy_Identifier, Acoustic_Intensity_Increase)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Decoy_Identifier) + ', ');
      SQL.Add(FloatToStr(Acoustic_Intensity_Increase) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Acoustic_Decoy_Definition');
      SQL.Add('WHERE Decoy_Identifier = ' + QuotedStr(Decoy_Identifier));
      Open;

      Decoy_Index := FieldByName('Decoy_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateAcousticDecoyDef(var aRec: TRecAcoustic_Decoy_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Acoustic_Decoy_Definition');

    with aRec do
    begin
      SQL.Add('SET Decoy_Identifier = ' + QuotedStr(Decoy_Identifier));
      SQL.Add(', Acoustic_Intensity_Increase = ' +
        FloatToStr(Acoustic_Intensity_Increase));
      SQL.Add('WHERE Decoy_Index = ' + IntToStr(Decoy_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteAcousticDecoyDef(const aAcousticDecoyIndex: Integer): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE Acoustic_Decoy_Definition');
    SQL.Add('WHERE Decoy_Index = ' + IntToStr(aAcousticDecoyIndex));
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.GetAcousticDecoyPOHModifier(const aDecoyIndex: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TAcoustic_Decoy_POH_Modifier;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Acoustic_Decoy_POH_Modifier');
    SQL.Add('WHERE Decoy_Index = ' + IntToStr(aDecoyIndex));
    SQL.Add('ORDER BY Torpedo_Guidance_Type, Aspect_Angle');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TAcoustic_Decoy_POH_Modifier.Create;

        with rec.FAccousticDecoy_POH do
        begin
          Decoy_Index := FieldByName('Decoy_Index').AsInteger;
          Torpedo_Guidance_Type := FieldByName('Torpedo_Guidance_Type')
            .AsInteger;
          Aspect_Angle := FieldByName('Aspect_Angle').AsInteger;
          POH_Modifier := FieldByName('POH_Modifier').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertAcoustic_Decoy_POH_Modifier(var rec: TAcoustic_Decoy_POH_Modifier): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FAccousticDecoy_POH do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO [Runtime_DB].[dbo].[Acoustic_Decoy_POH_Modifier] ');
      SQL.Add('(Decoy_Index,Torpedo_Guidance_Type,Aspect_Angle,POH_Modifier)');
      SQL.Add('VALUES ( ' );
      SQL.Add(IntToStr(Decoy_Index)+',');
      SQL.Add(IntToStr(Torpedo_Guidance_Type)+',');
      SQL.Add(IntToStr(Aspect_Angle)+',');
      SQL.Add(FloatToStr(POH_Modifier)+')');
    end;
    ExecSQL;
  end;
end;

function TdmTTT.UpdateAcoustic_Decoy_POH_Modifier(const id,torpedo,aspect: Integer;var rec: TAcoustic_Decoy_POH_Modifier): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FAccousticDecoy_POH do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Acoustic_Decoy_POH_Modifier  ');
      SQL.Add('SET ' );
      SQL.Add('POH_Modifier = '+FloatToStr(POH_Modifier)+'');
    end;
    SQL.Add('WHERE (Decoy_Index = ' +  IntToStr(id) + ') ' );
    SQL.Add('AND (Torpedo_Guidance_Type = ' +  IntToStr(torpedo) + ') ' );
    SQL.Add('AND (Aspect_Angle = ' +  IntToStr(aspect) + ') ' );
    ExecSQL;
  end;
end;

function TdmTTT.DeleteAcoustic_Decoy_POH_Modifier(const id: Integer): integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Acoustic_Decoy_POH_Modifier  ');
    SQL.Add('WHERE Decoy_Index = ' +  IntToStr(id));
    ExecSQL;
  end;
end;

{$ENDREGION}

{$REGION ' Air Bubble '}

function TdmTTT.GetAllAirBubbleDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TAir_Bubble_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Air_Bubble_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Air_Bubble_Index = b.Air_Bubble_Index');
    SQL.Add('ORDER BY a.Air_Bubble_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TAir_Bubble_On_Board.Create;

        with rec.FAirBubble_Def do
        begin
          Air_Bubble_Index := FieldByName('Air_Bubble_Index').AsInteger;
          Air_Bubble_Identifier := FieldByName('Air_Bubble_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Acoustic_Cross := FieldByName('Max_Acoustic_Cross').AsSingle;
          Dissipation_Time := FieldByName('Dissipation_Time').AsSingle;
          Ascent_Rate := FieldByName('Ascent_Rate').AsSingle;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterAirBubbleDef(var aList: TList;
  aFilter: String): Integer;
var
  i : Integer;
  rec : TAir_Bubble_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Air_Bubble_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Air_Bubble_Index = b.Air_Bubble_Index');
    SQL.Add('WHERE a.Air_Bubble_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY a.Air_Bubble_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TAir_Bubble_On_Board.Create;

        with rec.FAirBubble_Def do
        begin
          Air_Bubble_Index := FieldByName('Air_Bubble_Index').AsInteger;
          Air_Bubble_Identifier := FieldByName('Air_Bubble_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Acoustic_Cross := FieldByName('Max_Acoustic_Cross').AsSingle;
          Dissipation_Time := FieldByName('Dissipation_Time').AsSingle;
          Ascent_Rate := FieldByName('Ascent_Rate').AsSingle;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAirBubbleDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Air_Bubble_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Air_Bubble_Index = b.Air_Bubble_Index');
    SQL.Add('WHERE Air_Bubble_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertAirBubbleDef(var aRec: TRecAir_Bubble_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Air_Bubble_Definition');
    SQL.Add('(Air_Bubble_Identifier, Platform_Domain, Platform_Category,');
    SQL.Add('Platform_Type, Max_Acoustic_Cross, Dissipation_Time,');
    SQL.Add('Ascent_Rate, Descent_Rate)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Air_Bubble_Identifier) + ', ');
      SQL.Add(IntToStr(Platform_Domain) + ', ');
      SQL.Add(IntToStr(Platform_Category) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');
      SQL.Add(FloatToStr(Max_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Dissipation_Time) + ', ');
      SQL.Add(FloatToStr(Ascent_Rate) + ', ');
      SQL.Add(FloatToStr(Descent_Rate) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Air_Bubble_Definition');
      SQL.Add('WHERE Air_Bubble_Identifier = ' +
        QuotedStr(Air_Bubble_Identifier));
      Open;

      Air_Bubble_Index := FieldByName('Air_Bubble_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateAirBubbleDef(var aRec: TRecAir_Bubble_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Air_Bubble_Definition');

    with aRec do
    begin
      SQL.Add('SET Air_Bubble_Identifier = ' +
        QuotedStr(Air_Bubble_Identifier));
      SQL.Add(', Platform_Domain = ' + IntToStr(Platform_Domain));
      SQL.Add(', Platform_Category = ' + IntToStr(Platform_Category));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));
      SQL.Add(', Max_Acoustic_Cross = ' + FloatToStr(Max_Acoustic_Cross));
      SQL.Add(', Dissipation_Time = ' + FloatToStr(Dissipation_Time));
      SQL.Add(', Ascent_Rate = ' + FloatToStr(Ascent_Rate));
      SQL.Add(', Descent_Rate = ' + FloatToStr(Descent_Rate));
      SQL.Add('WHERE Air_Bubble_Index = ' + IntToStr(Air_Bubble_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteAirBubbleDef(const aAirBubbleIndex: Integer): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE Air_Bubble_Definition');
    SQL.Add('WHERE Air_Bubble_Index = ' + IntToStr(aAirBubbleIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Chaff '}

function TdmTTT.GetAllChaffDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TChaff_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Chaff_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Chaff_Index = b.Chaff_Index');
    SQL.Add('ORDER BY a.Chaff_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TChaff_On_Board.Create;

        with rec.FChaff_Def do
        begin
          Chaff_Index := FieldByName('Chaff_Index').AsInteger;
          Chaff_Identifier := FieldByName('Chaff_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Radar_Cross := FieldByName('Max_Radar_Cross').AsSingle;
          Bloom_Time := FieldByName('Bloom_Time').AsInteger;
          Max_Dissipation_Time := FieldByName('Max_Dissipation_Time').AsInteger;
          Min_Dissipation_Time := FieldByName('Min_Dissipation_Time').AsInteger;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
          Max_Radius := FieldByName('Max_Radius').AsSingle;
          Max_Radar_Attenuation := FieldByName('Max_Radar_Attenuation')
            .AsSingle;
          Radar_Affect_Lower_Freq := FieldByName('Radar_Affect_Lower_Freq')
            .AsSingle;
          Radar_Affect_Upper_Freq := FieldByName('Radar_Affect_Upper_Freq')
            .AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterChaffDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TChaff_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Chaff_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Chaff_Index = b.Chaff_Index');
    SQL.Add('WHERE a.Chaff_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY a.Chaff_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TChaff_On_Board.Create;

        with rec.FChaff_Def do
        begin
          Chaff_Index := FieldByName('Chaff_Index').AsInteger;
          Chaff_Identifier := FieldByName('Chaff_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Radar_Cross := FieldByName('Max_Radar_Cross').AsSingle;
          Bloom_Time := FieldByName('Bloom_Time').AsInteger;
          Max_Dissipation_Time := FieldByName('Max_Dissipation_Time').AsInteger;
          Min_Dissipation_Time := FieldByName('Min_Dissipation_Time').AsInteger;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
          Max_Radius := FieldByName('Max_Radius').AsSingle;
          Max_Radar_Attenuation := FieldByName('Max_Radar_Attenuation')
            .AsSingle;
          Radar_Affect_Lower_Freq := FieldByName('Radar_Affect_Lower_Freq')
            .AsSingle;
          Radar_Affect_Upper_Freq := FieldByName('Radar_Affect_Upper_Freq')
            .AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetChaffDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Chaff_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Chaff_Index = b.Chaff_Index');
    SQL.Add('WHERE Chaff_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertChaffDef(var aRec: TRecChaff_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Chaff_Definition');
    SQL.Add('(Chaff_Identifier, Platform_Domain, Platform_Category,');
    SQL.Add('Platform_Type, Max_Radar_Cross, Bloom_Time,');
    SQL.Add('Max_Dissipation_Time, Min_Dissipation_Time, Descent_Rate,');
    SQL.Add('Max_Radius, Max_Radar_Attenuation, Radar_Affect_Lower_Freq,');
    SQL.Add('Radar_Affect_Upper_Freq)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Chaff_Identifier) + ', ');
      SQL.Add(IntToStr(Platform_Domain) + ', ');
      SQL.Add(IntToStr(Platform_Category) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');
      SQL.Add(FloatToStr(Max_Radar_Cross) + ', ');
      SQL.Add(IntToStr(Bloom_Time) + ', ');
      SQL.Add(IntToStr(Max_Dissipation_Time) + ', ');
      SQL.Add(IntToStr(Min_Dissipation_Time) + ', ');
      SQL.Add(FloatToStr(Descent_Rate) + ', ');
      SQL.Add(FloatToStr(Max_Radius) + ', ');
      SQL.Add(FloatToStr(Max_Radar_Attenuation) + ', ');
      SQL.Add(FloatToStr(Radar_Affect_Lower_Freq) + ', ');
      SQL.Add(FloatToStr(Radar_Affect_Upper_Freq) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Chaff_Definition');
      SQL.Add('WHERE Chaff_Identifier = ' + QuotedStr(Chaff_Identifier));
      Open;

      Chaff_Index := FieldByName('Chaff_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateChaffDef(var aRec: TRecChaff_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Chaff_Definition');

    with aRec do
    begin
      SQL.Add('SET Chaff_Identifier = ' + QuotedStr(Chaff_Identifier));
      SQL.Add(', Platform_Domain = ' + IntToStr(Platform_Domain));
      SQL.Add(', Platform_Category = ' + IntToStr(Platform_Category));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));
      SQL.Add(', Max_Radar_Cross = ' + FloatToStr(Max_Radar_Cross));
      SQL.Add(', Bloom_Time = ' + IntToStr(Bloom_Time));
      SQL.Add(', Max_Dissipation_Time = ' + IntToStr(Max_Dissipation_Time));
      SQL.Add(', Min_Dissipation_Time = ' + IntToStr(Min_Dissipation_Time));
      SQL.Add(', Descent_Rate = ' + FloatToStr(Descent_Rate));
      SQL.Add(', Max_Radius = ' + FloatToStr(Max_Radius));
      SQL.Add(', Max_Radar_Attenuation = ' + FloatToStr(Max_Radar_Attenuation));
      SQL.Add(', Radar_Affect_Lower_Freq = ' +
        FloatToStr(Radar_Affect_Lower_Freq));
      SQL.Add(', Radar_Affect_Upper_Freq = ' +
        FloatToStr(Radar_Affect_Upper_Freq));
      SQL.Add('WHERE Chaff_Index = ' + IntToStr(Chaff_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteChaffDef(const aChaffIndex: Integer): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Chaff_Definition');
    SQL.Add('WHERE Chaff_Index = ' + IntToStr(aChaffIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Infrared Decoy '}

function TdmTTT.GetAllInfraredDecoyDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TInfrared_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Infrared_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Infrared_Decoy_Index = b.Infrared_Decoy_Index');
    SQL.Add('ORDER BY a.Infrared_Decoy_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TInfrared_Decoy_On_Board.Create;

        with rec.FInfraRedDecoy_Def do
        begin
          Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
          Infrared_Decoy_Identifier := FieldByName('Infrared_Decoy_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Infrared_Cross := FieldByName('Max_Infrared_Cross').AsSingle;
          Bloom_Time := FieldByName('Bloom_Time').AsInteger;
          Sustain_Time := FieldByName('Sustain_Time').AsInteger;
          Max_Dissipation_Time := FieldByName('Max_Dissipation_Time').AsInteger;
          Min_Dissipation_Time := FieldByName('Min_Dissipation_Time').AsInteger;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterInfraredDecoyDef(var aList: TList;
  aFilter: String): Integer;
var
  i : Integer;
  rec : TInfrared_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Infrared_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Infrared_Decoy_Index = b.Infrared_Decoy_Index');
    SQL.Add('WHERE a.Infrared_Decoy_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY a.Infrared_Decoy_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TInfrared_Decoy_On_Board.Create;

        with rec.FInfraRedDecoy_Def do
        begin
          Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
          Infrared_Decoy_Identifier := FieldByName('Infrared_Decoy_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Infrared_Cross := FieldByName('Max_Infrared_Cross').AsSingle;
          Bloom_Time := FieldByName('Bloom_Time').AsInteger;
          Sustain_Time := FieldByName('Sustain_Time').AsInteger;
          Max_Dissipation_Time := FieldByName('Max_Dissipation_Time').AsInteger;
          Min_Dissipation_Time := FieldByName('Min_Dissipation_Time').AsInteger;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetInfraredDecoyDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Infrared_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Infrared_Decoy_Index = b.Infrared_Decoy_Index');
    SQL.Add('WHERE Infrared_Decoy_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertInfraredDecoyDef(var aRec: TRecInfrared_Decoy_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Infrared_Decoy_Definition');
    SQL.Add('(Infrared_Decoy_Identifier, Platform_Domain, Platform_Category,');
    SQL.Add('Platform_Type, Max_Infrared_Cross, Bloom_Time, Sustain_Time,');
    SQL.Add('Max_Dissipation_Time, Min_Dissipation_Time, Descent_Rate)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Infrared_Decoy_Identifier) + ', ');
      SQL.Add(IntToStr(Platform_Domain) + ', ');
      SQL.Add(IntToStr(Platform_Category) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');
      SQL.Add(FloatToStr(Max_Infrared_Cross) + ', ');
      SQL.Add(IntToStr(Bloom_Time) + ', ');
      SQL.Add(IntToStr(Sustain_Time) + ', ');
      SQL.Add(IntToStr(Max_Dissipation_Time) + ', ');
      SQL.Add(IntToStr(Min_Dissipation_Time) + ', ');
      SQL.Add(FloatToStr(Descent_Rate) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Infrared_Decoy_Definition');
      SQL.Add('WHERE Infrared_Decoy_Identifier = ' +
        QuotedStr(Infrared_Decoy_Identifier));
      Open;

      Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateInfraredDecoyDef(var aRec: TRecInfrared_Decoy_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Infrared_Decoy_Definition');

    with aRec do
    begin
      SQL.Add('SET Infrared_Decoy_Identifier = ' +
        QuotedStr(Infrared_Decoy_Identifier));
      SQL.Add(', Platform_Domain = ' + IntToStr(Platform_Domain));
      SQL.Add(', Platform_Category = ' + IntToStr(Platform_Category));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));
      SQL.Add(', Max_Infrared_Cross = ' + FloatToStr(Max_Infrared_Cross));
      SQL.Add(', Bloom_Time = ' + IntToStr(Bloom_Time));
      SQL.Add(', Sustain_Time = ' + IntToStr(Sustain_Time));
      SQL.Add(', Max_Dissipation_Time = ' + IntToStr(Max_Dissipation_Time));
      SQL.Add(', Min_Dissipation_Time = ' + IntToStr(Min_Dissipation_Time));
      SQL.Add(', Descent_Rate = ' + FloatToStr(Descent_Rate));
      SQL.Add('WHERE Infrared_Decoy_Index = ' + IntToStr(Infrared_Decoy_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteInfraredDecoyDef(const aInfraredDecoyIndex: Integer): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE Infrared_Decoy_Definition');
    SQL.Add('WHERE Infrared_Decoy_Index = ' + IntToStr(aInfraredDecoyIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Floating Decoy '}

function TdmTTT.GetAllFloatingDecoyDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TFloating_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Floating_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Floating_Decoy_Index = b.Floating_Decoy_Index');
    SQL.Add('ORDER BY a.Floating_Decoy_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TFloating_Decoy_On_Board.Create;

        with rec.FFloatingDecoy_Def do
        begin
          Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
          Floating_Decoy_Identifier := FieldByName('Floating_Decoy_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Lifetime_Duration := FieldByName('Lifetime_Duration').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterFloatingDecoyDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TFloating_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Floating_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Floating_Decoy_Index = b.Floating_Decoy_Index');
    SQL.Add('WHERE a.Floating_Decoy_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY a.Floating_Decoy_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TFloating_Decoy_On_Board.Create;

        with rec.FFloatingDecoy_Def do
        begin
          Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
          Floating_Decoy_Identifier := FieldByName('Floating_Decoy_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Lifetime_Duration := FieldByName('Lifetime_Duration').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFloatingDecoyDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Floating_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Floating_Decoy_Index = b.Floating_Decoy_Index');
    SQL.Add('WHERE Floating_Decoy_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertFloatingDecoyDef(var aRec: TRecFloating_Decoy_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Floating_Decoy_Definition');
    SQL.Add('(Floating_Decoy_Identifier, Platform_Domain, Platform_Category,');
    SQL.Add('Platform_Type, Length, Width, Height, Front_Radar_Cross,');
    SQL.Add('Side_Radar_Cross, Front_Visual_Cross, Side_Visual_Cross,');
    SQL.Add('Front_Acoustic_Cross, Side_Acoustic_Cross, Lifetime_Duration)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Floating_Decoy_Identifier) + ', ');
      SQL.Add(IntToStr(Platform_Domain) + ', ');
      SQL.Add(IntToStr(Platform_Category) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');
      SQL.Add(FloatToStr(Length) + ', ');
      SQL.Add(FloatToStr(Width) + ', ');
      SQL.Add(FloatToStr(Height) + ', ');
      SQL.Add(FloatToStr(Front_Radar_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Radar_Cross) + ', ');
      SQL.Add(FloatToStr(Front_Visual_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Visual_Cross) + ', ');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Lifetime_Duration) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Floating_Decoy_Definition');
      SQL.Add('WHERE Floating_Decoy_Identifier = ' +
        QuotedStr(Floating_Decoy_Identifier));
      Open;

      Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateFloatingDecoyDef(var aRec: TRecFloating_Decoy_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Floating_Decoy_Definition');

    with aRec do
    begin
      SQL.Add('SET Floating_Decoy_Identifier = ' +
        QuotedStr(Floating_Decoy_Identifier));
      SQL.Add(', Platform_Domain = ' + IntToStr(Platform_Domain));
      SQL.Add(', Platform_Category = ' + IntToStr(Platform_Category));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));
      SQL.Add(', Length = ' + FloatToStr(Length));
      SQL.Add(', Width = ' + FloatToStr(Width));
      SQL.Add(', Height = ' + FloatToStr(Height));
      SQL.Add(', Front_Radar_Cross = ' + FloatToStr(Front_Radar_Cross));
      SQL.Add(', Side_Radar_Cross = ' + FloatToStr(Side_Radar_Cross));
      SQL.Add(', Front_Visual_Cross = ' + FloatToStr(Front_Visual_Cross));
      SQL.Add(', Side_Visual_Cross = ' + FloatToStr(Side_Visual_Cross));
      SQL.Add(', Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross));
      SQL.Add(', Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross));
      SQL.Add(', Lifetime_Duration = ' + FloatToStr(Lifetime_Duration));
      SQL.Add('WHERE Floating_Decoy_Index = ' + IntToStr(Floating_Decoy_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteFloatingDecoyDef(const aFloatingDecoyIndex: Integer): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Floating_Decoy_Definition');
    SQL.Add('WHERE Floating_Decoy_Index = ' + IntToStr(aFloatingDecoyIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Self Defensive Jammer '}

function TdmTTT.GetAllSelfDefensiveJammerDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TDefensive_Jammer_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Defensive_Jammer_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Defensive_Jammer_Index = b.Defensive_Jammer_Index');
    SQL.Add('ORDER BY a.Defensive_Jammer_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TDefensive_Jammer_On_Board.Create;

        with rec.FDefensiveJammer_Def do
        begin
          Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index')
            .AsInteger;
          Defensive_Jammer_Identifier := FieldByName
            ('Defensive_Jammer_Identifier').AsString;
          Jammer_TARH_Capable := FieldByName('Jammer_TARH_Capable').AsInteger;
          Jammer_SARH_Capable := FieldByName('Jammer_SARH_Capable').AsInteger;
          Type_A_Seducing_Prob := FieldByName('Type_A_Seducing_Prob').AsSingle;
          Type_B_Seducing_Prob := FieldByName('Type_B_Seducing_Prob').AsSingle;
          Type_C_Seducing_Prob := FieldByName('Type_C_Seducing_Prob').AsSingle;
          ECM_Type := FieldByName('ECM_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterSelfDefensiveJammerDef(var aList: TList;
  aFilter: String): Integer;
var
  i : Integer;
  rec : TDefensive_Jammer_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Defensive_Jammer_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Defensive_Jammer_Index = b.Defensive_Jammer_Index');
    SQL.Add('WHERE a.Defensive_Jammer_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY a.Defensive_Jammer_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TDefensive_Jammer_On_Board.Create;

        with rec.FDefensiveJammer_Def do
        begin
          Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index')
            .AsInteger;
          Defensive_Jammer_Identifier := FieldByName
            ('Defensive_Jammer_Identifier').AsString;
          Jammer_TARH_Capable := FieldByName('Jammer_TARH_Capable').AsInteger;
          Jammer_SARH_Capable := FieldByName('Jammer_SARH_Capable').AsInteger;
          Type_A_Seducing_Prob := FieldByName('Type_A_Seducing_Prob').AsSingle;
          Type_B_Seducing_Prob := FieldByName('Type_B_Seducing_Prob').AsSingle;
          Type_C_Seducing_Prob := FieldByName('Type_C_Seducing_Prob').AsSingle;
          ECM_Type := FieldByName('ECM_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSelfDefensiveJammerDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Defensive_Jammer_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Defensive_Jammer_Index = b.Defensive_Jammer_Index');
    SQL.Add('WHERE Defensive_Jammer_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertSelfDefensiveJammerDef(var aRec: TRecDefensive_Jammer_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Defensive_Jammer_Definition');
    SQL.Add('(Defensive_Jammer_Identifier, Jammer_TARH_Capable,');
    SQL.Add('Jammer_SARH_Capable, Type_A_Seducing_Prob, Type_B_Seducing_Prob,');
    SQL.Add('Type_C_Seducing_Prob, ECM_Type)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Defensive_Jammer_Identifier) + ', ');
      SQL.Add(IntToStr(Jammer_TARH_Capable) + ', ');
      SQL.Add(IntToStr(Jammer_SARH_Capable) + ', ');
      SQL.Add(FloatToStr(Type_A_Seducing_Prob) + ', ');
      SQL.Add(FloatToStr(Type_B_Seducing_Prob) + ', ');
      SQL.Add(FloatToStr(Type_C_Seducing_Prob) + ', ');
      SQL.Add(IntToStr(ECM_Type) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Defensive_Jammer_Definition');
      SQL.Add('WHERE Defensive_Jammer_Identifier = ' +
        QuotedStr(Defensive_Jammer_Identifier));
      Open;

      Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateSelfDefensiveJammerDef(var aRec: TRecDefensive_Jammer_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Defensive_Jammer_Definition');

    with aRec do
    begin
      SQL.Add('SET Defensive_Jammer_Identifier = ' +
        QuotedStr(Defensive_Jammer_Identifier));
      SQL.Add(', Jammer_TARH_Capable = ' + IntToStr(Jammer_TARH_Capable));
      SQL.Add(', Jammer_SARH_Capable = ' + IntToStr(Jammer_SARH_Capable));
      SQL.Add(', Type_A_Seducing_Prob = ' + FloatToStr(Type_A_Seducing_Prob));
      SQL.Add(', Type_B_Seducing_Prob = ' + FloatToStr(Type_B_Seducing_Prob));
      SQL.Add(', Type_C_Seducing_Prob = ' + FloatToStr(Type_C_Seducing_Prob));
      SQL.Add(', ECM_Type = ' + IntToStr(ECM_Type));
      SQL.Add('WHERE Defensive_Jammer_Index = ' +
        IntToStr(Defensive_Jammer_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteSelfDefensiveJammerDef(
  const aSelfDefensiveJammerIndex: Integer): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE Defensive_Jammer_Definition');
    SQL.Add('WHERE Defensive_Jammer_Index = ' +
      IntToStr(aSelfDefensiveJammerIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Towed Jammer/ Decoy '}

function TdmTTT.GetAllTowedJammerDecoyDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TTowed_Jammer_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Towed_Jammer_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Towed_Decoy_Index = b.Towed_Decoy_Index');
    SQL.Add('ORDER BY a.Towed_Decoy_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TTowed_Jammer_Decoy_On_Board.Create;

        with rec.FDef do
        begin
          Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
          Towed_Decoy_Identifier := FieldByName('Towed_Decoy_Identifier')
            .AsString;
          Decoy_TARH_Capable := FieldByName('Decoy_TARH_Capable').AsInteger;
          Decoy_SARH_Capable := FieldByName('Decoy_SARH_Capable').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Type_A_Seducing_Prob := FieldByName('Type_A_Seducing_Prob').AsSingle;
          Type_B_Seducing_Prob := FieldByName('Type_B_Seducing_Prob').AsSingle;
          Type_C_Seducing_Prob := FieldByName('Type_C_Seducing_Prob').AsSingle;
          Activation_Control_Delay := FieldByName('Activation_Control_Delay')
            .AsSingle;
          Tow_Length := FieldByName('Tow_Length').AsSingle;
          ECM_Type := FieldByName('ECM_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterTowedJammerDecoyDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TTowed_Jammer_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Towed_Jammer_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Towed_Decoy_Index = b.Towed_Decoy_Index');
    SQL.Add('WHERE a.Towed_Decoy_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY a.Towed_Decoy_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TTowed_Jammer_Decoy_On_Board.Create;

        with rec.FDef do
        begin
          Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
          Towed_Decoy_Identifier := FieldByName('Towed_Decoy_Identifier')
            .AsString;
          Decoy_TARH_Capable := FieldByName('Decoy_TARH_Capable').AsInteger;
          Decoy_SARH_Capable := FieldByName('Decoy_SARH_Capable').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Type_A_Seducing_Prob := FieldByName('Type_A_Seducing_Prob').AsSingle;
          Type_B_Seducing_Prob := FieldByName('Type_B_Seducing_Prob').AsSingle;
          Type_C_Seducing_Prob := FieldByName('Type_C_Seducing_Prob').AsSingle;
          Activation_Control_Delay := FieldByName('Activation_Control_Delay')
            .AsSingle;
          Tow_Length := FieldByName('Tow_Length').AsSingle;
          ECM_Type := FieldByName('ECM_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetTowedJammerDecoyDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Towed_Jammer_Decoy_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Towed_Decoy_Index = b.Towed_Decoy_Index');
    SQL.Add('WHERE Towed_Decoy_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertTowedJammerDef(var aRec: TRecTowed_Jammer_Decoy_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Towed_Jammer_Decoy_Definition');
    SQL.Add('(Towed_Decoy_Identifier, Decoy_TARH_Capable, Decoy_SARH_Capable,');
    SQL.Add('Platform_Domain, Platform_Category, Platform_Type, Length,');
    SQL.Add('Width, Height, Front_Radar_Cross, Side_Radar_Cross,');
    SQL.Add('Front_Visual_Cross, Side_Visual_Cross, Front_Acoustic_Cross,');
    SQL.Add('Side_Acoustic_Cross, Type_A_Seducing_Prob, Type_B_Seducing_Prob,');
    SQL.Add('Type_C_Seducing_Prob, Activation_Control_Delay,');
    SQL.Add('Tow_Length,ECM_Type)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Towed_Decoy_Identifier) + ', ');
      SQL.Add(IntToStr(Decoy_TARH_Capable) + ', ');
      SQL.Add(IntToStr(Decoy_SARH_Capable) + ', ');
      SQL.Add(IntToStr(Platform_Domain) + ', ');
      SQL.Add(IntToStr(Platform_Category) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');
      SQL.Add(FloatToStr(Length) + ', ');
      SQL.Add(FloatToStr(Width) + ', ');
      SQL.Add(FloatToStr(Height) + ', ');
      SQL.Add(FloatToStr(Front_Radar_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Radar_Cross) + ', ');
      SQL.Add(FloatToStr(Front_Visual_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Visual_Cross) + ', ');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ', ');
      SQL.Add(FloatToStr(Type_A_Seducing_Prob) + ', ');
      SQL.Add(FloatToStr(Type_B_Seducing_Prob) + ', ');
      SQL.Add(FloatToStr(Type_C_Seducing_Prob) + ', ');
      SQL.Add(FloatToStr(Activation_Control_Delay) + ', ');
      SQL.Add(FloatToStr(Tow_Length) + ', ');
      SQL.Add(IntToStr(ECM_Type) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Towed_Jammer_Decoy_Definition');
      SQL.Add('WHERE Towed_Decoy_Identifier = ' +
        QuotedStr(Towed_Decoy_Identifier));
      Open;

      Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateTowedJammerDef(var aRec: TRecTowed_Jammer_Decoy_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Towed_Jammer_Decoy_Definition');

    with aRec do
    begin
      SQL.Add('SET Towed_Decoy_Identifier = ' +
        QuotedStr(Towed_Decoy_Identifier));
      SQL.Add(', Decoy_TARH_Capable = ' + IntToStr(Decoy_TARH_Capable));
      SQL.Add(', Decoy_SARH_Capable = ' + IntToStr(Decoy_SARH_Capable));
      SQL.Add(', Platform_Domain = ' + IntToStr(Platform_Domain));
      SQL.Add(', Platform_Category = ' + IntToStr(Platform_Category));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));
      SQL.Add(', Length = ' + FloatToStr(Length));
      SQL.Add(', Width = ' + FloatToStr(Width));
      SQL.Add(', Height = ' + FloatToStr(Height));
      SQL.Add(', Front_Radar_Cross = ' + FloatToStr(Front_Radar_Cross));
      SQL.Add(', Side_Radar_Cross = ' + FloatToStr(Side_Radar_Cross));
      SQL.Add(', Front_Visual_Cross = ' + FloatToStr(Front_Visual_Cross));
      SQL.Add(', Side_Visual_Cross = ' + FloatToStr(Side_Visual_Cross));
      SQL.Add(', Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross));
      SQL.Add(', Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross));
      SQL.Add(', Type_A_Seducing_Prob = ' + FloatToStr(Type_A_Seducing_Prob));
      SQL.Add(', Type_B_Seducing_Prob = ' + FloatToStr(Type_B_Seducing_Prob));
      SQL.Add(', Type_C_Seducing_Prob = ' + FloatToStr(Type_C_Seducing_Prob));
      SQL.Add(', Activation_Control_Delay = ' +
        FloatToStr(Activation_Control_Delay));
      SQL.Add(', Tow_Length = ' + FloatToStr(Tow_Length));
      SQL.Add(', ECM_Type = ' + IntToStr(ECM_Type));
      SQL.Add('WHERE Towed_Decoy_Index = ' + IntToStr(Towed_Decoy_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteTowedJammerDef(const aTowedJammerIndex: Integer): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE Towed_Jammer_Decoy_Definition');
    SQL.Add('WHERE Towed_Decoy_Index = ' + IntToStr(aTowedJammerIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Radar Noise Jammer '}

function TdmTTT.GetAllRadarNoiseJammerDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TRadar_Noise_Jammer_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Jammer_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Jammer_Index = b.Jammer_Index');
    SQL.Add('ORDER BY Jammer_Identifier ');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TRadar_Noise_Jammer_On_Board.Create;

        with rec.FDef do
        begin
          Jammer_Index := FieldByName('Jammer_Index').AsInteger;
          Jammer_Type := FieldByName('Jammer_Type').AsInteger;
          Jammer_Identifier := FieldByName('Jammer_Identifier').AsString;
          Lower_Freq_Limit := FieldByName('Lower_Freq_Limit').AsFloat;
          Upper_Freq_Limit := FieldByName('Upper_Freq_Limit').AsFloat;
          Jammer_Power_Density := FieldByName('Jammer_Power_Density').AsFloat;
          Max_Effective_Range := FieldByName('Max_Effective_Range').AsFloat;
          Max_Sector_Width := FieldByName('Max_Sector_Width').AsFloat;
          Upper_Vert_Coverage_Angle := FieldByName('Upper_Vert_Coverage_Angle')
            .AsFloat;
          Lower_Vert_Coverage_Angle := FieldByName('Lower_Vert_Coverage_Angle')
            .AsFloat;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterRadarNoiseJammerDef(var aList: TList;
  aFilter: String): Integer;
var
  i : Integer;
  rec : TRadar_Noise_Jammer_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Jammer_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Jammer_Index = b.Jammer_Index');
    SQL.Add('WHERE Jammer_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Jammer_Identifier ');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TRadar_Noise_Jammer_On_Board.Create;

        with rec.FDef do
        begin
          Jammer_Index := FieldByName('Jammer_Index').AsInteger;
          Jammer_Type := FieldByName('Jammer_Type').AsInteger;
          Jammer_Identifier := FieldByName('Jammer_Identifier').AsString;
          Lower_Freq_Limit := FieldByName('Lower_Freq_Limit').AsFloat;
          Upper_Freq_Limit := FieldByName('Upper_Freq_Limit').AsFloat;
          Jammer_Power_Density := FieldByName('Jammer_Power_Density').AsFloat;
          Max_Effective_Range := FieldByName('Max_Effective_Range').AsFloat;
          Max_Sector_Width := FieldByName('Max_Sector_Width').AsFloat;
          Upper_Vert_Coverage_Angle := FieldByName('Upper_Vert_Coverage_Angle')
            .AsFloat;
          Lower_Vert_Coverage_Angle := FieldByName('Lower_Vert_Coverage_Angle')
            .AsFloat;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetRadarNoiseJammerDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Jammer_Definition a LEFT JOIN Note_Storage b');
    SQL.Add('ON a.Jammer_Index = b.Jammer_Index');
    SQL.Add('WHERE Jammer_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertRadarNoiseJammerDef(var aRec: TRecRadar_Noise_Jammer_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Jammer_Definition');
    SQL.Add('(Jammer_Type, Jammer_Identifier, Lower_Freq_Limit,');
    SQL.Add('Upper_Freq_Limit, Jammer_Power_Density, Max_Effective_Range,');
    SQL.Add('Max_Sector_Width, Upper_Vert_Coverage_Angle,');
    SQL.Add('Lower_Vert_Coverage_Angle)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Jammer_Type) + ', ');
      SQL.Add(QuotedStr(Jammer_Identifier) + ', ');
      SQL.Add(FloatToStr(Lower_Freq_Limit) + ', ');
      SQL.Add(FloatToStr(Upper_Freq_Limit) + ', ');
      SQL.Add(FloatToStr(Jammer_Power_Density) + ', ');
      SQL.Add(FloatToStr(Max_Effective_Range) + ', ');
      SQL.Add(FloatToStr(Max_Sector_Width) + ', ');
      SQL.Add(FloatToStr(Upper_Vert_Coverage_Angle) + ', ');
      SQL.Add(FloatToStr(Lower_Vert_Coverage_Angle) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Jammer_Definition');
      SQL.Add('WHERE Jammer_Identifier = ' + QuotedStr(Jammer_Identifier));
      Open;

      Jammer_Index := FieldByName('Jammer_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateRadarNoiseJammerDef(var aRec: TRecRadar_Noise_Jammer_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Jammer_Definition');

    with aRec do
    begin
      SQL.Add('SET Jammer_Identifier = ' + QuotedStr(Jammer_Identifier));
      SQL.Add(', Jammer_Type = ' + IntToStr(Jammer_Type));
      SQL.Add(', Lower_Freq_Limit = ' + FloatToStr(Lower_Freq_Limit));
      SQL.Add(', Upper_Freq_Limit = ' + FloatToStr(Upper_Freq_Limit));
      SQL.Add(', Jammer_Power_Density = ' + FloatToStr(Jammer_Power_Density));
      SQL.Add(', Max_Effective_Range = ' + FloatToStr(Max_Effective_Range));
      SQL.Add(', Max_Sector_Width = ' + FloatToStr(Max_Sector_Width));
      SQL.Add(', Upper_Vert_Coverage_Angle = ' +
        FloatToStr(Upper_Vert_Coverage_Angle));
      SQL.Add(', Lower_Vert_Coverage_Angle = ' +
        FloatToStr(Lower_Vert_Coverage_Angle));
      SQL.Add('WHERE Jammer_Index = ' + IntToStr(Jammer_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteRadarNoiseJammerDef(const aRadarNoiseJammer: Integer): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE Jammer_Definition');
    SQL.Add('WHERE Jammer_Index = ' + IntToStr(aRadarNoiseJammer));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Countermeasure On Board '}

function TdmTTT.GetCountermeasure_On_Board_By_Index(const typeOnBoard, id: Integer): Boolean;
var
  ssql,tabel, indexField: string;
begin
  result := False;
  if not ZConn.Connected then
    exit;

  case typeOnBoard of
    1:
    begin
      tabel := 'Acoustic_Decoy_On_Board';
      indexField := 'Decoy_Index';
    end;
    2:
    begin
      tabel := 'Air_Bubble_Mount';
      indexField := 'Air_Bubble_Index';
    end;
    3:
    begin
      tabel := 'Chaff_On_Board';
      indexField := 'Chaff_Index';
    end;
    4:
    begin
      tabel := 'Infrared_Decoy_On_Board';
      indexField := 'Infrared_Decoy_Index';
    end;
    5:
    begin
      tabel := 'Floating_Decoy_On_Board';
      indexField := 'Floating_Decoy_Index';
    end;
    6:
    begin
      tabel := 'Defensive_Jammer_On_Board';
      indexField := 'Defensive_Jammer_Index';
    end;
    7:
    begin
      tabel := 'Towed_Jammer_Decoy_On_Board';
      indexField := 'Towed_Decoy_Index';
    end;
    8:
    begin
      tabel := 'Jammer_On_Board';
      indexField := 'Jammer_Index';
    end;
  end;

  with ZQ do
  begin
    Close;
    SQL.Clear;

    ssql := 'SELECT * ';
    ssql := ssql + 'FROM ' + tabel;
    ssql := ssql + ' WHERE ' + indexField + ' = ';
    ssql := ssql + IntToStr(id);

    SQL.Add(ssql);
    Open;

    if not IsEmpty then
      Result := True;
  end;
end;

function TdmTTT.GetAcousticDecoyOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TAcoustic_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Acoustic_Decoy_On_Board a JOIN Acoustic_Decoy_Definition b');
    SQL.Add('ON a.Decoy_Index = b.Decoy_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TAcoustic_Decoy_On_Board.Create;

        with rec.FData do
        begin
          Acoustic_Instance_Index := FieldByName('Acoustic_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Quantity := FieldByName('Quantity').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Decoy_Index := FieldByName('Decoy_Index').AsInteger;
        end;

        with rec.FAccousticDecoy_Def do
        begin
          Decoy_Index := FieldByName('Decoy_Index').AsInteger;
          Decoy_Identifier := FieldByName('Decoy_Identifier').AsString;
          Acoustic_Intensity_Increase := FieldByName
            ('Acoustic_Intensity_Increase').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAirBubbleOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TAir_Bubble_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Air_Bubble_Mount a JOIN Air_Bubble_Definition b');
    SQL.Add('ON a.Air_Bubble_Index = b.Air_Bubble_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TAir_Bubble_On_Board.Create;

        with rec.FData do
        begin
          Air_Bubble_Instance_Index := FieldByName('Air_Bubble_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Bubble_Qty_On_Board := FieldByName('Bubble_Qty_On_Board').AsInteger;
          Air_Bubble_Index    := FieldByName('Air_Bubble_Index').AsInteger;
        end;

        with rec.FAirBubble_Def do
        begin
          Air_Bubble_Index := FieldByName('Air_Bubble_Index').AsInteger;
          Air_Bubble_Identifier := FieldByName('Air_Bubble_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Acoustic_Cross := FieldByName('Max_Acoustic_Cross').AsSingle;
          Dissipation_Time := FieldByName('Dissipation_Time').AsSingle;
          Ascent_Rate := FieldByName('Ascent_Rate').AsSingle;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetRadarNoiseJammerOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TRadar_Noise_Jammer_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Jammer_On_Board a JOIN Jammer_Definition b');
    SQL.Add('ON a.Jammer_Index = b.Jammer_Index');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TRadar_Noise_Jammer_On_Board.Create;

        with rec.FData do
        begin
          Jammer_Instance_Index := FieldByName('Jammer_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Jammer_Index := FieldByName('Jammer_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FDef do
        begin
          Jammer_Index := FieldByName('Jammer_Index').AsInteger;
          Jammer_Type := FieldByName('Jammer_Type').AsInteger;
          Jammer_Identifier := FieldByName('Jammer_Identifier').AsString;
          Lower_Freq_Limit := FieldByName('Lower_Freq_Limit').AsFloat;
          Upper_Freq_Limit := FieldByName('Upper_Freq_Limit').AsFloat;
          Jammer_Power_Density := FieldByName('Jammer_Power_Density').AsFloat;
          Max_Effective_Range := FieldByName('Max_Effective_Range').AsFloat;
          Max_Sector_Width := FieldByName('Max_Sector_Width').AsFloat;
          Upper_Vert_Coverage_Angle := FieldByName('Upper_Vert_Coverage_Angle')
            .AsFloat;
          Lower_Vert_Coverage_Angle := FieldByName('Lower_Vert_Coverage_Angle')
            .AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSelfDefensiveJammerOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TDefensive_Jammer_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Defensive_Jammer_On_Board a JOIN Defensive_Jammer_Definition b');
    SQL.Add('ON a.Defensive_Jammer_Index = b.Defensive_Jammer_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TDefensive_Jammer_On_Board.Create;

        with rec.FData do
        begin
          Defensive_Jammer_Instance_Index := FieldByName
            ('Defensive_Jammer_Instance_Id').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index')
            .AsInteger;
        end;

        with rec.FDefensiveJammer_Def do
        begin
          Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index')
            .AsInteger;
          Defensive_Jammer_Identifier := FieldByName
            ('Defensive_Jammer_Identifier').AsString;
          Jammer_TARH_Capable := FieldByName('Jammer_TARH_Capable').AsInteger;
          Jammer_SARH_Capable := FieldByName('Jammer_SARH_Capable').AsInteger;
          Type_A_Seducing_Prob := FieldByName('Type_A_Seducing_Prob').AsSingle;
          Type_B_Seducing_Prob := FieldByName('Type_B_Seducing_Prob').AsSingle;
          Type_C_Seducing_Prob := FieldByName('Type_C_Seducing_Prob').AsSingle;
          ECM_Type := FieldByName('ECM_Type').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetTowedJammerDecoyOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TTowed_Jammer_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Towed_Jammer_Decoy_On_Board a JOIN Towed_Jammer_Decoy_Definition b');
    SQL.Add('ON a.Towed_Decoy_Index = b.Towed_Decoy_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TTowed_Jammer_Decoy_On_Board.Create;

        with rec.FData do
        begin
          Towed_Decoy_Instance_Index := FieldByName
            ('Towed_Decoy_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
        end;

        with rec.FDef do
        begin
          Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
          Towed_Decoy_Identifier := FieldByName('Towed_Decoy_Identifier')
            .AsString;
          Decoy_TARH_Capable := FieldByName('Decoy_TARH_Capable').AsInteger;
          Decoy_SARH_Capable := FieldByName('Decoy_SARH_Capable').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Type_A_Seducing_Prob := FieldByName('Type_A_Seducing_Prob').AsSingle;
          Type_B_Seducing_Prob := FieldByName('Type_B_Seducing_Prob').AsSingle;
          Type_C_Seducing_Prob := FieldByName('Type_C_Seducing_Prob').AsSingle;
          Activation_Control_Delay := FieldByName('Activation_Control_Delay')
            .AsSingle;
          Tow_Length := FieldByName('Tow_Length').AsSingle;
          ECM_Type := FieldByName('ECM_Type').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFloatingDecoyOnBoard(const aVehicleID: Integer;var aList: TList): Integer;
var
  i : Integer;
  rec : TFloating_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Floating_Decoy_On_Board a JOIN Floating_Decoy_Definition b');
    SQL.Add('ON a.Floating_Decoy_Index = b.Floating_Decoy_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TFloating_Decoy_On_Board.Create;

        with rec.FData do
        begin
          Floating_Decoy_Instance_Index := FieldByName
            ('Floating_Decoy_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
        end;

        with rec.FFloatingDecoy_Def do
        begin
          Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
          Floating_Decoy_Identifier := FieldByName('Floating_Decoy_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Lifetime_Duration := FieldByName('Lifetime_Duration').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetInfraredDecoyOnBoard(const aVehicleID: Integer;  var aList: TList): Integer;
var
  i : Integer;
  rec : TInfrared_Decoy_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Infrared_Decoy_On_Board a JOIN Infrared_Decoy_Definition b');
    SQL.Add('ON a.Infrared_Decoy_Index = b.Infrared_Decoy_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TInfrared_Decoy_On_Board.Create;

        with rec.FData do
        begin
          Infrared_Decoy_Instance_Index := FieldByName
            ('Infrared_Decoy_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Infrared_Decoy_Qty_On_Board := FieldByName
            ('Infrared_Decoy_Qty_On_Board').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
        end;

        with rec.FInfraRedDecoy_Def do
        begin
          Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
          Infrared_Decoy_Identifier := FieldByName('Infrared_Decoy_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Infrared_Cross := FieldByName('Max_Infrared_Cross').AsSingle;
          Bloom_Time := FieldByName('Bloom_Time').AsInteger;
          Sustain_Time := FieldByName('Sustain_Time').AsInteger;
          Max_Dissipation_Time := FieldByName('Max_Dissipation_Time').AsInteger;
          Min_Dissipation_Time := FieldByName('Min_Dissipation_Time').AsInteger;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetChaffOnBoard(const aVehicleID: Integer;  var aList: TList): Integer;
var
  i : Integer;
  rec : TChaff_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Chaff_On_Board a JOIN Chaff_Definition b');
    SQL.Add('ON a.Chaff_Index = b.Chaff_Index');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TChaff_On_Board.Create;

        with rec.FData do
        begin
          Chaff_Instance_Index := FieldByName('Chaff_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Chaff_Qty_On_Board := FieldByName('Chaff_Qty_On_Board').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Chaff_Index := FieldByName('Chaff_Index').AsInteger;
        end;

        with rec.FChaff_Def do
        begin
          Chaff_Index := FieldByName('Chaff_Index').AsInteger;
          Chaff_Identifier := FieldByName('Chaff_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Radar_Cross := FieldByName('Max_Radar_Cross').AsSingle;
          Bloom_Time := FieldByName('Bloom_Time').AsInteger;
          Max_Dissipation_Time := FieldByName('Max_Dissipation_Time').AsInteger;
          Min_Dissipation_Time := FieldByName('Min_Dissipation_Time').AsInteger;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
          Max_Radius := FieldByName('Max_Radius').AsSingle;
          Max_Radar_Attenuation := FieldByName('Max_Radar_Attenuation')
            .AsSingle;
          Radar_Affect_Lower_Freq := FieldByName('Radar_Affect_Lower_Freq')
            .AsSingle;
          Radar_Affect_Upper_Freq := FieldByName('Radar_Affect_Upper_Freq')
            .AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetChaffLauncherOnBoard(const aVehicleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TChaff_Launcher_On_Board;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Chaff_Launcher_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' +  IntToStr(aVehicleID));
    SQL.Add('ORDER BY Launcher_Number');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TChaff_Launcher_On_Board.Create;

        with rec.FData do begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Launcher_Number := FieldByName('Launcher_Number').AsInteger;
          Launcher_Angle := FieldByName('Launcher_Angle').AsSingle;
          Launcher_Kind := FieldByName('Launcher_Kind').AsInteger;
          Def_Bloom_Range := FieldByName('Def_Bloom_Range').AsSingle;
          Def_Bloom_Altitude := FieldByName('Def_Bloom_Altitude').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Elevation := FieldByName('Max_Elevation').AsSingle;
          Min_Elevation := FieldByName('Min_Elevation').AsSingle;
          Average_Launch_Spd := FieldByName('Average_Launch_Spd').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAcousticDecoyOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Acoustic_Decoy_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetAirBubbleOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Air_Bubble_Mount');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetRadarNoiseJammerOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Jammer_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetFloatingDecoyOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Floating_Decoy_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetSelfDefensiveJammerOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Defensive_Jammer_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetTowedJammerOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Towed_Jammer_Decoy_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetInfraredDecoyOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Infrared_Decoy_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetChaffOnBoardCount(const aVehicleID: Integer; const aIdentifier: string): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Chaff_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID));
    SQL.Add('AND Instance_Identifier = ' + QuotedStr(aIdentifier));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.GetChaffLauncherOnBoardCount(const aVehicleID, aLauncherID: Integer): Boolean;
begin
  result := false;

  if not zConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Chaff_Launcher_On_Board ' );
    SQL.Add('WHERE (Vehicle_Index = ' +  IntToStr(aVehicleID) + ') ' );
    SQL.Add('AND (Launcher_Number = ' +  IntToStr(aLauncherID) + ')' );

    Open;

    result := RecordCount > 0;
  end;
end;

function TdmTTT.InsertRadarNoiseJammerOnBoard(var aRec: TRecRadar_Noise_Jammer_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Jammer_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index,');
    SQL.Add('Jammer_Index, Antenna_Height)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Jammer_Index) + ', ');
      SQL.Add(FloatToStr(Antenna_Height) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Jammer_On_Board');
      SQL.Add('WHERE Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add('AND Jammer_Index = ' + IntToStr(Jammer_Index));
      Open;

      Jammer_Instance_Index := FieldByName('Jammer_Instance_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.InsertAirBubbleOnBoard(var aRec: TRecAir_Bubble_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Air_Bubble_Mount');
    SQL.Add('(Instance_Identifier, Instance_Type, Bubble_Qty_On_Board,');
    SQL.Add('Vehicle_Index, Air_Bubble_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Bubble_Qty_On_Board) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Air_Bubble_Index) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Air_Bubble_Mount');
      SQL.Add('WHERE Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add('AND Air_Bubble_Index = ' + IntToStr(Air_Bubble_Index));
      Open;

      Air_Bubble_Instance_Index := FieldByName('Air_Bubble_Instance_Index')
        .AsInteger;
    end;
  end;
end;

function TdmTTT.InsertAcousticDecoyOnBoard( var aRec: TRecAcoustic_Decoy_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Acoustic_Decoy_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Quantity, Vehicle_Index,');
    SQL.Add('Decoy_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Quantity) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Decoy_Index) + ')');
    end;

    ExecSQL;

    Result := True;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Acoustic_Decoy_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aRec.Vehicle_Index));
    SQL.Add('AND Decoy_Index = ' + IntToStr(aRec.Decoy_Index));
    Open;

    if not IsEmpty then
    begin
      First;

      aRec.Acoustic_Instance_Index := FieldByName('Acoustic_Instance_Index')
        .AsInteger;
    end;
  end;
end;

function TdmTTT.InsertSelfDefensiveJammerOnBoard( var aRec: TRecDefensive_Jammer_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Defensive_Jammer_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Vehicle_Index,');
    SQL.Add('Defensive_Jammer_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Defensive_Jammer_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Defensive_Jammer_On_Board');
      SQL.Add('WHERE Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add('AND Defensive_Jammer_Index = ' +
        IntToStr(Defensive_Jammer_Index));
      Open;

      Defensive_Jammer_Instance_Index := FieldByName
        ('Defensive_Jammer_Instance_Id').AsInteger;
    end;
  end;
end;

function TdmTTT.InsertTowedJammerDecoyOnBoard( var aRec: TRecTowed_Jammer_Decoy_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    ExecSQL;
    SQL.Clear;
    SQL.Add('INSERT INTO Towed_Jammer_Decoy_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Quantity, Vehicle_Index,');
    SQL.Add('Towed_Decoy_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Quantity) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(FloatToStr(Towed_Decoy_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Towed_Jammer_Decoy_On_Board');
      SQL.Add('WHERE Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add('AND Towed_Decoy_Index = ' + IntToStr(Towed_Decoy_Index));
      Open;

      Towed_Decoy_Instance_Index := FieldByName('Towed_Decoy_Instance_Index')
        .AsInteger;
    end;
  end;
end;

function TdmTTT.InsertFloatingDecoyOnBoard(var aRec: TRecFloating_Decoy_On_Board): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;
    ExecSQL;
    SQL.Clear;
    SQL.Add('INSERT INTO Floating_Decoy_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Quantity, Vehicle_Index,');
    SQL.Add('Floating_Decoy_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Quantity) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(FloatToStr(Floating_Decoy_Index) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Floating_Decoy_On_Board ');
      SQL.Add('WHERE Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add('AND Floating_Decoy_Index = ' + IntToStr(Floating_Decoy_Index));
      Open;

      Floating_Decoy_Instance_Index := FieldByName
        ('Floating_Decoy_Instance_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.InsertChaffOnBoard(var aRec: TRecChaff_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Chaff_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type, Chaff_Qty_On_Board,');
    SQL.Add('Vehicle_Index, Chaff_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Chaff_Qty_On_Board) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Chaff_Index) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Chaff_On_Board');
      SQL.Add('WHERE Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add('AND Chaff_Index = ' + IntToStr(Chaff_Index));
      SQL.Add('AND Instance_Type = ' + IntToStr(Instance_Type));
      Open;

      Chaff_Instance_Index := FieldByName('Chaff_Instance_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.InsertInfraredDecoyOnBoard( var aRec: TRecInfrared_Decoy_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Infrared_Decoy_On_Board');
    SQL.Add('(Instance_Identifier, Instance_Type,');
    SQL.Add('Infrared_Decoy_Qty_On_Board, Vehicle_Index,');
    SQL.Add('Infrared_Decoy_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Instance_Identifier) + ', ');
      SQL.Add(IntToStr(Instance_Type) + ', ');
      SQL.Add(IntToStr(Infrared_Decoy_Qty_On_Board) + ', ');
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Infrared_Decoy_Index) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Infrared_Decoy_On_Board');
      SQL.Add('WHERE Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add('AND Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      Open;

      Infrared_Decoy_Instance_Index := FieldByName
        ('Infrared_Decoy_Instance_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.InsertChaffLauncherOnBoard(var aRec: TRecChaff_Launcher_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Chaff_Launcher_On_Board');
    SQL.Add('(Vehicle_Index, Launcher_Number, Launcher_Angle, Launcher_Kind,');
    SQL.Add('Def_Bloom_Range, Def_Bloom_Altitude, Max_Range, Min_Range,');
    SQL.Add('Max_Elevation, Min_Elevation, Average_Launch_Spd)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Vehicle_Index) + ', ');
      SQL.Add(IntToStr(Launcher_Number) + ', ');
      SQL.Add(FloatToStr(Launcher_Angle) + ', ');
      SQL.Add(IntToStr(Launcher_Kind) + ', ');
      SQL.Add(FloatToStr(Def_Bloom_Range) + ', ');
      SQL.Add(FloatToStr(Def_Bloom_Altitude) + ', ');
      SQL.Add(FloatToStr(Max_Range) + ', ');
      SQL.Add(FloatToStr(Min_Range) + ', ');
      SQL.Add(FloatToStr(Max_Elevation) + ', ');
      SQL.Add(FloatToStr(Min_Elevation) + ', ');
      SQL.Add(FloatToStr(Average_Launch_Spd) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateRadarNoiseJammerOnBoard( var aRec: TRecRadar_Noise_Jammer_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Jammer_On_Board');

    with aRec do
    begin
      SQL.Add('SET Jammer_Index = ' + IntToStr(Jammer_Index));
      SQL.Add(', Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Antenna_Height = ' + FloatToStr(Antenna_Height));
      SQL.Add('WHERE Jammer_Instance_Index = ' +
        FloatToStr(Jammer_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateAirBubbleOnBoard(var aRec: TRecAir_Bubble_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Air_Bubble_Mount');

    with aRec do
    begin
      SQL.Add('SET Air_Bubble_Index = ' + IntToStr(Air_Bubble_Index));
      SQL.Add(', Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type =' + IntToStr(Instance_Type));
      SQL.Add(', Bubble_Qty_On_Board =' + IntToStr(Bubble_Qty_On_Board));
      SQL.Add(', Vehicle_Index =' + IntToStr(Vehicle_Index));
      SQL.Add('WHERE Air_Bubble_Instance_Index = ' +
        IntToStr(Air_Bubble_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateAcousticDecoyOnBoard(var aRec: TRecAcoustic_Decoy_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Acoustic_Decoy_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Quantity = ' + IntToStr(Quantity));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Decoy_Index = ' + IntToStr(Decoy_Index));
      SQL.Add('WHERE Acoustic_Instance_Index = ' +
        IntToStr(Acoustic_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateSelfDefensiveJammerOnBoard(var aRec: TRecDefensive_Jammer_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Defensive_Jammer_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Defensive_Jammer_Index = ' + IntToStr(Defensive_Jammer_Index));
      SQL.Add('WHERE Defensive_Jammer_Instance_Id = ' +
        IntToStr(Defensive_Jammer_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateTowedJammerDecoyOnBoard(var aRec: TRecTowed_Jammer_Decoy_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Towed_Jammer_Decoy_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Quantity = ' + IntToStr(Quantity));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Towed_Decoy_Index = ' + IntToStr(Towed_Decoy_Index));
      SQL.Add('WHERE Towed_Decoy_Instance_Index = ' +
        IntToStr(Towed_Decoy_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateFloatingDecoyOnBoard( var aRec: TRecFloating_Decoy_On_Board): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Floating_Decoy_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Quantity = ' + IntToStr(Quantity));
      SQL.Add(', Vehicle_Index = ' + FloatToStr(Vehicle_Index));
      SQL.Add('WHERE Floating_Decoy_Instance_Index = ' +
        IntToStr(Floating_Decoy_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateChaffOnBoard(var aRec: TRecChaff_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Chaff_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Chaff_Qty_On_Board = ' + IntToStr(Chaff_Qty_On_Board));
      SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add(', Chaff_Index = ' + IntToStr(Chaff_Index));
      SQL.Add('WHERE Chaff_Instance_Index = ' + IntToStr(Chaff_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateChaffLauncherOnBoard(var aRec: TRecChaff_Launcher_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Chaff_Launcher_On_Board');

    with aRec do
    begin
      SQL.Add('SET Launcher_Number = ' + IntToStr(Launcher_Number));
      SQL.Add(', Launcher_Angle = ' + FloatToStr(Launcher_Angle));
      SQL.Add(', Launcher_Kind = ' + IntToStr(Launcher_Kind));
      SQL.Add(', Def_Bloom_Range = ' + FloatToStr(Def_Bloom_Range));
      SQL.Add(', Def_Bloom_Altitude = ' + FloatToStr(Def_Bloom_Altitude));
      SQL.Add(', Max_Range = ' + FloatToStr(Max_Range));
      SQL.Add(', Min_Range = ' + FloatToStr(Min_Range));
      SQL.Add(', Max_Elevation = ' + FloatToStr(Max_Elevation));
      SQL.Add(', Min_Elevation = ' + FloatToStr(Min_Elevation));
      SQL.Add(', Average_Launch_Spd = ' + FloatToStr(Average_Launch_Spd));
      SQL.Add('WHERE Vehicle_Index = ' + IntToStr(Vehicle_Index));
      SQL.Add('AND Launcher_Number = ' + IntToStr(Launcher_Number));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateInfraredDecoyOnBoard(var aRec: TRecInfrared_Decoy_On_Board): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Infrared_Decoy_On_Board');

    with aRec do
    begin
      SQL.Add('SET Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      SQL.Add(', Instance_Type = ' + IntToStr(Instance_Type));
      SQL.Add(', Infrared_Decoy_Qty_On_Board = ' +
        IntToStr(Infrared_Decoy_Qty_On_Board));
      SQL.Add(', Vehicle_Index= ' + IntToStr(Vehicle_Index));
      SQL.Add(', Infrared_Decoy_Index = ' + IntToStr(Infrared_Decoy_Index));
      SQL.Add('WHERE Infrared_Decoy_Instance_Index = ' +
        IntToStr(Infrared_Decoy_Instance_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteAcousticDecoyOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Acoustic_Decoy_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Acoustic_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Acoustic_Decoy_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Acoustic_Instance_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.DeleteAirBubbleOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Air_Bubble_Mount');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Air_Bubble_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteRadarNoiseJammerOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Jammer_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Jammer_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteSelfDefensiveJammerOnBoard(const aDeleteType: Byte; aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Defensive_Jammer_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Defensive_Jammer_Instance_Id = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteTowedJammerDecoyOnBoard(const aDeleteType: Byte;  aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Towed_Jammer_Decoy_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Towed_Decoy_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteFloatingDecoyOnBoard(const aDeleteType: Byte;  aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Floating_Decoy_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Floating_Decoy_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteInfraredDecoyOnBoard(const aDeleteType: Byte;  aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Add('DELETE FROM Infrared_Decoy_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Infrared_Decoy_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteChaffOnBoard(const aDeleteType: Byte;  aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Add('DELETE FROM Chaff_On_Board');

    case aDeleteType of
      1: SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Chaff_Instance_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteChaffLauncherOnBoard(const aVehicleIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Chaff_Launcher_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleIndex));
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteChaffLauncherOnBoard(const aVehicleIndex, aLauncherNumber: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Chaff_Launcher_On_Board');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleIndex));
    SQL.Add('AND Launcher_Number = ' + IntToStr(aLauncherNumber));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$ENDREGION}

{$REGION ' Other Section '}

{$REGION ' Runtime Platform Library '}

function TdmTTT.GetAllRuntimePlatformLibraryDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TRuntime_Platform_Library;
begin
  result := -1;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Runtime_Platform_Library');
    SQL.Add('ORDER BY Library_Name ');
    Open;

    result := RecordCount;

    if not Assigned(aList) then
    begin
      aList.Create;
    end
    else
    begin
      aList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRuntime_Platform_Library.Create;
        with rec.FData do
        begin
          Platform_Library_Index := FieldByName('Platform_Library_Index')
            .AsInteger;
          Library_Name := FieldByName('Library_Name').AsString;
        end;
        aList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterRuntimePlatformLibraryDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TRuntime_Platform_Library;
begin
  result := -1;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Runtime_Platform_Library');
    SQL.Add('WHERE Library_Name like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Library_Name ');
    Open;

    result := RecordCount;

    if not Assigned(aList) then
    begin
      aList.Create;
    end
    else
    begin
      aList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRuntime_Platform_Library.Create;
        with rec.FData do
        begin
          Platform_Library_Index := FieldByName('Platform_Library_Index')
            .AsInteger;
          Library_Name := FieldByName('Library_Name').AsString;
        end;
        aList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetRuntimePlatformLibraryDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Runtime_Platform_Library');
    SQL.Add('WHERE Library_Name LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertRuntimePlatformLibraryDef(var aRec: TRecRuntime_Platform_Library): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Runtime_Platform_Library (Library_Name)');
    SQL.Add('VALUES (' + QuotedStr(aRec.Library_Name) + ')');
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Runtime_Platform_Library');
    SQL.Add('WHERE Library_Name = ' + QuotedStr(aRec.Library_Name));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Platform_Library_Index := FieldByName('Platform_Library_Index')
        .AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateRuntimePlatformLibraryDef(var aRec: TRecRuntime_Platform_Library): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Runtime_Platform_Library');
    SQL.Add('SET Library_Name = ' + QuotedStr(aRec.Library_Name));
    SQL.Add('WHERE Platform_Library_Index = ' +
      IntToStr(aRec.Platform_Library_Index));
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteRuntimePlatformLibraryDef( const aPlatformLibID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Runtime_Platform_Library');
    SQL.Add('WHERE Platform_Library_Index = ' + IntToStr(aPlatformLibID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Runtime_Platform_Library');
    SQL.Add('WHERE Platform_Library_Index = ' + IntToStr(aPlatformLibID));
    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.GetAllVehiclePlatformLibraryEntry(const aRPLID : Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TPlatform_Library_Entry;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Library_Entry a JOIN Vehicle_Definition b');
    SQL.Add('ON a.Vehicle_Index = b.Vehicle_Index');
    SQL.Add('WHERE a.Library_Index = ' + IntToStr(aRPLID));
    SQL.Add('ORDER BY b.Vehicle_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPlatform_Library_Entry.Create;

        with rec.FData do
        begin
          Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAllMissilePlatformLibraryEntry(const aRPLID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TPlatform_Library_Entry;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Library_Entry a JOIN Missile_Definition b');
    SQL.Add('ON a.Missile_Index = b.Missile_Index');
    SQL.Add('WHERE a.Library_Index = ' + IntToStr(aRPLID));
    SQL.Add('ORDER BY b.Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPlatform_Library_Entry.Create;

        with rec.FData do
        begin
          Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAllTorpedoPlatformLibraryEntry(const aRPLID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TPlatform_Library_Entry;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Library_Entry a JOIN Torpedo_Definition b');
    SQL.Add('ON a.Torpedo_Index = b.Torpedo_Index');
    SQL.Add('WHERE a.Library_Index = ' + IntToStr(aRPLID));
    SQL.Add('ORDER BY b.Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPlatform_Library_Entry.Create;

        with rec.FData do
        begin
          Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAllMinePlatformLibraryEntry(const aRPLID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TPlatform_Library_Entry;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Library_Entry a JOIN Mine_Definition b');
    SQL.Add('ON a.Mine_Index = b.Mine_Index');
    SQL.Add('WHERE a.Library_Index = ' + IntToStr(aRPLID));
    SQL.Add('ORDER BY b.Mine_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPlatform_Library_Entry.Create;

        with rec.FData do
        begin
          Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAllSonobuoyPlatformLibraryEntry(const aRPLID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TPlatform_Library_Entry;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Library_Entry a JOIN Sonobuoy_Definition b');
    SQL.Add('ON a.Sonobuoy_Index = b.Sonobuoy_Index');
    SQL.Add('WHERE a.Library_Index = ' + IntToStr(aRPLID));
    SQL.Add('ORDER BY b.Class_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPlatform_Library_Entry.Create;

        with rec.FData do
        begin
          Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPlatformAtPlatformLibraryEntry(const typePlatformInstance, id: Integer; var rec: TList): Integer;
var
  aRec: TPlatform_Library_Entry;
begin
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin

    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');

    SQL.Add('FROM Platform_Library_Entry a RIGHT JOIN Runtime_Platform_Library b ');
    SQL.Add('ON a.Library_Index = b.Platform_Library_Index ');
    //SQL.Add('FROM Platform_Library_Entry ');

    case typePlatformInstance of
      1: SQL.Add('WHERE (Vehicle_Index = ' + IntToStr(id) + ')');
      2: SQL.Add('WHERE (Missile_Index = ' + IntToStr(id) + ')');
      3: SQL.Add('WHERE (Torpedo_Index = ' + IntToStr(id) + ')');
      4: SQL.Add('WHERE (Mine_Index = ' + IntToStr(id) + ')');
      5: SQL.Add('WHERE (Hybrid_Index = ' + IntToStr(id) + ')');
      6: SQL.Add('WHERE (Satellite_Index = ' + IntToStr(id) + ')');
      7: SQL.Add('WHERE (Sonobuoy_Index = ' + IntToStr(id) + ')');
    end;
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(rec) then
        rec := TList.Create
      else
        rec.Clear;

      while not ZQ.Eof do
      begin
        aRec := TPlatform_Library_Entry.Create;
        with aRec.FData do
        begin
          Identifier := FieldByName('Library_Name').AsString;
          Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        end;

        rec.Add(aRec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertPlatformLibraryEntry(var aRec: TRecPlatform_Library_Entry): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Platform_Library_Entry');
    SQL.Add('(Library_Index, Platform_Type,');

    case aRec.Platform_Type of
      1: SQL.Add('Vehicle_Index)');
      2: SQL.Add('Missile_Index)');
      3: SQL.Add('Torpedo_Index)');
      4: SQL.Add('Mine_Index)');
      5: SQL.Add('Hybrid_Index)');
      6: SQL.Add('Satellite_Index)');
      7: SQL.Add('Sonobuoy_Index)');
    end;

    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Library_Index) + ', ');
      SQL.Add(IntToStr(Platform_Type) + ', ');

      case Platform_Type of
        1: SQL.Add(IntToStr(Vehicle_Index) + ')');
        2: SQL.Add(IntToStr(Missile_Index) + ')');
        3: SQL.Add(IntToStr(Torpedo_Index) + ')');
        4: SQL.Add(IntToStr(Mine_Index) + ')');
        5: SQL.Add(IntToStr(Hybrid_Index) + ')');
        6: SQL.Add(IntToStr(Satellite_Index) + ')');
        7: SQL.Add(IntToStr(Sonobuoy_Index) + ')');
      end;
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Library_Entry');

    with aRec do
    begin
      SQL.Add('WHERE Library_Index = ' + IntToStr(Library_Index));
      SQL.Add('AND Platform_Type = ' + IntToStr(Platform_Type));

      case Platform_Type of
        1: SQL.Add('AND Vehicle_Index = ' + IntToStr(Vehicle_Index));
        2: SQL.Add('AND Missile_Index = ' + IntToStr(Missile_Index));
        3: SQL.Add('AND Torpedo_Index = ' + IntToStr(Torpedo_Index));
        4: SQL.Add('AND Mine_Index = ' + IntToStr(Mine_Index));
        5: SQL.Add('AND Hybrid_Index = ' + IntToStr(Hybrid_Index));
        6: SQL.Add('AND Satellite_Index = ' + IntToStr(Satellite_Index));
        7: SQL.Add('AND Sonobuoy_Index = ' + IntToStr(Sonobuoy_Index));
      end;
    end;

    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdatePlatformLibraryEntry(var aRec: TRecPlatform_Library_Entry): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Platform_Library_Entry');

    with aRec do
    begin
      SQL.Add('SET Library_Index = ' + IntToStr(Library_Index));
      SQL.Add(', Platform_Type = ' + IntToStr(Platform_Type));

      case Platform_Type of
        1: SQL.Add(', Vehicle_Index = ' + IntToStr(Vehicle_Index));
        2: SQL.Add(', Missile_Index = ' + IntToStr(Missile_Index));
        3: SQL.Add(', Torpedo_Index = ' + IntToStr(Torpedo_Index));
        4: SQL.Add(', Mine_Index = ' + IntToStr(Mine_Index));
        5: SQL.Add(', Hybrid_Index = ' + IntToStr(Hybrid_Index));
        6: SQL.Add(', Satellite_Index = ' + IntToStr(Satellite_Index));
        7: SQL.Add(', Sonobuoy_Index = ' + IntToStr(Sonobuoy_Index));
      end;

      SQL.Add('WHERE Library_Entry_Index = ' + IntToStr(Library_Entry_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeletePlatformLibraryEntry(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Library_Entry');

    case aDeleteType of
      1: SQL.Add('WHERE Library_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Library_Entry_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Platform_Library_Entry');

    case aDeleteType of
      1: SQL.Add('WHERE Library_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Library_Entry_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Overlays '}

function TdmTTT.GetAllOverlayDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TOverlay_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Overlay_Definition');
    SQL.Add('ORDER BY Overlay_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TOverlay_Definition.Create;

        with rec.FData do
        begin
          Overlay_Index := FieldByName('Overlay_Index').AsInteger;
          Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
          Name := FieldByName('Overlay_Filename').AsString;
          Tipe := FieldByName('Static_Overlay').AsInteger;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          domain := FieldByName('Domain').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterOverlayDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TOverlay_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Overlay_Definition');
    SQL.Add('WHERE Overlay_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Overlay_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TOverlay_Definition.Create;

        with rec.FData do
        begin
          Overlay_Index := FieldByName('Overlay_Index').AsInteger;
          Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
          Name := FieldByName('Overlay_Filename').AsString;
          Tipe := FieldByName('Static_Overlay').AsInteger;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          domain := FieldByName('Domain').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetOverlayDef(const aClassName: string): Integer;
begin
  result := 0;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Overlay_Definition');
    SQL.Add('WHERE Overlay_Identifier = ' + quotedStr(aClassName));
    Open;

    result := RecordCount;
  end;
end;

function TdmTTT.InsertOverlayDef(var aRec: TRecOverlay_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Overlay_Definition');
    SQL.Add('(Overlay_Identifier, Overlay_Filename, Static_Overlay, Domain)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Overlay_Identifier) + ', ');
      SQL.Add(QuotedStr(Name) + ', ');
      SQL.Add(IntToStr(Tipe) + ', ');
      SQL.Add(IntToStr(Domain) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Overlay_Definition');
    SQL.Add('WHERE Overlay_Identifier = ' + QuotedStr(aRec.Overlay_Identifier));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Overlay_Index := FieldByName('Overlay_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateOverlayDef(var aRec: TRecOverlay_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Overlay_Definition');

    with aRec do
    begin
      SQL.Add('SET Overlay_Identifier = ' + QuotedStr(Overlay_Identifier));
      SQL.Add(', Overlay_Filename = ' + QuotedStr(Name));
      SQL.Add(', Static_Overlay = ' + IntToStr(Tipe));
      SQL.Add(', Domain = ' + IntToStr(Domain));
      SQL.Add('WHERE Overlay_Index = ' + IntToStr(Overlay_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteOverlayDef(const aOverlayID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Overlay_Definition');
    SQL.Add('WHERE Overlay_Index = ' + IntToStr(aOverlayID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Overlay_Definition');
    SQL.Add('WHERE Overlay_Index = ' + IntToStr(aOverlayID));
    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Motion '}

function TdmTTT.GetFilterMotionDef(var aList: TList; aFilter: String): Integer;
var
  rec : TMotion_Characteristics;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Motion_Characteristics ');
    SQL.Add('WHERE Motion_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Motion_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
      aList.Clear
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMotion_Characteristics.Create;

        with rec.FData do
        begin
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Motion_Identifier := FieldByName('Motion_Identifier').AsString;
          Motion_Type := FieldByName('Motion_Type').AsInteger;
          Max_Altitude := FieldByName('Max_Altitude').AsSingle;
          Max_Depth := FieldByName('Max_Depth').AsSingle;
          Min_Ground_Speed := FieldByName('Min_Ground_Speed').AsSingle;
          Cruise_Ground_Speed := FieldByName('Cruise_Ground_Speed').AsSingle;
          High_Ground_Speed := FieldByName('High_Ground_Speed').AsSingle;
          Max_Ground_Speed := FieldByName('Max_Ground_Speed').AsSingle;
          Acceleration := FieldByName('Acceleration').AsSingle;
          Deceleration := FieldByName('Deceleration').AsSingle;
          Normal_Climb_Rate := FieldByName('Normal_Climb_Rate').AsSingle;
          Max_Climb_Rate := FieldByName('Max_Climb_Rate').AsSingle;
          Normal_Descent_Rate := FieldByName('Normal_Descent_Rate').AsSingle;
          Max_Descent_Rate := FieldByName('Max_Descent_Rate').AsSingle;
          Vertical_Accel := FieldByName('Vertical_Accel').AsSingle;
          Standard_Turn_Rate := FieldByName('Standard_Turn_Rate').AsSingle;
          Tight_Turn_Rate := FieldByName('Tight_Turn_Rate').AsSingle;
          Max_Helm_Angle := FieldByName('Max_Helm_Angle').AsSingle;
          Helm_Angle_Rate := FieldByName('Helm_Angle_Rate').AsSingle;
          Speed_Reduce_In_Turn := FieldByName('Speed_Reduce_In_Turn').AsSingle;
          Time_To_Reduce_Speed := FieldByName('Time_To_Reduce_Speed').AsSingle;
          Min_Speed_To_Reduce := FieldByName('Min_Speed_To_Reduce').AsSingle;
          Rate_of_Turn_Rate_Chg := FieldByName('Rate_of_Turn_Rate_Chg').AsSingle;
          Min_Pitch_Angle := FieldByName('Min_Pitch_Angle').AsSingle;
          Max_Pitch_Angle := FieldByName('Max_Pitch_Angle').AsSingle;
          Max_Roll_Angle := FieldByName('Max_Roll_Angle').AsSingle;
          Endurance_Type := FieldByName('Endurance_Type').AsInteger;
          Endurance_Time := FieldByName('Endurance_Time').AsInteger;
          Max_Effective_Range := FieldByName('Max_Effective_Range').AsSingle;
          Fuel_Unit_Type := FieldByName('Fuel_Unit_Type').AsInteger;
          Max_Fuel_Capacity := FieldByName('Max_Fuel_Capacity').AsSingle;
          Min_Speed_Fuel_Consume := FieldByName('Min_Speed_Fuel_Consume').AsFloat;
          Cruise_Speed_Fuel_Consume := FieldByName('Cruise_Speed_Fuel_Consume')
            .AsFloat;
          High_Speed_Fuel_Consume := FieldByName('High_Speed_Fuel_Consume')
            .AsFloat;
          Max_Speed_Fuel_Consume := FieldByName('Max_Speed_Fuel_Consume').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAllMotionCharacteristicDef(aList: TList): Integer;
var
  rec : TMotion_Characteristics;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Motion_Characteristics ');
    SQL.Add('ORDER BY Motion_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
      aList.Clear
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMotion_Characteristics.Create;

        with rec.FData do
        begin
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Motion_Identifier := FieldByName('Motion_Identifier').AsString;
          Motion_Type := FieldByName('Motion_Type').AsInteger;
          Max_Altitude := FieldByName('Max_Altitude').AsSingle;
          Max_Depth := FieldByName('Max_Depth').AsSingle;
          Min_Ground_Speed := FieldByName('Min_Ground_Speed').AsSingle;
          Cruise_Ground_Speed := FieldByName('Cruise_Ground_Speed').AsSingle;
          High_Ground_Speed := FieldByName('High_Ground_Speed').AsSingle;
          Max_Ground_Speed := FieldByName('Max_Ground_Speed').AsSingle;
          Acceleration := FieldByName('Acceleration').AsSingle;
          Deceleration := FieldByName('Deceleration').AsSingle;
          Normal_Climb_Rate := FieldByName('Normal_Climb_Rate').AsSingle;
          Max_Climb_Rate := FieldByName('Max_Climb_Rate').AsSingle;
          Normal_Descent_Rate := FieldByName('Normal_Descent_Rate').AsSingle;
          Max_Descent_Rate := FieldByName('Max_Descent_Rate').AsSingle;
          Vertical_Accel := FieldByName('Vertical_Accel').AsSingle;
          Standard_Turn_Rate := FieldByName('Standard_Turn_Rate').AsSingle;
          Tight_Turn_Rate := FieldByName('Tight_Turn_Rate').AsSingle;
          Max_Helm_Angle := FieldByName('Max_Helm_Angle').AsSingle;
          Helm_Angle_Rate := FieldByName('Helm_Angle_Rate').AsSingle;
          Speed_Reduce_In_Turn := FieldByName('Speed_Reduce_In_Turn').AsSingle;
          Time_To_Reduce_Speed := FieldByName('Time_To_Reduce_Speed').AsSingle;
          Min_Speed_To_Reduce := FieldByName('Min_Speed_To_Reduce').AsSingle;
          Rate_of_Turn_Rate_Chg := FieldByName('Rate_of_Turn_Rate_Chg').AsSingle;
          Min_Pitch_Angle := FieldByName('Min_Pitch_Angle').AsSingle;
          Max_Pitch_Angle := FieldByName('Max_Pitch_Angle').AsSingle;
          Max_Roll_Angle := FieldByName('Max_Roll_Angle').AsSingle;
          Endurance_Type := FieldByName('Endurance_Type').AsInteger;
          Endurance_Time := FieldByName('Endurance_Time').AsInteger;
          Max_Effective_Range := FieldByName('Max_Effective_Range').AsSingle;
          Fuel_Unit_Type := FieldByName('Fuel_Unit_Type').AsInteger;
          Max_Fuel_Capacity := FieldByName('Max_Fuel_Capacity').AsSingle;
          Min_Speed_Fuel_Consume := FieldByName('Min_Speed_Fuel_Consume').AsFloat;
          Cruise_Speed_Fuel_Consume := FieldByName('Cruise_Speed_Fuel_Consume')
            .AsFloat;
          High_Speed_Fuel_Consume := FieldByName('High_Speed_Fuel_Consume')
            .AsFloat;
          Max_Speed_Fuel_Consume := FieldByName('Max_Speed_Fuel_Consume').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetMotionCharacteristicDef(const aClassName: string): Integer;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Motion_Characteristics');
    SQL.Add('WHERE Motion_Identifier LIKE ' + QuotedStr(aClassName));
    SQL.Add('ORDER BY Motion_Identifier');
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetMotionCharacteristicDef(const aClassID: Integer; var aMotion: TMotion_Characteristics): Boolean;
begin
  Result := False;
  aMotion := nil;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Motion_Characteristics');
    SQL.Add('WHERE Motion_Index = ' + IntToStr(aClassID));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      aMotion := TMotion_Characteristics.Create;

      with aMotion.FData do
      begin
        Motion_Index := FieldByName('Motion_Index').AsInteger;
        Motion_Identifier := FieldByName('Motion_Identifier').AsString;
        Motion_Type := FieldByName('Motion_Type').AsInteger;
        Max_Altitude := FieldByName('Max_Altitude').AsSingle;
        Max_Depth := FieldByName('Max_Depth').AsSingle;
        Min_Ground_Speed := FieldByName('Min_Ground_Speed').AsSingle;
        Cruise_Ground_Speed := FieldByName('Cruise_Ground_Speed').AsSingle;
        High_Ground_Speed := FieldByName('High_Ground_Speed').AsSingle;
        Max_Ground_Speed := FieldByName('Max_Ground_Speed').AsSingle;
        Acceleration := FieldByName('Acceleration').AsSingle;
        Deceleration := FieldByName('Deceleration').AsSingle;
        Normal_Climb_Rate := FieldByName('Normal_Climb_Rate').AsSingle;
        Max_Climb_Rate := FieldByName('Max_Climb_Rate').AsSingle;
        Normal_Descent_Rate := FieldByName('Normal_Descent_Rate').AsSingle;
        Max_Descent_Rate := FieldByName('Max_Descent_Rate').AsSingle;
        Vertical_Accel := FieldByName('Vertical_Accel').AsSingle;
        Standard_Turn_Rate := FieldByName('Standard_Turn_Rate').AsSingle;
        Tight_Turn_Rate := FieldByName('Tight_Turn_Rate').AsSingle;
        Max_Helm_Angle := FieldByName('Max_Helm_Angle').AsSingle;
        Helm_Angle_Rate := FieldByName('Helm_Angle_Rate').AsSingle;
        Speed_Reduce_In_Turn := FieldByName('Speed_Reduce_In_Turn').AsSingle;
        Time_To_Reduce_Speed := FieldByName('Time_To_Reduce_Speed').AsSingle;
        Min_Speed_To_Reduce := FieldByName('Min_Speed_To_Reduce').AsSingle;
        Rate_of_Turn_Rate_Chg := FieldByName('Rate_of_Turn_Rate_Chg').AsSingle;
        Min_Pitch_Angle := FieldByName('Min_Pitch_Angle').AsSingle;
        Max_Pitch_Angle := FieldByName('Max_Pitch_Angle').AsSingle;
        Max_Roll_Angle := FieldByName('Max_Roll_Angle').AsSingle;
        Endurance_Type := FieldByName('Endurance_Type').AsInteger;
        Endurance_Time := FieldByName('Endurance_Time').AsInteger;
        Max_Effective_Range := FieldByName('Max_Effective_Range').AsSingle;
        Fuel_Unit_Type := FieldByName('Fuel_Unit_Type').AsInteger;
        Max_Fuel_Capacity := FieldByName('Max_Fuel_Capacity').AsSingle;
        Min_Speed_Fuel_Consume := FieldByName('Min_Speed_Fuel_Consume').AsFloat;
        Cruise_Speed_Fuel_Consume := FieldByName('Cruise_Speed_Fuel_Consume').AsFloat;
        High_Speed_Fuel_Consume := FieldByName('High_Speed_Fuel_Consume').AsFloat;
        Max_Speed_Fuel_Consume := FieldByName('Max_Speed_Fuel_Consume').AsFloat;
      end;
    end;
  end;
end;

function TdmTTT.InsertMotionCharacteristicDef(var aRec: TRecMotion_Characteristics): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Motion_Characteristics');
    SQL.Add('(Motion_Identifier, Motion_Type, Max_Altitude, Max_Depth,');
    SQL.Add('Min_Ground_Speed, Cruise_Ground_Speed, High_Ground_Speed,');
    SQL.Add('Max_Ground_Speed, Acceleration, Deceleration, Normal_Climb_Rate,');
    SQL.Add('Max_Climb_Rate, Normal_Descent_Rate, Max_Descent_Rate,');
    SQL.Add('Vertical_Accel, Standard_Turn_Rate, Tight_Turn_Rate,');
    SQL.Add('Max_Helm_Angle, Helm_Angle_Rate, Speed_Reduce_In_Turn,');
    SQL.Add('Time_To_Reduce_Speed, Min_Speed_To_Reduce,');
    SQL.Add('Rate_of_Turn_Rate_Chg, Min_Pitch_Angle, Max_Pitch_Angle,');
    SQL.Add('Max_Roll_Angle, Endurance_Type, Endurance_Time,');
    SQL.Add('Max_Effective_Range, Fuel_Unit_Type, Max_Fuel_Capacity,');
    SQL.Add('Min_Speed_Fuel_Consume, Cruise_Speed_Fuel_Consume,');
    SQL.Add('High_Speed_Fuel_Consume, Max_Speed_Fuel_Consume)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Motion_Identifier) + ', ');
      SQL.Add(IntToStr(Motion_Type) + ', ');
      SQL.Add(FloatToStr(Max_Altitude) + ', ');
      SQL.Add(FloatToStr(Max_Depth) + ', ');
      SQL.Add(FloatToStr(Min_Ground_Speed) + ', ');
      SQL.Add(FloatToStr(Cruise_Ground_Speed) + ', ');
      SQL.Add(FloatToStr(High_Ground_Speed) + ', ');
      SQL.Add(FloatToStr(Max_Ground_Speed) + ', ');
      SQL.Add(FloatToStr(Acceleration) + ', ');
      SQL.Add(FloatToStr(Deceleration) + ', ');
      SQL.Add(FloatToStr(Normal_Climb_Rate) + ', ');
      SQL.Add(FloatToStr(Max_Climb_Rate) + ', ');
      SQL.Add(FloatToStr(Normal_Descent_Rate) + ', ');
      SQL.Add(FloatToStr(Max_Descent_Rate) + ', ');
      SQL.Add(FloatToStr(Vertical_Accel) + ', ');
      SQL.Add(FloatToStr(Standard_Turn_Rate) + ', ');
      SQL.Add(FloatToStr(Tight_Turn_Rate) + ', ');
      SQL.Add(FloatToStr(Max_Helm_Angle) + ', ');
      SQL.Add(FloatToStr(Helm_Angle_Rate) + ', ');
      SQL.Add(FloatToStr(Speed_Reduce_In_Turn) + ', ');
      SQL.Add(FloatToStr(Time_To_Reduce_Speed) + ', ');
      SQL.Add(FloatToStr(Min_Speed_To_Reduce) + ', ');
      SQL.Add(FloatToStr(Rate_of_Turn_Rate_Chg) + ', ');
      SQL.Add(FloatToStr(Min_Pitch_Angle) + ', ');
      SQL.Add(FloatToStr(Max_Pitch_Angle) + ', ');
      SQL.Add(FloatToStr(Max_Roll_Angle) + ', ');
      SQL.Add(IntToStr(Endurance_Type) + ', ');
      SQL.Add(IntToStr(Endurance_Time) + ', ');
      SQL.Add(FloatToStr(Max_Effective_Range) + ', ');
      SQL.Add(IntToStr(Fuel_Unit_Type) + ', ');
      SQL.Add(FloatToStr(Max_Fuel_Capacity) + ', ');
      SQL.Add(FloatToStr(Min_Speed_Fuel_Consume) + ', ');
      SQL.Add(FloatToStr(Cruise_Speed_Fuel_Consume) + ', ');
      SQL.Add(FloatToStr(High_Speed_Fuel_Consume) + ', ');
      SQL.Add(FloatToStr(Max_Speed_Fuel_Consume) + ')');
      ExecSQL;

      Result := True;

      SQL.Clear;
      SQL.Add('SELECT *');
      SQL.Add('FROM Motion_Characteristics');
      SQL.Add('WHERE Motion_Identifier = ' + QuotedStr(Motion_Identifier));
      Open;

      Motion_Index := FieldByName('Motion_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateMotionCharacteristicDef(var aRec: TRecMotion_Characteristics): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Motion_Characteristics');

    with aRec do
    begin
      SQL.Add('SET Motion_Identifier = ' + QuotedStr(Motion_Identifier));
      SQL.Add(', Motion_Type = ' + IntToStr(Motion_Type));
      SQL.Add(', Max_Altitude = ' + FloatToStr(Max_Altitude));
      SQL.Add(', Max_Depth =' + FloatToStr(Max_Depth));
      SQL.Add(', Min_Ground_Speed = ' + FloatToStr(Min_Ground_Speed));
      SQL.Add(', Cruise_Ground_Speed = ' + FloatToStr(Cruise_Ground_Speed));
      SQL.Add(', High_Ground_Speed = ' + FloatToStr(High_Ground_Speed));
      SQL.Add(', Max_Ground_Speed = ' + FloatToStr(Max_Ground_Speed));
      SQL.Add(', Acceleration = ' + FloatToStr(Acceleration));
      SQL.Add(', Deceleration = ' + FloatToStr(Deceleration));
      SQL.Add(', Normal_Climb_Rate = ' + FloatToStr(Normal_Climb_Rate));
      SQL.Add(', Max_Climb_Rate = ' + FloatToStr(Max_Climb_Rate));
      SQL.Add(', Normal_Descent_Rate = ' + FloatToStr(Normal_Descent_Rate));
      SQL.Add(', Max_Descent_Rate = ' + FloatToStr(Max_Descent_Rate));
      SQL.Add(', Vertical_Accel = ' + FloatToStr(Vertical_Accel));
      SQL.Add(', Standard_Turn_Rate = ' + FloatToStr(Standard_Turn_Rate));
      SQL.Add(', Tight_Turn_Rate = ' + FloatToStr(Tight_Turn_Rate));
      SQL.Add(', Max_Helm_Angle = ' + FloatToStr(Max_Helm_Angle));
      SQL.Add(', Helm_Angle_Rate = ' + FloatToStr(Helm_Angle_Rate));
      SQL.Add(', Speed_Reduce_In_Turn = ' + FloatToStr(Speed_Reduce_In_Turn));
      SQL.Add(', Time_To_Reduce_Speed = ' + FloatToStr(Time_To_Reduce_Speed));
      SQL.Add(', Min_Speed_To_Reduce = ' + FloatToStr(Min_Speed_To_Reduce));
      SQL.Add(', Rate_of_Turn_Rate_Chg = ' + FloatToStr(Rate_of_Turn_Rate_Chg));
      SQL.Add(', Min_Pitch_Angle = ' + FloatToStr(Min_Pitch_Angle));
      SQL.Add(', Max_Pitch_Angle = ' + FloatToStr(Max_Pitch_Angle));
      SQL.Add(', Max_Roll_Angle = ' + FloatToStr(Max_Roll_Angle));
      SQL.Add(', Endurance_Type = ' + IntToStr(Endurance_Type));
      SQL.Add(', Endurance_Time = ' + IntToStr(Endurance_Time));
      SQL.Add(', Max_Effective_Range = ' + FloatToStr(Max_Effective_Range));
      SQL.Add(', Fuel_Unit_Type = ' + IntToStr(Fuel_Unit_Type));
      SQL.Add(', Max_Fuel_Capacity = ' + FloatToStr(Max_Fuel_Capacity));
      SQL.Add(', Min_Speed_Fuel_Consume = ' +
        FloatToStr(Min_Speed_Fuel_Consume));
      SQL.Add(', Cruise_Speed_Fuel_Consume = ' +
        FloatToStr(Cruise_Speed_Fuel_Consume));
      SQL.Add(', High_Speed_Fuel_Consume = ' +
        FloatToStr(High_Speed_Fuel_Consume));
      SQL.Add(', Max_Speed_Fuel_Consume = ' +
        FloatToStr(Max_Speed_Fuel_Consume));
      SQL.Add('WHERE Motion_Index = ' + IntToStr(Motion_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteMotionCharacteristicDef(const aMotionIndex: Integer): Boolean;
begin
  result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE FROM Motion_Characteristics ');
    SQL.Add('WHERE Motion_Index = ' + IntToStr(aMotionIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Logistic '}

function TdmTTT.GetAllLogisticDef(var aList: TList): Integer;
var
  i : Integer;
  rec: TLogistics;
begin
  result := -1;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Logistic_Capability ');
    SQL.Add('ORDER BY Logistic_Identifier');
    Open;

    result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TLogistics.Create;
        with rec.FData do
        begin
          Logistic_Index := FieldByName('Logistic_Index').AsInteger;
          Logistic_Identifier := FieldByName('Logistic_Identifier').AsString;
          Tranferable_Logistic := FieldByName('Tranferable_Logistic').AsBoolean;

		      {pakai field Max_Effective_Range, kalo pake yg asli ZQ.Max_Transfer_Altitude_Difference not found}
          Max_Transfer_Altitude_Difference := FieldByName('Max_Effective_Range').AsSingle;
          Max_Transfer_Range := FieldByName('Max_Transfer_Range').AsSingle;

          PA := FieldByName('PA').AsInteger;
          BA := FieldByName('BA').AsInteger;
          TA := FieldByName('TA').AsInteger;

          Max_Lubricants_Capacity := FieldByName('Max_Lubricants_Capacity').AsSingle;
          Lubricants_Consumption := FieldByName('Lubricants_Consumption').AsSingle;
          Lubricant_TrS := FieldByName('Lubricant_TrS').AsSingle;

          Max_Freshwater_Capacity := FieldByName('Max_Freshwater_Capacity').AsSingle;
          Freshwater_Consumption := FieldByName('Freshwater_Consumption').AsSingle;
          Freshwater_TrS := FieldByName('Freshwater_TrS').AsSingle;

          Max_Ration_Capacity := FieldByName('Max_Ration_Capacity').AsSingle;
          Ration_Consumption := FieldByName('Ration_Consumption').AsSingle;
          Ration_TrS := FieldByName('Ration_TrS').AsSingle;
          Fuel_TrS := FieldByName('Fuel_TrS').AsSingle;
        end;

        aList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterLogisticDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec: TLogistics;
begin
  result := -1;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Logistic_Capability ');
    SQL.Add('WHERE Logistic_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Logistic_Identifier');
    Open;

    result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TLogistics.Create;
        with rec.FData do
        begin
          Logistic_Index := FieldByName('Logistic_Index').AsInteger;
          Logistic_Identifier := FieldByName('Logistic_Identifier').AsString;
          Tranferable_Logistic := FieldByName('Tranferable_Logistic').AsBoolean;

		      {pakai field Max_Effective_Range, kalo pake yg asli ZQ.Max_Transfer_Altitude_Difference not found}
          Max_Transfer_Altitude_Difference := FieldByName('Max_Effective_Range').AsSingle;
          Max_Transfer_Range := FieldByName('Max_Transfer_Range').AsSingle;

          PA := FieldByName('PA').AsInteger;
          BA := FieldByName('BA').AsInteger;
          TA := FieldByName('TA').AsInteger;

          Max_Lubricants_Capacity := FieldByName('Max_Lubricants_Capacity').AsSingle;
          Lubricants_Consumption := FieldByName('Lubricants_Consumption').AsSingle;
          Lubricant_TrS := FieldByName('Lubricant_TrS').AsSingle;

          Max_Freshwater_Capacity := FieldByName('Max_Freshwater_Capacity').AsSingle;
          Freshwater_Consumption := FieldByName('Freshwater_Consumption').AsSingle;
          Freshwater_TrS := FieldByName('Freshwater_TrS').AsSingle;

          Max_Ration_Capacity := FieldByName('Max_Ration_Capacity').AsSingle;
          Ration_Consumption := FieldByName('Ration_Consumption').AsSingle;
          Ration_TrS := FieldByName('Ration_TrS').AsSingle;
          Fuel_TrS := FieldByName('Fuel_TrS').AsSingle;
        end;

        aList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetLogisticDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Logistic_Capability');
    SQL.Add('WHERE Logistic_Identifier = '+ QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetLogisticDef(const aClassID: Integer; var aLogistic: TLogistics): Boolean;
begin
  Result := False;
  aLogistic := nil;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Logistic_Capability');
    SQL.Add('WHERE Logistic_Index = ' + IntToStr(aClassID));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      aLogistic := TLogistics.Create;

      with aLogistic.FData do
      begin
        Logistic_Index := FieldByName('Logistic_Index').AsInteger;
        Logistic_Identifier := FieldByName('Logistic_Identifier').AsString;
        Tranferable_Logistic := FieldByName('Tranferable_Logistic').AsBoolean;
        Max_Transfer_Range := FieldByName('Max_Transfer_Range').AsSingle;

        {pakai field Max_Effective_Range, kalo pake yg asli ZQ.Max_Transfer_Altitude_Difference not found}
        Max_Transfer_Altitude_Difference := FieldByName('Max_Effective_Range').AsSingle;

        PA := FieldByName('PA').AsInteger;
        BA := FieldByName('BA').AsInteger;
        TA := FieldByName('TA').AsInteger;

        Max_Lubricants_Capacity := FieldByName('Max_Lubricants_Capacity').AsSingle;
        Lubricants_Consumption := FieldByName('Lubricants_Consumption').AsSingle;
        Lubricant_TrS := FieldByName('Lubricant_TrS').AsSingle;

        Max_Freshwater_Capacity := FieldByName('Max_Freshwater_Capacity').AsSingle;
        Freshwater_Consumption := FieldByName('Freshwater_Consumption').AsSingle;
        Freshwater_TrS := FieldByName('Freshwater_TrS').AsSingle;

        Max_Ration_Capacity := FieldByName('Max_Ration_Capacity').AsSingle;
        Ration_Consumption := FieldByName('Ration_Consumption').AsSingle;
        Ration_TrS := FieldByName('Ration_TrS').AsSingle;
        Fuel_TrS := FieldByName('Fuel_TrS').AsSingle;
      end;
    end;
  end;
end;

function TdmTTT.InsertLogisticDef(var aRec: TRecLogisticsCapability): Boolean;
begin
  result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin

    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Logistic_Capability ');
    SQL.Add('(Logistic_Identifier, Tranferable_Logistic, Max_Transfer_Range, Max_Effective_Range,');
    SQL.Add(' PA, BA, TA, ');
    SQL.Add(' Max_Lubricants_Capacity, Lubricants_Consumption, Lubricant_TrS, ');
    SQL.Add(' Max_Freshwater_Capacity, Freshwater_Consumption, Freshwater_TrS, ');
    SQL.Add(' Max_Ration_Capacity, Ration_Consumption, Ration_TrS, Fuel_TrS)' );
    SQL.Add(' VALUES (');

    with aRec do
    begin
      SQL.Add('''' + Logistic_Identifier + ''',');
      SQL.Add(BoolToStr(Tranferable_Logistic) + ',');
      SQL.Add(FloatToStr(Max_Transfer_Range) + ',');
      SQL.Add(FloatToStr(Max_Transfer_Altitude_Difference) + ',');

      SQL.Add(IntToStr(PA) + ',');
      SQL.Add(IntToStr(BA) + ',');
      SQL.Add(IntToStr(TA) + ',');

      SQL.Add(FloatToStr(Max_Lubricants_Capacity) + ',');
      SQL.Add(FloatToStr(Lubricants_Consumption) + ',');
      SQL.Add(FloatToStr(Lubricant_TrS) + ',');

      SQL.Add(FloatToStr(Max_Freshwater_Capacity) + ',');
      SQL.Add(FloatToStr(Freshwater_Consumption) + ',');
      SQL.Add(FloatToStr(Freshwater_TrS) + ',');

      SQL.Add(FloatToStr(Max_Ration_Capacity) + ',');
      SQL.Add(FloatToStr(Ration_Consumption) + ',');
      SQL.Add(FloatToStr(Ration_TrS) + ',');

      SQL.Add(FloatToStr(Fuel_TrS) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Logistic_Index FROM Logistic_Capability ');
      SQL.Add('WHERE Logistic_Identifier =' + quotedStr(Logistic_Identifier));
      Open;

      Result := RecordCount > 0;

      Logistic_Index := FieldByName('Logistic_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateLogisticDef(var aRec: TRecLogisticsCapability): Boolean;
begin
  result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Logistic_Capability ');

    with aRec do
    begin
      SQL.Add('SET Logistic_Identifier =''' + Logistic_Identifier + ''',');
      SQL.Add('Tranferable_Logistic = ' + BoolToStr(Tranferable_Logistic) + ',');
      SQL.Add('Max_Transfer_Range = ' + FloatToStr(Max_Transfer_Range) + ',');

      {pakai field Max_Effective_Range, kalo pake yg asli ZQ.Max_Transfer_Altitude_Difference not found}
      SQL.Add('Max_Effective_Range =' + FloatToStr(Max_Transfer_Altitude_Difference) + ',');

      SQL.Add('PA =' + IntToStr(PA) + ',');
      SQL.Add('BA = ' + IntToStr(BA) + ',');
      SQL.Add('TA =' + IntToStr(TA) + ',');

      SQL.Add('Max_Lubricants_Capacity = ' + FloatToStr(Max_Lubricants_Capacity) + ',');
      SQL.Add('Lubricants_Consumption =' + FloatToStr(Lubricants_Consumption) + ',');
      SQL.Add('Lubricant_TrS =' + FloatToStr(Lubricant_TrS) + ',');

      SQL.Add('Max_Freshwater_Capacity =' + FloatToStr(Max_Freshwater_Capacity) + ',');
      SQL.Add('Freshwater_Consumption = ' + FloatToStr(Freshwater_Consumption) + ',');
      SQL.Add('Freshwater_TrS =' + FloatToStr(Freshwater_TrS)+ ',');

      SQL.Add('Max_Ration_Capacity = ' + FloatToStr(Max_Ration_Capacity) + ',');
      SQL.Add('Ration_Consumption =' + FloatToStr(Ration_Consumption) + ',');
      SQL.Add('Ration_TrS =' + FloatToStr(Ration_TrS) + ',');
      SQL.Add('Fuel_TrS = ' + FloatToStr(Fuel_TrS));

      SQL.Add(' WHERE Logistic_Index = ' + inttostr(Logistic_Index));
    end;
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteLogisticDef(const aLogisticIndex: Integer): boolean;
begin
  result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Logistic_Capability ');
    SQL.Add('WHERE Logistic_Index = ' + inttostr(aLogisticIndex));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Logistic_Capability');
    SQL.Add('WHERE Logistic_Index = ' + IntToStr(aLogisticIndex));
    Open;

    Result := RecordCount = 0;

  end;
end;

{$ENDREGION}

{$REGION ' Transport '}

function TdmTTT.GetAllTransportDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TTransport;
begin
 result := -1;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Capability ');
    SQL.Add('ORDER BY Capability_Identifier');
    Open;

    result := RecordCount
    ;
    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TTransport.Create;

        with rec.FData do
        begin
          Transport_Index         := FieldByName('Platform_Capability_Index').AsInteger;
          Transport_Identifier    := FieldByName('Capability_Identifier').AsString;
          Carriable               := FieldByName('Carriable').AsBoolean;
          Hangar_Unit_Carried     := FieldByName('Hangar_Unit_Carried').AsBoolean;
          Deck_Unit_Carried       := FieldByName('Deck_Unit_Carried').AsBoolean;
          Personnel_Unit_Carried  := FieldByName('Personnel_Unit_Carried').AsBoolean;
          FixedWing_Carried       := FieldByName('FixedWing_Carried').AsBoolean;
          Rotary_Carried          := FieldByName('Rotary_Carried').AsBoolean;
          Amphibious_Carried      := FieldByName('Amphibious_Carried').AsBoolean;
          Land_Carried            := FieldByName('Land_Carried').AsBoolean;
          Max_Hangar_Capacity     := FieldByName('Max_Hangar_Capacity').AsInteger;
          Max_Hangar_Weight       := FieldByName('Max_Hangar_Weight').AsFloat ;
          Max_Deck_Weight         := FieldByName('Max_Deck_Weight').AsFloat;
          Deck_Width              := FieldByName('Deck_Width').AsFloat;
          Deck_Length             := FieldByName('Deck_Length').AsFloat;
          Max_Personnel_Capacity  := FieldByName('Max_Personnel_Capacity').AsInteger;
        end;

        aList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterTransportDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec : TTransport;
begin
 result := -1;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Capability ');
    SQL.Add('WHERE Capability_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Capability_Identifier');
    Open;

    result := RecordCount
    ;
    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TTransport.Create;

        with rec.FData do
        begin
          Transport_Index         := FieldByName('Platform_Capability_Index').AsInteger;
          Transport_Identifier    := FieldByName('Capability_Identifier').AsString;
          Carriable               := FieldByName('Carriable').AsBoolean;
          Hangar_Unit_Carried     := FieldByName('Hangar_Unit_Carried').AsBoolean;
          Deck_Unit_Carried       := FieldByName('Deck_Unit_Carried').AsBoolean;
          Personnel_Unit_Carried  := FieldByName('Personnel_Unit_Carried').AsBoolean;
          FixedWing_Carried       := FieldByName('FixedWing_Carried').AsBoolean;
          Rotary_Carried          := FieldByName('Rotary_Carried').AsBoolean;
          Amphibious_Carried      := FieldByName('Amphibious_Carried').AsBoolean;
          Land_Carried            := FieldByName('Land_Carried').AsBoolean;
          Max_Hangar_Capacity     := FieldByName('Max_Hangar_Capacity').AsInteger;
          Max_Hangar_Weight       := FieldByName('Max_Hangar_Weight').AsFloat ;
          Max_Deck_Weight         := FieldByName('Max_Deck_Weight').AsFloat;
          Deck_Width              := FieldByName('Deck_Width').AsFloat;
          Deck_Length             := FieldByName('Deck_Length').AsFloat;
          Max_Personnel_Capacity  := FieldByName('Max_Personnel_Capacity').AsInteger;
        end;

        aList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetTransportDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Capability');
    SQL.Add('WHERE Capability_Identifier = '+ QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end
end;

function TdmTTT.GetTransportDef(const aClassID: Integer; var aTransport: TTransport): Boolean;
begin
  result := False;
  aTransport := nil;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Capability ');
    SQL.Add('WHERE Platform_Capability_Index = ' + IntToStr(aClassID));
    Open;

    result := RecordCount > 0;

    if not IsEmpty then
    begin
      aTransport := TTransport.Create;

      with aTransport.FData do
      begin
        Transport_Index         := FieldByName('Platform_Capability_Index').AsInteger;
        Transport_Identifier    := FieldByName('Capability_Identifier').AsString;
        Carriable               := FieldByName('Carriable').AsBoolean;
        Hangar_Unit_Carried     := FieldByName('Hangar_Unit_Carried').AsBoolean;
        Deck_Unit_Carried       := FieldByName('Deck_Unit_Carried').AsBoolean;
        Personnel_Unit_Carried  := FieldByName('Personnel_Unit_Carried').AsBoolean;
        FixedWing_Carried       := FieldByName('FixedWing_Carried').AsBoolean;
        Rotary_Carried          := FieldByName('Rotary_Carried').AsBoolean;
        Amphibious_Carried      := FieldByName('Amphibious_Carried').AsBoolean;
        Land_Carried            := FieldByName('Land_Carried').AsBoolean;
        Max_Hangar_Capacity     := FieldByName('Max_Hangar_Capacity').AsInteger;
        Max_Hangar_Weight       := FieldByName('Max_Hangar_Weight').AsFloat ;
        Max_Deck_Weight         := FieldByName('Max_Deck_Weight').AsFloat;
        Deck_Width              := FieldByName('Deck_Width').AsFloat;
        Deck_Length             := FieldByName('Deck_Length').AsFloat;
        Max_Personnel_Capacity  := FieldByName('Max_Personnel_Capacity').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.InsertTransportDef(var aRec: TRecTransport): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin

    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Platform_Capability ');
    SQL.Add('(Capability_Identifier,Carriable,Hangar_Unit_Carried ,Deck_Unit_Carried,Personnel_Unit_Carried,');
    SQL.Add('FixedWing_Carried,Rotary_Carried,Amphibious_Carried,Land_Carried,Max_Hangar_Capacity,Max_Hangar_Weight,');
    SQL.Add('Max_Deck_Weight,Deck_Width,Deck_Length,Max_Personnel_Capacity)');
    SQL.Add(' VALUES (');

    with aRec do
    begin
      SQL.Add('''' + Transport_Identifier + ''',');
      SQL.Add(BoolToStr(Carriable) + ',');
      SQL.Add(BoolToStr(Hangar_Unit_Carried) + ',');
      SQL.Add(BoolToStr(Deck_Unit_Carried ) + ',');
      SQL.Add(BoolToStr(Personnel_Unit_Carried) + ',');
      SQL.Add(BoolToStr(FixedWing_Carried) + ',');
      SQL.Add(BoolToStr(Rotary_Carried) + ',');
      SQL.Add(BoolToStr(Amphibious_Carried) + ',');
      SQL.Add(BoolToStr(Land_Carried) + ',');
      SQL.Add(IntToStr(Max_Hangar_Capacity) + ',');
      SQL.Add(FloatToStr(Max_Hangar_Weight) + ',');
      SQL.Add(FloatToStr(Max_Deck_Weight) + ',');
      SQL.Add(FloatToStr(Deck_Width) + ',');
      SQL.Add(FloatToStr(Deck_Length) + ',');
      SQL.Add(IntToStr(Max_Personnel_Capacity)+')');

      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Platform_Capability_Index FROM Platform_Capability ');
      SQL.Add('WHERE Capability_Identifier =' + quotedStr(Transport_Identifier));
      Open;

      Result := RecordCount > 0;

      Transport_Index := FieldByName('Platform_Capability_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateTransportDef(var aRec: TRecTransport): Boolean;
begin
  result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Platform_Capability ');

    with aRec do
    begin

      SQL.Add('SET Capability_Identifier =''' + Transport_Identifier + ''',');
      SQL.Add('Carriable =' + BoolToStr(Carriable) + ',');
      SQL.Add('Hangar_Unit_Carried =' + BoolToStr(Hangar_Unit_Carried) + ',');
      SQL.Add('Deck_Unit_Carried = ' + BoolToStr(Deck_Unit_Carried) + ',');
      SQL.Add('Personnel_Unit_Carried = ' + BoolToStr(Personnel_Unit_Carried) + ',');
      SQL.Add('FixedWing_Carried =' + BoolToStr(FixedWing_Carried) + ',');
      SQL.Add('Rotary_Carried =' + BoolToStr(Rotary_Carried) + ',');
      SQL.Add('Amphibious_Carried =' + BoolToStr(Amphibious_Carried)+ ',');
      SQL.Add('Land_Carried =' + BoolToStr(Land_Carried)+ ',');
      SQL.Add('Max_Hangar_Capacity =' + inttostr(Max_Hangar_Capacity) + ',');
      SQL.Add('Max_Hangar_Weight = ' + FloatToStr(Max_Hangar_Weight) + ',');
      SQL.Add('Max_Deck_Weight = ' + FloatToStr(Max_Deck_Weight) + ',');
      SQL.Add('Deck_Width =' + FloatToStr(Deck_Width) + ',');
      SQL.Add('Deck_Length =' + FloatToStr(Deck_Length) + ',');
      SQL.Add('Max_Personnel_Capacity =' + inttostr(Max_Personnel_Capacity));
      SQL.Add(' WHERE (Platform_Capability_Index = ' + inttostr(Transport_Index) + ')');
    end;
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteTransportDef(const aTransportIndex: Integer): boolean;
begin
  result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Capability ');
    SQL.Add('WHERE Platform_Capability_Index = ' + inttostr(aTransportIndex));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Logistic_Capability');
    SQL.Add('WHERE Logistic_Index = ' + IntToStr(aTransportIndex));
    Open;

    Result := RecordCount = 0;

  end;
end;

{$ENDREGION}

{$REGION ' Base '}

function TdmTTT.GetAllBaseDef(var aList: TList): Integer;
var
  i : Integer;
  rec: TBase;
begin
  Result := -1;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Embark_Library ');
    SQL.Add('ORDER BY Embark_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TBase.Create;
        with rec.FData do
        begin
          Base_Index := FieldByName('Embark_Library_Index').AsInteger;
          Base_Identifier := FieldByName('Embark_Identifier').AsString;
          Base_Radius := FieldByName('Embark_Library_Radius').AsFloat;
          Base_Type := FieldByName('Embark_Library_TypeBase').AsInteger;
          Fuel := FieldByName('Fuel').AsFloat;
          Lubricants := FieldByName('Lubricants').AsFloat;
          FreshWater := FieldByName('Fresh_Water').AsFloat;
          Water := FieldByName('Water').AsFloat;
          Food := FieldByName('Food').AsFloat;
        end;

        aList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterBaseDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec: TBase;
begin
  Result := -1;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Embark_Library ');
    SQL.Add('WHERE Embark_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Embark_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TBase.Create;
        with rec.FData do
        begin
          Base_Index := FieldByName('Embark_Library_Index').AsInteger;
          Base_Identifier := FieldByName('Embark_Identifier').AsString;
          Base_Radius := FieldByName('Embark_Library_Radius').AsFloat;
          Base_Type := FieldByName('Embark_Library_TypeBase').AsInteger;
          Fuel := FieldByName('Fuel').AsFloat;
          Lubricants := FieldByName('Lubricants').AsFloat;
          FreshWater := FieldByName('Fresh_Water').AsFloat;
          Water := FieldByName('Water').AsFloat;
          Food := FieldByName('Food').AsFloat;
        end;

        aList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetBaseDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Embark_Library');
    SQL.Add('WHERE Embark_Identifier = '+ QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertBaseDef(var aRec: TRecBaseDefinition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    with aRec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Embark_Library (Embark_Identifier,Embark_Library_Radius,Embark_Library_TypeBase' + ',');
      SQL.Add('Fuel,Lubricants,Fresh_Water,Water,Food) ');
      SQL.Add('VALUES (');
      sql.Add(QuotedStr(Base_Identifier)+ ',');
      sql.Add(FloatToStr(Base_Radius)  + ',');
      sql.Add(IntToStr(Base_Type) + ',');
      SQL.Add(FloatToStr(Fuel) + ',');
      SQL.Add(FloatToStr(Lubricants) + ',');
      SQL.Add(FloatToStr(FreshWater) + ',');
      SQL.Add(FloatToStr(Water) + ',');
      SQL.Add(FloatToStr(Food) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Embark_Library ');
      SQL.Add('WHERE Embark_Identifier =' + QuotedStr(Base_Identifier));
      Open;

      Result := RecordCount > 0;

      Base_Index := FieldByName('Embark_Library_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateBaseDef(var aRec: TRecBaseDefinition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Embark_Library ');

    with aRec do
    begin
      SQL.Add('SET Embark_Identifier = ' + QuotedStr(Base_Identifier) + ',');
      SQL.Add('Embark_Library_Radius  = ' + FloatToStr(Base_Radius) + ',');
      SQL.Add('Embark_Library_TypeBase   = ' + IntToStr(Base_Type)+ ',' );
      SQL.Add('Fuel = ' + FloatToStr(Fuel) + ',');
      SQL.Add('Lubricants = ' + FloatToStr(Lubricants) + ',');
      SQL.Add('Fresh_Water = ' + FloatToStr(FreshWater) + ',');
      SQL.Add('Water = ' + FloatToStr(Water) + ',');
      SQL.Add('Food = ' + FloatToStr(Food) + ' ');
      SQl.Add('WHERE Embark_Library_Index = ' + inttostr(Base_Index));
    end;
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteBaseDef(const aBaseIndex: Integer): boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Embark_Library ');
    SQL.Add('WHERE (Embark_Library_Index = ' + IntToStr(aBaseIndex) + ')');
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Embark_Library');
    SQL.Add('WHERE Embark_Library_Index = ' + IntToStr(aBaseIndex));
    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.GetAllVehicle_OnBase(const aBaseID: Integer; var pList: TList): Boolean;
var
  i : Integer;
  rec : TVehicle_On_Base;
begin
  Result := False;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Embark_Library a JOIN Vehicle_Definition b ON');
    SQL.Add('a.Vehicle_Index = b.Vehicle_Index join Embark_Library c ');
    SQL.Add('on a.Embark_Library_Index = c.Embark_Library_Index ');
    SQL.Add('WHERE a.Embark_Library_Index = ' + IntToStr(aBaseID) );

    Open;

    Result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;


    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TVehicle_On_Base.Create;

        with rec.FData do
        begin
          Vehicle_OnBase_Index := FieldByName('Platform_Embark_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Base_Index := FieldByName('Embark_Library_Index').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
        end;

        with rec.FBaseDef do
        begin
          Base_Identifier := FieldByName('Embark_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertVehicle_OnBase(var aRec: TRecVehicle_On_Base): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    with aRec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Platform_Embark_Library ');
      SQL.Add('(Embark_Library_Index, Vehicle_Index, Quantity)');
      SQL.Add('VALUES ( ');
      SQL.Add(IntToStr(Base_Index) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Quantity));
      SQL.Add(')');

      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Platform_Embark_Library');
      SQL.Add('WHERE Embark_Library_Index = ' + IntToStr(Base_Index));
      SQL.Add('AND Vehicle_Index = ' + IntToStr(Vehicle_Index));
      Open;
    end;
    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Vehicle_OnBase_Index := FieldByName('Platform_Embark_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateVehicle_OnBase(var aRec: TRecVehicle_On_Base) : Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Platform_Embark_Library ');
    SQL.Add('SET ');

    with aRec do
    begin
      SQL.Add('Quantity   = ' + IntToStr(Quantity)+ '' );
      SQl.Add('WHERE (Platform_Embark_Index = ' + IntToStr(Vehicle_OnBase_Index) + ')');
    end;
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteVehicle_OnBase(const VehicleOnBaseIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Embark_Library ');
    SQL.Add('WHERE (Platform_Embark_Index = ' + IntToStr(VehicleOnBaseIndex) + ')');
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' Waypoint '}

function TdmTTT.GetAllWaypointDef(var aList: TList): Integer;
var
  i : Integer;
  rec: TWaypoint_Def;
begin
  result := -1;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM  Waypoint ');
    SQL.Add('ORDER BY Waypoint_Name');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
//      for i := 0 to aList.Count - 1 do
//      begin
//        rec := aList.Items[i];
//        rec.Free;
//      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TWaypoint_Def.Create;

        with rec.FData do
        begin
          Waypoint_Index  := FieldByName('Waypoint_Index').AsInteger;
          Termination     := FieldByName('Termination').AsInteger;
          Waypoint_Name   := FieldByName('Waypoint_Name').AsString;
          Waypoint_Centre_Lat :=  FieldByName('Waypoint_Centre_Lat').AsFloat;
          Waypoint_Centre_Long :=  FieldByName('Waypoint_Centre_Long').AsFloat;
          Dimension := FieldByName('Dimension').AsSingle;
        end;
        aList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterWaypointDef(var aList: TList; aFilter: String): Integer;
var
  i : Integer;
  rec: TWaypoint_Def;
begin
  result := -1;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM  Waypoint ');
    SQL.Add('WHERE Waypoint_Name like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Waypoint_Name');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
//      for i := 0 to aList.Count - 1 do
//      begin
//        rec := aList.Items[i];
//        rec.Free;
//      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TWaypoint_Def.Create;

        with rec.FData do
        begin
          Waypoint_Index  := FieldByName('Waypoint_Index').AsInteger;
          Termination     := FieldByName('Termination').AsInteger;
          Waypoint_Name   := FieldByName('Waypoint_Name').AsString;
          Waypoint_Centre_Lat :=  FieldByName('Waypoint_Centre_Lat').AsFloat;
          Waypoint_Centre_Long :=  FieldByName('Waypoint_Centre_Long').AsFloat;
          Dimension := FieldByName('Dimension').AsSingle;
        end;
        aList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetWaypointDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin

    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Waypoint');
    SQL.Add('WHERE Waypoint_Name = '+ QuotedStr(aClassName));

    Open;

    result := RecordCount;
  end;
end;

function TdmTTT.InsertWaypointDef(var aRec: TRecWaypoint_Def): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    with aRec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Waypoint (Waypoint_Name, Termination, Waypoint_Centre_Lat' + ',');
      SQL.Add('Waypoint_Centre_Long, Dimension)');
      SQL.Add('VALUES (');
      sql.Add(QuotedStr(Waypoint_Name)+ ',');
      sql.Add(IntToStr(Termination)  + ',');
      SQL.Add(FloatToStr(Waypoint_Centre_Lat) + ',');
      SQL.Add(FloatToStr(Waypoint_Centre_Long) + ',');
      SQL.Add(FloatToStr(Dimension) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Waypoint ');
      SQL.Add('WHERE Waypoint_Name =' + QuotedStr(Waypoint_Name));
      Open;

      Result := RecordCount > 0;

      Waypoint_Index := FieldByName('Waypoint_Index').AsInteger;

    end;
  end;
end;

function TdmTTT.UpdateWaypointDef(const aRec: TRecWaypoint_Def): Boolean;
begin
  result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Waypoint ');

    with aRec do
    begin
      SQL.Add('SET Waypoint_Name = ' + QuotedStr(Waypoint_Name) + ',');
      SQL.Add('Termination  = ' + IntToStr(Termination) + ',');
      SQL.Add('Waypoint_Centre_Lat   = ' + FloatToStr(Waypoint_Centre_Lat) + ',' );
      SQL.Add('Waypoint_Centre_Long = ' + FloatToStr(Waypoint_Centre_Long) + ',');
      SQL.Add('Dimension = ' + FloatToStr(Dimension));
      SQl.Add('WHERE Waypoint_Index = ' + inttostr(Waypoint_Index));
    end;

    ExecSQL;

    Result := True;

  end;
end;

function TdmTTT.DeleteWaypointDef(const aWaypointIndex: Integer): Boolean;
begin
  result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Waypoint ');
    SQL.Add('WHERE Waypoint_Index = ' + IntToStr(aWaypointIndex));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Waypoint');
    SQL.Add('WHERE Waypoint_Index = ' + IntToStr(aWaypointIndex));
    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.GetWaypointData(aWaypointIndex: Integer; aList: TList): Integer;
var
  i : Integer;
  rec : TWaypoint_Data;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('Select *');
    SQL.Add('FROM Waypoint_Data');
    SQL.Add('WHERE Waypoint_Index = ' + IntToStr(aWaypointIndex));
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TWaypoint_Data.Create;

        with rec.FData do
        begin
          Waypoint_Index := FieldByName('Waypoint_Index').AsInteger;
          Scripted_Event_Index := FieldByName('Scripted_Event_Index').AsInteger;
          Number_of_Event := FieldByName('Number_of_Event').AsInteger;
          Platform_Event_Index := FieldByName('Platform_Event_Index').AsInteger;
          Speed := FieldByName('Speed').AsFloat;
          Altitude := FieldByName('Altitude').AsFloat;
          Vert_Speed := FieldByName('Vert_Speed').AsInteger;
          Waypoint_Latitude := FieldByName('Waypoint_Latitude').AsFloat;
          Waypoint_Longitude := FieldByName('Waypoint_Longitude').AsFloat;
          Cartesian_Waypoint_X := FieldByName('Cartesian_Waypoint_X').AsFloat;
          Cartesian_Waypoint_Y := FieldByName('Cartesian_Waypoint_Y').AsFloat;
          Time_Waypoint := FieldByName('Time_Waypoint').AsInteger;
          Time_2_Waypoint := FieldByName('Time_2_Waypoint').AsInteger;
          HF_Datalink_Activate := FieldByName('HF_Datalink_Activate').AsInteger;
          UHF_Datalink_Activate := FieldByName('UHF_Datalink_Activate').AsInteger;
          Sonobuoy_Resource_Index := FieldByName('Sonobuoy_Resource_Index').AsInteger;
          Sonobuoy_Instance_Index := FieldByName('Sonobuoy_Instance_Index').AsInteger;
          Deploy_Sonobuoys := FieldByName('Deploy_Sonobuoys').AsInteger;
          Sonobuoy_Spacing := FieldByName('Sonobuoy_Spacing').AsFloat;
          Num_Sonobuoys_2_Drop := FieldByName('Num_Sonobuoys_2_Drop').AsInteger;
          Sonobuoy_Depth := FieldByName('Sonobuoy_Depth').AsFloat;
          Jammer_Control := FieldByName('Jammer_Control').AsInteger;
          Remove_from_Game := FieldByName('Remove_from_Game').AsInteger;
          StartMode := FieldByName('StartMode').AsInteger;
          StartAt := FieldByName('StartAt').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertWaypointData(aWaypointIndex: Integer; aRec: TRecWaypoint_Data): Boolean;
var
  query : string;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Waypoint_Data(Waypoint_Index, Scripted_Event_Index, Number_of_Event, ');
    SQL.Add('Platform_Event_Index, Speed, Altitude, Vert_Speed, Waypoint_Latitude, Waypoint_Longitude, ');
    SQL.Add('Cartesian_Waypoint_X, Cartesian_Waypoint_Y, Time_Waypoint, Time_2_Waypoint, HF_Datalink_Activate, ');
    SQL.Add('UHF_Datalink_Activate, Sonobuoy_Resource_Index, Sonobuoy_Instance_Index, Deploy_Sonobuoys, ');
    SQL.Add('Sonobuoy_Spacing, Num_Sonobuoys_2_Drop, Sonobuoy_Depth, Jammer_Control, Remove_from_Game, ');
    SQL.Add('StartMode, StartAt) values (');

    with aRec do
    begin
      SQL.Add(IntToStr(Waypoint_Index) + ', ');
      SQL.Add(IntToStr(Scripted_Event_Index) + ', ');
      SQL.Add(IntToStr(Number_of_Event) + ', ');
      SQL.Add(IntToStr(Platform_Event_Index) + ', ');
      SQL.Add(FloatToStr(Speed) + ', ');
      SQL.Add(FloatToStr(Altitude) + ', ');
      SQL.Add(IntToStr(Vert_Speed) + ', ');
      SQL.Add(FloatToStr(Waypoint_Latitude) + ', ');
      SQL.Add(FloatToStr(Waypoint_Longitude) + ', ');
      SQL.Add(FloatToStr(Cartesian_Waypoint_X) + ', ');
      SQL.Add(FloatToStr(Cartesian_Waypoint_Y) + ', ');
      SQL.Add(IntToStr(Time_Waypoint) + ', ');
      SQL.Add(IntToStr(Time_2_Waypoint) + ', ');
      SQL.Add(IntToStr(HF_Datalink_Activate) + ', ');
      SQL.Add(IntToStr(UHF_Datalink_Activate) + ', ');
      SQL.Add(IntToStr(Sonobuoy_Resource_Index) + ', ');
      SQL.Add(IntToStr(Sonobuoy_Instance_Index) + ', ');
      SQL.Add(IntToStr(Deploy_Sonobuoys) + ', ');
      SQL.Add(FloatToStr(Sonobuoy_Spacing) + ', ');
      SQL.Add(IntToStr(Num_Sonobuoys_2_Drop) + ', ');
      SQL.Add(FloatToStr(Sonobuoy_Depth) + ', ');
      SQL.Add(IntToStr(Jammer_Control) + ', ');
      SQL.Add(IntToStr(Remove_from_Game) + ', ');
      SQL.Add(IntToStr(StartMode) + ', ');
      SQL.Add(FloatToStr(StartAt) + ')');

      ExecSQL;
    end;
  end;

end;

function TdmTTT.DeleteWaypointData(const aWaypointIndex: Integer): boolean;
begin
  result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Waypoint_Data ');
    SQL.Add('WHERE Waypoint_Index = ' + IntToStr(aWaypointIndex));
    ExecSQL;

    Result := True;
  end;
end;

{$ENDREGION}

{$REGION ' SNR vs POD Curve '}

function TdmTTT.GetAllPODvsSNRCurveDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TPOD_vs_SNR_Curve_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM POD_vs_SNR_Curve_Definition');
    SQL.Add('ORDER BY Curve_Definition_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPOD_vs_SNR_Curve_Definition.Create;

        with rec.FData do
        begin
          Curve_Definition_Index := FieldByName('Curve_Definition_Index').AsInteger;
          Curve_Definition_Identifier := FieldByName('Curve_Definition_Identifier').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterPODvsSNRCurveDef(var aList: TList;
  aFilter: String): Integer;
var
  i : Integer;
  rec : TPOD_vs_SNR_Curve_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM POD_vs_SNR_Curve_Definition');
    SQL.Add('WHERE Curve_Definition_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Curve_Definition_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPOD_vs_SNR_Curve_Definition.Create;

        with rec.FData do
        begin
          Curve_Definition_Index := FieldByName('Curve_Definition_Index').AsInteger;
          Curve_Definition_Identifier := FieldByName('Curve_Definition_Identifier').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPODvsSNRCurveDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM POD_vs_SNR_Curve_Definition');
    SQL.Add('WHERE Curve_Definition_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.GetPODvsSNRCurveDef(const aClassID: Integer; var aPODvsSNRCurve: TRecPOD_vs_SNR_Curve_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM POD_vs_SNR_Curve_Definition');
    SQL.Add('WHERE Curve_Definition_Index = ' + IntToStr(aClassID));
    SQL.Add('ORDER BY Curve_Definition_Identifier');
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      with aPODvsSNRCurve do
      begin
        Curve_Definition_Index := FieldByName('Curve_Definition_Index').AsInteger;
        Curve_Definition_Identifier := FieldByName('Curve_Definition_Identifier').AsString;
      end;
    end;
  end;
end;

function TdmTTT.InsertPODvsSNRCurveDef(var aRec: TRecPOD_vs_SNR_Curve_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO POD_vs_SNR_Curve_Definition');
    SQL.Add('(Curve_Definition_Identifier)');
    SQL.Add('VALUES (');
    SQL.Add(QuotedStr(aRec.Curve_Definition_Identifier) + ')');
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM POD_vs_SNR_Curve_Definition');
    SQL.Add('WHERE Curve_Definition_Identifier = ' +
      QuotedStr(aRec.Curve_Definition_Identifier));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Curve_Definition_Index := FieldByName('Curve_Definition_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdatePODvsSNRCurveDef(var aRec: TRecPOD_vs_SNR_Curve_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE POD_vs_SNR_Curve_Definition');

    with aRec do
    begin
      SQL.Add('SET Curve_Definition_Identifier = ' + QuotedStr(Curve_Definition_Identifier));
      SQL.Add('WHERE Curve_Definition_Index = ' + IntToStr(Curve_Definition_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeletePODvsSNRCurveDef(const aCurveID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM POD_vs_SNR_Curve_Definition');
    SQL.Add('WHERE Curve_Definition_Index = ' + IntToStr(aCurveID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM POD_vs_SNR_Curve_Definition');
    SQL.Add('WHERE Curve_Definition_Index = ' + IntToStr(aCurveID));
    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.GetPODvsSNRCurvePoint(const aCurveID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TPOD_vs_SNR_Point;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM POD_vs_SNR_Point');
    SQL.Add('WHERE Curve_Definition_Index = ' + IntToStr(aCurveID));
    SQL.Add('ORDER BY SNR_Ratio');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TPOD_vs_SNR_Point.Create;

        with rec.FData do
        begin
          List_Index := FieldByName('List_Index').AsInteger;
          Curve_Definition_Index := FieldByName('Curve_Definition_Index')
            .AsInteger;
          SNR_Ratio := FieldByName('SNR_Ratio').AsFloat;
          Prob_of_Detection := FieldByName('Prob_of_Detection').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertPODvsSNRCurvePoint(var aRec: TRecPOD_vs_SNR_Point): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO POD_vs_SNR_Point');
    SQL.Add('(Curve_Definition_Index, SNR_Ratio, Prob_of_Detection)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Curve_Definition_Index) + ', ');
      SQL.Add(FloatToStr(SNR_Ratio) + ', ');
      SQL.Add(FloatToStr(Prob_of_Detection) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM POD_vs_SNR_Point');

    with aRec do
    begin
      SQL.Add('WHERE Curve_Definition_Index = ' + IntToStr(Curve_Definition_Index));
      SQL.Add('AND SNR_Ratio = ' + FloatToStr(SNR_Ratio));
      SQL.Add('AND Prob_of_Detection = ' + FloatToStr(Prob_of_Detection));
    end;

    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.List_Index := FieldByName('List_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdatePODvsSNRCurvePoint(var aRec: TRecPOD_vs_SNR_Point): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE POD_vs_SNR_Point');

    with aRec do
    begin
      SQL.Add('SET SNR_Ratio = ' + FloatToStr(SNR_Ratio));
      SQL.Add(', Prob_of_Detection = ' + FloatToStr(Prob_of_Detection));
      SQL.Add('WHERE List_Index = ' + IntToStr(List_Index));
      SQL.Add('AND Curve_Definition_Index = ' + IntToStr(Curve_Definition_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeletePODvsSNRCurvePoint(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM POD_vs_SNR_Point');

    case aDeleteType of
      1: SQL.Add('WHERE Curve_Definition_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE List_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM POD_vs_SNR_Point');

    case aDeleteType of
      1: SQL.Add('WHERE Curve_Definition_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE List_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$REGION ' Game Defaults '}
// Game Defaults

function TdmTTT.GetAllGameDefaultDef(var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Defaults;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Defaults');
    SQL.Add('ORDER BY Defaults_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Defaults.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Defaults_Identifier := FieldByName('Defaults_Identifier').AsString;
          Init_AOP := FieldByName('Init_AOP').AsInteger;
          AOP_Decrease_Rate := FieldByName('AOP_Decrease_Rate').AsSingle;
          Sono_Num_2_Initiate := FieldByName('Sono_Num_2_Initiate').AsInteger;
          Trans_Range_2_Air := FieldByName('Trans_Range_2_Air').AsSingle;
          Trans_Range_2_Sur := FieldByName('Trans_Range_2_Sur').AsSingle;
          Init_AOP_Modifier := FieldByName('Init_AOP_Modifier').AsSingle;
          Visual_Detect_Range := FieldByName('Visual_Detect_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Visual_Range := FieldByName('Max_Visual_Range').AsSingle;
          EO_Detection_Factor := FieldByName('EO_Detection_Factor').AsSingle;
          Visual_Detection_Factor := FieldByName('Visual_Detection_Factor')
            .AsSingle;
          EO_Ident_Factor := FieldByName('EO_Ident_Factor').AsSingle;
          Visual_Ident_Factor := FieldByName('Visual_Ident_Factor').AsSingle;
          Sine_Period_Distance := FieldByName('Sine_Period_Distance').AsSingle;
          Sine_Period_Amplitude := FieldByName('Sine_Period_Amplitude')
            .AsSingle;
          Short_Period_Distance := FieldByName('Short_Period_Distance')
            .AsSingle;
          Short_Period_Amplitude := FieldByName('Short_Period_Amplitude')
            .AsSingle;
          Long_Period_Distance := FieldByName('Long_Period_Distance').AsSingle;
          Long_Period_Amplitude := FieldByName('Long_Period_Amplitude')
            .AsSingle;
          Very_Period_Distance := FieldByName('Very_Period_Distance').AsSingle;
          Very_Period_Amplitude := FieldByName('Very_Period_Amplitude')
            .AsSingle;
          Air_Lost_Time := FieldByName('Air_Lost_Time').AsInteger;
          Sur_Lost_Time := FieldByName('Sur_Lost_Time').AsInteger;
          Sub_Lost_Time := FieldByName('Sub_Lost_Time').AsInteger;
          ESM_Bearing_Lost_Time := FieldByName('ESM_Bearing_Lost_Time')
            .AsInteger;
          Sonar_Bearing_Lost_Time := FieldByName('Sonar_Bearing_Lost_Time')
            .AsInteger;
          Stale_Air_Time := FieldByName('Stale_Air_Time').AsInteger;
          Stale_Sur_Time := FieldByName('Stale_Sur_Time').AsInteger;
          Stale_Sub_Time := FieldByName('Stale_Sub_Time').AsInteger;
          Stale_ESM_Bearing_Time := FieldByName('Stale_ESM_Bearing_Time')
            .AsInteger;
          Stale_Sonar_Bearing_Time := FieldByName('Stale_Sonar_Bearing_Time')
            .AsInteger;
          POD_Check_Time := FieldByName('POD_Check_Time').AsInteger;
          TMA_Range_Rate := FieldByName('TMA_Range_Rate').AsSingle;
          Frequency_Identity_Weighting := FieldByName
            ('Frequency_Identity_Weighting').AsSingle;
          PRF_Identity_Weighting := FieldByName('PRF_Identity_Weighting')
            .AsSingle;
          Pulsewidth_Identity_Weighting := FieldByName
            ('Pulsewidth_Identity_Weighting').AsSingle;
          Scan_Period_Identity_Weighting := FieldByName
            ('Scan_Period_Identity_Weighting').AsSingle;
          Crew_Eff_Heading_Error := FieldByName('Crew_Eff_Heading_Error')
            .AsSingle;
          Crew_Eff_Speed_Error := FieldByName('Crew_Eff_Speed_Error').AsSingle;
          TMA_Relative_Bearing_Rate := FieldByName('TMA_Relative_Bearing_Rate')
            .AsSingle;
          Passive_Sonar_Max_Course_Error := FieldByName
            ('Passive_Sonar_Max_Course_Error').AsSingle;
          Passive_Sonar_Max_Speed_Error := FieldByName
            ('Passive_Sonar_Max_Speed_Error').AsSingle;
          ESM_Error_Corr_Rate := FieldByName('ESM_Error_Corr_Rate').AsSingle;
          Chaff_Altitude_Threshold := FieldByName('Chaff_Altitude_Threshold')
            .AsSingle;
          MHS_Flash_Delay_Time := FieldByName('MHS_Flash_Delay_Time').AsSingle;
          MHS_Immed_Delay_Time := FieldByName('MHS_Immed_Delay_Time').AsSingle;
          MHS_Priority_Delay_Time := FieldByName('MHS_Priority_Delay_Time')
            .AsSingle;
          MHS_Routine_Delay_Time := FieldByName('MHS_Routine_Delay_Time')
            .AsSingle;
          Max_UWT_Range := FieldByName('Max_UWT_Range').AsSingle;
          Max_HF_Detect_Range := FieldByName('Max_HF_Detect_Range').AsSingle;
          Max_UHF_Detect_Range := FieldByName('Max_UHF_Detect_Range').AsSingle;
          Max_IFF_Range := FieldByName('Max_IFF_Range').AsSingle;
          Track_History_Air_Sample_Rate := FieldByName
            ('Track_History_Air_Sample_Rate').AsInteger;
          Track_History_Air_Max_Points := FieldByName
            ('Track_History_Air_Max_Points').AsInteger;
          Track_History_Sample_Rate := FieldByName('Track_History_Sample_Rate')
            .AsInteger;
          Track_History_Max_Points := FieldByName('Track_History_Max_Points')
            .AsInteger;
          Auto_Gun_Interception_Range := FieldByName
            ('Auto_Gun_Interception_Range').AsSingle;
          Auto_Gun_Threshold_Speed := FieldByName('Auto_Gun_Threshold_Speed')
            .AsSingle;
          Clutter_Reduction_Scale := FieldByName('Clutter_Reduction_Scale')
            .AsSingle;
          Jam_Break_Lock_Time_Interval := FieldByName
            ('Jam_Break_Lock_Time_Interval').AsInteger;
          Missile_Reacquisition_Time := FieldByName
            ('Missile_Reacquisition_Time')
            .AsInteger;
          Seduction_Bloom_Altitude := FieldByName('Seduction_Bloom_Altitude')
            .AsInteger;
          Seduction_Bloom_Range := FieldByName('Seduction_Bloom_Range')
            .AsSingle;
          HF_Datalink_MHS_Trans_Freq := FieldByName
            ('HF_Datalink_MHS_Trans_Freq').AsSingle;
          UHF_Datalink_MHS_Trans_Freq := FieldByName
            ('UHF_Datalink_MHS_Trans_Freq').AsSingle;
          Max_Num_Radar_Classes := FieldByName('Max_Num_Radar_Classes')
            .AsInteger;
          Max_Num_Sonar_Classes := FieldByName('Max_Num_Sonar_Classes')
            .AsInteger;
          Max_Num_Sonobuoy_Classes := FieldByName('Max_Num_Sonobuoy_Classes')
            .AsInteger;
          Max_Num_EO_Classes := FieldByName('Max_Num_EO_Classes').AsInteger;
          Max_Num_ESM_Classes := FieldByName('Max_Num_ESM_Classes').AsInteger;
          Max_Num_MAD_Classes := FieldByName('Max_Num_MAD_Classes').AsInteger;
          Max_Num_Fitted_Weap_Classes := FieldByName
            ('Max_Num_Fitted_Weap_Classes').AsInteger;
          Max_Num_Point_Effect_Classes := FieldByName
            ('Max_Num_Point_Effect_Classes').AsInteger;
          HAFO_Min_Range := FieldByName('HAFO_Min_Range').AsSingle;
          HAFO_Max_Range := FieldByName('HAFO_Max_Range').AsSingle;
          Engage_Guide_Stale_Target_Time := FieldByName
            ('Engage_Guide_Stale_Target_Time').AsInteger;
          Outrun_Guide_Stale_Target_Time := FieldByName
            ('Outrun_Guide_Stale_Target_Time').AsInteger;
          Shadow_Guide_Stale_Target_Time := FieldByName
            ('Shadow_Guide_Stale_Target_Time').AsInteger;
          Sonobuoy_Air_Deceleration := FieldByName('Sonobuoy_Air_Deceleration')
            .AsSingle;
          Sonobuoy_Air_Descent_Rate := FieldByName('Sonobuoy_Air_Descent_Rate')
            .AsSingle;
          Depth_Charge_Air_Deceleration := FieldByName
            ('Depth_Charge_Air_Deceleration').AsSingle;
          Depth_Charge_Air_Descent_Rate := FieldByName
            ('Depth_Charge_Air_Descent_Rate').AsSingle;
          Missile_Sea_Check_Interval := FieldByName
            ('Missile_Sea_Check_Interval')
            .AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterGameDefaultDef(var aList: TList;
  aFilter: String): Integer;
var
  i : Integer;
  rec : TGame_Defaults;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Defaults');
    SQL.Add('WHERE Defaults_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Defaults_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Defaults.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Defaults_Identifier := FieldByName('Defaults_Identifier').AsString;
          Init_AOP := FieldByName('Init_AOP').AsInteger;
          AOP_Decrease_Rate := FieldByName('AOP_Decrease_Rate').AsSingle;
          Sono_Num_2_Initiate := FieldByName('Sono_Num_2_Initiate').AsInteger;
          Trans_Range_2_Air := FieldByName('Trans_Range_2_Air').AsSingle;
          Trans_Range_2_Sur := FieldByName('Trans_Range_2_Sur').AsSingle;
          Init_AOP_Modifier := FieldByName('Init_AOP_Modifier').AsSingle;
          Visual_Detect_Range := FieldByName('Visual_Detect_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Visual_Range := FieldByName('Max_Visual_Range').AsSingle;
          EO_Detection_Factor := FieldByName('EO_Detection_Factor').AsSingle;
          Visual_Detection_Factor := FieldByName('Visual_Detection_Factor')
            .AsSingle;
          EO_Ident_Factor := FieldByName('EO_Ident_Factor').AsSingle;
          Visual_Ident_Factor := FieldByName('Visual_Ident_Factor').AsSingle;
          Sine_Period_Distance := FieldByName('Sine_Period_Distance').AsSingle;
          Sine_Period_Amplitude := FieldByName('Sine_Period_Amplitude')
            .AsSingle;
          Short_Period_Distance := FieldByName('Short_Period_Distance')
            .AsSingle;
          Short_Period_Amplitude := FieldByName('Short_Period_Amplitude')
            .AsSingle;
          Long_Period_Distance := FieldByName('Long_Period_Distance').AsSingle;
          Long_Period_Amplitude := FieldByName('Long_Period_Amplitude')
            .AsSingle;
          Very_Period_Distance := FieldByName('Very_Period_Distance').AsSingle;
          Very_Period_Amplitude := FieldByName('Very_Period_Amplitude')
            .AsSingle;
          Air_Lost_Time := FieldByName('Air_Lost_Time').AsInteger;
          Sur_Lost_Time := FieldByName('Sur_Lost_Time').AsInteger;
          Sub_Lost_Time := FieldByName('Sub_Lost_Time').AsInteger;
          ESM_Bearing_Lost_Time := FieldByName('ESM_Bearing_Lost_Time')
            .AsInteger;
          Sonar_Bearing_Lost_Time := FieldByName('Sonar_Bearing_Lost_Time')
            .AsInteger;
          Stale_Air_Time := FieldByName('Stale_Air_Time').AsInteger;
          Stale_Sur_Time := FieldByName('Stale_Sur_Time').AsInteger;
          Stale_Sub_Time := FieldByName('Stale_Sub_Time').AsInteger;
          Stale_ESM_Bearing_Time := FieldByName('Stale_ESM_Bearing_Time')
            .AsInteger;
          Stale_Sonar_Bearing_Time := FieldByName('Stale_Sonar_Bearing_Time')
            .AsInteger;
          POD_Check_Time := FieldByName('POD_Check_Time').AsInteger;
          TMA_Range_Rate := FieldByName('TMA_Range_Rate').AsSingle;
          Frequency_Identity_Weighting := FieldByName
            ('Frequency_Identity_Weighting').AsSingle;
          PRF_Identity_Weighting := FieldByName('PRF_Identity_Weighting')
            .AsSingle;
          Pulsewidth_Identity_Weighting := FieldByName
            ('Pulsewidth_Identity_Weighting').AsSingle;
          Scan_Period_Identity_Weighting := FieldByName
            ('Scan_Period_Identity_Weighting').AsSingle;
          Crew_Eff_Heading_Error := FieldByName('Crew_Eff_Heading_Error')
            .AsSingle;
          Crew_Eff_Speed_Error := FieldByName('Crew_Eff_Speed_Error').AsSingle;
          TMA_Relative_Bearing_Rate := FieldByName('TMA_Relative_Bearing_Rate')
            .AsSingle;
          Passive_Sonar_Max_Course_Error := FieldByName
            ('Passive_Sonar_Max_Course_Error').AsSingle;
          Passive_Sonar_Max_Speed_Error := FieldByName
            ('Passive_Sonar_Max_Speed_Error').AsSingle;
          ESM_Error_Corr_Rate := FieldByName('ESM_Error_Corr_Rate').AsSingle;
          Chaff_Altitude_Threshold := FieldByName('Chaff_Altitude_Threshold')
            .AsSingle;
          MHS_Flash_Delay_Time := FieldByName('MHS_Flash_Delay_Time').AsSingle;
          MHS_Immed_Delay_Time := FieldByName('MHS_Immed_Delay_Time').AsSingle;
          MHS_Priority_Delay_Time := FieldByName('MHS_Priority_Delay_Time')
            .AsSingle;
          MHS_Routine_Delay_Time := FieldByName('MHS_Routine_Delay_Time')
            .AsSingle;
          Max_UWT_Range := FieldByName('Max_UWT_Range').AsSingle;
          Max_HF_Detect_Range := FieldByName('Max_HF_Detect_Range').AsSingle;
          Max_UHF_Detect_Range := FieldByName('Max_UHF_Detect_Range').AsSingle;
          Max_IFF_Range := FieldByName('Max_IFF_Range').AsSingle;
          Track_History_Air_Sample_Rate := FieldByName
            ('Track_History_Air_Sample_Rate').AsInteger;
          Track_History_Air_Max_Points := FieldByName
            ('Track_History_Air_Max_Points').AsInteger;
          Track_History_Sample_Rate := FieldByName('Track_History_Sample_Rate')
            .AsInteger;
          Track_History_Max_Points := FieldByName('Track_History_Max_Points')
            .AsInteger;
          Auto_Gun_Interception_Range := FieldByName
            ('Auto_Gun_Interception_Range').AsSingle;
          Auto_Gun_Threshold_Speed := FieldByName('Auto_Gun_Threshold_Speed')
            .AsSingle;
          Clutter_Reduction_Scale := FieldByName('Clutter_Reduction_Scale')
            .AsSingle;
          Jam_Break_Lock_Time_Interval := FieldByName
            ('Jam_Break_Lock_Time_Interval').AsInteger;
          Missile_Reacquisition_Time := FieldByName
            ('Missile_Reacquisition_Time')
            .AsInteger;
          Seduction_Bloom_Altitude := FieldByName('Seduction_Bloom_Altitude')
            .AsInteger;
          Seduction_Bloom_Range := FieldByName('Seduction_Bloom_Range')
            .AsSingle;
          HF_Datalink_MHS_Trans_Freq := FieldByName
            ('HF_Datalink_MHS_Trans_Freq').AsSingle;
          UHF_Datalink_MHS_Trans_Freq := FieldByName
            ('UHF_Datalink_MHS_Trans_Freq').AsSingle;
          Max_Num_Radar_Classes := FieldByName('Max_Num_Radar_Classes')
            .AsInteger;
          Max_Num_Sonar_Classes := FieldByName('Max_Num_Sonar_Classes')
            .AsInteger;
          Max_Num_Sonobuoy_Classes := FieldByName('Max_Num_Sonobuoy_Classes')
            .AsInteger;
          Max_Num_EO_Classes := FieldByName('Max_Num_EO_Classes').AsInteger;
          Max_Num_ESM_Classes := FieldByName('Max_Num_ESM_Classes').AsInteger;
          Max_Num_MAD_Classes := FieldByName('Max_Num_MAD_Classes').AsInteger;
          Max_Num_Fitted_Weap_Classes := FieldByName
            ('Max_Num_Fitted_Weap_Classes').AsInteger;
          Max_Num_Point_Effect_Classes := FieldByName
            ('Max_Num_Point_Effect_Classes').AsInteger;
          HAFO_Min_Range := FieldByName('HAFO_Min_Range').AsSingle;
          HAFO_Max_Range := FieldByName('HAFO_Max_Range').AsSingle;
          Engage_Guide_Stale_Target_Time := FieldByName
            ('Engage_Guide_Stale_Target_Time').AsInteger;
          Outrun_Guide_Stale_Target_Time := FieldByName
            ('Outrun_Guide_Stale_Target_Time').AsInteger;
          Shadow_Guide_Stale_Target_Time := FieldByName
            ('Shadow_Guide_Stale_Target_Time').AsInteger;
          Sonobuoy_Air_Deceleration := FieldByName('Sonobuoy_Air_Deceleration')
            .AsSingle;
          Sonobuoy_Air_Descent_Rate := FieldByName('Sonobuoy_Air_Descent_Rate')
            .AsSingle;
          Depth_Charge_Air_Deceleration := FieldByName
            ('Depth_Charge_Air_Deceleration').AsSingle;
          Depth_Charge_Air_Descent_Rate := FieldByName
            ('Depth_Charge_Air_Descent_Rate').AsSingle;
          Missile_Sea_Check_Interval := FieldByName
            ('Missile_Sea_Check_Interval')
            .AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetGameDefaultDef(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Defaults');
    SQL.Add('WHERE Defaults_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertGameDefaultDef(var aRec: TRecGame_Defaults): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Defaults');
    SQL.Add('(Defaults_Identifier, Init_AOP, AOP_Decrease_Rate,');
    SQL.Add('Sono_Num_2_Initiate, Trans_Range_2_Air, Trans_Range_2_Sur,');
    SQL.Add('Init_AOP_Modifier, Visual_Detect_Range, Known_Cross_Section,');
    SQL.Add('Max_Visual_Range, EO_Detection_Factor, Visual_Detection_Factor,');
    SQL.Add('EO_Ident_Factor, Visual_Ident_Factor, Sine_Period_Distance,');
    SQL.Add('Sine_Period_Amplitude, Short_Period_Distance,');
    SQL.Add('Short_Period_Amplitude, Long_Period_Distance,');
    SQL.Add('Long_Period_Amplitude, Very_Period_Distance,');
    SQL.Add('Very_Period_Amplitude, Air_Lost_Time, Sur_Lost_Time,');
    SQL.Add('Sub_Lost_Time, ESM_Bearing_Lost_Time, Sonar_Bearing_Lost_Time,');
    SQL.Add('Stale_Air_Time, Stale_Sur_Time, Stale_Sub_Time,');
    SQL.Add('Stale_ESM_Bearing_Time, Stale_Sonar_Bearing_Time,');
    SQL.Add('POD_Check_Time, TMA_Range_Rate, Frequency_Identity_Weighting,');
    SQL.Add('PRF_Identity_Weighting, Pulsewidth_Identity_Weighting,');
    SQL.Add('Scan_Period_Identity_Weighting, Crew_Eff_Heading_Error,');
    SQL.Add('Crew_Eff_Speed_Error, TMA_Relative_Bearing_Rate,');
    SQL.Add('Passive_Sonar_Max_Course_Error, Passive_Sonar_Max_Speed_Error,');
    SQL.Add('ESM_Error_Corr_Rate, Chaff_Altitude_Threshold,');
    SQL.Add('MHS_Flash_Delay_Time, MHS_Immed_Delay_Time,');
    SQL.Add('MHS_Priority_Delay_Time, MHS_Routine_Delay_Time, Max_UWT_Range,');
    SQL.Add('Max_HF_Detect_Range, Max_UHF_Detect_Range, Max_IFF_Range,');
    SQL.Add('Track_History_Air_Sample_Rate, Track_History_Air_Max_Points,');
    SQL.Add('Track_History_Sample_Rate, Track_History_Max_Points,');
    SQL.Add('Auto_Gun_Interception_Range, Auto_Gun_Threshold_Speed,');
    SQL.Add('Clutter_Reduction_Scale, Jam_Break_Lock_Time_Interval,');
    SQL.Add('Missile_Reacquisition_Time, Seduction_Bloom_Altitude,');
    SQL.Add('Seduction_Bloom_Range, HF_Datalink_MHS_Trans_Freq,');
    SQL.Add('UHF_Datalink_MHS_Trans_Freq, Max_Num_Radar_Classes,');
    SQL.Add('Max_Num_Sonar_Classes, Max_Num_Sonobuoy_Classes,');
    SQL.Add('Max_Num_EO_Classes, Max_Num_ESM_Classes, Max_Num_MAD_Classes,');
    SQL.Add('Max_Num_Fitted_Weap_Classes, Max_Num_Point_Effect_Classes,');
    SQL.Add('HAFO_Min_Range, HAFO_Max_Range, Engage_Guide_Stale_Target_Time,');
    SQL.Add('Outrun_Guide_Stale_Target_Time, Shadow_Guide_Stale_Target_Time,');
    SQL.Add('Sonobuoy_Air_Deceleration, Sonobuoy_Air_Descent_Rate,');
    SQL.Add('Depth_Charge_Air_Deceleration, Depth_Charge_Air_Descent_Rate,');
    SQL.Add('Missile_Sea_Check_Interval)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Defaults_Identifier) + ', ');
      SQL.Add(IntToStr(Init_AOP) + ', ');
      SQL.Add(FloatToStr(AOP_Decrease_Rate) + ', ');
      SQL.Add(IntToStr(Sono_Num_2_Initiate) + ', ');
      SQL.Add(FloatToStr(Trans_Range_2_Air) + ', ');
      SQL.Add(FloatToStr(Trans_Range_2_Sur) + ', ');
      SQL.Add(FloatToStr(Init_AOP_Modifier) + ', ');
      SQL.Add(FloatToStr(Visual_Detect_Range) + ', ');
      SQL.Add(FloatToStr(Known_Cross_Section) + ', ');
      SQL.Add(FloatToStr(Max_Visual_Range) + ', ');
      SQL.Add(FloatToStr(EO_Detection_Factor) + ', ');
      SQL.Add(FloatToStr(Visual_Detection_Factor) + ', ');
      SQL.Add(FloatToStr(EO_Ident_Factor) + ', ');
      SQL.Add(FloatToStr(Visual_Ident_Factor) + ', ');
      SQL.Add(FloatToStr(Sine_Period_Distance) + ', ');
      SQL.Add(FloatToStr(Sine_Period_Amplitude) + ', ');
      SQL.Add(FloatToStr(Short_Period_Distance) + ', ');
      SQL.Add(FloatToStr(Short_Period_Amplitude) + ', ');
      SQL.Add(FloatToStr(Long_Period_Distance) + ', ');
      SQL.Add(FloatToStr(Long_Period_Amplitude) + ', ');
      SQL.Add(FloatToStr(Very_Period_Distance) + ', ');
      SQL.Add(FloatToStr(Very_Period_Amplitude) + ', ');
      SQL.Add(IntToStr(Air_Lost_Time) + ', ');
      SQL.Add(IntToStr(Sur_Lost_Time) + ', ');
      SQL.Add(IntToStr(Sub_Lost_Time) + ', ');
      SQL.Add(IntToStr(ESM_Bearing_Lost_Time) + ', ');
      SQL.Add(IntToStr(Sonar_Bearing_Lost_Time) + ', ');
      SQL.Add(IntToStr(Stale_Air_Time) + ', ');
      SQL.Add(IntToStr(Stale_Sur_Time) + ', ');
      SQL.Add(IntToStr(Stale_Sub_Time) + ', ');
      SQL.Add(IntToStr(Stale_ESM_Bearing_Time) + ', ');
      SQL.Add(IntToStr(Stale_Sonar_Bearing_Time) + ', ');
      SQL.Add(IntToStr(POD_Check_Time) + ', ');
      SQL.Add(FloatToStr(TMA_Range_Rate) + ', ');
      SQL.Add(FloatToStr(Frequency_Identity_Weighting) + ', ');
      SQL.Add(FloatToStr(PRF_Identity_Weighting) + ', ');
      SQL.Add(FloatToStr(Pulsewidth_Identity_Weighting) + ', ');
      SQL.Add(FloatToStr(Scan_Period_Identity_Weighting) + ', ');
      SQL.Add(FloatToStr(Crew_Eff_Heading_Error) + ', ');
      SQL.Add(FloatToStr(Crew_Eff_Speed_Error) + ', ');
      SQL.Add(FloatToStr(TMA_Relative_Bearing_Rate) + ', ');
      SQL.Add(FloatToStr(Passive_Sonar_Max_Course_Error) + ', ');
      SQL.Add(FloatToStr(Passive_Sonar_Max_Speed_Error) + ', ');
      SQL.Add(FloatToStr(ESM_Error_Corr_Rate) + ', ');
      SQL.Add(FloatToStr(Chaff_Altitude_Threshold) + ', ');
      SQL.Add(FloatToStr(MHS_Flash_Delay_Time) + ', ');
      SQL.Add(FloatToStr(MHS_Immed_Delay_Time) + ', ');
      SQL.Add(FloatToStr(MHS_Priority_Delay_Time) + ', ');
      SQL.Add(FloatToStr(MHS_Routine_Delay_Time) + ', ');
      SQL.Add(FloatToStr(Max_UWT_Range) + ', ');
      SQL.Add(FloatToStr(Max_HF_Detect_Range) + ', ');
      SQL.Add(FloatToStr(Max_UHF_Detect_Range) + ', ');
      SQL.Add(FloatToStr(Max_IFF_Range) + ', ');
      SQL.Add(IntToStr(Track_History_Air_Sample_Rate) + ', ');
      SQL.Add(IntToStr(Track_History_Air_Max_Points) + ', ');
      SQL.Add(IntToStr(Track_History_Sample_Rate) + ', ');
      SQL.Add(IntToStr(Track_History_Max_Points) + ', ');
      SQL.Add(FloatToStr(Auto_Gun_Interception_Range) + ', ');
      SQL.Add(FloatToStr(Auto_Gun_Threshold_Speed) + ', ');
      SQL.Add(FloatToStr(Clutter_Reduction_Scale) + ', ');
      SQL.Add(IntToStr(Jam_Break_Lock_Time_Interval) + ', ');
      SQL.Add(IntToStr(Missile_Reacquisition_Time) + ', ');
      SQL.Add(IntToStr(Seduction_Bloom_Altitude) + ', ');
      SQL.Add(FloatToStr(Seduction_Bloom_Range) + ', ');
      SQL.Add(FloatToStr(HF_Datalink_MHS_Trans_Freq) + ', ');
      SQL.Add(FloatToStr(UHF_Datalink_MHS_Trans_Freq) + ', ');
      SQL.Add(IntToStr(Max_Num_Radar_Classes) + ', ');
      SQL.Add(IntToStr(Max_Num_Sonar_Classes) + ', ');
      SQL.Add(IntToStr(Max_Num_Sonobuoy_Classes) + ', ');
      SQL.Add(IntToStr(Max_Num_EO_Classes) + ', ');
      SQL.Add(IntToStr(Max_Num_ESM_Classes) + ', ');
      SQL.Add(IntToStr(Max_Num_MAD_Classes) + ', ');
      SQL.Add(IntToStr(Max_Num_Fitted_Weap_Classes) + ', ');
      SQL.Add(IntToStr(Max_Num_Point_Effect_Classes) + ', ');
      SQL.Add(FloatToStr(HAFO_Min_Range) + ', ');
      SQL.Add(FloatToStr(HAFO_Max_Range) + ', ');
      SQL.Add(IntToStr(Engage_Guide_Stale_Target_Time) + ', ');
      SQL.Add(IntToStr(Outrun_Guide_Stale_Target_Time) + ', ');
      SQL.Add(IntToStr(Shadow_Guide_Stale_Target_Time) + ', ');
      SQL.Add(FloatToStr(Sonobuoy_Air_Deceleration) + ', ');
      SQL.Add(FloatToStr(Sonobuoy_Air_Descent_Rate) + ', ');
      SQL.Add(FloatToStr(Depth_Charge_Air_Deceleration) + ', ');
      SQL.Add(FloatToStr(Depth_Charge_Air_Descent_Rate) + ', ');
      SQL.Add(IntToStr(Missile_Sea_Check_Interval) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Defaults');
    SQL.Add('WHERE Defaults_Identifier = ' +
      QuotedStr(aRec.Defaults_Identifier));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Defaults_Index := FieldByName('Defaults_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateGameDefaultDef(var aRec: TRecGame_Defaults): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Defaults');

    with aRec do
    begin
      SQL.Add('SET Defaults_Identifier = ' + QuotedStr(Defaults_Identifier));
      SQL.Add(', Init_AOP = ' + IntToStr(Init_AOP));
      SQL.Add(', AOP_Decrease_Rate = ' + FloatToStr(AOP_Decrease_Rate));
      SQL.Add(', Sono_Num_2_Initiate = ' + IntToStr(Sono_Num_2_Initiate));
      SQL.Add(', Trans_Range_2_Air = ' + FloatToStr(Trans_Range_2_Air));
      SQL.Add(', Trans_Range_2_Sur = ' + FloatToStr(Trans_Range_2_Sur));
      SQL.Add(', Init_AOP_Modifier = ' + FloatToStr(Init_AOP_Modifier));
      SQL.Add(', Visual_Detect_Range = ' + FloatToStr(Visual_Detect_Range));
      SQL.Add(', Known_Cross_Section = ' + FloatToStr(Known_Cross_Section));
      SQL.Add(', Max_Visual_Range = ' + FloatToStr(Max_Visual_Range));
      SQL.Add(', EO_Detection_Factor = ' + FloatToStr(EO_Detection_Factor));
      SQL.Add(', Visual_Detection_Factor = ' +
        FloatToStr(Visual_Detection_Factor));
      SQL.Add(', EO_Ident_Factor = ' + FloatToStr(EO_Ident_Factor));
      SQL.Add(', Visual_Ident_Factor = ' + FloatToStr(Visual_Ident_Factor));
      SQL.Add(', Sine_Period_Distance = ' + FloatToStr(Sine_Period_Distance));
      SQL.Add(', Sine_Period_Amplitude = ' + FloatToStr(Sine_Period_Amplitude));
      SQL.Add(', Short_Period_Distance = ' + FloatToStr(Short_Period_Distance));
      SQL.Add(', Short_Period_Amplitude = ' +
        FloatToStr(Short_Period_Amplitude));
      SQL.Add(', Long_Period_Distance = ' + FloatToStr(Long_Period_Distance));
      SQL.Add(', Long_Period_Amplitude = ' + FloatToStr(Long_Period_Amplitude));
      SQL.Add(', Very_Period_Distance = ' + FloatToStr(Very_Period_Distance));
      SQL.Add(', Very_Period_Amplitude = ' + FloatToStr(Very_Period_Amplitude));
      SQL.Add(', Air_Lost_Time = ' + IntToStr(Air_Lost_Time));
      SQL.Add(', Sur_Lost_Time = ' + IntToStr(Sur_Lost_Time));
      SQL.Add(', Sub_Lost_Time = ' + IntToStr(Sub_Lost_Time));
      SQL.Add(', ESM_Bearing_Lost_Time = ' + IntToStr(ESM_Bearing_Lost_Time));
      SQL.Add(', Sonar_Bearing_Lost_Time = ' +
        IntToStr(Sonar_Bearing_Lost_Time));
      SQL.Add(', Stale_Air_Time = ' + IntToStr(Stale_Air_Time));
      SQL.Add(', Stale_Sur_Time = ' + IntToStr(Stale_Sur_Time));
      SQL.Add(', Stale_Sub_Time = ' + IntToStr(Stale_Sub_Time));
      SQL.Add(', Stale_ESM_Bearing_Time = ' + IntToStr(Stale_ESM_Bearing_Time));
      SQL.Add(', Stale_Sonar_Bearing_Time = ' +
        IntToStr(Stale_Sonar_Bearing_Time));
      SQL.Add(', POD_Check_Time = ' + IntToStr(POD_Check_Time));
      SQL.Add(', TMA_Range_Rate = ' + FloatToStr(TMA_Range_Rate));
      SQL.Add(', Frequency_Identity_Weighting = ' +
        FloatToStr(Frequency_Identity_Weighting));
      SQL.Add(', PRF_Identity_Weighting = ' +
        FloatToStr(PRF_Identity_Weighting));
      SQL.Add(', Pulsewidth_Identity_Weighting = ' +
        FloatToStr(Pulsewidth_Identity_Weighting));
      SQL.Add(', Scan_Period_Identity_Weighting = ' +
        FloatToStr(Scan_Period_Identity_Weighting));
      SQL.Add(', Crew_Eff_Heading_Error = ' +
        FloatToStr(Crew_Eff_Heading_Error));
      SQL.Add(', Crew_Eff_Speed_Error = ' + FloatToStr(Crew_Eff_Speed_Error));
      SQL.Add(', TMA_Relative_Bearing_Rate = ' +
        FloatToStr(TMA_Relative_Bearing_Rate));
      SQL.Add(', Passive_Sonar_Max_Course_Error = ' +
        FloatToStr(Passive_Sonar_Max_Course_Error));
      SQL.Add(', Passive_Sonar_Max_Speed_Error = ' +
        FloatToStr(Passive_Sonar_Max_Speed_Error));
      SQL.Add(', ESM_Error_Corr_Rate = ' + FloatToStr(ESM_Error_Corr_Rate));
      SQL.Add(', Chaff_Altitude_Threshold = ' +
        FloatToStr(Chaff_Altitude_Threshold));
      SQL.Add(', MHS_Flash_Delay_Time = ' + FloatToStr(MHS_Flash_Delay_Time));
      SQL.Add(', MHS_Immed_Delay_Time = ' + FloatToStr(MHS_Immed_Delay_Time));
      SQL.Add(', MHS_Priority_Delay_Time = ' +
        FloatToStr(MHS_Priority_Delay_Time));
      SQL.Add(', MHS_Routine_Delay_Time = ' +
        FloatToStr(MHS_Routine_Delay_Time));
      SQL.Add(', Max_UWT_Range = ' + FloatToStr(Max_UWT_Range));
      SQL.Add(', Max_HF_Detect_Range = ' + FloatToStr(Max_HF_Detect_Range));
      SQL.Add(', Max_UHF_Detect_Range = ' + FloatToStr(Max_UHF_Detect_Range));
      SQL.Add(', Max_IFF_Range = ' + FloatToStr(Max_IFF_Range));
      SQL.Add(', Track_History_Air_Sample_Rate = ' +
        IntToStr(Track_History_Air_Sample_Rate));
      SQL.Add(', Track_History_Air_Max_Points = ' +
        IntToStr(Track_History_Air_Max_Points));
      SQL.Add(', Track_History_Sample_Rate = ' +
        IntToStr(Track_History_Sample_Rate));
      SQL.Add(', Track_History_Max_Points = ' +
        IntToStr(Track_History_Max_Points));
      SQL.Add(', Auto_Gun_Interception_Range = ' +
        FloatToStr(Auto_Gun_Interception_Range));
      SQL.Add(', Auto_Gun_Threshold_Speed = ' +
        FloatToStr(Auto_Gun_Threshold_Speed));
      SQL.Add(', Clutter_Reduction_Scale = ' +
        FloatToStr(Clutter_Reduction_Scale));
      SQL.Add(', Jam_Break_Lock_Time_Interval = ' +
        IntToStr(Jam_Break_Lock_Time_Interval));
      SQL.Add(', Missile_Reacquisition_Time = ' +
        IntToStr(Missile_Reacquisition_Time));
      SQL.Add(', Seduction_Bloom_Altitude = ' +
        IntToStr(Seduction_Bloom_Altitude));
      SQL.Add(', Seduction_Bloom_Range = ' + FloatToStr(Seduction_Bloom_Range));
      SQL.Add(', HF_Datalink_MHS_Trans_Freq = ' +
        FloatToStr(HF_Datalink_MHS_Trans_Freq));
      SQL.Add(', UHF_Datalink_MHS_Trans_Freq = ' +
        FloatToStr(UHF_Datalink_MHS_Trans_Freq));
      SQL.Add(', Max_Num_Radar_Classes = ' + IntToStr(Max_Num_Radar_Classes));
      SQL.Add(', Max_Num_Sonar_Classes = ' + IntToStr(Max_Num_Sonar_Classes));
      SQL.Add(', Max_Num_Sonobuoy_Classes = ' +
        IntToStr(Max_Num_Sonobuoy_Classes));
      SQL.Add(', Max_Num_EO_Classes = ' + IntToStr(Max_Num_EO_Classes));
      SQL.Add(', Max_Num_ESM_Classes = ' + IntToStr(Max_Num_ESM_Classes));
      SQL.Add(', Max_Num_MAD_Classes = ' + IntToStr(Max_Num_MAD_Classes));
      SQL.Add(', Max_Num_Fitted_Weap_Classes = ' +
        IntToStr(Max_Num_Fitted_Weap_Classes));
      SQL.Add(', Max_Num_Point_Effect_Classes = ' +
        IntToStr(Max_Num_Point_Effect_Classes));
      SQL.Add(', HAFO_Min_Range = ' + FloatToStr(HAFO_Min_Range));
      SQL.Add(', HAFO_Max_Range = ' + FloatToStr(HAFO_Max_Range));
      SQL.Add(', Engage_Guide_Stale_Target_Time = ' +
        IntToStr(Engage_Guide_Stale_Target_Time));
      SQL.Add(', Outrun_Guide_Stale_Target_Time = ' +
        IntToStr(Outrun_Guide_Stale_Target_Time));
      SQL.Add(', Shadow_Guide_Stale_Target_Time = ' +
        IntToStr(Shadow_Guide_Stale_Target_Time));
      SQL.Add(', Sonobuoy_Air_Deceleration = ' +
        FloatToStr(Sonobuoy_Air_Deceleration));
      SQL.Add(', Sonobuoy_Air_Descent_Rate = ' +
        FloatToStr(Sonobuoy_Air_Descent_Rate));
      SQL.Add(', Depth_Charge_Air_Deceleration = ' +
        FloatToStr(Depth_Charge_Air_Deceleration));
      SQL.Add(', Depth_Charge_Air_Descent_Rate = ' +
        FloatToStr(Depth_Charge_Air_Descent_Rate));
      SQL.Add(', Missile_Sea_Check_Interval = ' +
        IntToStr(Missile_Sea_Check_Interval));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameDefaultDef(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Defaults');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Defaults');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;

{$REGION ' Effect Table On Game Default'}
//===Rainfall On Radar

function TdmTTT.GetGameRainfallOnRadar(const aDefaultID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Rainfall_On_Radar;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Rainfall_On_Radar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    SQL.Add('ORDER BY Radar_Frequency');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Rainfall_On_Radar.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Radar_Frequency := FieldByName('Radar_Frequency').AsFloat;
          Rain_0_Effect := FieldByName('Rain_0_Effect').AsFloat;
          Rain_1_Effect := FieldByName('Rain_1_Effect').AsFloat;
          Rain_2_Effect := FieldByName('Rain_2_Effect').AsFloat;
          Rain_3_Effect := FieldByName('Rain_3_Effect').AsFloat;
          Rain_4_Effect := FieldByName('Rain_4_Effect').AsFloat;
          Rain_5_Effect := FieldByName('Rain_5_Effect').AsFloat;
          Rain_6_Effect := FieldByName('Rain_6_Effect').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameRainfallOnRadar( var aRec: TRecGame_Rainfall_On_Radar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Rainfall_On_Radar');
    SQL.Add('(Defaults_Index, Radar_Frequency, Rain_0_Effect, Rain_1_Effect,');
    SQL.Add('Rain_2_Effect, Rain_3_Effect, Rain_4_Effect, Rain_5_Effect,');
    SQL.Add('Rain_6_Effect)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(FloatToStr(Radar_Frequency) + ', ');
      SQL.Add(FloatToStr(Rain_0_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_1_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_2_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_3_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_4_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_5_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_6_Effect) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateGameRainfallOnRadar( var aRec: TRecGame_Rainfall_On_Radar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Rainfall_On_Radar');

    with aRec do
    begin
      SQL.Add('SET Rain_0_Effect = ' + FloatToStr(Rain_0_Effect));
      SQL.Add(', Rain_1_Effect = ' + FloatToStr(Rain_1_Effect));
      SQL.Add(', Rain_2_Effect = ' + FloatToStr(Rain_2_Effect));
      SQL.Add(', Rain_3_Effect = ' + FloatToStr(Rain_3_Effect));
      SQL.Add(', Rain_4_Effect = ' + FloatToStr(Rain_4_Effect));
      SQL.Add(', Rain_5_Effect = ' + FloatToStr(Rain_5_Effect));
      SQL.Add(', Rain_6_Effect = ' + FloatToStr(Rain_6_Effect));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Radar_Frequency = ' + FloatToStr(Radar_Frequency));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameRainfallOnRadar(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Rainfall_On_Radar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Rainfall_On_Radar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;


//===Cloud On Radar

function TdmTTT.GetGameCloudOnRadar(const aDefaultID: Integer;var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Cloud_On_Radar;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Cloud_On_Radar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    SQL.Add('ORDER BY Radar_Frequency');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Cloud_On_Radar.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Radar_Frequency := FieldByName('Radar_Frequency').AsFloat;
          Cloud_0_Effect := FieldByName('Cloud_0_Effect').AsFloat;
          Cloud_1_Effect := FieldByName('Cloud_1_Effect').AsFloat;
          Cloud_2_Effect := FieldByName('Cloud_2_Effect').AsFloat;
          Cloud_3_Effect := FieldByName('Cloud_3_Effect').AsFloat;
          Cloud_4_Effect := FieldByName('Cloud_4_Effect').AsFloat;
          Cloud_5_Effect := FieldByName('Cloud_5_Effect').AsFloat;
          Cloud_6_Effect := FieldByName('Cloud_6_Effect').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameCloudOnRadar( var aRec: TRecGame_Cloud_On_Radar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Cloud_On_Radar');
    SQL.Add('(Defaults_Index, Radar_Frequency, Cloud_0_Effect,');
    SQL.Add('Cloud_1_Effect, Cloud_2_Effect, Cloud_3_Effect, Cloud_4_Effect,');
    SQL.Add('Cloud_5_Effect, Cloud_6_Effect)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(FloatToStr(Radar_Frequency) + ', ');
      SQL.Add(FloatToStr(Cloud_0_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_1_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_2_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_3_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_4_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_5_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_6_Effect) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateGameCloudOnRadar( var aRec: TRecGame_Cloud_On_Radar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Cloud_On_Radar');

    with aRec do
    begin
      SQL.Add('SET Cloud_0_Effect = ' + FloatToStr(Cloud_0_Effect));
      SQL.Add(', Cloud_1_Effect = ' + FloatToStr(Cloud_1_Effect));
      SQL.Add(', Cloud_2_Effect = ' + FloatToStr(Cloud_2_Effect));
      SQL.Add(', Cloud_3_Effect = ' + FloatToStr(Cloud_3_Effect));
      SQL.Add(', Cloud_4_Effect = ' + FloatToStr(Cloud_4_Effect));
      SQL.Add(', Cloud_5_Effect = ' + FloatToStr(Cloud_5_Effect));
      SQL.Add(', Cloud_6_Effect = ' + FloatToStr(Cloud_6_Effect));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Radar_Frequency = ' + FloatToStr(Radar_Frequency));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameCloudOnRadar(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Cloud_On_Radar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Cloud_On_Radar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;


//===SeaState On Radar

function TdmTTT.GetGameSeaStateOnRadar(const aDefaultID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Sea_On_Radar;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Sea_On_Radar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    SQL.Add('ORDER BY Sea_State');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Sea_On_Radar.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Sea_State := FieldByName('Sea_State').AsInteger;
          Effect_on_Radar := FieldByName('Effect_on_Radar').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameSeaStateOnRadar( var aRec: TRecGame_Sea_On_Radar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Sea_On_Radar');
    SQL.Add('(Defaults_Index, Sea_State, Effect_on_Radar)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(IntToStr(Sea_State) + ', ');
      SQL.Add(FloatToStr(Effect_on_Radar) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateGameSeaStateOnRadar( var aRec: TRecGame_Sea_On_Radar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Sea_On_Radar');

    with aRec do
    begin
      SQL.Add('SET Effect_on_Radar = ' + FloatToStr(Effect_on_Radar));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Sea_State = ' + IntToStr(Sea_State));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameSeaStateOnRadar(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Sea_On_Radar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Sea_On_Radar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;


//===Rainfall On ESM

function TdmTTT.GetGameRainfallOnESM(const aDefaultID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Rainfall_On_ESM;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Rainfall_On_ESM');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    SQL.Add('ORDER BY Radar_Frequency');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Rainfall_On_ESM.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Radar_Frequency := FieldByName('Radar_Frequency').AsFloat;
          Rain_0_Effect := FieldByName('Rain_0_Effect').AsFloat;
          Rain_1_Effect := FieldByName('Rain_1_Effect').AsFloat;
          Rain_2_Effect := FieldByName('Rain_2_Effect').AsFloat;
          Rain_3_Effect := FieldByName('Rain_3_Effect').AsFloat;
          Rain_4_Effect := FieldByName('Rain_4_Effect').AsFloat;
          Rain_5_Effect := FieldByName('Rain_5_Effect').AsFloat;
          Rain_6_Effect := FieldByName('Rain_6_Effect').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameRainfallOnESM( var aRec: TRecGame_Rainfall_On_ESM): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Rainfall_On_ESM');
    SQL.Add('(Defaults_Index, Radar_Frequency, Rain_0_Effect, Rain_1_Effect,');
    SQL.Add('Rain_2_Effect, Rain_3_Effect, Rain_4_Effect, Rain_5_Effect,');
    SQL.Add('Rain_6_Effect)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(FloatToStr(Radar_Frequency) + ', ');
      SQL.Add(FloatToStr(Rain_0_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_1_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_2_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_3_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_4_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_5_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_6_Effect) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateGameRainfallOnESM( var aRec: TRecGame_Rainfall_On_ESM): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Rainfall_On_ESM');

    with aRec do
    begin
      SQL.Add('SET Rain_0_Effect = ' + FloatToStr(Rain_0_Effect));
      SQL.Add(', Rain_1_Effect = ' + FloatToStr(Rain_1_Effect));
      SQL.Add(', Rain_2_Effect = ' + FloatToStr(Rain_2_Effect));
      SQL.Add(', Rain_3_Effect = ' + FloatToStr(Rain_3_Effect));
      SQL.Add(', Rain_4_Effect = ' + FloatToStr(Rain_4_Effect));
      SQL.Add(', Rain_5_Effect = ' + FloatToStr(Rain_5_Effect));
      SQL.Add(', Rain_6_Effect = ' + FloatToStr(Rain_6_Effect));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Radar_Frequency = ' + FloatToStr(Radar_Frequency));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameRainfallOnESM(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Rainfall_On_ESM');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Rainfall_On_ESM');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;


//===Cloud On ESM

function TdmTTT.GetGameCloudOnESM(const aDefaultID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Cloud_On_ESM;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Cloud_On_ESM');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    SQL.Add('ORDER BY Radar_Frequency');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Cloud_On_ESM.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Radar_Frequency := FieldByName('Radar_Frequency').AsFloat;
          Cloud_0_Effect := FieldByName('Cloud_0_Effect').AsFloat;
          Cloud_1_Effect := FieldByName('Cloud_1_Effect').AsFloat;
          Cloud_2_Effect := FieldByName('Cloud_2_Effect').AsFloat;
          Cloud_3_Effect := FieldByName('Cloud_3_Effect').AsFloat;
          Cloud_4_Effect := FieldByName('Cloud_4_Effect').AsFloat;
          Cloud_5_Effect := FieldByName('Cloud_5_Effect').AsFloat;
          Cloud_6_Effect := FieldByName('Cloud_6_Effect').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameCloudOnESM(var aRec: TRecGame_Cloud_On_ESM): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Cloud_On_ESM');
    SQL.Add('(Defaults_Index, Radar_Frequency, Cloud_0_Effect,');
    SQL.Add('Cloud_1_Effect, Cloud_2_Effect, Cloud_3_Effect, Cloud_4_Effect,');
    SQL.Add('Cloud_5_Effect, Cloud_6_Effect)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(FloatToStr(Radar_Frequency) + ', ');
      SQL.Add(FloatToStr(Cloud_0_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_1_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_2_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_3_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_4_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_5_Effect) + ', ');
      SQL.Add(FloatToStr(Cloud_6_Effect) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateGameCloudOnESM(var aRec: TRecGame_Cloud_On_ESM): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Cloud_On_ESM');

    with aRec do
    begin
      SQL.Add('SET Cloud_0_Effect = ' + FloatToStr(Cloud_0_Effect));
      SQL.Add(', Cloud_1_Effect = ' + FloatToStr(Cloud_1_Effect));
      SQL.Add(', Cloud_2_Effect = ' + FloatToStr(Cloud_2_Effect));
      SQL.Add(', Cloud_3_Effect = ' + FloatToStr(Cloud_3_Effect));
      SQL.Add(', Cloud_4_Effect = ' + FloatToStr(Cloud_4_Effect));
      SQL.Add(', Cloud_5_Effect = ' + FloatToStr(Cloud_5_Effect));
      SQL.Add(', Cloud_6_Effect = ' + FloatToStr(Cloud_6_Effect));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Radar_Frequency = ' + FloatToStr(Radar_Frequency));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameCloudOnESM(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Cloud_On_ESM');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Cloud_On_ESM');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;


//===Rainfall On Missile

function TdmTTT.GetGameRainfallOnMissile(const aDefaultID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Rainfall_On_Missile_Seeker;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Rainfall_On_Missile_Seeker');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    SQL.Add('ORDER BY Guide_Type');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Rainfall_On_Missile_Seeker.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Guide_Type := FieldByName('Guide_Type').AsInteger;
          Rain_0_Effect := FieldByName('Rain_0_Effect').AsFloat;
          Rain_1_Effect := FieldByName('Rain_1_Effect').AsFloat;
          Rain_2_Effect := FieldByName('Rain_2_Effect').AsFloat;
          Rain_3_Effect := FieldByName('Rain_3_Effect').AsFloat;
          Rain_4_Effect := FieldByName('Rain_4_Effect').AsFloat;
          Rain_5_Effect := FieldByName('Rain_5_Effect').AsFloat;
          Rain_6_Effect := FieldByName('Rain_6_Effect').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameRainfallOnMissile( var aRec: TRecGame_Rainfall_On_Missile_Seeker): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Rainfall_On_Missile_Seeker');
    SQL.Add('(Defaults_Index, Guide_Type, Rain_0_Effect, Rain_1_Effect,');
    SQL.Add('Rain_2_Effect, Rain_3_Effect, Rain_4_Effect, Rain_5_Effect,');
    SQL.Add('Rain_6_Effect)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(IntToStr(Guide_Type) + ', ');
      SQL.Add(FloatToStr(Rain_0_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_1_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_2_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_3_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_4_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_5_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_6_Effect) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateGameRainfallOnMissile( var aRec: TRecGame_Rainfall_On_Missile_Seeker): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Rainfall_On_Missile_Seeker');

    with aRec do
    begin
      SQL.Add('SET Rain_0_Effect = ' + FloatToStr(Rain_0_Effect));
      SQL.Add(', Rain_1_Effect = ' + FloatToStr(Rain_1_Effect));
      SQL.Add(', Rain_2_Effect = ' + FloatToStr(Rain_2_Effect));
      SQL.Add(', Rain_3_Effect = ' + FloatToStr(Rain_3_Effect));
      SQL.Add(', Rain_4_Effect = ' + FloatToStr(Rain_4_Effect));
      SQL.Add(', Rain_5_Effect = ' + FloatToStr(Rain_5_Effect));
      SQL.Add(', Rain_6_Effect = ' + FloatToStr(Rain_6_Effect));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Guide_Type = ' + IntToStr(Guide_Type));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameRainfallOnMissile(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Rainfall_On_Missile_Seeker');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Rainfall_On_Missile_Seeker');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;


//===Seastate On Missile

function TdmTTT.GetGameSeaStateOnMissile(const aDefaultID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Sea_On_Missile_Safe_Altitude;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Sea_On_Missile_Safe_Altitude');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    SQL.Add('ORDER BY Sea_State');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Sea_On_Missile_Safe_Altitude.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Sea_State := FieldByName('Sea_State').AsInteger;
          Effect_on_Missile_Safe_Altitude := FieldByName
            ('Effect_on_Missile_Safe_Altitud').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameSeaStateOnMissile( var aRec: TRecGame_Sea_On_Missile_Safe_Altitude): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Sea_On_Missile_Safe_Altitude');
    SQL.Add('(Defaults_Index, Sea_State, Effect_on_Missile_Safe_Altitud)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(IntToStr(Sea_State) + ', ');
      SQL.Add(FloatToStr(Effect_on_Missile_Safe_Altitude) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateGameSeaStateOnMissile( var aRec: TRecGame_Sea_On_Missile_Safe_Altitude): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Sea_On_Missile_Safe_Altitude');

    with aRec do
    begin
      SQL.Add('SET Effect_on_Missile_Safe_Altitud = ' +
        FloatToStr(Effect_on_Missile_Safe_Altitude));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Sea_State = ' + IntToStr(Sea_State));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameSeaStateOnMissile(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Sea_On_Missile_Safe_Altitude');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Sea_On_Missile_Safe_Altitude');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;


//===Rainfall On Sonar

function TdmTTT.GetGameRainfallOnSonar(const aDefaultID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Rainfall_On_Sonar;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Rainfall_On_Sonar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    SQL.Add('ORDER BY Sonar_Frequency');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Rainfall_On_Sonar.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Sonar_Frequency := FieldByName('Sonar_Frequency').AsFloat;
          Rain_0_Effect := FieldByName('Rain_0_Effect').AsFloat;
          Rain_1_Effect := FieldByName('Rain_1_Effect').AsFloat;
          Rain_2_Effect := FieldByName('Rain_2_Effect').AsFloat;
          Rain_3_Effect := FieldByName('Rain_3_Effect').AsFloat;
          Rain_4_Effect := FieldByName('Rain_4_Effect').AsFloat;
          Rain_5_Effect := FieldByName('Rain_5_Effect').AsFloat;
          Rain_6_Effect := FieldByName('Rain_6_Effect').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameRainfallOnSonar( var aRec: TRecGame_Rainfall_On_Sonar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Rainfall_On_Sonar');
    SQL.Add('(Defaults_Index, Sonar_Frequency, Rain_0_Effect, Rain_1_Effect,');
    SQL.Add('Rain_2_Effect, Rain_3_Effect, Rain_4_Effect, Rain_5_Effect,');
    SQL.Add('Rain_6_Effect)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(FloatToStr(Sonar_Frequency) + ', ');
      SQL.Add(FloatToStr(Rain_0_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_1_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_2_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_3_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_4_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_5_Effect) + ', ');
      SQL.Add(FloatToStr(Rain_6_Effect) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateGameRainfallOnSonar( var aRec: TRecGame_Rainfall_On_Sonar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Rainfall_On_Sonar');

    with aRec do
    begin
      SQL.Add('SET Rain_0_Effect = ' + FloatToStr(Rain_0_Effect));
      SQL.Add(', Rain_1_Effect = ' + FloatToStr(Rain_1_Effect));
      SQL.Add(', Rain_2_Effect = ' + FloatToStr(Rain_2_Effect));
      SQL.Add(', Rain_3_Effect = ' + FloatToStr(Rain_3_Effect));
      SQL.Add(', Rain_4_Effect = ' + FloatToStr(Rain_4_Effect));
      SQL.Add(', Rain_5_Effect = ' + FloatToStr(Rain_5_Effect));
      SQL.Add(', Rain_6_Effect = ' + FloatToStr(Rain_6_Effect));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Sonar_Frequency = ' + FloatToStr(Sonar_Frequency));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameRainfallOnSonar(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Rainfall_On_Sonar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Rainfall_On_Sonar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;


//===Shiping Noise On Sonar

function TdmTTT.GetGameShipNoiseOnSonar(const aDefaultID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Ship_On_Sonar;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Ship_On_Sonar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    SQL.Add('ORDER BY Sonar_Frequency');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Ship_On_Sonar.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Sonar_Frequency := FieldByName('Sonar_Frequency').AsFloat;
          Distant_Ship_Effect := FieldByName('Distant_Ship_Effect').AsFloat;
          Light_Ship_Effect := FieldByName('Light_Ship_Effect').AsFloat;
          Medium_Ship_Effect := FieldByName('Medium_Ship_Effect').AsFloat;
          Heavy_Ship_Effect := FieldByName('Heavy_Ship_Effect').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameShipNoiseOnSonar( var aRec: TRecGame_Ship_On_Sonar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Ship_On_Sonar');
    SQL.Add('(Defaults_Index, Sonar_Frequency, Distant_Ship_Effect,');
    SQL.Add('Light_Ship_Effect, Medium_Ship_Effect, Heavy_Ship_Effect)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(FloatToStr(Sonar_Frequency) + ', ');
      SQL.Add(FloatToStr(Distant_Ship_Effect) + ', ');
      SQL.Add(FloatToStr(Light_Ship_Effect) + ', ');
      SQL.Add(FloatToStr(Medium_Ship_Effect) + ', ');
      SQL.Add(FloatToStr(Heavy_Ship_Effect) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateGameShipNoiseOnSonar( var aRec: TRecGame_Ship_On_Sonar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Ship_On_Sonar');

    with aRec do
    begin
      SQL.Add('SET Distant_Ship_Effect = ' + FloatToStr(Distant_Ship_Effect));
      SQL.Add(', Light_Ship_Effect = ' + FloatToStr(Light_Ship_Effect));
      SQL.Add(', Medium_Ship_Effect = ' + FloatToStr(Medium_Ship_Effect));
      SQL.Add(', Heavy_Ship_Effect = ' + FloatToStr(Heavy_Ship_Effect));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Sonar_Frequency = ' + FloatToStr(Sonar_Frequency));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameShipNoiseOnSonar(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Ship_On_Sonar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Ship_On_Sonar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;

//===Seastate On Sonar

function TdmTTT.GetGameSeaStateOnSonar(const aDefaultID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Sea_On_Sonar;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Sea_On_Sonar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    SQL.Add('ORDER BY Sonar_Frequency');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Sea_On_Sonar.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Sonar_Frequency := FieldByName('Sonar_Frequency').AsFloat;
          Sea_0_Effect := FieldByName('Sea_0_Effect').AsFloat;
          Sea_1_Effect := FieldByName('Sea_1_Effect').AsFloat;
          Sea_2_Effect := FieldByName('Sea_2_Effect').AsFloat;
          Sea_3_Effect := FieldByName('Sea_3_Effect').AsFloat;
          Sea_4_Effect := FieldByName('Sea_4_Effect').AsFloat;
          Sea_5_Effect := FieldByName('Sea_5_Effect').AsFloat;
          Sea_6_Effect := FieldByName('Sea_6_Effect').AsFloat;
          Sea_7_Effect := FieldByName('Sea_7_Effect').AsFloat;
          Sea_8_Effect := FieldByName('Sea_8_Effect').AsFloat;
          Sea_9_Effect := FieldByName('Sea_9_Effect').AsFloat;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertGameSeaStateOnSonar( var aRec: TRecGame_Sea_On_Sonar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Sea_On_Sonar');
    SQL.Add('(Defaults_Index, Sonar_Frequency, Sea_0_Effect, Sea_1_Effect,');
    SQL.Add('Sea_2_Effect, Sea_3_Effect, Sea_4_Effect, Sea_5_Effect,');
    SQL.Add('Sea_6_Effect, Sea_7_Effect, Sea_8_Effect, Sea_9_Effect)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(FloatToStr(Sonar_Frequency) + ', ');
      SQL.Add(FloatToStr(Sea_0_Effect) + ', ');
      SQL.Add(FloatToStr(Sea_1_Effect) + ', ');
      SQL.Add(FloatToStr(Sea_2_Effect) + ', ');
      SQL.Add(FloatToStr(Sea_3_Effect) + ', ');
      SQL.Add(FloatToStr(Sea_4_Effect) + ', ');
      SQL.Add(FloatToStr(Sea_5_Effect) + ', ');
      SQL.Add(FloatToStr(Sea_6_Effect) + ', ');
      SQL.Add(FloatToStr(Sea_7_Effect) + ', ');
      SQL.Add(FloatToStr(Sea_8_Effect) + ', ');
      SQL.Add(FloatToStr(Sea_9_Effect) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateGameSeaStateOnSonar( var aRec: TRecGame_Sea_On_Sonar): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Sea_On_Sonar');

    with aRec do
    begin
      SQL.Add('SET Sea_0_Effect = ' + FloatToStr(Sea_0_Effect));
      SQL.Add(', Sea_1_Effect = ' + FloatToStr(Sea_1_Effect));
      SQL.Add(', Sea_2_Effect = ' + FloatToStr(Sea_2_Effect));
      SQL.Add(', Sea_3_Effect = ' + FloatToStr(Sea_3_Effect));
      SQL.Add(', Sea_4_Effect = ' + FloatToStr(Sea_4_Effect));
      SQL.Add(', Sea_5_Effect = ' + FloatToStr(Sea_5_Effect));
      SQL.Add(', Sea_6_Effect = ' + FloatToStr(Sea_6_Effect));
      SQL.Add(', Sea_7_Effect = ' + FloatToStr(Sea_7_Effect));
      SQL.Add(', Sea_8_Effect = ' + FloatToStr(Sea_8_Effect));
      SQL.Add(', Sea_9_Effect = ' + FloatToStr(Sea_9_Effect));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Sonar_Frequency = ' + FloatToStr(Sonar_Frequency));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteGameSeaStateOnSonar(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Sea_On_Sonar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Sea_On_Sonar');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;


//==IFF Mode/Code

function TdmTTT.GetIFFModeCode(const aDefaultID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TGame_Default_IFF_Mode_Code;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Default_IFF_Mode_Code');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TGame_Default_IFF_Mode_Code.Create;

        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          IFF_Device_Type := FieldByName('IFF_Device_Type').AsInteger;
          IFF_Mode := FieldByName('IFF_Mode').AsInteger;
          IFF_Code := FieldByName('IFF_Code').AsInteger;
          Mode_State := FieldByName('Mode_State').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertIFFModeCode( var aRec: TRecGame_Default_IFF_Mode_Code): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Game_Default_IFF_Mode_Code');
    SQL.Add('(Defaults_Index, Force_Designation, IFF_Device_Type, IFF_Mode,');
    SQL.Add('IFF_Code, Mode_State)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(IntToStr(Defaults_Index) + ', ');
      SQL.Add(IntToStr(Force_Designation) + ', ');
      SQL.Add(IntToStr(IFF_Device_Type) + ', ');
      SQL.Add(IntToStr(IFF_Mode) + ', ');
      SQL.Add(IntToStr(IFF_Code) + ', ');
      SQL.Add(IntToStr(Mode_State) + ')');
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateIFFModeCode( var aRec: TRecGame_Default_IFF_Mode_Code): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Game_Default_IFF_Mode_Code');

    with aRec do
    begin
      SQL.Add('SET IFF_Code = ' + IntToStr(IFF_Code));
      SQL.Add(', Mode_State = ' + IntToStr(Mode_State));
      SQL.Add('WHERE Defaults_Index = ' + IntToStr(Defaults_Index));
      SQL.Add('AND Force_Designation = ' + IntToStr(Force_Designation));
      SQL.Add('AND IFF_Device_Type = ' + IntToStr(IFF_Device_Type));
      SQL.Add('AND IFF_Mode = ' + IntToStr(IFF_Mode));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteIFFModeCode(const aDefaultID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Default_IFF_Mode_Code');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Default_IFF_Mode_Code');
    SQL.Add('WHERE Defaults_Index = ' + IntToStr(aDefaultID));
    Open;

    Result := RecordCount = 0;
  end;
end;

{$ENDREGION}

{$ENDREGION}

{$REGION ' Student Roles '}

function TdmTTT.GetStudentRoleDef(const aStudentRoleID: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TStudent_Role_Definition;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Student_Role_Definition');
    SQL.Add('WHERE Role_List_Index = ' + IntToStr(aStudentRoleID));
    SQL.Add('ORDER BY Role_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TStudent_Role_Definition.Create;

        with rec.FData do
        begin
          Student_Role_Index := FieldByName('Student_Role_Index').AsInteger;
          Role_Identifier := FieldByName('Role_Identifier').AsString;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertStudentRoleDef( var aRec: TRecStudent_Role_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Student_Role_Definition');
    SQL.Add('(Role_Identifier, Role_List_Index)');
    SQL.Add('VALUES (');

    with aRec do
    begin
      SQL.Add(QuotedStr(Role_Identifier) + ', ');
      SQL.Add(IntToStr(Role_List_Index) + ')');
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Student_Role_Definition');

    with aRec do
    begin
      SQL.Add('WHERE Role_Identifier = ' + QuotedStr(Role_Identifier));
      SQL.Add('AND Role_List_Index = ' + IntToStr(Role_List_Index));
    end;

    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Student_Role_Index := FieldByName('Student_Role_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateStudentRoleDef( var aRec: TRecStudent_Role_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Student_Role_Definition');

    with aRec do
    begin
      SQL.Add('SET Role_Identifier = ' + QuotedStr(Role_Identifier));
      SQL.Add(', Role_List_Index = ' + IntToStr(Role_List_Index));
      SQL.Add('WHERE Student_Role_Index = ' + IntToStr(Student_Role_Index));
    end;

    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteStudentRoleDef(const aDeleteType: Byte; const aIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Student_Role_Definition');

    case aDeleteType of
      1: SQL.Add('WHERE Role_List_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Student_Role_Index = ' + IntToStr(aIndex));
    end;

    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Student_Role_Definition');

    case aDeleteType of
      1: SQL.Add('WHERE Role_List_Index = ' + IntToStr(aIndex));
      2: SQL.Add('WHERE Student_Role_Index = ' + IntToStr(aIndex));
    end;

    Open;

    Result := RecordCount = 0;
  end;
end;

function TdmTTT.GetStudentRoleList(var aList: TList): Integer;
var
  i : Integer;
  rec : TStudent_Role_List;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Student_Role_List');
    SQL.Add('ORDER BY Role_List_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TStudent_Role_List.Create;

        with rec.FData do
        begin
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Role_List_Identifier := FieldByName('Role_List_Identifier').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFilterStudentRoleList(var aList: TList;
  aFilter: String): Integer;
var
  i : Integer;
  rec : TStudent_Role_List;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Student_Role_List');
    SQL.Add('WHERE Role_List_Identifier like '  + quotedStr('%' + aFilter + '%'));
    SQL.Add('ORDER BY Role_List_Identifier');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TStudent_Role_List.Create;

        with rec.FData do
        begin
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Role_List_Identifier := FieldByName('Role_List_Identifier').AsString;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetStudentRoleList(const aClassName: string): Integer;
begin
  Result := 0;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Student_Role_List');
    SQL.Add('WHERE Role_List_Identifier LIKE ' + QuotedStr(aClassName));
    Open;

    Result := RecordCount;
  end;
end;

function TdmTTT.InsertStudentRoleList(var aRec: TRecStudent_Role_List): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Student_Role_List (Role_List_Identifier)');
    SQL.Add('VALUES (' + QuotedStr(aRec.Role_List_Identifier) + ')');
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Student_Role_List');
    SQL.Add('WHERE Role_List_Identifier = ' +
      QuotedStr(aRec.Role_List_Identifier));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      aRec.Role_List_Index := FieldByName('Role_List_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.UpdateStudentRoleList(var aRec: TRecStudent_Role_List): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Student_Role_List');
    SQL.Add('SET Role_List_Identifier = ' +
      QuotedStr(aRec.Role_List_Identifier));
    SQL.Add('WHERE Role_List_Index = ' + IntToStr(aRec.Role_List_Index));
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteStudentRoleList(const aStudentRoleID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Student_Role_List');
    SQL.Add('WHERE Role_List_Index = ' + IntToStr(aStudentRoleID));
    ExecSQL;

    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Student_Role_List');
    SQL.Add('WHERE Role_List_Index = ' + IntToStr(aStudentRoleID));
    Open;

    Result := RecordCount = 0;
  end;
end;


{$ENDREGION}

{$ENDREGION}

{$REGION ' Additional Section '}

{$REGION ' Blind Zone '}

function TdmTTT.GetBlindZone(const aOnBoardType, aOnBoardrIndex: Integer; var aList: TList): Integer;
var
  i : Integer;
  rec : TBlind_Zone;
begin
  Result := -1;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = ' + IntToStr(aOnBoardType));

    case aOnBoardType of
      1: SQL.Add('AND FCR_Instance_Index = ' + IntToStr(aOnBoardrIndex));
      2: SQL.Add('AND ESM_Instance_Index = ' + IntToStr(aOnBoardrIndex));
      3: SQL.Add('AND EO_Instance_Index = ' + IntToStr(aOnBoardrIndex));
      4: SQL.Add('AND Visual_Instance_Index = ' + IntToStr(aOnBoardrIndex));
      5: SQL.Add('AND Point_Effect_Index = ' + IntToStr(aOnBoardrIndex));
      6: SQL.Add('AND Fitted_Weap_Index = ' + IntToStr(aOnBoardrIndex));
      7: SQL.Add('AND Sonar_Instance_Index = ' + IntToStr(aOnBoardrIndex));
      8: SQL.Add('AND Radar_Instance_Index = ' + IntToStr(aOnBoardrIndex));
    end;

    SQL.Add('ORDER BY BlindZone_Number');
    Open;

    Result := RecordCount;

    if Assigned(aList) then
    begin
      for i := 0 to aList.Count - 1 do
      begin
        rec := aList.Items[i];
        rec.Free;
      end;

      aList.Clear;
    end
    else
      aList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TBlind_Zone.Create;

        with rec.FData do
        begin
          Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
          Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
          BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
          FCR_Instance_Index := FieldByName('FCR_Instance_Index').AsInteger;
          ESM_Instance_Index := FieldByName('ESM_Instance_Index').AsInteger;
          EO_Instance_Index := FieldByName('EO_Instance_Index').AsInteger;
          Visual_Instance_Index := FieldByName('Visual_Instance_Index').
            AsInteger;
          Point_Effect_Index := FieldByName('Point_Effect_Index').AsInteger;
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
          Radar_Instance_Index := FieldByName('Radar_Instance_Index').AsInteger;
          Start_Angle := FieldByName('Start_Angle').AsSingle;
          End_Angle := FieldByName('End_Angle').AsSingle;
        end;

        aList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.InsertBlindZone(var aRec: TRecBlind_Zone_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Blind_Zone_Definition ');
    SQL.Add('(Blind_Zone_Type, BlindZone_Number, ');

    case aRec.Blind_Zone_Type of
      1: SQL.Add('FCR_Instance_Index, ');
      2: SQL.Add('ESM_Instance_Index, ');
      3: SQL.Add('EO_Instance_Index, ');
      4: SQL.Add('Visual_Instance_Index, ');
      5: SQL.Add('Point_Effect_Index, ');
      6: SQL.Add('Fitted_Weap_Index, ');
      7: SQL.Add('Sonar_Instance_Index, ');
      8: SQL.Add('Radar_Instance_Index, ');
    end;

    SQL.Add('Start_Angle, End_Angle) ');
    SQL.Add('VALUES (' + IntToStr(aRec.Blind_Zone_Type) + ', ');
    SQL.Add(IntToStr(aRec.BlindZone_Number) + ', ');

    case aRec.Blind_Zone_Type of
      1: SQL.Add(IntToStr(aRec.FCR_Instance_Index) + ', ');
      2: SQL.Add(IntToStr(aRec.ESM_Instance_Index) + ', ');
      3: SQL.Add(IntToStr(aRec.EO_Instance_Index) + ', ');
      4: SQL.Add(IntToStr(aRec.Visual_Instance_Index) + ', ');
      5: SQL.Add(IntToStr(aRec.Point_Effect_Index) + ', ');
      6: SQL.Add(IntToStr(aRec.Fitted_Weap_Index) + ', ');
      7: SQL.Add(IntToStr(aRec.Sonar_Instance_Index) + ', ');
      8: SQL.Add(IntToStr(aRec.Radar_Instance_Index) + ', ');
    end;

    SQL.Add(FloatToStr(aRec.Start_Angle) + ', ');
    SQL.Add(FloatToStr(aRec.End_Angle) + ')');
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.UpdateBlindZone(var aRec: TRecBlind_Zone_Definition): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Blind_Zone_Definition ');
    SQL.Add('SET Start_Angle = ' + FloatToStr(aRec.Start_Angle));
    SQL.Add(', End_Angle = ' + FloatToStr(aRec.End_Angle));
    SQL.Add('WHERE Blind_Zone_Index = ' + IntToStr(aRec.Blind_Zone_Index));
    ExecSQL;
  end;
end;

function TdmTTT.DeleteBlindZone(const aVehicleID: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = 1 ');
    SQL.Add('AND FCR_Instance_Index IN (SELECT FCR_Instance_Index ');
    SQL.Add('FROM FCR_On_Board ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID) + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = 2 ');
    SQL.Add('AND ESM_Instance_Index IN (SELECT ESM_Instance_Index ');
    SQL.Add('FROM ESM_On_Board ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID) + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = 3 ');
    SQL.Add('AND EO_Instance_Index IN (SELECT EO_Instance_Index ');
    SQL.Add('FROM EO_On_Board ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID) + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = 4 ');
    SQL.Add('AND Visual_Instance_Index IN (SELECT Visual_Instance_Index ');
    SQL.Add('FROM Visual_Sensor_On_Board ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID) + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = 5 ');
    SQL.Add('AND Point_Effect_Index IN (SELECT Point_Effect_Index ');
    SQL.Add('FROM Point_Effect_On_Board ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID) + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = 6 ');
    SQL.Add('AND Fitted_Weap_Index IN (SELECT Fitted_Weap_Index ');
    SQL.Add('FROM Fitted_Weapon_On_Board ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID) + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = 7 ');
    SQL.Add('AND Sonar_Instance_Index IN (SELECT Sonar_Instance_Index ');
    SQL.Add('FROM Sonar_On_Board ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID) + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = 8 ');
    SQL.Add('AND Radar_Instance_Index IN (SELECT Radar_Instance_Index ');
    SQL.Add('FROM Radar_On_Board ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aVehicleID) + ')');
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteBlindZone(const aOnBoardType, aOnBoardIndex: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = ' + IntToStr(aOnBoardType));

    case aOnBoardType of
      1: SQL.Add('AND FCR_Instance_Index = ' + IntToStr(aOnBoardIndex));
      2: SQL.Add('AND ESM_Instance_Index = ' + IntToStr(aOnBoardIndex));
      3: SQL.Add('AND EO_Instance_Index = ' + IntToStr(aOnBoardIndex));
      4: SQL.Add('AND Visual_Instance_Index = ' + IntToStr(aOnBoardIndex));
      5: SQL.Add('AND Point_Effect_Index = ' + IntToStr(aOnBoardIndex));
      6: SQL.Add('AND Fitted_Weap_Index = ' + IntToStr(aOnBoardIndex));
      7: SQL.Add('AND Sonar_Instance_Index = ' + IntToStr(aOnBoardIndex));
      8: SQL.Add('AND Radar_Instance_Index = ' + IntToStr(aOnBoardIndex));
    end;
    ExecSQL;

    Result := True;
  end;
end;

function TdmTTT.DeleteBlindZone(const aOnBoardType, aOnBoardIndex, aBlindZoneNumber: Integer): Boolean;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition ');
    SQL.Add('WHERE Blind_Zone_Type = ' + IntToStr(aOnBoardType));

    case aOnBoardType of
      1: SQL.Add('AND FCR_Instance_Index = ' + IntToStr(aOnBoardIndex));
      2: SQL.Add('AND ESM_Instance_Index = ' + IntToStr(aOnBoardIndex));
      3: SQL.Add('AND EO_Instance_Index = ' + IntToStr(aOnBoardIndex));
      4: SQL.Add('AND Visual_Instance_Index = ' + IntToStr(aOnBoardIndex));
      5: SQL.Add('AND Point_Effect_Index = ' + IntToStr(aOnBoardIndex));
      6: SQL.Add('AND Fitted_Weap_Index = ' + IntToStr(aOnBoardIndex));
      7: SQL.Add('AND Sonar_Instance_Index = ' + IntToStr(aOnBoardIndex));
      8: SQL.Add('AND Radar_Instance_Index = ' + IntToStr(aOnBoardIndex));
    end;

    SQL.Add('AND BlindZone_Number = ' + IntToStr(aBlindZoneNumber));
    ExecSQL;
  end;
end;

{$ENDREGION}

{$REGION ' Note Storage '}

function TdmTTT.InsertNoteStorage(const aOwnerType: Byte; const aOwnerIndex: Integer; var aRec: TNote_Storage): Boolean;
begin
  result := False;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('INSERT INTO Note_Storage');
    SQL.Add('(Note_Type, Notes,');

    with aRec do
    begin
      case aOwnerType of
        1: SQL.Add('Vehicle_Index)');
        2: SQL.Add('Missile_Index)');
        3: SQL.Add('Mine_Index)');
        4: SQL.Add('Torpedo_Index)');
        5: SQL.Add('Satellite_Index)');
        6: SQL.Add('Sonobuoy_Index)');
        7: SQL.Add('Radar_Index)');
        8: SQL.Add('FCR_Index )');
        9: SQL.Add('Sonar_Index )');
        10: SQL.Add('ESM_Index )');
        11: SQL.Add('MAD_Index)');
        12: SQL.Add('EO_Index)');
        13: SQL.Add('Gun_Index)');
        14: SQL.Add('Bomb_Index)');
        15: SQL.Add('Jammer_Index )');
        16: SQL.Add('Defensive_Jammer_Index )');
        17: SQL.Add('Towed_Decoy_Index)');
        18: SQL.Add('Floating_Decoy_Index)');
        19: SQL.Add('Chaff_Index)');
        20: SQL.Add('Decoy_Index)');
        21: SQL.Add('Air_Bubble_Index)');
        22: SQL.Add('Pattern_Index)');
        23: SQL.Add('Infrared_decoy_Index)');
      end;

      SQL.Add('VALUES (');
      SQL.Add(IntToStr(aOwnerType) + ', ');
      SQL.Add(QuotedStr(Notes) + ', ');
      SQL.Add(IntToStr(aOwnerIndex) + ')');
      ExecSQL;
    end;
  end;
end;

function TdmTTT.UpdateNoteStorage(const aOwnerIndex: Integer; var aRec: TNote_Storage): Boolean;
begin
  Result := False;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Note_Storage');

    with aRec do
    begin
      SQL.Add('SET Notes = ' + QuotedStr(Notes));
      SQL.Add('WHERE Note_Type = ' + IntToStr(Note_Type));

      case Note_Type of
        1: SQL.Add('AND Vehicle_Index = ' + IntToStr(aOwnerIndex));
        2: SQL.Add('AND Missile_Index = ' + IntToStr(aOwnerIndex));
        3: SQL.Add('AND Mine_Index = ' + IntToStr(aOwnerIndex));
        4: SQL.Add('AND Torpedo_Index = ' + IntToStr(aOwnerIndex));
        5: SQL.Add('AND Satellite_Index = ' + IntToStr(aOwnerIndex));
        6: SQL.Add('AND Sonobuoy_Index = ' + IntToStr(aOwnerIndex));
        7: SQL.Add('AND Radar_Index = ' + IntToStr(aOwnerIndex));
        8: SQL.Add('AND FCR_Index = ' + IntToStr(aOwnerIndex));
        9: SQL.Add('AND Sonar_Index = ' + IntToStr(aOwnerIndex));
        10: SQL.Add('AND ESM_Index = ' + IntToStr(aOwnerIndex));
        11: SQL.Add('AND MAD_Index = ' + IntToStr(aOwnerIndex));
        12: SQL.Add('AND EO_Index = ' + IntToStr(aOwnerIndex));
        13: SQL.Add('AND Gun_Index = ' + IntToStr(aOwnerIndex));
        14: SQL.Add('AND Bomb_Index = ' + IntToStr(aOwnerIndex));
        15: SQL.Add('AND Jammer_Index = ' + IntToStr(aOwnerIndex));
        16: SQL.Add('AND Defensive_Jammer_Index = ' + IntToStr(aOwnerIndex));
        17: SQL.Add('AND Towed_Decoy_Index = ' + IntToStr(aOwnerIndex));
        18: SQL.Add('AND Floating_Decoy_Index = ' + IntToStr(aOwnerIndex));
        19: SQL.Add('AND Chaff_Index = ' + IntToStr(aOwnerIndex));
        20: SQL.Add('AND Decoy_Index = ' + IntToStr(aOwnerIndex));
        21: SQL.Add('AND Air_Bubble_Index = ' + IntToStr(aOwnerIndex));
        22: SQL.Add('AND Pattern_Index = ' + IntToStr(aOwnerIndex));
        23: SQL.Add('AND Infrared_decoy_Index = ' + IntToStr(aOwnerIndex));
      end;
    end;

    ExecSQL;
  end;
end;

function TdmTTT.DeleteNoteStorage(const aOwnerType: Integer; const aOwnerIndex: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Note_Storage ');
    SQL.Add('WHERE (');

    case aOwnerType of
        1:SQL.Add('Vehicle_Index');
        2:SQL.Add('Missile_Index');
        3:SQL.Add('Mine_Index');
        4:SQL.Add('Torpedo_Index');
        5:SQL.Add('Satellite_Index');
        6:SQL.Add('Sonobuoy_Index');
        7:SQL.Add('Radar_Index');
        8:SQL.Add('FCR_Index');
        9:SQL.Add('Sonar_Index');
        10:SQL.Add('ESM_Index');
        11:SQL.Add('MAD_Index');
        12:SQL.Add('EO_Index');
        13:SQL.Add('Gun_Index');
        14:SQL.Add('Bomb_Index');
        15:SQL.Add('Jammer_Index');
        16:SQL.Add('Defensive_Jammer_Index');
        17:SQL.Add('Towed_Decoy_Index');
        18:SQL.Add('Floating_Decoy_Index');
        19:SQL.Add('Chaff_Index');
        20:SQL.Add('Decoy_Index');
        21:SQL.Add('Air_Bubble_Index');
        22:SQL.Add('Pattern_Index');
        23:SQL.Add('Infrared_Decoy_Index');
    end;
    SQL.Add(' = ' + IntToStr(aOwnerIndex) + ')');
    ExecSQL;
  end;
end;

{$ENDREGION}

{$REGION ' Usage '}

{$REGION ' Usage Sensor '}

function TdmTTT.GetRadarAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TRadar_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Radar_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Radar_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRadar_On_Board.Create;
        with rec.FData do
        begin
          Radar_Instance_Index := FieldByName('Radar_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
          Submerged_Antenna_Height := FieldByName('Submerged_Antenna_Height')
            .AsSingle;
          Max_Operational_Depth := FieldByName('Max_Operational_Depth').AsSingle;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSonarAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TSonar_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Sonar_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Sonar_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TSonar_On_Board.Create;
        with rec.FData do
        begin
          Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Time_2_Deploy := FieldByName('Time_2_Deploy').AsInteger;
          Time_2_Stow := FieldByName('Time_2_Stow').AsInteger;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSonarAtSonobuoyDef(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TSonobuoy_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sonobuoy_Definition ');
    SQL.Add('WHERE (Sonar_Index = ' + IntToStr(id) + ')');

    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TSonobuoy_On_Board.Create;
        with rec.FDef do
        begin
          Class_Identifier := FieldByName('Class_Identifier').AsString;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetESMAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TESM_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM ESM_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.ESM_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TESM_On_Board.Create;
        with rec.FData do
        begin
          ESM_Instance_Index := FieldByName('ESM_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          ESM_Index := FieldByName('ESM_Index').AsInteger;
          Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
          Max_Operational_Depth := FieldByName('Max_Operational_Depth')
            .AsSingle;
          Submerged_Antenna_Height := FieldByName('Submerged_Antenna_Height')
            .AsSingle;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetEOAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TEOD_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM EO_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.EO_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TEOD_On_Board.Create;
        with rec.FData do
        begin
          EO_Instance_Index := FieldByName('EO_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          EO_Index := FieldByName('EO_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetMADAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TMAD_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM MAD_Sensor_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.MAD_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TMAD_On_Board.Create;
        with rec.FData do
        begin
          MAD_Instance_Index := FieldByName('MAD_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          MAD_Index := FieldByName('MAD_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSonobuoyAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TSonobuoy_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Sonobuoy_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Sonobuoy_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TSonobuoy_On_Board.Create;
        with rec.FData do
        begin
          Sonobuoy_Instance_Index := FieldByName('Sonobuoy_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

{$ENDREGION}

{$REGION ' Usage Exercise '}

function TdmTTT.GetPlatformInstanceAtResourceAllocation(const typePlatformInstance, id: Integer; var pList: TList): boolean;
var
  i : Integer;
  indexField: string;
  rec: TPlatform_Instance;

begin
  result := false;
  if not ZConn.Connected then
    exit;

  case typePlatformInstance of
    1: indexField := 'a.Vehicle_Index';
    2: indexField := 'a.Missile_Index';
    3: indexField := 'a.Torpedo_Index';
    4: indexField := 'a.Sonobuoy_Index';
    5: indexField := 'a.Mine_Index';
    6: indexField := 'a.Satellite_Index';
  end;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Instance a RIGHT JOIN Resource_Allocation b ');
    SQL.Add('ON a.Resource_Alloc_Index = b.Resource_Alloc_Index ');
    SQL.Add('WHERE ' + indexField + ' = ' + IntToStr(id));
    SQL.Add(' ORDER BY b.Allocation_Identifier ');
    Open;

    result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance.Create;
        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;

        with rec.FResource do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPlatformInstanceIdentifierAtResourceAllocation(const aInsatanceId: Integer; var pList: TList): boolean;
var
  i : Integer;
  indexField: string;
  rec: TPlatform_Instance;

begin
  result := false;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Instance a RIGHT JOIN Resource_Allocation b ');
    SQL.Add('ON a.Resource_Alloc_Index = b.Resource_Alloc_Index ');
    SQL.Add('WHERE Instance_Ident_Index = ' + IntToStr(aInsatanceId));
    SQL.Add(' ORDER BY b.Allocation_Identifier ');
    Open;

    result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance.Create;
        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;

        with rec.FResource do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetGameAreaAtEnvironment(const id: Integer; var pList: TList): boolean;
var
  recEnvi: TGame_Environment_Definition;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Environment_Definition ');
    SQL.Add('WHERE Game_Area_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Game_Enviro_Identifier ');

    Open;

    result := RecordCount > 0;

    if not Assigned(pList) then
    begin
      pList := TList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        recEnvi := TGame_Environment_Definition.Create;
        with recEnvi.FData do
        begin
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Game_Enviro_Identifier := FieldByName('Game_Enviro_Identifier')
            .AsString;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        end;

        pList.Add(recEnvi);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetGameAreaAtOverlayDef(const id: Integer; var pList: TList): boolean;
var
  recOverlay: TOverlay_Definition;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Overlay_Definition ');
    SQL.Add('WHERE Overlay_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Overlay_Identifier ');

    Open;

    result := RecordCount > 0;

    if not Assigned(pList) then
    begin
      pList := TList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        recOverlay := TOverlay_Definition.Create;
        with recOverlay.FData do
        begin
          Overlay_Index := FieldByName('Overlay_Index').AsInteger;
          Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
          Name := FieldByName('Overlay_Filename').AsString;
          Tipe := FieldByName('Static_Overlay').AsInteger;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          domain := FieldByName('Domain').AsInteger;
        end;

        pList.Add(recOverlay);
        ZQ.Next;
      end;
    end;
  end;
end;

{$ENDREGION}

{$REGION ' Usage Platform '}

function TdmTTT.GetMotionCharacteristicAtMissileDef(const id: Integer; var pList: TList): boolean;
var
  i : Integer;
  rec: TMissile_On_Board;

begin
  result := false;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add( 'SELECT * ');
    SQL.Add( 'FROM Missile_Definition ');
    SQL.Add( 'WHERE Motion_Index = ' + IntToStr(id));
    Open;

    result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMissile_On_Board.Create;

        with rec.FDef do
        begin
          Class_Identifier := FieldByName('Class_Identifier').AsString;
        end;

        pList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetMotionCharacteristicAtTorpedoDef(const id: Integer; var pList: TList): boolean;
var
  i : Integer;
  rec: TTorpedo_On_Board;

begin
  result := false;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add( 'SELECT * ');
    SQL.Add( 'FROM Torpedo_Definition ');
    SQL.Add( 'WHERE Motion_Index = ' + IntToStr(id));
    Open;

    result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TTorpedo_On_Board.Create;

        with rec.FDef do
        begin
          Class_Identifier := FieldByName('Class_Identifier').AsString;
        end;

        pList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetMotionCharacteristicAtVehicleDef(const id: Integer; var pList: TList): boolean;
var
  i : Integer;
  rec: TVehicle_Definition;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Vehicle_Definition ');
    SQL.Add('WHERE Motion_Characteristics = ' + IntToStr(id));
    SQL.Add(' ORDER BY Vehicle_Identifier ');

    Open;

    result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TVehicle_Definition.Create;

        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        Next;
      end;
    end;
  end;
end;

{$ENDREGION}

{$REGION ' Usage Weapon '}

function TdmTTT.GetFittedWeaponAtVehicleOnBoard(const index,id: Integer; var pList: TList): boolean;
var
  indexField: string;
  rec: TMissile_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  case index of
    7: indexField := 'a.Missile_Index';
    8: indexField := 'a.Torpedo_Index';
    9: indexField := 'a.Mine_Index';
  end;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Fitted_Weapon_On_Board a ');
    SQL.Add('LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ');
    SQL.Add('WHERE ' + indexField + ' = ' + IntToStr(id));
    SQL.Add(' ORDER BY b.Vehicle_Identifier');
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TMissile_On_Board.Create;
        with rec.FData do
        begin
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetTorpedoAtMissileDef(const id: Integer; var pList: TList): boolean;
var
  i : Integer;
  rec : TMissile_On_Board;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Hybrid_definition a LEFT JOIN Missile_Definition b ');
    SQL.Add('ON a.Missile_Index = b.Missile_Index');
    SQL.Add('Where Torpedo_Index = ' + IntToStr(id));
    Open;

    Result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not Eof do
      begin
        rec := TMissile_On_Board.Create;

        with rec.FDef do
        begin
          Class_Identifier := FieldByName('Class_Identifier').AsString;
        end;

        pList.Add(rec);
        Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPointEffectAtVehicleOnBoard(const index,id: Integer; var pList: TList): boolean;
var
  indexField: string;
  rec: TPoint_Effect_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  case index of
    10: indexField := 'a.Gun_Index';
    11: indexField := 'a.Bomb_Index';
  end;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Point_Effect_On_Board a ');
    SQL.Add('LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ');
    SQL.Add('WHERE ' + indexField + ' = ' + IntToStr(id));
    SQL.Add(' ORDER BY b.Vehicle_Identifier');
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPoint_Effect_On_Board.Create;
        with rec.FData do begin
          Point_Effect_Index    := FieldByName('Point_Effect_Index').AsInteger;
          Instance_Identifier   := FieldByName('Instance_Identifier').AsString;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

{$ENDREGION}

{$REGION ' Usage Countermeasure '}

function TdmTTT.GetAcousticDecoyAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TAcoustic_Decoy_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Acoustic_Decoy_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Decoy_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      Result := True;
      First;

      while not ZQ.Eof do
      begin
        rec := TAcoustic_Decoy_On_Board.Create;
        with rec.FData do
        begin
          Acoustic_Instance_Index  := FieldByName('Acoustic_Instance_Index').AsInteger;
          Instance_Identifier      := FieldByName('Instance_Identifier').AsString;
          Instance_Type            := FieldByName('Instance_Type').AsInteger;
          Quantity                 := FieldByName('Quantity').AsInteger;
          Vehicle_Index            := FieldByName('Vehicle_Index').AsInteger;
          Decoy_Index              := FieldByName('Decoy_Index').AsInteger;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAirBubbleAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TAir_Bubble_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Air_Bubble_Mount a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Air_Bubble_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TAir_Bubble_On_Board.Create;
        with rec.FData do
        begin
          Air_Bubble_Instance_Index := FieldByName('Air_Bubble_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Bubble_Qty_On_Board := FieldByName('Bubble_Qty_On_Board').AsInteger;
          Air_Bubble_Index    := FieldByName('Air_Bubble_Index').AsInteger;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetChaffAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TChaff_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Chaff_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Chaff_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TChaff_On_Board.Create;
        with rec.FData do
        begin
          Chaff_Instance_Index := FieldByName('Chaff_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Chaff_Qty_On_Board := FieldByName('Chaff_Qty_On_Board').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Chaff_Index := FieldByName('Chaff_Index').AsInteger;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetInfraredDecoyAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TInfrared_Decoy_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Infrared_Decoy_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Infrared_Decoy_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TInfrared_Decoy_On_Board.Create;
        with rec.FData do
        begin
          Infrared_Decoy_Instance_Index := FieldByName
            ('Infrared_Decoy_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Infrared_Decoy_Qty_On_Board := FieldByName
            ('Infrared_Decoy_Qty_On_Board').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFloatingDecoyAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TFloating_Decoy_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Floating_Decoy_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Floating_Decoy_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TFloating_Decoy_On_Board.Create;
        with rec.FData do
        begin
          Floating_Decoy_Instance_Index := FieldByName('Floating_Decoy_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSelfDefensiveAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TDefensive_Jammer_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Defensive_Jammer_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Defensive_Jammer_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TDefensive_Jammer_On_Board.Create;
        with rec.FData do
        begin
          Defensive_Jammer_Instance_Index := FieldByName
            ('Defensive_Jammer_Instance_Id').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index')
            .AsInteger;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetTowedJammerAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TTowed_Jammer_Decoy_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Towed_Jammer_Decoy_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Towed_Decoy_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TTowed_Jammer_Decoy_On_Board.Create;
        with rec.FData do
        begin
          Towed_Decoy_Instance_Index := FieldByName('Towed_Decoy_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetRadarNoiseAtVehicleOnBoard(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TRadar_Noise_Jammer_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Jammer_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Jammer_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRadar_Noise_Jammer_On_Board.Create;
        with rec.FData do
        begin
          Jammer_Instance_Index := FieldByName('Jammer_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Jammer_Index := FieldByName('Jammer_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

{$ENDREGION}

{$REGION ' Usage Other '}

function TdmTTT.GetRPLAtResourceAllocation(const id: Integer; var pList: TList): boolean;
var
  rec : TRuntime_Platform_Library;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Library_Mapping a');
    SQL.Add('RIGHT JOIN Resource_Allocation b');
    SQL.Add('ON a.Resource_Alloc_Index = b.Resource_Alloc_Index');
    SQL.Add('WHERE a.Library_Index = ' + IntToStr(id));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRuntime_Platform_Library.Create;
        with rec.FData do
        begin
          Platform_Library_Index := FieldByName('Library_Index').AsInteger;
        end;

        with rec.FResource_Allocation do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetOverlayAtResourceAllocation(const id: Integer; var pList: TList): boolean;
var
  rec : TResource_Overlay_Mapping;
begin
  Result := False;

  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Overlay_Mapping a');
    SQL.Add('RIGHT JOIN Resource_Allocation b');
    SQL.Add('ON a.Resource_Alloc_Index = b.Resource_Alloc_Index');
    SQL.Add('WHERE Overlay_Index = ' + IntToStr(id));
    Open;

    Result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TResource_Overlay_Mapping.Create;
        with rec.FData do
        begin
          Overlay_Instance_Index := FieldByName('Overlay_Instance_Index').AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Overlay_Index := FieldByName('Overlay_Index').AsInteger;
          Force_Designation := FieldByName('Overlay_Index').AsInteger;
        end;

        with rec.FResource_Allocation do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetStudentRoleAtResourceAllocation(const id: Integer; var pList: TList): boolean;
var
  rec: TStudent_Role_List;
begin
  result := false;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Student_Role_List a INNER JOIN Resource_Allocation b ');
    SQL.Add('ON a.Role_List_Index = b.Role_List_Index ');
    SQL.Add('WHERE b.Role_List_Index = ' + IntToStr(id));
    Open;

    result := RecordCount > 0;

    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TStudent_Role_List.Create;
        with rec.FData do
        begin
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Role_List_Identifier := FieldByName('Role_List_Identifier').AsString;
        end;
        with rec.FResource_Allocation do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetGameDefaultAtResourceAllocation(const id: Integer;var pList: TList): boolean;
var
  rec : TGame_Defaults;
begin
  Result := False;
  if not ZConn.Connected then
     Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Game_Defaults a');
    SQL.Add('RIGHT JOIN Resource_Allocation b');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index');
    SQL.Add('WHERE a.Defaults_Index = ' + IntToStr(id));
    Open;

    Result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TGame_Defaults.Create;
        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
            Defaults_Identifier := FieldByName('Defaults_Identifier').AsString;
            Init_AOP := FieldByName('Init_AOP').AsInteger;
            AOP_Decrease_Rate := FieldByName('AOP_Decrease_Rate').AsSingle;
            Sono_Num_2_Initiate := FieldByName('Sono_Num_2_Initiate').AsInteger;
            Trans_Range_2_Air := FieldByName('Trans_Range_2_Air').AsSingle;
            Trans_Range_2_Sur := FieldByName('Trans_Range_2_Sur').AsSingle;
            Init_AOP_Modifier := FieldByName('Init_AOP_Modifier').AsSingle;
            Visual_Detect_Range := FieldByName('Visual_Detect_Range').AsSingle;
            Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
            Max_Visual_Range := FieldByName('Max_Visual_Range').AsSingle;
            EO_Detection_Factor := FieldByName('EO_Detection_Factor').AsSingle;
            Visual_Detection_Factor := FieldByName('Visual_Detection_Factor')
              .AsSingle;
            EO_Ident_Factor := FieldByName('EO_Ident_Factor').AsSingle;
            Visual_Ident_Factor := FieldByName('Visual_Ident_Factor').AsSingle;
            Sine_Period_Distance := FieldByName('Sine_Period_Distance').AsSingle;
            Sine_Period_Amplitude := FieldByName('Sine_Period_Amplitude')
              .AsSingle;
            Short_Period_Distance := FieldByName('Short_Period_Distance')
              .AsSingle;
            Short_Period_Amplitude := FieldByName('Short_Period_Amplitude')
              .AsSingle;
            Long_Period_Distance := FieldByName('Long_Period_Distance').AsSingle;
            Long_Period_Amplitude := FieldByName('Long_Period_Amplitude')
              .AsSingle;
            Very_Period_Distance := FieldByName('Very_Period_Distance').AsSingle;
            Very_Period_Amplitude := FieldByName('Very_Period_Amplitude')
              .AsSingle;
            Air_Lost_Time := FieldByName('Air_Lost_Time').AsInteger;
            Sur_Lost_Time := FieldByName('Sur_Lost_Time').AsInteger;
            Sub_Lost_Time := FieldByName('Sub_Lost_Time').AsInteger;
            ESM_Bearing_Lost_Time := FieldByName('ESM_Bearing_Lost_Time')
              .AsInteger;
            Sonar_Bearing_Lost_Time := FieldByName('Sonar_Bearing_Lost_Time')
              .AsInteger;
            Stale_Air_Time := FieldByName('Stale_Air_Time').AsInteger;
            Stale_Sur_Time := FieldByName('Stale_Sur_Time').AsInteger;
            Stale_Sub_Time := FieldByName('Stale_Sub_Time').AsInteger;
            Stale_ESM_Bearing_Time := FieldByName('Stale_ESM_Bearing_Time')
              .AsInteger;
            Stale_Sonar_Bearing_Time := FieldByName('Stale_Sonar_Bearing_Time')
              .AsInteger;
            POD_Check_Time := FieldByName('POD_Check_Time').AsInteger;
            TMA_Range_Rate := FieldByName('TMA_Range_Rate').AsSingle;
            Frequency_Identity_Weighting := FieldByName
              ('Frequency_Identity_Weighting').AsSingle;
            PRF_Identity_Weighting := FieldByName('PRF_Identity_Weighting')
              .AsSingle;
            Pulsewidth_Identity_Weighting := FieldByName
              ('Pulsewidth_Identity_Weighting').AsSingle;
            Scan_Period_Identity_Weighting := FieldByName
              ('Scan_Period_Identity_Weighting').AsSingle;
            Crew_Eff_Heading_Error := FieldByName('Crew_Eff_Heading_Error')
              .AsSingle;
            Crew_Eff_Speed_Error := FieldByName('Crew_Eff_Speed_Error').AsSingle;
            TMA_Relative_Bearing_Rate := FieldByName('TMA_Relative_Bearing_Rate')
              .AsSingle;
            Passive_Sonar_Max_Course_Error := FieldByName
              ('Passive_Sonar_Max_Course_Error').AsSingle;
            Passive_Sonar_Max_Speed_Error := FieldByName
              ('Passive_Sonar_Max_Speed_Error').AsSingle;
            ESM_Error_Corr_Rate := FieldByName('ESM_Error_Corr_Rate').AsSingle;
            Chaff_Altitude_Threshold := FieldByName('Chaff_Altitude_Threshold')
              .AsSingle;
            MHS_Flash_Delay_Time := FieldByName('MHS_Flash_Delay_Time').AsSingle;
            MHS_Immed_Delay_Time := FieldByName('MHS_Immed_Delay_Time').AsSingle;
            MHS_Priority_Delay_Time := FieldByName('MHS_Priority_Delay_Time')
              .AsSingle;
            MHS_Routine_Delay_Time := FieldByName('MHS_Routine_Delay_Time')
              .AsSingle;
            Max_UWT_Range := FieldByName('Max_UWT_Range').AsSingle;
            Max_HF_Detect_Range := FieldByName('Max_HF_Detect_Range').AsSingle;
            Max_UHF_Detect_Range := FieldByName('Max_UHF_Detect_Range').AsSingle;
            Max_IFF_Range := FieldByName('Max_IFF_Range').AsSingle;
            Track_History_Air_Sample_Rate := FieldByName
              ('Track_History_Air_Sample_Rate').AsInteger;
            Track_History_Air_Max_Points := FieldByName
              ('Track_History_Air_Max_Points').AsInteger;
            Track_History_Sample_Rate := FieldByName('Track_History_Sample_Rate')
              .AsInteger;
            Track_History_Max_Points := FieldByName('Track_History_Max_Points')
              .AsInteger;
            Auto_Gun_Interception_Range := FieldByName
              ('Auto_Gun_Interception_Range').AsSingle;
            Auto_Gun_Threshold_Speed := FieldByName('Auto_Gun_Threshold_Speed')
              .AsSingle;
            Clutter_Reduction_Scale := FieldByName('Clutter_Reduction_Scale')
              .AsSingle;
            Jam_Break_Lock_Time_Interval := FieldByName
              ('Jam_Break_Lock_Time_Interval').AsInteger;
            Missile_Reacquisition_Time := FieldByName
              ('Missile_Reacquisition_Time')
              .AsInteger;
            Seduction_Bloom_Altitude := FieldByName('Seduction_Bloom_Altitude')
              .AsInteger;
            Seduction_Bloom_Range := FieldByName('Seduction_Bloom_Range')
              .AsSingle;
            HF_Datalink_MHS_Trans_Freq := FieldByName
              ('HF_Datalink_MHS_Trans_Freq').AsSingle;
            UHF_Datalink_MHS_Trans_Freq := FieldByName
              ('UHF_Datalink_MHS_Trans_Freq').AsSingle;
            Max_Num_Radar_Classes := FieldByName('Max_Num_Radar_Classes')
              .AsInteger;
            Max_Num_Sonar_Classes := FieldByName('Max_Num_Sonar_Classes')
              .AsInteger;
            Max_Num_Sonobuoy_Classes := FieldByName('Max_Num_Sonobuoy_Classes')
              .AsInteger;
            Max_Num_EO_Classes := FieldByName('Max_Num_EO_Classes').AsInteger;
            Max_Num_ESM_Classes := FieldByName('Max_Num_ESM_Classes').AsInteger;
            Max_Num_MAD_Classes := FieldByName('Max_Num_MAD_Classes').AsInteger;
            Max_Num_Fitted_Weap_Classes := FieldByName
              ('Max_Num_Fitted_Weap_Classes').AsInteger;
            Max_Num_Point_Effect_Classes := FieldByName
              ('Max_Num_Point_Effect_Classes').AsInteger;
            HAFO_Min_Range := FieldByName('HAFO_Min_Range').AsSingle;
            HAFO_Max_Range := FieldByName('HAFO_Max_Range').AsSingle;
            Engage_Guide_Stale_Target_Time := FieldByName
              ('Engage_Guide_Stale_Target_Time').AsInteger;
            Outrun_Guide_Stale_Target_Time := FieldByName
              ('Outrun_Guide_Stale_Target_Time').AsInteger;
            Shadow_Guide_Stale_Target_Time := FieldByName
              ('Shadow_Guide_Stale_Target_Time').AsInteger;
            Sonobuoy_Air_Deceleration := FieldByName('Sonobuoy_Air_Deceleration')
              .AsSingle;
            Sonobuoy_Air_Descent_Rate := FieldByName('Sonobuoy_Air_Descent_Rate')
              .AsSingle;
            Depth_Charge_Air_Deceleration := FieldByName
              ('Depth_Charge_Air_Deceleration').AsSingle;
            Depth_Charge_Air_Descent_Rate := FieldByName
              ('Depth_Charge_Air_Descent_Rate').AsSingle;
            Missile_Sea_Check_Interval := FieldByName
              ('Missile_Sea_Check_Interval')
              .AsInteger;
        end;
        with rec.FResource_Allocation do
        begin
            Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
            Allocation_Identifier := FieldByName('Allocation_Identifier')
              .AsString;
            Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
            Defaults_Index := FieldByName('Defaults_Index').AsInteger;
            Role_List_Index := FieldByName('Role_List_Index').AsInteger;
            Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetRadarByPOD_vs_SNR(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TRadar_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Radar_Definition ';
    ssql := ssql + 'WHERE (Curve_Definition_Index = ' + IntToStr(id) + ')';
    ssql := ssql + ' ORDER BY Radar_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRadar_On_Board.Create;
        with rec.FDef do
        begin
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Radar_Identifier := FieldByName('Radar_Identifier').AsString;
          Curve_Definition_Index := FieldByName('Curve_Definition_Index')
            .AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSonarByPOD_vs_SNR(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TSonar_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Sonar_Definition ';
    ssql := ssql + 'WHERE (Curve_Detection_Index = ' + IntToStr(id) + ')';
    ssql := ssql + ' ORDER BY Sonar_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TSonar_On_Board.Create;
        with rec.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
          Curve_Detection_Index := FieldByName('Curve_Detection_Index').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetLogisticAtVehicle(const id: Integer; var pList: TList): boolean;
var
  i : Integer;
  rec: TLogistics;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Logistic_Capability a ');
    SQL.Add('LEFT JOIN Vehicle_Definition b on a.Logistic_Index = b.Logistics_Index');
    SQL.Add('WHERE b.Logistics_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Logistic_Identifier ');

    Open;

    result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TLogistics.Create;
        with rec.FData do
        begin
          Logistic_Index        := FieldByName('Logistic_Index').AsInteger;
          Logistic_Identifier   := FieldByName('Logistic_Identifier').AsString;

        end;
        with rec.FVecDef do
        begin
          Vehicle_Index         := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier    := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetTransportAtVehicle(const id: Integer; var pList: TList): boolean;
var
  i : Integer;
  rec: TTransport;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Capability a ');
    SQL.Add('LEFT JOIN Vehicle_Definition b on a.Platform_Capability_Index = b.Platform_Capability_Index');
    SQL.Add('WHERE b.Platform_Capability_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Capability_Identifier ');

    Open;

    result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TTransport.Create;
        with rec.FData do
        begin
          Transport_Index        := FieldByName('Platform_Capability_Index').AsInteger;
          Transport_Identifier   := FieldByName('Capability_Identifier').AsString;

        end;
        with rec.FVecDef do
        begin
          Vehicle_Index         := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier    := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetBaseAtResourceAllocation(const id: Integer; var pList: TList): boolean;
var
  i : Integer;
  rec: TResource_Base_Mapping;
begin
  Result := False;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Embark_Library_Mapping a');
    SQL.Add('RIGHT JOIN Resource_Allocation b');
    SQL.Add('ON a.Resource_Alloc_Index = b.Resource_Alloc_Index');
    SQL.Add('WHERE Embark_Library_Index = ' + IntToStr(id));
    Open;

    Result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TResource_Base_Mapping.Create;

        with rec.FData do
        begin
          Base_Mapping_Index := FieldByName('Embark_Library_Index') .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Base_Index := FieldByName('Embark_Library_Index') .AsInteger;
          force := FieldByName('Force').AsInteger;
        end;

        with rec.FResource_Allocation do
        begin
          Resource_Alloc_Index      := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetWaypointAtResourceAllocation(const id: Integer; var pList: TList): boolean;
var
  i : Integer;
  rec: TResource_Waypoint_Mapping;
begin
  Result := False;

  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Waypoint_Mapping a');
    SQL.Add('RIGHT JOIN Resource_Allocation b');
    SQL.Add('ON a.Resource_Alloc_Index = b.Resource_Alloc_Index');
    SQL.Add('WHERE Waypoint_Index = ' + IntToStr(id));
    Open;

    Result := RecordCount > 0;

    if Assigned(pList) then
    begin
      for i := 0 to pList.Count - 1 do
      begin
        rec := pList.Items[i];
        rec.Free;
      end;

      pList.Clear;
    end
    else
      pList := TList.Create;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TResource_Waypoint_Mapping.Create;

        with rec.FData do
        begin
//          Waypoint_Mapping_Index := FieldByName('Waypoint_Mapping_Index') .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Waypoint_Index := FieldByName('Waypoint_Index') .AsInteger;
        end;

        with rec.FResource_Allocation do
        begin
          Resource_Alloc_Index      := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;


{$ENDREGION}

{$ENDREGION}

{$ENDREGION}

{$REGION ' Nanti Dulu '}

function TdmTTT.GetKompi(const id: Integer; var pList: TList): Boolean;
var
  rec: TPersonel;
begin
  result := False;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT b2.BataLyon_Index, b2.Batalyon_Identifier , ');
    SQL.Add('c3.Kompi_Index, c3.Kompi_Identifier ');
    SQL.Add('FROM Personel_Brigade a1 JOIN Personel_Batalyon b2 ON ');
    SQL.Add('a1.Brigade_Index = b2.Brigade_Index JOIN ');
    SQL.Add('Personel_Kompi c3 ON b2.Batalyon_Index = c3.Batalyon_Index ');
    SQL.Add('WHERE b2.BataLyon_Index = ' + IntToStr(id));

    Open;
    Result := RecordCount > 0;
    if not Assigned(pList) then
      pList := TList.Create
    else
      pList.Clear;

    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TPersonel.Create;
        TBatalyon(rec).Id := FieldByName('Batalyon_Index').AsInteger;
        TBatalyon(rec).Identifier := FieldByName('Batalyon_Identifier').AsString;
        TKompi(rec).Id := FieldByName('Kompi_Index').AsInteger;
        TKompi(rec).Identifier := FieldByName('Kompi_Identifier').AsString;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetLibrary_MappingByRA(const index,id: Integer; var pList: TList): boolean;
var
  rec: TResource_Allocation;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    case index of
      0 : SQL.Add('FROM Resource_Library_Mapping a ');
      33: SQL.Add('FROM Resource_Pattern_Mapping a ');
      34: SQL.Add('FROM Resource_Interval_List_Mapping a ');
      35: SQL.Add('FROM Resource_Overlay_Mapping a ');
      36: SQL.Add('FROM Resource_Allocation');
      37: SQL.Add('FROM Resource_Allocation');
    end;
    if (index <> 36) and (index <> 37) then
      SQL.Add('JOIN Resource_Allocation b on a.Resource_Alloc_Index = b.Resource_Alloc_Index ');
    case index of
      0 : SQL.Add('WHERE (a.Library_Index = ' + IntToStr(id) + ')');
      33: SQL.Add('WHERE (a.Pattern_Index = ' + IntToStr(id) + ')');
      34: SQL.Add('WHERE (a.Interval_List_Index = ' + IntToStr(id) + ')');
      35: SQL.Add('WHERE (a.Overlay_Index = ' + IntToStr(id) + ')');
      36: SQL.Add('WHERE (Role_List_Index = ' + IntToStr(id) + ')');
      37: SQL.Add('WHERE (Defaults_Index = ' + IntToStr(id) + ')');
    end;

    SQL.Add('ORDER BY Allocation_Identifier');
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TResource_Allocation.Create;
        with rec.FData do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier')
            .AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetRadarByVec(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TRadar_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Radar_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Radar_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRadar_On_Board.Create;
        with rec.FData do
        begin
          Radar_Instance_Index := FieldByName('Radar_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
          Submerged_Antenna_Height := FieldByName('Submerged_Antenna_Height')
            .AsSingle;
          Max_Operational_Depth := FieldByName('Max_Operational_Depth').AsSingle;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ---------------------------------------------------------------------

function TdmTTT.GetSonarByVec(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TSonar_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Sonar_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Sonar_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TSonar_On_Board.Create;
        with rec.FData do
        begin
          Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Time_2_Deploy := FieldByName('Time_2_Deploy').AsInteger;
          Time_2_Stow := FieldByName('Time_2_Stow').AsInteger;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSonarBySonobuoy(const id: Integer;
  var pList: TList): boolean;
var
  ssql: string;
  rec: TSonobuoy_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Sonobuoy_Definition a ';
    ssql := ssql + 'LEFT JOIN Sonar_Definition b on a.Sonar_Index = b.Sonar_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Sonar_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Sonar_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TSonobuoy_On_Board.Create;
        with rec.FDef do
        begin
          Sonobuoy_Index         := FieldByName('Sonobuoy_Index').AsInteger;
          Class_Identifier       := FieldByName('Class_Identifier').AsString;
          Sonobuoy_Type          := FieldByName('Sonobuoy_Type').AsInteger;
          Platform_Domain        := FieldByName('Platform_Domain').AsInteger;
          Platform_Category      := FieldByName('Platform_Category').AsInteger;
          Platform_Type          := FieldByName('Platform_Type').AsInteger;
          Endurance_Time         := FieldByName('Endurance_Time').AsInteger;
          Max_Depth              := FieldByName('Max_Depth').AsSingle;
          Length                 := FieldByName('Length').AsSingle;
          Width                  := FieldByName('Width').AsSingle;
          Height                 := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross   := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross    := FieldByName('Side_Acoustic_Cross').AsSingle;
          Damage_Capacity        := FieldByName('Damage_Capacity').AsInteger;
          CPA_Detection_Capable  := FieldByName('CPA_Detection_Capable').AsInteger;
          CPA_Range_Limit        := FieldByName('CPA_Range_Limit').AsSingle;
          Sonar_Index            := FieldByName('Sonar_Index').AsInteger;
        end;

        with rec.FSonar.FDef do
        begin
          Sonar_Index            := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier       := FieldByName('Sonar_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ---------------------------------------------------------------------

function TdmTTT.GetESMByVec(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TESM_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM ESM_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.ESM_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TESM_On_Board.Create;
        with rec.FData do
        begin
          ESM_Instance_Index := FieldByName('ESM_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          ESM_Index := FieldByName('ESM_Index').AsInteger;
          Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
          Max_Operational_Depth := FieldByName('Max_Operational_Depth')
            .AsSingle;
          Submerged_Antenna_Height := FieldByName('Submerged_Antenna_Height')
            .AsSingle;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ---------------------------------------------------------------------

function TdmTTT.GetEOByVec(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TEOD_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM EO_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.EO_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TEOD_On_Board.Create;
        with rec.FData do
        begin
          EO_Instance_Index := FieldByName('EO_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          EO_Index := FieldByName('EO_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ---------------------------------------------------------------------

function TdmTTT.GetMADByVec(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TMAD_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM MAD_Sensor_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.MAD_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TMAD_On_Board.Create;
        with rec.FData do
        begin
          MAD_Instance_Index := FieldByName('MAD_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          MAD_Index := FieldByName('MAD_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ---------------------------------------------------------------------

function TdmTTT.GetSonobuoyByVec(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TSonobuoy_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Sonobuoy_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Sonobuoy_Index = ' + IntToStr(id) + ')';

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TSonobuoy_On_Board.Create;
        with rec.FData do
        begin
          Sonobuoy_Instance_Index := FieldByName('Sonobuoy_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetVehicleByHostedPlatform(const id: Integer;
  var pList: TList): boolean;
var
  ssql: string;
  rec: TVehicle_Definition;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Hosted_Platform a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Hosted_Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Hosted_Vehicle_Index = ' + IntToStr(id) + ')';


    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TVehicle_Definition.Create;
        with rec.FData do
        begin
          Vehicle_Index        := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier   := FieldByName('Vehicle_Identifier').AsString;
        end;

        with rec.FHosted_Platform do
        begin
          Slave_Index          := FieldByName('Slave_Index').AsInteger;
          Vehicle_Index        := FieldByName('Vehicle_Index').AsInteger;
          Hosted_Vehicle_Index := FieldByName('Hosted_Vehicle_Index').AsInteger;
          Quantity             := FieldByName('Quantity').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetVehicleByRPL(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TVehicle_Definition;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Vehicle_Definition a ';
    ssql := ssql + 'LEFT JOIN Platform_Library_Entry b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Vehicle_Index = ' + IntToStr(id) + ')';

    ssql := ssql + 'AND b.Platform_Type = 1';
    ssql := ssql + ' ORDER BY a.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TVehicle_Definition.Create;
        with rec.FData do
        begin
          Vehicle_Index        := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier   := FieldByName('Vehicle_Identifier').AsString;
        end;

        with rec.FPlatform_Library_Entry do
        begin
          Library_Entry_Index  := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index        := FieldByName('Library_Index').AsInteger;
          Platform_Type        := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index        := FieldByName('Vehicle_Index').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetSonobuoyByRPL(const id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TSonobuoy_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Sonobuoy_Definition a ';
    ssql := ssql + 'LEFT JOIN Platform_Library_Entry b on a.Sonobuoy_Index = b.Sonobuoy_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE (a.Sonobuoy_Index = ' + IntToStr(id) + ')';

    ssql := ssql + 'AND b.Platform_Type = 7';
    ssql := ssql + ' ORDER BY a.Class_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TSonobuoy_On_Board.Create;
        with rec.FDef do
        begin
          Sonobuoy_Index         := FieldByName('Sonobuoy_Index').AsInteger;
          Class_Identifier       := FieldByName('Class_Identifier').AsString;
          Sonobuoy_Type          := FieldByName('Sonobuoy_Type').AsInteger;
          Platform_Domain        := FieldByName('Platform_Domain').AsInteger;
          Platform_Category      := FieldByName('Platform_Category').AsInteger;
          Platform_Type          := FieldByName('Platform_Type').AsInteger;
          Endurance_Time         := FieldByName('Endurance_Time').AsInteger;
          Max_Depth              := FieldByName('Max_Depth').AsSingle;
          Length                 := FieldByName('Length').AsSingle;
          Width                  := FieldByName('Width').AsSingle;
          Height                 := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross   := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross    := FieldByName('Side_Acoustic_Cross').AsSingle;
          Damage_Capacity        := FieldByName('Damage_Capacity').AsInteger;
          CPA_Detection_Capable  := FieldByName('CPA_Detection_Capable').AsInteger;
          CPA_Range_Limit        := FieldByName('CPA_Range_Limit').AsSingle;
          Sonar_Index            := FieldByName('Sonar_Index').AsInteger;
        end;

        with rec.FPlatform_Library_Entry do
        begin
          Library_Entry_Index  := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index        := FieldByName('Library_Index').AsInteger;
          Platform_Type        := FieldByName('Platform_Type').AsInteger;
          Sonobuoy_Index       := FieldByName('Sonobuoy_Index').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ---------------------------------------------------------------------
//
//function TdmTTT.GetFitted_WeaponByVec(const index,id: Integer; var pList: TList): boolean;
//var
//  ssql: string;
//  rec: TMissile_On_Board;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := 'SELECT * ';
//    ssql := ssql + 'FROM Fitted_Weapon_On_Board a ';
//    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';
//
//    if id <> 0 then begin
//      case index of
//        7: ssql := ssql + 'WHERE (a.Missile_Index = ' + IntToStr(id) + ')';
//        8: ssql := ssql + 'WHERE (a.Torpedo_Index = ' + IntToStr(id) + ')';
//        9: ssql := ssql + 'WHERE (a.Mine_Index = ' + IntToStr(id) + ')';
//      end;
//    end;
//
//    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount > 0;
//    if not Assigned(pList) then
//    begin
//      pList.Create;
//    end
//    else
//    begin
//      pList.Clear;
//    end;
//
//    if not IsEmpty then
//    begin
//      First;
//
//      while not ZQ.Eof do
//      begin
//        rec := TMissile_On_Board.Create;
//        with rec.FData do
//        begin
//          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
//          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
//          Instance_Type := FieldByName('Instance_Type').AsInteger;
//          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
//          Mount_Type := FieldByName('Mount_Type').AsInteger;
//          Launch_Angle := FieldByName('Launch_Angle').AsSingle;
//          Launch_Angle_Required := FieldByName('Launch_Angle_Required')
//            .AsInteger;
//          Quantity := FieldByName('Quantity').AsInteger;
//          Firing_Delay := FieldByName('Firing_Delay').AsSingle;
//          Missile_Index := FieldByName('Missile_Index').AsInteger;
//          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
//          Mine_Index := FieldByName('Mine_Index').AsInteger;
//          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
//        end;
//
//        with rec.FVehicle.FData do
//        begin
//          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
//          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
//        end;
//
//        pList.Add(rec);
//        ZQ.Next;
//      end;
//    end;
//  end;
//end;
//
//function TdmTTT.GetFitted_WeaponByRPL(const index, id: Integer;
//  var pList: TList): boolean;
//var
//  ssql: string;
//  recMissile: TMissile_On_Board;
//  recTorpedo: TTorpedo_On_Board;
//  recMine : TMine_On_Board;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := 'SELECT * ';
//
//    if id <> 0 then begin
//      case index of
//        7:
//        begin
//          ssql := ssql + 'FROM Missile_Definition a ';
//          ssql := ssql + 'LEFT JOIN Platform_Library_Entry b on a.Missile_Index = b.Missile_Index ';
//          ssql := ssql + 'WHERE (a.Missile_Index = ' + IntToStr(id) + ') ';
//          ssql := ssql + 'AND (b.Platform_Type = 2 OR b.Platform_Type = 5)';
//          ssql := ssql + ' ORDER BY a.Class_Identifier';
//        end;
//        8:
//        begin
//          ssql := ssql + 'FROM Torpedo_Definition a ';
//          ssql := ssql + 'LEFT JOIN Platform_Library_Entry b on a.Torpedo_Index = b.Torpedo_Index ';
//          ssql := ssql + 'WHERE (a.Torpedo_Index = ' + IntToStr(id) + ')';
//          ssql := ssql + 'AND b.Platform_Type = 3';
//          ssql := ssql + ' ORDER BY a.Class_Identifier';
//        end;
//        9:
//        begin
//          ssql := ssql + 'FROM Mine_Definition a ';
//          ssql := ssql + 'LEFT JOIN Platform_Library_Entry b on a.Mine_Index = b.Mine_Index ';
//          ssql := ssql + 'WHERE (a.Mine_Index = ' + IntToStr(id) + ')';
//          ssql := ssql + 'AND b.Platform_Type = 4';
//          ssql := ssql + ' ORDER BY a.Mine_Identifier';
//        end;
//      end;
//    end;
//
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount > 0;
//    if not Assigned(pList) then
//    begin
//      pList.Create;
//    end
//    else
//    begin
//      pList.Clear;
//    end;
//
//    if not IsEmpty then
//    begin
//      First;
//
//      while not ZQ.Eof do
//      begin
//
//        if id <> 0 then
//        begin
//          case index of
//            7:
//            begin
//              recMissile := TMissile_On_Board.Create;
//              with recMissile.FDef do
//              begin
//                Missile_Index        := FieldByName('Missile_Index').AsInteger;
//                Class_Identifier     := FieldByName('Class_Identifier').AsString;
//              end;
//
//              with recMissile.FPlatform_Library_Entry do
//              begin
//                Library_Entry_Index  := FieldByName('Library_Entry_Index').AsInteger;
//                Library_Index        := FieldByName('Library_Index').AsInteger;
//                Platform_Type        := FieldByName('Platform_Type').AsInteger;
//                Missile_Index        := FieldByName('Missile_Index').AsInteger;
//              end;
//
//              pList.Add(recMissile);
//            end;
//            8:
//            begin
//              recTorpedo := TTorpedo_On_Board.Create;
//              with recTorpedo.FDef do
//              begin
//                Torpedo_Index        := FieldByName('Torpedo_Index').AsInteger;
//                Class_Identifier     := FieldByName('Class_Identifier').AsString;
//              end;
//
//              with recTorpedo.FPlatform_Library_Entry do
//              begin
//                Library_Entry_Index  := FieldByName('Library_Entry_Index').AsInteger;
//                Library_Index        := FieldByName('Library_Index').AsInteger;
//                Platform_Type        := FieldByName('Platform_Type').AsInteger;
//                Torpedo_Index        := FieldByName('Torpedo_Index').AsInteger;
//              end;
//
//              pList.Add(recTorpedo);
//            end;
//            9:
//            begin
//              recMine := TMine_On_Board.Create;
//              with recMine.FMine_Def do
//              begin
//                Mine_Index          := FieldByName('Mine_Index').AsInteger;
//                Mine_Identifier     := FieldByName('Mine_Identifier').AsString;
//              end;
//
//              with recMine.FPlatform_Library_Entry do
//              begin
//                Library_Entry_Index  := FieldByName('Library_Entry_Index').AsInteger;
//                Library_Index        := FieldByName('Library_Index').AsInteger;
//                Platform_Type        := FieldByName('Platform_Type').AsInteger;
//                Mine_Index           := FieldByName('Mine_Index').AsInteger;
//              end;
//
//              pList.Add(recMine);
//            end;
//          end;
//        end;
//
//        ZQ.Next;
//      end;
//    end;
//  end;
//end;

// ---------------------------------------------------------------------

function TdmTTT.GetPoint_EffectByVec(const index,id: Integer; var pList: TList): boolean;
var
  ssql: string;
  rec: TPoint_Effect_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Point_Effect_On_Board a ';
    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';

    if id <> 0 then begin
      case index of
        10: ssql := ssql + 'WHERE (a.Gun_Index = ' + IntToStr(id) + ')';
        11: ssql := ssql + 'WHERE (a.Bomb_Index = ' + IntToStr(id) + ')';
      end;
    end;

    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPoint_Effect_On_Board.Create;
        with rec.FData do begin
          Point_Effect_Index    := FieldByName('Point_Effect_Index').AsInteger;
          Instance_Identifier   := FieldByName('Instance_Identifier').AsString;
          Instance_Type         := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index         := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type            := FieldByName('Mount_Type').AsInteger;
          Quantity              := FieldByName('Quantity').AsInteger;
          Gun_Index             := FieldByName('Gun_Index').AsInteger;
          Bomb_Index            := FieldByName('Bomb_Index').AsInteger;
          TurretID              := FieldByName('TurretID').AsInteger;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ---------------------------------------------------------------------
//
//function TdmTTT.GetAcoustic_DecoyByVec(const id: Integer; var pList: TList): boolean;
//var
//  ssql: string;
//  rec: TAcoustic_Decoy_On_Board;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := 'SELECT * ';
//    ssql := ssql + 'FROM Acoustic_Decoy_On_Board a ';
//    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';
//
//    if id <> 0 then
//      ssql := ssql + 'WHERE (a.Decoy_Index = ' + IntToStr(id) + ')';
//
//    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount > 0;
//    if not Assigned(pList) then
//    begin
//      pList.Create;
//    end
//    else
//    begin
//      pList.Clear;
//    end;
//
//    if not IsEmpty then
//    begin
//      Result := True;
//      First;
//
//      while not ZQ.Eof do
//      begin
//        rec := TAcoustic_Decoy_On_Board.Create;
//        with rec.FData do
//        begin
//          Acoustic_Instance_Index  := FieldByName('Acoustic_Instance_Index').AsInteger;
//          Instance_Identifier      := FieldByName('Instance_Identifier').AsString;
//          Instance_Type            := FieldByName('Instance_Type').AsInteger;
//          Quantity                 := FieldByName('Quantity').AsInteger;
//          Vehicle_Index            := FieldByName('Vehicle_Index').AsInteger;
//          Decoy_Index              := FieldByName('Decoy_Index').AsInteger;
//        end;
//
//        with rec.FVehicle do
//        begin
//          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
//          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
//        end;
//
//        pList.Add(rec);
//        ZQ.Next;
//      end;
//    end;
//  end;
//end;
//
//function TdmTTT.GetAir_BubbleByVec(const id: Integer; var pList: TList): boolean;
//var
//  ssql: string;
//  rec: TAir_Bubble_Mount;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := 'SELECT * ';
//    ssql := ssql + 'FROM Air_Bubble_Mount a ';
//    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';
//
//    if id <> 0 then
//      ssql := ssql + 'WHERE (a.Air_Bubble_Index = ' + IntToStr(id) + ')';
//
//    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount > 0;
//    if not Assigned(pList) then
//    begin
//      pList.Create;
//    end
//    else
//    begin
//      pList.Clear;
//    end;
//
//    if not IsEmpty then
//    begin
//      First;
//
//      while not ZQ.Eof do
//      begin
//        rec := TAir_Bubble_Mount.Create;
//        with rec.FData do
//        begin
//          Air_Bubble_Instance_Index := FieldByName('Air_Bubble_Instance_Index').AsInteger;
//          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
//          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
//          Bubble_Qty_On_Board := FieldByName('Bubble_Qty_On_Board').AsInteger;
//          Air_Bubble_Index    := FieldByName('Air_Bubble_Index').AsInteger;
//        end;
//
//        with rec.FVehicle do
//        begin
//          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
//          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
//        end;
//
//        pList.Add(rec);
//        ZQ.Next;
//      end;
//    end;
//  end;
//end;

// ---------------------------------------------------------------------

function TdmTTT.GetCapabilityByVec(const id: Integer;
  var pList: TList): boolean;
var
  rec: TTransport;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Capability a ');
    SQL.Add('LEFT JOIN Vehicle_Definition b on a.Platform_Capability_Index = b.Platform_Capability_Index');
    SQL.Add('WHERE b.Platform_Capability_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Capability_Identifier ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;


      while not ZQ.Eof do
      begin
        rec := TTransport.Create;
        with rec.FData do
        begin
          Transport_Index       := FieldByName('Platform_Capability_Index').AsInteger;
          Transport_Identifier           := FieldByName('Capability_Identifier').AsString;
          Carriable                       := FieldByName('Carriable').AsBoolean;
          Hangar_Unit_Carried             := FieldByName('Hangar_Unit_Carried').AsBoolean;
          Deck_Unit_Carried               := FieldByName('Deck_Unit_Carried').AsBoolean;
          Personnel_Unit_Carried          := FieldByName('Personnel_Unit_Carried').AsBoolean;
          FixedWing_Carried               := FieldByName('FixedWing_Carried').AsBoolean;
          Rotary_Carried                  := FieldByName('Rotary_Carried').AsBoolean;
          Amphibious_Carried              := FieldByName('Amphibious_Carried').AsBoolean;
          Land_Carried                    := FieldByName('Land_Carried').AsBoolean;
          Max_Hangar_Capacity             := FieldByName('Max_Hangar_Capacity').AsInteger;
          Max_Hangar_Weight               := FieldByName('Max_Hangar_Weight').AsFloat ;
          Max_Deck_Weight                 := FieldByName('Max_Deck_Weight').AsFloat;
          Deck_Width                      := FieldByName('Deck_Width').AsFloat;
          Deck_Length                     := FieldByName('Deck_Length').AsFloat;
          Max_Personnel_Capacity          := FieldByName('Max_Personnel_Capacity').AsInteger;
        end;
        with rec.FVecDef do
        begin
          Vehicle_Index         := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier    := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetCarriable_Vehicle(const id: Integer;
  var pList: TList): Boolean;
var
  rec : TVehicle_Definition;
begin
  Result := False;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Vehicle_Definition a, Platform_Capability b');
    SQL.Add('WHERE a.Platform_Capability_Index = b.Platform_Capability_Index');
    SQL.Add('AND b.Carriable = 1');
    Open;

    Result := RecordCount > 0;
    if not Assigned(pList) then
      pList.Create
    else
      pList.Clear;

    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TVehicle_Definition.Create;
        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics')
            .AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross').AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
            .AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact').AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
            .AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName
            ('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName
            ('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName
            ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName('Active_Passive_Tor_POH_Mod')
            .AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
            .AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
            .AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier').AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
            .AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
            .AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName('Acoustic_Mine_POH_Modifier')
            .AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
            .AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
            .AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
            .AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
            .AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName
            ('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName
            ('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName
            ('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName
            ('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName
            ('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName
            ('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName('Periscope_Side_IR_Xsection')
            .AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
            .AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
            .AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName
            ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName
            ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
            .AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName
            ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName
            ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName('Air_Drop_Torpedo_Max_Speed')
            .AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName('HMS_Noise_Reduction_Factor')
            .AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName('TAS_Noise_Reduction_Factor')
            .AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
            .AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName
            ('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := FieldByName
            ('UHF_Mid_Course_Update_Capable').AsBoolean;
  //        SATCOM_Mid_Course_Update_Capable    := FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;
          Font_id    := FieldByName('Font_id').AsInteger;
          Symbol_id    := FieldByName('Symbol_id').AsInteger;
          Quantity_Group_Personal    := FieldByName('Quantity_Group_Personal').AsInteger;
          Vbs_Class_Name    := FieldByName('Vbs_Class_Name').AsString;
          Platform_Capability_Index := FieldByName('Platform_Capability_Index').AsInteger;//dng
          Logistics_Index    := FieldByName('Logistics_Index').AsInteger;
          Tactical_Symbol_Name    := FieldByName('Tactical_Symbol_Name').AsString;
          GangwayPosition := FieldByName('GangwayPosition').AsInteger;
          DWT := FieldByName('DWT').AsSingle;
          last_updated := FieldByName('last_updated').AsDateTime;
        end;

        with rec.FPfCapability do
        begin
          Transport_Index       := FieldByName('Platform_Capability_Index').AsInteger;
          Transport_Identifier           := FieldByName('Capability_Identifier').AsString;
          Carriable                       := FieldByName('Carriable').AsBoolean;
          Hangar_Unit_Carried             := FieldByName('Hangar_Unit_Carried').AsBoolean;
          Deck_Unit_Carried               := FieldByName('Deck_Unit_Carried').AsBoolean;
          Personnel_Unit_Carried          := FieldByName('Personnel_Unit_Carried').AsBoolean;
          FixedWing_Carried               := FieldByName('FixedWing_Carried').AsBoolean;
          Rotary_Carried                  := FieldByName('Rotary_Carried').AsBoolean;
          Amphibious_Carried              := FieldByName('Amphibious_Carried').AsBoolean;
          Land_Carried                    := FieldByName('Land_Carried').AsBoolean;
          Max_Hangar_Capacity             := FieldByName('Max_Hangar_Capacity').AsInteger;
          Max_Hangar_Weight               := FieldByName('Max_Hangar_Weight').AsFloat ;
          Max_Deck_Weight                 := FieldByName('Max_Deck_Weight').AsFloat;
          Deck_Width                      := FieldByName('Deck_Width').AsFloat;
          Deck_Length                     := FieldByName('Deck_Length').AsFloat;
          Max_Personnel_Capacity          := FieldByName('Max_Personnel_Capacity').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;
//
//function TdmTTT.GetChaffByVec(const id: Integer; var pList: TList): boolean;
//var
//  ssql: string;
//  rec: TChaff_On_Board;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := 'SELECT * ';
//    ssql := ssql + 'FROM Chaff_On_Board a ';
//    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';
//
//    if id <> 0 then
//      ssql := ssql + 'WHERE (a.Chaff_Index = ' + IntToStr(id) + ')';
//
//    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount > 0;
//    if not Assigned(pList) then
//    begin
//      pList.Create;
//    end
//    else
//    begin
//      pList.Clear;
//    end;
//
//    if not IsEmpty then
//    begin
//      First;
//
//      while not ZQ.Eof do
//      begin
//        rec := TChaff_On_Board.Create;
//        with rec.FData do
//        begin
//          Chaff_Instance_Index := FieldByName('Chaff_Instance_Index').AsInteger;
//          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
//          Instance_Type := FieldByName('Instance_Type').AsInteger;
//          Chaff_Qty_On_Board := FieldByName('Chaff_Qty_On_Board').AsInteger;
//          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
//          Chaff_Index := FieldByName('Chaff_Index').AsInteger;
//        end;
//
//        with rec.FVehicle do
//        begin
//          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
//          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
//        end;
//
//        pList.Add(rec);
//        ZQ.Next;
//      end;
//    end;
//  end;
//end;
//
//
//function TdmTTT.GetFloating_DecoyByVec(const id: Integer; var pList: TList): boolean;
//var
//  ssql: string;
//  rec: TFloating_Decoy_On_Board;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := 'SELECT * ';
//    ssql := ssql + 'FROM Floating_Decoy_On_Board a ';
//    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';
//
//    if id <> 0 then
//      ssql := ssql + 'WHERE (a.Floating_Decoy_Index = ' + IntToStr(id) + ')';
//
//    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount > 0;
//    if not Assigned(pList) then
//    begin
//      pList.Create;
//    end
//    else
//    begin
//      pList.Clear;
//    end;
//
//    if not IsEmpty then
//    begin
//      First;
//
//      while not ZQ.Eof do
//      begin
//        rec := TFloating_Decoy_On_Board.Create;
//        with rec.FData do
//        begin
//          Floating_Decoy_Instance_Index := FieldByName('Floating_Decoy_Instance_Index').AsInteger;
//          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
//          Instance_Type := FieldByName('Instance_Type').AsInteger;
//          Quantity := FieldByName('Quantity').AsInteger;
//          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
//          Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
//        end;
//
//        with rec.FVehicle do
//        begin
//          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
//          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
//        end;
//
//        pList.Add(rec);
//        ZQ.Next;
//      end;
//    end;
//  end;
//end;
//
//// ---------------------------------------------------------------------
//
//function TdmTTT.GetSelf_DefensiveByVec(const id: Integer; var pList: TList): boolean;
//var
//  ssql: string;
//  rec: TDefensive_Jammer_On_Board;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := 'SELECT * ';
//    ssql := ssql + 'FROM Defensive_Jammer_On_Board a ';
//    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';
//
//    if id <> 0 then
//      ssql := ssql + 'WHERE (a.Defensive_Jammer_Index = ' + IntToStr(id) + ')';
//
//    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount > 0;
//    if not Assigned(pList) then
//    begin
//      pList.Create;
//    end
//    else
//    begin
//      pList.Clear;
//    end;
//
//    if not IsEmpty then
//    begin
//      First;
//
//      while not ZQ.Eof do
//      begin
//        rec := TDefensive_Jammer_On_Board.Create;
//        with rec.FData do
//        begin
//          Defensive_Jammer_Instance_Index := FieldByName
//            ('Defensive_Jammer_Instance_Id').AsInteger;
//          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
//          Instance_Type := FieldByName('Instance_Type').AsInteger;
//          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
//          Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index')
//            .AsInteger;
//        end;
//
//        with rec.FVehicle do
//        begin
//          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
//          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
//        end;
//
//        pList.Add(rec);
//        ZQ.Next;
//      end;
//    end;
//  end;
//end;
//
//// ---------------------------------------------------------------------
//
//function TdmTTT.GetTowed_JammerByVec(const id: Integer; var pList: TList): boolean;
//var
//  ssql: string;
//  rec: TTowed_Jammer_Decoy_On_Board;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := 'SELECT * ';
//    ssql := ssql + 'FROM Towed_Jammer_Decoy_On_Board a ';
//    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';
//
//    if id <> 0 then
//      ssql := ssql + 'WHERE (a.Towed_Decoy_Index = ' + IntToStr(id) + ')';
//
//    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount > 0;
//    if not Assigned(pList) then
//    begin
//      pList.Create;
//    end
//    else
//    begin
//      pList.Clear;
//    end;
//
//    if not IsEmpty then
//    begin
//      First;
//
//      while not ZQ.Eof do
//      begin
//        rec := TTowed_Jammer_Decoy_On_Board.Create;
//        with rec.FData do
//        begin
//          Towed_Decoy_Instance_Index := FieldByName('Towed_Decoy_Instance_Index').AsInteger;
//          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
//          Instance_Type := FieldByName('Instance_Type').AsInteger;
//          Quantity := FieldByName('Quantity').AsInteger;
//          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
//          Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
//        end;
//
//        with rec.FVehicle do
//        begin
//          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
//          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
//        end;
//
//        pList.Add(rec);
//        ZQ.Next;
//      end;
//    end;
//  end;
//end;
//
//// ---------------------------------------------------------------------
//
//function TdmTTT.GetRadar_NoiseByVec(const id: Integer; var pList: TList): boolean;
//var
//  ssql: string;
//  rec: TJammer_On_Board;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := 'SELECT * ';
//    ssql := ssql + 'FROM Jammer_On_Board a ';
//    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';
//
//    if id <> 0 then
//      ssql := ssql + 'WHERE (a.Jammer_Index = ' + IntToStr(id) + ')';
//
//    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount > 0;
//    if not Assigned(pList) then
//    begin
//      pList.Create;
//    end
//    else
//    begin
//      pList.Clear;
//    end;
//
//    if not IsEmpty then
//    begin
//      First;
//
//      while not ZQ.Eof do
//      begin
//        rec := TJammer_On_Board.Create;
//        with rec.FData do
//        begin
//          Jammer_Instance_Index := FieldByName('Jammer_Instance_Index').AsInteger;
//          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
//          Instance_Type := FieldByName('Instance_Type').AsInteger;
//          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
//          Jammer_Index := FieldByName('Jammer_Index').AsInteger;
//          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
//        end;
//
//        with rec.FVehicle do
//        begin
//          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
//          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
//        end;
//
//        pList.Add(rec);
//        ZQ.Next;
//      end;
//    end;
//  end;
//end;
//
//// ---------------------------------------------------------------------
//
//function TdmTTT.GetInfrared_DecoyByVec(const id: Integer; var pList: TList): boolean;
//var
//  ssql: string;
//  rec: TInfrared_Decoy_On_Board;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := 'SELECT * ';
//    ssql := ssql + 'FROM Infrared_Decoy_On_Board a ';
//    ssql := ssql + 'LEFT JOIN Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';
//
//    if id <> 0 then
//      ssql := ssql + 'WHERE (a.Infrared_Decoy_Index = ' + IntToStr(id) + ')';
//
//    ssql := ssql + ' ORDER BY b.Vehicle_Identifier';
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount > 0;
//    if not Assigned(pList) then
//    begin
//      pList.Create;
//    end
//    else
//    begin
//      pList.Clear;
//    end;
//
//    if not IsEmpty then
//    begin
//      First;
//
//      while not ZQ.Eof do
//      begin
//        rec := TInfrared_Decoy_On_Board.Create;
//        with rec.FData do
//        begin
//          Infrared_Decoy_Instance_Index := FieldByName
//            ('Infrared_Decoy_Instance_Index').AsInteger;
//          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
//          Instance_Type := FieldByName('Instance_Type').AsInteger;
//          Infrared_Decoy_Qty_On_Board := FieldByName
//            ('Infrared_Decoy_Qty_On_Board').AsInteger;
//          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
//          Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
//        end;
//
//        with rec.FVehicle do
//        begin
//          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
//          Vehicle_Identifier  := FieldByName('Vehicle_Identifier').AsString;
//        end;
//
//        pList.Add(rec);
//        ZQ.Next;
//      end;
//    end;
//  end;
//end;

// ---------------------------------------------------------------------

function TdmTTT.GetPlatform_InstanceBySce(const index,id: Integer;
  var pList: TList; instance_name: String): boolean;
var
  rec: TPlatform_Instance;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Instance a RIGHT JOIN Scenario_Definition b ');
    SQL.Add('ON a.Resource_Alloc_Index = b.Resource_Alloc_Index ');
    case index of
      20: SQL.Add('WHERE a.Missile_Index = ' + IntToStr(id));
      21: SQL.Add('WHERE a.Torpedo_Index = ' + IntToStr(id));
      22: SQL.Add('WHERE a.Sonobuoy_Index = ' + IntToStr(id));
      23: SQL.Add('WHERE a.Mine_Index = ' + IntToStr(id));
      24: SQL.Add('WHERE a.Satellite_Index = ' + IntToStr(id));
      25: SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(id) +
          ' AND a.Instance_Name = ' + QuotedStr(instance_name));
    end;
    SQL.Add(' ORDER BY b.Scenario_Identifier ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance.Create;
        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index')
            .AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;

        with rec.FScenario do
        begin
          Scenario_Index      := FieldByName('Scenario_Index').AsInteger;
          Scenario_Identifier := FieldByName('Scenario_Identifier').AsString;
          Resource_Alloc_Index:= FieldByName('Resource_Alloc_Index').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// --------------------------------------------------------------------------

function TdmTTT.GetWaypointBySce(const id: Integer; var pList: TList): boolean;
var
  rec: TWaypoint_Def;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Waypoint_Mapping a LEFT JOIN Waypoint b ');
    SQL.Add('ON a.Waypoint_Index = b.Waypoint_Index ');
    SQL.Add('RIGHT JOIN Scenario_Definition c ');
    SQL.Add('ON a.Resource_Alloc_Index = c.Resource_Alloc_Index ');
    SQL.Add('WHERE a.Waypoint_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY c.Scenario_Identifier ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TWaypoint_Def.Create;
        with rec.FData do
        begin
          Waypoint_Index := FieldByName('Waypoint_Index')
            .AsInteger;
          Termination := FieldByName('Termination').AsInteger;
          Waypoint_Name := FieldByName('Waypoint_Name').AsString;
          Waypoint_Centre_Lat :=  FieldByName('Waypoint_Centre_Lat').AsFloat;
          Waypoint_Centre_Long :=  FieldByName('Waypoint_Centre_Long').AsFloat;
          Dimension := FieldByName('Dimension').AsSingle;
        end;

        with rec.FScenario do
        begin
          Scenario_Index      := FieldByName('Scenario_Index').AsInteger;
          Scenario_Identifier := FieldByName('Scenario_Identifier').AsString;
          Resource_Alloc_Index:= FieldByName('Resource_Alloc_Index').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetRuntime_PlatformBySce(const id: Integer; var pList: TList): boolean;
var
  rec: TRuntime_Platform_Library;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Library_Mapping a LEFT JOIN Runtime_Platform_Library b ');
    SQL.Add('ON a.Library_Index = b.Platform_Library_Index ');
    SQL.Add('RIGHT JOIN Scenario_Definition c ');
    SQL.Add('ON a.Resource_Alloc_Index = c.Resource_Alloc_Index ');
    SQL.Add('WHERE a.Library_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY c.Scenario_Identifier ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRuntime_Platform_Library.Create;
        with rec.FData do
        begin
          Platform_Library_Index := FieldByName('Platform_Library_Index')
            .AsInteger;
          Library_Name := FieldByName('Library_Name').AsString;
        end;

        with rec.FScenario do
        begin
          Scenario_Index      := FieldByName('Scenario_Index').AsInteger;
          Scenario_Identifier := FieldByName('Scenario_Identifier').AsString;
          Resource_Alloc_Index:= FieldByName('Resource_Alloc_Index').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// --------------------------------------------------------------------------

function TdmTTT.GetPlatform_Instance_And_PredefinedByVehicle(const id: Integer; var pList: TList): boolean;
var
  rec: TPlatform_Instance;
  recPred: TPredefined_Pattern;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Instance a LEFT JOIN Resource_Allocation b ');
    SQL.Add('ON a.Resource_Alloc_Index = b.Resource_Alloc_Index ');
    SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY b.Allocation_Identifier ');

    Open;

    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;
      Result  := True;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance.Create;
        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index')
            .AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;

        with rec.FResource do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;

    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Predefined_Pattern ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Pattern_Identifier ');

    Open;

    if not IsEmpty then
    begin
      First;
      Result  := True;

      while not ZQ.Eof do
      begin
        recPred := TPredefined_Pattern.Create;

        with recPred.FData do
        begin
          Pattern_Index := FieldByName('Pattern_Index').AsInteger;
          Pattern_Identifier := FieldByName('Pattern_Identifier').AsString;
          Pattern_Type := FieldByName('Pattern_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Pattern_Termination := FieldByName('Pattern_Termination').AsInteger;
          Termination_Heading := FieldByName('Termination_Heading').AsSingle;
        end;

        pList.Add(recPred);
        ZQ.Next;
      end;
    end;
  end;
end;

// -------------------------------------------------------------------------


function TdmTTT.GetLogisticsByVec(const id: Integer; var pList: TList): boolean;
var
  rec: TLogistics;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Default_Logistics a ');
    SQL.Add('LEFT JOIN Vehicle_Definition b on a.Logistics_Index = b.Logistics_Index');
    SQL.Add('WHERE b.Logistics_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Logistics_Identifier ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;


      while not ZQ.Eof do
      begin
        rec := TLogistics.Create;
        with rec.FData do
        begin
          Logistic_Index        := FieldByName('Logistics_Index').AsInteger;
          Logistic_Identifier   := FieldByName('Logistics_Identifier').AsString;
          PA                     := FieldByName('PA').AsInteger;
          BA                     := FieldByName('BA').AsInteger;
          TA                     := FieldByName('TA').AsInteger;
          Fuel_Provision                    := FieldByName('HSD').AsSingle;
          Max_Lubricants_Capacity                     := FieldByName('ML').AsSingle;
          Max_Freshwater_Capacity                     := FieldByName('AT').AsSingle;
          Lubricant_Provision                  := FieldByName('AVTUR').AsSingle;
          Max_Ration_Capacity                   := FieldByName('Food').AsSingle;
          Max_Water_Capacity                  := FieldByName('Water').AsSingle;
          Freshwater_Provision        := FieldByName('HSD_Consumption').AsSingle;
          Lubricants_Consumption         := FieldByName('ML_Consumption').AsSingle;
          Freshwater_Consumption         := FieldByName('AT_Consumption').AsSingle;
          Ration_Provision      := FieldByName('AVTUR_Consumption').AsSingle;
          Ration_Consumption       := FieldByName('Food_Consumption').AsSingle;
          Water_Consumption      := FieldByName('Water_Consumption').AsSingle;
        end;
        with rec.FVecDef do
        begin
          Vehicle_Index         := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier    := FieldByName('Vehicle_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetScenario_ByRA(const id: Integer; var pList: TList): boolean;
var
  rec: TScenario_Definition;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Scenario_Definition ');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Scenario_Identifier ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TScenario_Definition.Create;
        with rec.FData do
        begin
          Scenario_Index      := FieldByName('Scenario_Index').AsInteger;
          Scenario_Identifier := FieldByName('Scenario_Identifier').AsString;
          Resource_Alloc_Index:= FieldByName('Resource_Alloc_Index').AsInteger;
          Scenario_Code:= FieldByName('Scenario_Code').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// --------------------------------------------------------------------------

function TdmTTT.GetResourceAllocation_ByEnvi(const id: Integer; var pList: TList): boolean;
var
  rec: TResource_Allocation;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Allocation ');
    SQL.Add('WHERE Game_Enviro_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Allocation_Identifier ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TResource_Allocation.Create;
        with rec.FData do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// --------------------------------------------------------------------------

function TdmTTT.GetGlobalConverge_ByEnvi(const id: Integer; var pList: TList): boolean;
var
  rec: TGlobal_Convergence_Zone;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Global_Convergence_Zone ');
    SQL.Add('WHERE Game_Enviro_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Converge_Index ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TGlobal_Convergence_Zone.Create;
        with rec.FData do
        begin
          Converge_Index := FieldByName('Converge_Index').AsInteger;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Occurance_Range := FieldByName('Occurance_Range').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Signal_Reduction_Term := FieldByName('Signal_Reduction_Term').AsSingle;
          Increase_per_CZ := FieldByName('Increase_per_CZ').AsSingle;
          Max_Sonar_Depth := FieldByName('Max_Sonar_Depth').AsSingle;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetGroup(const id: Integer; var pList: TList): Boolean;
var
  rec: TPersonel;
begin
  result := False;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT d4.Pleton_Index, d4.Pleton_Identifier , ');
    SQL.Add('e5.Regu_Index, e5.Regu_Identifier, e5.Quantity ');
    SQL.Add('FROM Personel_Brigade a1 JOIN Personel_Batalyon b2 ON ');
    SQL.Add('a1.brigade_index = b2.brigade_index JOIN personel_kompi c3 ON ');
    SQL.Add('b2.batalyon_index = c3.batalyon_index JOIN personel_pleton d4 ON ');
    SQL.Add('c3.kompi_index = d4.kompi_index JOIN Personel_Regu e5 ON ');
    SQL.Add('d4.Pleton_Index = e5.Pleton_Index ');
    SQL.Add('WHERE d4.Pleton_Index = ' + IntToStr(id));

    Open;
    Result := RecordCount > 0;
    if not Assigned(pList) then
      pList := TList.Create
    else
      pList.Clear;

    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TPersonel.Create;
        TPlatoon(rec).Id := FieldByName('Pleton_Index').AsInteger;
        TPlatoon(rec).Identifier := FieldByName('Pleton_Identifier').AsString;
        TGroup(rec).Id := FieldByName('Regu_Index').AsInteger;
        TGroup(rec).Identifier := FieldByName('Regu_Identifier').AsString;
        TGroup(rec).quantity := FieldByName('Quantity').AsInteger;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// --------------------------------------------------------------------------

function TdmTTT.GetDomainFromVehicleID(const VID: Integer): Integer;
begin
  result := 0;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Platform_Domain ');
    SQL.Add('FROM Vehicle_Definition ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(VID));

    Open;

    if not IsEmpty then
    begin
      First;
      result := Fields[0].AsInteger;
    end;

  end;
end;

function TdmTTT.GetDomainVehicle(const Air, Amphibi, Land: Integer;
  var pList: TList): Integer;
var
  rec : TVehicle_Definition;
  cond : string;
begin
  result := -1;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQl.Add('SELECT * FROM Vehicle_Definition ');

    cond := '';
    if (Air <> -1) then
      if length(cond) > 0 then
        cond := cond + ' OR Platform_Domain = 0 '
      else
        cond := 'WHERE Platform_Domain = 0 ';

    if (Amphibi <> -1) then
      if length(cond) > 0 then
        cond := cond + ' OR Platform_Domain = 4 '
      else
        cond := 'WHERE Platform_Domain = 4 ';

    if (Land <> -1) then
      if Length(cond) > 0 then
        cond := cond + ' OR Platform_Domain = 3 '
      else
        cond := 'WHERE Platform_Domain = 3 ';

     SQl.Add(cond);
     SQL.Add('ORDER BY Vehicle_Identifier ASC ');
     Open;

     Result := RecordCount;
     if not IsEmpty then
     begin
       First;

       if not Assigned(pList) then
         pList := TList.Create
       else
         pList.Clear;

       while not ZQ.Eof do
       begin
         rec := TVehicle_Definition.Create;
         with rec.FData do
         begin
           Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
           Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
           Platform_Domain := FieldByName('Platform_Domain').AsInteger;
           Platform_Category := FieldByName('Platform_Category').AsInteger;
           Platform_Type := FieldByName('Platform_Type').AsInteger;
           Motion_Characteristics := FieldByName('Motion_Characteristics')
             .AsInteger;
           Length := FieldByName('Length').AsSingle;
           Width := FieldByName('Width').AsSingle;
           Height := FieldByName('Height').AsSingle;
           Draft := FieldByName('Draft').AsSingle;
           Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
           Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
           Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
           Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
           Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
           Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross')
             .AsSingle;
           Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
           Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
           Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
           LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
             .AsSingle;
           Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
             .AsSingle;
           Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
             .AsSingle;
           HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
             .AsSingle;
           Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
             .AsSingle;
           Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact')
             .AsInteger;
           Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
             .AsBoolean;
           Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
           Min_Delay_Between_Chaff_Rounds := FieldByName
             ('Min_Delay_Between_Chaff_Rounds').AsInteger;
           Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
           SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
           CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
           TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
           IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
           AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
           Active_Acoustic_Tor_POH_Mod := FieldByName
             ('Active_Acoustic_Tor_POH_Mod').AsSingle;
           Passive_Acoustic_Tor_POH_Mod := FieldByName
             ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
           Active_Passive_Tor_POH_Mod := FieldByName
             ('Active_Passive_Tor_POH_Mod').AsSingle;
           Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
             .AsSingle;
           Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
             .AsSingle;
           Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier')
             .AsSingle;
           Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
             .AsSingle;
           Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
             .AsSingle;
           Acoustic_Mine_POH_Modifier := FieldByName
             ('Acoustic_Mine_POH_Modifier').AsSingle;
           Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
             .AsSingle;
           Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
             .AsSingle;
           Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
             .AsSingle;
           HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
           UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
           HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
           VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
           UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
           SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
           UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
           HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
           UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
           SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
           Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
           Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
             .AsBoolean;
           Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
           Readying_Time := FieldByName('Readying_Time').AsInteger;
           Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
           Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
           Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
           Periscope_Height_Above_Water := FieldByName
             ('Periscope_Height_Above_Water').AsSingle;
           Periscope_Front_Radar_Xsection := FieldByName
             ('Periscope_Front_Radar_Xsection').AsSingle;
           Periscope_Side_Radar_Xsection := FieldByName
             ('Periscope_Side_Radar_Xsection').AsSingle;
           Periscope_Front_Vis_Xsection := FieldByName
             ('Periscope_Front_Vis_Xsection').AsSingle;
           Periscope_Side_Vis_Xsection := FieldByName
             ('Periscope_Side_Vis_Xsection').AsSingle;
           Periscope_Front_IR_Xsection := FieldByName
             ('Periscope_Front_IR_Xsection').AsSingle;
           Periscope_Side_IR_Xsection := FieldByName
             ('Periscope_Side_IR_Xsection').AsSingle;
           Engagement_Range := FieldByName('Engagement_Range').AsSingle;
           Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
             .AsBoolean;
           Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
           Detectability_Type := FieldByName('Detectability_Type').AsInteger;
           Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
             .AsInteger;
           Sonobuoy_Deploy_Max_Altitude := FieldByName
             ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
           Sonobuoy_Deploy_Min_Altitude := FieldByName
             ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
           Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
             .AsInteger;
           Air_Drop_Torpedo_Max_Altitude := FieldByName
             ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
           Air_Drop_Torpedo_Min_Altitude := FieldByName
             ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
           Air_Drop_Torpedo_Max_Speed := FieldByName
             ('Air_Drop_Torpedo_Max_Speed')
             .AsInteger;
           TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
           HMS_Noise_Reduction_Factor := FieldByName
             ('HMS_Noise_Reduction_Factor').AsSingle;
           TAS_Noise_Reduction_Factor := FieldByName
             ('TAS_Noise_Reduction_Factor').AsSingle;
           Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
             .AsBoolean;
           HF_Mid_Course_Update_Capable := FieldByName
             ('HF_Mid_Course_Update_Capable').AsBoolean;
           UHF_Mid_Course_Update_Capable := ZQ.FieldByName
             ('UHF_Mid_Course_Update_Capable').AsBoolean;

           Font_id := FieldByName
             ('font_id').AsInteger;
           Symbol_id := FieldByName
             ('symbol_id').AsInteger;
           Quantity_Group_Personal := FieldByName
             ('Quantity_Group_Personal').AsInteger;
           Vbs_Class_Name := FieldByName
             ('vbs_class_name').AsString;
           Logistics_Index := FieldByName('Logistics_Index').AsInteger;
           Tactical_Symbol_Name := FieldByName
             ('Tactical_Symbol_Name').AsString;
           GangwayPosition := FieldByName('GangwayPosition').AsInteger;
           DWT := FieldByName('DWT').AsSingle;
           last_updated := FieldByName('last_updated').AsDateTime;
         end;

//         with rec.FNote do
//         begin
//           Note_Index := FieldByName('Note_Index').AsInteger;
//           Note_Type := FieldByName('Note_Type').AsInteger;
//           Notes := FieldByName('Notes').AsString;
//         end;

         pList.Add(rec);
         ZQ.Next;
       end;
     end;
  end;
end;

function TdmTTT.GetEmbark_LibBySce(const id: Integer;
  var pList: TList): boolean;
var
  rec: TBase;
begin
  Result := False;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Embark_Library_Mapping a LEFT JOIN Embark_Library b ');
    SQL.Add('ON a.Embark_Library_Index = b.Embark_Library_Index ');
    SQL.Add('RIGHT JOIN Scenario_Definition c ');
    SQL.Add('ON a.Resource_Alloc_Index = c.Resource_Alloc_Index ');
    SQL.Add('WHERE a.Embark_Library_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY c.Scenario_Identifier ');

    Open;
    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList := TList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TBase.Create;
        with rec.FData do
        begin
          Base_Index := FieldByName('Embark_Library_Index')
            .AsInteger;
          Base_Identifier := FieldByName('Embark_Identifier').AsString;
        end;

        with rec.FScenario do
        begin
          Scenario_Index      := FieldByName('Scenario_Index').AsInteger;
          Scenario_Identifier := FieldByName('Scenario_Identifier').AsString;
          Resource_Alloc_Index:= FieldByName('Resource_Alloc_Index').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetVehicle_OnBase(const id: Integer; var pList: TList;
  var rec: TBase): Boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Embark_Library ';

    if id <> 0 then
      ssql := ssql + 'WHERE (Embark_Library_Index = ' + IntToStr(id) + ')';

//    ssql := ssql + 'ORDER BY Embark_Identifier ';
    SQL.Add(ssql);
    Open;

    Result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TBase.Create;
        with rec.FData do
        begin
          Base_Index := FieldByName('Embark_Library_Index').AsInteger;
          Base_Identifier := FieldByName('Embark_Identifier').AsString;
          Base_Radius := FieldByName('Embark_Library_Radius').AsFloat;
          Base_Type := FieldByName('Embark_Library_TypeBase').AsInteger;
          Fuel := FieldByName('Fuel').AsFloat;
          Lubricants := FieldByName('Lubricants').AsFloat;
          FreshWater := FieldByName('Fresh_Water').AsFloat;
          Water := FieldByName('Water').AsFloat;
          Food := FieldByName('Food').AsFloat;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetEnvironment_And_Overlay_ByGameArea(const id: Integer; var pList: TList): boolean;
var
  recEnvi: TGame_Environment_Definition;
  recOverlay: TMainOverlay_Definition;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Environment_Definition ');
    SQL.Add('WHERE Game_Area_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Game_Enviro_Identifier ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        recEnvi := TGame_Environment_Definition.Create;
        with recEnvi.FData do
        begin
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Game_Enviro_Identifier := FieldByName('Game_Enviro_Identifier')
            .AsString;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        end;

        pList.Add(recEnvi);
        ZQ.Next;
      end;
    end;

    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Overlay_Definition ');
    SQL.Add('WHERE Game_Area_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY Overlay_Identifier ');

    Open;

    result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        recOverlay := TMainOverlay_Definition.Create;
        with recOverlay.FData do
        begin
          Overlay_Index := FieldByName('Overlay_Index').AsInteger;
          Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
          Name := FieldByName('Overlay_Filename').AsString;
          Tipe := FieldByName('Static_Overlay').AsInteger;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          domain := FieldByName('Domain').AsInteger;
        end;

        pList.Add(recOverlay);
        ZQ.Next;
      end;
    end;
  end;
end;

// -------------------------------------------------------------------------

function TdmTTT.GetPlatform_Instance_SatelliteByRA(const id: Integer; var pList: TList): boolean;
var
  rec: TPlatform_Instance;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Instance a RIGHT JOIN Resource_Allocation b ');
    SQL.Add('ON a.Resource_Alloc_Index = b.Resource_Alloc_Index ');
    SQL.Add('WHERE a.Satellite_Index = ' + IntToStr(id));
    SQL.Add(' ORDER BY b.Allocation_Identifier ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance.Create;
        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index')
            .AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;

        with rec.FResource do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// --------------------------------------------------------------------------

function TdmTTT.GetVehicle_DefByMotion(const id: Integer; var pList: TList): boolean;
var
  rec: TVehicle_Definition;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Vehicle_Definition ');
    SQL.Add('WHERE Motion_Characteristics = ' + IntToStr(id));
    SQL.Add(' ORDER BY Vehicle_Identifier ');

    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TVehicle_Definition.Create;
        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics')
            .AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// --------------------------------------------------------------------------

function TdmTTT.InitZDB(const zDbServer, zDBProto, zDBname, zDBuser,
  zDBPass: string): boolean;
begin
  result := false;
  with ZConn do
  begin
    HostName := zDbServer;
    Protocol := zDBProto;
    Database := zDBname;
    User := zDBuser;
    Password := zDBPass;
  end;

  try
    ZConn.Connect;
    result := ZConn.Connected;
  except
    on Exception do
    begin
      MessageDlg('Error Database Connection on ' + zDbServer, mtError, [mbOK],
        0);
      result := false;
      exit;
    end
  end;
  ZQ.Connection := ZConn;
end;

// ------------------------------------------------------------------------------
function TdmTTT.GetScenario(const id: Integer; var rec: TScenario_Definition)
  : boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Scenario_Definition');
    SQL.Add('WHERE (Scenario_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      if not Assigned(rec) then
        rec := TScenario_Definition.Create;
      with rec.FData do
      begin
        Scenario_Index := FieldByName('Scenario_Index').AsInteger;
        Scenario_Identifier := FieldByName('Scenario_Identifier').AsString;
        Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
        Scenario_Code := FieldByName('Scenario_Code').AsInteger;
      end;
    end;
  end;
end;

/// /====================================================
function TdmTTT.getAllScenario_Definition(var aRec: TList): Integer;
var
  rec: TScenario_Definition;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Scenario_Definition ');
    SQL.Add('WHERE  Scenario_Code = 0 ');
    SQL.Add('ORDER BY Scenario_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TScenario_Definition.Create;
        with rec.FData do
        begin
          Scenario_Index := FieldByName('Scenario_Index').AsInteger;
          Scenario_Identifier := FieldByName('Scenario_Identifier').AsString;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Scenario_Code := FieldByName('Scenario_Code').AsInteger;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllWaypoint(var aRec: TList): Integer;
var
  rec: TWaypoint_Def;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Waypoint ');
    SQL.Add('ORDER BY Waypoint_Name');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TWaypoint_Def.Create;
        with rec.FData do
        begin
          Waypoint_Index  := FieldByName('Waypoint_Index').AsInteger;
          Termination     := FieldByName('Termination').AsInteger;
          Waypoint_Name   := FieldByName('Waypoint_Name').AsString;
          Waypoint_Centre_Lat :=  FieldByName('Waypoint_Centre_Lat').AsFloat;
          Waypoint_Centre_Long :=  FieldByName('Waypoint_Centre_Long').AsFloat;
          Dimension := FieldByName('Dimension').AsSingle;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

procedure TdmTTT.getWaypointDataByID(const id: integer; var wpDataList: TList);
var
  wpData: TWaypoint_Data;
begin
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Waypoint_Data ');
    SQL.Add('WHERE Waypoint_Index = ' + IntToStr(id));
    Open;

    if not IsEmpty then
    begin

      First;

      if not Assigned(wpDataList) then
        wpDataList := TList.Create
      else
        wpDataList.Clear;

      while not ZQ.Eof do
      begin
        wpData := TWaypoint_Data.Create;
        with wpData.FData do
        begin
          Waypoint_Index  := FieldByName('Waypoint_Index').AsInteger;
          Scripted_Event_Index     := FieldByName('Scripted_Event_Index').AsInteger;
          Number_of_Event   := FieldByName('Number_of_Event').AsInteger;
          Platform_Event_Index   := FieldByName('Platform_Event_Index').AsInteger;
          Speed   := FieldByName('Speed').AsFloat;
          Altitude   := FieldByName('Altitude').AsFloat;
          Vert_Speed   := FieldByName('Vert_Speed').AsInteger;
          Waypoint_Latitude   := FieldByName('Waypoint_Latitude').AsFloat;
          Waypoint_Longitude   := FieldByName('Waypoint_Longitude').AsFloat;
          Cartesian_Waypoint_X   := FieldByName('Cartesian_Waypoint_X').AsFloat;
          Cartesian_Waypoint_Y   := FieldByName('Cartesian_Waypoint_Y').AsFloat;
          Time_Waypoint   := FieldByName('Time_Waypoint').AsInteger;
          Time_2_Waypoint   := FieldByName('Time_2_Waypoint').AsInteger;
          HF_Datalink_Activate   := FieldByName('HF_Datalink_Activate').AsInteger;
          UHF_Datalink_Activate   := FieldByName('UHF_Datalink_Activate').AsInteger;
          Sonobuoy_Resource_Index   := FieldByName('Sonobuoy_Resource_Index').AsInteger;
          Sonobuoy_Instance_Index   := FieldByName('Sonobuoy_Instance_Index').AsInteger;
          Deploy_Sonobuoys   := FieldByName('Deploy_Sonobuoys').AsInteger;
          Sonobuoy_Spacing   := FieldByName('Sonobuoy_Spacing').AsFloat;
          Num_Sonobuoys_2_Drop   := FieldByName('Num_Sonobuoys_2_Drop').AsInteger;
          Sonobuoy_Depth   := FieldByName('Sonobuoy_Depth').AsFloat;
          Jammer_Control   := FieldByName('Jammer_Control').AsInteger;
          Remove_from_Game   := FieldByName('Remove_from_Game').AsInteger;
          StartMode   := FieldByName('StartMode').AsInteger;
          StartAt   := FieldByName('StartAt').AsFloat;
        end;
        wpDataList.Add(wpData);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.updateScenario(rec: TScenario_Definition;
  value: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Scenario_Definition');
      SQL.Add('SET ');
      SQL.Add('Scenario_Identifier=''' + Scenario_Identifier + ''',');
      SQL.Add('Resource_Alloc_Index=' + IntToStr(Resource_Alloc_Index));
    end;

    SQL.Add('WHERE (Scenario_Index = ' + value + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateScenario_ByRA(new,old: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Scenario_Definition');
    SQL.Add('SET ');
    SQL.Add('Resource_Alloc_Index=' + new);
    SQL.Add('WHERE (Resource_Alloc_Index = ' + old + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertScenario(rec: TScenario_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Scenario_Definition');
      SQL.Add('(Scenario_Identifier,Resource_Alloc_Index,Scenario_Code) ');
      SQL.Add('VALUES (');
      SQL.Add('''' + Scenario_Identifier + ''',');
      SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add(IntToStr(Scenario_Code) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM  Scenario_Definition ');
      SQL.Add('WHERE  Scenario_Identifier = ' + quotedStr(Scenario_Identifier));
      Open;

      rec.FData.Scenario_Index := FieldByName('Scenario_Index').AsInteger;

      SQL.Clear;
      SQL.Add('INSERT INTO Asset_Deployment_Definition');
      SQL.Add('VALUES (');
      SQL.Add('''' + '(Scenario ' + IntToStr(Scenario_Index) + ')' + ''',');
      SQL.Add(IntToStr(Scenario_Index) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteScenario_Definition(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Scenario_Definition  ');
    SQL.Add('WHERE (Scenario_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteAll_Resource_Plotting_mapping(const id: String): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Plotting_Mapping  ');
    SQL.Add('WHERE (Resource_Alloc_Index = ' + id + ')');
    ExecSQL;
  end;
end;

function TdmTTT.DeleteAsset_Deployment_Definition(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Asset_Deployment_Definition  ');
    SQL.Add('WHERE (Deployment_Index = ' + id + ')');
    ExecSQL;
  end;
end;

function TdmTTT.DeleteBase_Location(const id: String): Integer;
begin
  Result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Base_Location ');
    SQL.Add('WHERE Base_Index = ' + id);
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertSeaState_On_Radar(rec: TSea_State_On_Radar): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Sea_State_On_Radar] ON;');
      ExecSQL;
      SQL.Clear;}
      SQL.Add('INSERT INTO Sea_State_On_Radar');
      SQL.Add('(Sea_State,Effect_on_Radar) ');
      SQL.Add('VALUES (');
      SQL.Add(IntToStr(Sea_State) + ',');
      SQL.Add(FloatToStr(Effect_on_Radar) + ')');
    end;
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetResourceAlloc(const id: Integer;
  var rec: TResource_Allocation): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Resource_Allocation ');
    SQL.Add('WHERE (Resource_Alloc_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;
      if not Assigned(rec) then
        rec := TResource_Allocation.Create;

      with rec.FData do
      begin
        Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
        Allocation_Identifier := FieldByName('Allocation_Identifier').AsString;
        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Role_List_Index := FieldByName('Role_List_Index').AsInteger;
        D_Day := FieldByName('D_Day').AsFloat;
        Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetResource_Embark_Library(const res_id: Integer; var pList: Tlist): Boolean;
var
  rec: TResource_Base_Mapping;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Resource_Alloc_Index, Resource_Embark_Library_Mapping.Embark_Library_Index, ');
    SQL.Add('Force, Longitude, Latitude, Embark_Identifier, Embark_Library_Radius, Embark_Library_TypeBase, ');
    SQL.Add('Fuel, Lubricants, Fresh_Water, Water, Food ');
    SQL.Add('FROM Resource_Embark_Library_Mapping LEFT JOIN Embark_Library ');
    SQL.Add('ON Resource_Embark_Library_Mapping.Embark_Library_Index = Embark_Library.Embark_Library_Index ');
    SQL.Add('WHERE (Resource_Alloc_Index = ' + IntToStr(res_id) + ')');
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
//      if not Assigned(rec) then
        rec := TResource_Base_Mapping.Create;
        with rec.FData do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Base_Index := FieldByName('Embark_Library_Index').AsInteger;
          Force := FieldByName('Force').AsInteger;
          Longitude := FieldByName('Longitude').AsFloat;
          Latitude := FieldByName('Latitude').AsFloat;
//          Embark_Identifier := FieldByName('Embark_Identifier').AsString;
//          Embark_Library_Radius := FieldByName('Embark_Library_Radius').AsFloat;
//          Embark_Library_TypeBase := FieldByName('Embark_Library_TypeBase').AsInteger;
//          Fuel := FieldByName('Fuel').AsFloat;
//          Lubricants := FieldByName('Lubricants').AsFloat;
//          FreshWater := FieldByName('Fresh_Water').AsFloat;
//          Water := FieldByName('Water').AsFloat;
//          Food := FieldByName('Food').AsFloat;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetResource_Interval_List_Mapping(const id: Integer; var aRec: TList): Integer;
var
  rec: TResource_Allocation;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Resource_Interval_List_Mapping a ';
    ssql := ssql + 'LEFT JOIN Radar_Interval_List b ON a.Interval_List_Index = b.Interval_List_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE a.Resource_Alloc_Index =' + IntToStr(id);

    ssql := ssql + ' ORDER BY b.Interval_List_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TResource_Allocation.Create;
        with rec.FRadarList do
        begin
          Interval_List_Index := FieldByName('Interval_List_Index').AsInteger;
          Interval_List_Identifier := FieldByName('Interval_List_Identifier').AsString;
        end;

        with rec.FRadarListMap do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Interval_List_Index := FieldByName('Interval_List_Index').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;
//--------------------------------------------------------------------------------
function TdmTTT.GetResource_Overlay_Mapping(const id: Integer; var recList: TList): boolean;
var
  rec: TResource_Allocation;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Resource_Overlay_Mapping a JOIN Overlay_Definition b');
    SQL.Add('on a.Overlay_Index = b.Overlay_Index');
    SQL.Add('WHERE a.Overlay_Index = ' + IntToStr(id));
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;
      if not Assigned(recList) then
        recList := TList.Create
      else
        recList.Clear;

      while not ZQ.Eof do
      begin
        rec := TResource_Allocation.Create;
        with rec.FOverlay do
        begin
          Overlay_Index := FieldByName('Overlay_Index').AsInteger;
          Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
          Name := FieldByName('Overlay_Filename').AsString;
          Tipe := FieldByName('Static_Overlay').AsInteger;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          domain := FieldByName('Domain').AsInteger;
        end;
        with rec.FResource_Overlay do
        begin
          Overlay_Instance_Index  := FieldByName('Overlay_Instance_Index').AsInteger;
          Resource_Alloc_Index    := FieldByName('Resource_Alloc_Index').AsInteger;
          Overlay_Index           := FieldByName('Overlay_Index').AsInteger;
          Force_Designation       := FieldByName('Force_Designation').AsInteger;
        end;
        recList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;
// ------------------------------------------------------------------------------

//function TdmTTT.updatePlatformInstance(var rec: TPlatform_Instance;
//  const pi_id, mis_id, tor_id, mine_id, hybrid_id, satelit_id, son_id: Integer)
//  : Integer;
//var
//  ssql: string;
//begin
//  result := -1;
//  with ZQ do
//  begin
//    with rec.FData do
//    begin
//      Close;
//      SQL.Clear;
//      ssql := 'UPDATE Platform_Instance SET ';
//
//      if mis_id <> -1 then
//      begin
//        ssql := ssql + 'Missile_Index = ' + IntToStr(mis_id) + ',';
//      end
//      else if mis_id = -1 then
//      begin
//        ssql := ssql + 'Missile_Index = Null' + ',';
//      end;
//
//      if tor_id <> -1 then
//      begin
//        ssql := ssql + 'Torpedo_Index = ' + IntToStr(tor_id) + ',';
//      end
//      else if tor_id = -1 then
//      begin
//        ssql := ssql + 'Torpedo_Index = Null' + ',';
//      end;
//
//      if mine_id <> -1 then
//      begin
//        ssql := ssql + 'Mine_Index = ' + IntToStr(mine_id) + ',';
//      end
//      else if mine_id = -1 then
//      begin
//        ssql := ssql + 'Mine_Index = Null' + ',';
//      end;
//
//      if hybrid_id <> -1 then
//      begin
//        ssql := ssql + 'Hybrid_Index = ' + IntToStr(hybrid_id) + ',';
//      end
//      else if hybrid_id = -1 then
//      begin
//        ssql := ssql + 'Hybrid_Index = Null' + ',';
//      end;
//
//      if satelit_id <> -1 then
//      begin
//        ssql := ssql + 'Satellite_Index = ' + IntToStr(satelit_id) + ',';
//      end
//      else if satelit_id = -1 then
//      begin
//        ssql := ssql + 'Satellite_Index = Null' + ',';
//      end;
//
//      if son_id <> -1 then
//      begin
//        ssql := ssql + 'Sonobuoy_Index = ' + IntToStr(son_id);
//      end
//      else if son_id = -1 then
//      begin
//        ssql := ssql + 'Sonobuoy_Index = Null' + ',';
//      end;
//
//      ssql := ssql + ' WHERE (Platform_Instance_Index = ' + IntToStr(pi_id)
//        + ')';
//      SQL.Add(ssql);
//      ExecSQL;
//
//    end;
//  end;
//end;

// ------------------------------------------------------------------------------

function TdmTTT.updatePlatformInst(const index: Integer; rec: TPlatform_Instance; pi_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Platform_Instance  ');
      SQL.Add('SET  ');
      SQL.Add('Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add('Platform_Type = ' + IntToStr(Platform_Type) + ',');
      case index of
        1: SQL.Add('Vehicle_Index = ' + IntToStr(Vehicle_Index) + ',');
        2:
          begin
            SQL.Add('Missile_Index = ' + IntToStr(Missile_Index) + ',');
            SQL.Add('Hybrid_Index = NULL,');
          end;
        3: SQL.Add('Torpedo_Index = ' + IntToStr(Torpedo_Index) + ',');
        4: SQL.Add('Sonobuoy_Index = ' + IntToStr(Sonobuoy_Index) + ',');
        5: SQL.Add('Mine_Index = ' + IntToStr(Mine_Index) + ',');
        6: SQL.Add('Satellite_Index = ' + IntToStr(Satellite_Index) + ',');
        7:
          begin
            SQL.Add('Missile_Index = NULL,');
            SQL.Add('Hybrid_Index = ' + IntToStr(Hybrid_Index) + ',');
          end;
      end;
      SQL.Add('Instance_Name = ' + QuotedStr(Instance_Name) + ',');
      SQL.Add('Force_Designation = ' + IntToStr(Force_Designation) + ',');
      SQL.Add('Track_ID = ' + QuotedStr(Track_ID) + ',');
      SQL.Add('Instance_Ident_Index = ' + IntToStr(Instance_Ident_Index));
    end;
    SQL.Add(' WHERE (Platform_Instance_Index = ' + pi_id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updatePredifened_Pattern(rec: TPredefined_Pattern;
  id, pattern_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Predefined_Pattern');
      SQL.Add('SET ');
      SQL.Add('Pattern_Identifier = ' + (Pattern_Identifier) + ',');
      SQL.Add('Pattern_Type = ' + IntToStr(Pattern_Type) + ',');
      SQL.Add('Pattern_Termination = ' + IntToStr(Pattern_Termination) + ',');
      SQL.Add('Termination_Heading = ' + FloatToStr(Termination_Heading));
    end;
    SQL.Add('WHERE (Pattern_Index = ' + pattern_id + ' AND');
    SQL.Add('Vehicle_Index=' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------
function TdmTTT.GetPlatform_ActivationByPlatformInstance(const id: Integer;
  var rec: TPlatform_Activation): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Activation ');
    SQL.Add('WHERE (Platform_Instance_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      if not Assigned(rec) then
        rec := TPlatform_Activation.Create;
      with rec.FData do
      begin
        Platform_Event_Index := FieldByName('Platform_Event_Index').AsInteger;
        Deployment_Index := FieldByName('Deployment_Index').AsInteger;
        Platform_Instance_Index := FieldByName('Platform_Instance_Index')
          .AsInteger;
        Platform_Activation_Time := FieldByName('Platform_Activation_Time')
          .AsInteger;
        Init_Guidance_Type := FieldByName('Init_Guidance_Type').AsInteger;
        Init_Position_Latitude := FieldByName('Init_Position_Latitude').AsFloat;
        Init_Position_Longitude := FieldByName('Init_Position_Longitude')
          .AsFloat;
        Init_Position_Cartesian_X := FieldByName('Init_Position_Cartesian_X')
          .AsSingle;
        Init_Position_Cartesian_Y := FieldByName('Init_Position_Cartesian_Y')
          .AsSingle;
        Init_Altitude := FieldByName('Init_Altitude').AsSingle;
        Init_Fuel := FieldByName('Init_Fuel').AsSingle;
        Init_Lubricants := FieldByName('Init_Lubricants').AsSingle;
        Init_Freshwater := FieldByName('Init_Freshwater').AsSingle;
        Init_Water := FieldByName('Init_Water').AsSingle;
        Init_Food := FieldByName('Init_Food').AsSingle;
        Init_Course := FieldByName('Init_Course').AsSingle;
        Init_Helm_Angle := FieldByName('Init_Helm_Angle').AsSingle;
        Init_Ground_Speed := FieldByName('Init_Ground_Speed').AsInteger;
        Init_Vertical_Speed := FieldByName('Init_Vertical_Speed').AsInteger;
        Init_Command_Altitude := FieldByName('Init_Command_Altitude').AsSingle;
        Init_Command_Course := FieldByName('Init_Command_Course').AsSingle;
        Init_Command_Helm_Angle := FieldByName('Init_Command_Helm_Angle')
          .AsSingle;
        Init_Command_Ground := FieldByName('Init_Command_Ground').AsInteger;
        Init_Command_Vert := FieldByName('Init_Command_Vert').AsInteger;
        Deg_of_Rotation := FieldByName('Deg_of_Rotation').AsSingle;
        Radius_of_Travel := FieldByName('Radius_of_Travel').AsSingle;
        Direction_of_Travel := FieldByName('Direction_of_Travel').AsInteger;
        Circle_Latitude := FieldByName('Circle_Latitude').AsFloat;
        Circle_Longitude := FieldByName('Circle_Longitude').AsFloat;
        Circle_X := FieldByName('Circle_X').AsSingle;
        Circle_Y := FieldByName('Circle_Y').AsSingle;
        Dynamic_Circle_Range_Offset := FieldByName
          ('Dynamic_Circle_Range_Offset').AsSingle;
        Dynamic_Circle_Angle_Offset := FieldByName
          ('Dynamic_Circle_Angle_Offset')
          .AsInteger;
        Dynamic_Circle_Offset_Mode := FieldByName('Dynamic_Circle_Offset_Mode')
          .AsInteger;
        Period_Distance := FieldByName('Period_Distance').AsSingle;
        Amplitude_Distance := FieldByName('Amplitude_Distance').AsSingle;
        Zig_Zag_Leg_Type := FieldByName('Zig_Zag_Leg_Type').AsInteger;
        Target_Angle_Offset := FieldByName('Target_Angle_Offset').AsSingle;
        Target_Angle_Type := FieldByName('Target_Angle_Type').AsInteger;
        Target_Range := FieldByName('Target_Range').AsSingle;
        Guidance_Target := FieldByName('Guidance_Target').AsInteger;
        Pattern_Instance_Index := FieldByName('Pattern_Instance_Index')
          .AsInteger;
        Angular_Offset := FieldByName('Angular_Offset').AsSingle;
        Anchor_Cartesian_X := FieldByName('Anchor_Cartesian_X').AsSingle;
        Anchor_Cartesian_Y := FieldByName('Anchor_Cartesian_Y').AsSingle;
        Anchor_Latitude := FieldByName('Anchor_Latitude').AsSingle;
        Anchor_Longitude := FieldByName('Anchor_Longitude').AsSingle;
        Current_Drift := FieldByName('Current_Drift').AsInteger;
        Waypoint_Termination := FieldByName('Waypoint_Termination').AsInteger;
        Termination_Heading := FieldByName('Termination_Heading').AsSingle;
        Cond_List_Instance_Index := FieldByName('Cond_List_Instance_Index')
          .AsInteger;
        Damage := FieldByName('Damage').AsSingle;
        DE_Index := FieldByName('DE_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetPlatform_ActivationToPlatformInstance(const id: Integer;
  var rec: TPlatform_Instance): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Activation a');
    SQL.Add(
      'join Asset_Deployment_Definition b on a.Deployment_Index = b.Deployment_Index');
    SQL.Add
      ('join Scenario_Definition c on b.Scenario_Index = c.Scenario_Index');
    SQL.Add(
      'join Platform_Instance d on a.Platform_Instance_Index = d.Platform_Instance_Index');
    SQL.Add('WHERE (a.Platform_Instance_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      if not Assigned(rec) then
        rec := TPlatform_Instance.Create;
      with rec.FActivation do
      begin
        Platform_Event_Index := FieldByName('Platform_Event_Index').AsInteger;
        Deployment_Index := FieldByName('Deployment_Index').AsInteger;
        Platform_Instance_Index := FieldByName('Platform_Instance_Index')
          .AsInteger;
        Platform_Activation_Time := FieldByName('Platform_Activation_Time')
          .AsInteger;
        Init_Guidance_Type := FieldByName('Init_Guidance_Type').AsInteger;
        Init_Position_Latitude := FieldByName('Init_Position_Latitude').AsFloat;
        Init_Position_Longitude := FieldByName('Init_Position_Longitude')
          .AsFloat;
        Init_Position_Cartesian_X := FieldByName('Init_Position_Cartesian_X')
          .AsSingle;
        Init_Position_Cartesian_Y := FieldByName('Init_Position_Cartesian_Y')
          .AsSingle;
        Init_Altitude := FieldByName('Init_Altitude').AsSingle;
        Init_Fuel := FieldByName('Init_Fuel').AsSingle;
        Init_Lubricants := FieldByName('Init_Lubricants').AsSingle;
        Init_Freshwater := FieldByName('Init_Freshwater').AsSingle;
        Init_Water := FieldByName('Init_Water').AsSingle;
        Init_Food := FieldByName('Init_Food').AsSingle;
        Init_Course := FieldByName('Init_Course').AsSingle;
        Init_Helm_Angle := FieldByName('Init_Helm_Angle').AsSingle;
        Init_Ground_Speed := FieldByName('Init_Ground_Speed').AsInteger;
        Init_Vertical_Speed := FieldByName('Init_Vertical_Speed').AsInteger;
        Init_Command_Altitude := FieldByName('Init_Command_Altitude').AsSingle;
        Init_Command_Course := FieldByName('Init_Command_Course').AsSingle;
        Init_Command_Helm_Angle := FieldByName('Init_Command_Helm_Angle')
          .AsSingle;
        Init_Command_Ground := FieldByName('Init_Command_Ground').AsInteger;
        Init_Command_Vert := FieldByName('Init_Command_Vert').AsInteger;
        Deg_of_Rotation := FieldByName('Deg_of_Rotation').AsSingle;
        Radius_of_Travel := FieldByName('Radius_of_Travel').AsSingle;
        Direction_of_Travel := FieldByName('Direction_of_Travel').AsInteger;
        Circle_Latitude := FieldByName('Circle_Latitude').AsFloat;
        Circle_Longitude := FieldByName('Circle_Longitude').AsFloat;
        Circle_X := FieldByName('Circle_X').AsSingle;
        Circle_Y := FieldByName('Circle_Y').AsSingle;
        Dynamic_Circle_Range_Offset := FieldByName
          ('Dynamic_Circle_Range_Offset').AsSingle;
        Dynamic_Circle_Angle_Offset := FieldByName
          ('Dynamic_Circle_Angle_Offset')
          .AsInteger;
        Dynamic_Circle_Offset_Mode := FieldByName('Dynamic_Circle_Offset_Mode')
          .AsInteger;
        Period_Distance := FieldByName('Period_Distance').AsSingle;
        Amplitude_Distance := FieldByName('Amplitude_Distance').AsSingle;
        Zig_Zag_Leg_Type := FieldByName('Zig_Zag_Leg_Type').AsInteger;
        Target_Angle_Offset := FieldByName('Target_Angle_Offset').AsSingle;
        Target_Angle_Type := FieldByName('Target_Angle_Type').AsInteger;
        Target_Range := FieldByName('Target_Range').AsSingle;
        Guidance_Target := FieldByName('Guidance_Target').AsInteger;
        Pattern_Instance_Index := FieldByName('Pattern_Instance_Index')
          .AsInteger;
        Angular_Offset := FieldByName('Angular_Offset').AsSingle;
        Anchor_Cartesian_X := FieldByName('Anchor_Cartesian_X').AsSingle;
        Anchor_Cartesian_Y := FieldByName('Anchor_Cartesian_Y').AsSingle;
        Anchor_Latitude := FieldByName('Anchor_Latitude').AsSingle;
        Anchor_Longitude := FieldByName('Anchor_Longitude').AsSingle;
        Current_Drift := FieldByName('Current_Drift').AsInteger;
        Waypoint_Termination := FieldByName('Waypoint_Termination').AsInteger;
        Termination_Heading := FieldByName('Termination_Heading').AsSingle;
        Cond_List_Instance_Index := FieldByName('Cond_List_Instance_Index')
          .AsInteger;
        Damage := FieldByName('Damage').AsSingle;
        DE_Index := FieldByName('DE_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.getPlatform_Capability(const id: Integer;
  var rec: TTransport): Boolean;
begin
 result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Capability ');
    SQL.Add('WHERE (Platform_Capability_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      if not Assigned(rec) then
        rec := TTransport.Create;
      with rec.FData do
      begin
        Transport_Index       := FieldByName('Platform_Capability_Index').AsInteger;
        Transport_Identifier           := FieldByName('Capability_Identifier').AsString;
        Carriable                       := FieldByName('Carriable').AsBoolean;
        Hangar_Unit_Carried             := FieldByName('Hangar_Unit_Carried').AsBoolean;
        Deck_Unit_Carried               := FieldByName('Deck_Unit_Carried').AsBoolean;
        Personnel_Unit_Carried          := FieldByName('Personnel_Unit_Carried').AsBoolean;
        FixedWing_Carried               := FieldByName('FixedWing_Carried').AsBoolean;
        Rotary_Carried                  := FieldByName('Rotary_Carried').AsBoolean;
        Amphibious_Carried              := FieldByName('Amphibious_Carried').AsBoolean;
        Land_Carried                    := FieldByName('Land_Carried').AsBoolean;
        Max_Hangar_Capacity             := FieldByName('Max_Hangar_Capacity').AsInteger;
        Max_Hangar_Weight               := FieldByName('Max_Hangar_Weight').AsFloat ;
        Max_Deck_Weight                 := FieldByName('Max_Deck_Weight').AsFloat;
        Deck_Width                      := FieldByName('Deck_Width').AsFloat;
        Deck_Length                     := FieldByName('Deck_Length').AsFloat;
        Max_Personnel_Capacity          := FieldByName('Max_Personnel_Capacity').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.GetPlatform_Embark_Library(const id: Integer; var pList: TList; rec: TVehicle_On_Base): integer;

begin
  Result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Embark_Library ');
    SQL.Add('WHERE (Embark_Library_Index = ' + IntToStr(id) + ')');
    Open;

    Result := RecordCount;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
      pList.Clear;


    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TVehicle_On_Base.Create;
        with rec.FData do
        begin
          Vehicle_OnBase_Index := FieldByName('Platform_Embark_Index').AsInteger;
          Base_Index := FieldByName('Embark_Library_Index').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updatePlatformCapability(rec: TTransport): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Platform_Capability ');
      SQL.Add('SET ');
      SQL.Add('Capability_Identifier =''' + Transport_Identifier + ''',');
      SQL.Add('Carriable =' + BoolToStr(Carriable) + ',');
      SQL.Add('Hangar_Unit_Carried =' + BoolToStr(Hangar_Unit_Carried) + ',');
      SQL.Add('Deck_Unit_Carried = ' + BoolToStr(Deck_Unit_Carried) + ',');
      SQL.Add('Personnel_Unit_Carried = ' + BoolToStr(Personnel_Unit_Carried) + ',');
      SQL.Add('FixedWing_Carried =' + BoolToStr(FixedWing_Carried) + ',');
      SQL.Add('Rotary_Carried =' + BoolToStr(Rotary_Carried) + ',');
      SQL.Add('Amphibious_Carried =' + BoolToStr(Amphibious_Carried)+ ',');
      SQL.Add('Land_Carried =' + BoolToStr(Land_Carried)+ ',');
      SQL.Add('Max_Hangar_Capacity =' + inttostr(Max_Hangar_Capacity) + ',');
      SQL.Add('Max_Hangar_Weight = ' + FloatToStr(Max_Hangar_Weight) + ',');
      SQL.Add('Max_Deck_Weight = ' + FloatToStr(Max_Deck_Weight) + ',');
      SQL.Add('Deck_Width =' + FloatToStr(Deck_Width) + ',');
      SQL.Add('Deck_Length =' + FloatToStr(Deck_Length) + ',');
      SQL.Add('Max_Personnel_Capacity =' + inttostr(Max_Personnel_Capacity));
      SQL.Add(' WHERE (Platform_Capability_Index = ' + inttostr(Transport_Index) + ')');
    end;
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updatePlatformAct(var rec: TPlatform_Instance;
  pi_id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FActivation do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Platform_Activation ');
      SQL.Add('SET ');
      // SQL.Add('Deployment_Index='+ IntToStr(Deployment_Index)+',' );
      // SQL.Add('Platform_Event_Index ='+ IntToStr(Platform_Event_Index) +',');
      SQL.Add('Platform_Activation_Time =' + IntToStr(Platform_Activation_Time)+ ',');
      SQL.Add('Init_Guidance_Type =' + IntToStr(Init_Guidance_Type) + ',');
      SQL.Add('Init_Position_Latitude =' + FloatToStr(Init_Position_Latitude)+ ',');
      SQL.Add('Init_Position_Longitude =' + FloatToStr(Init_Position_Longitude)+ ',');
      SQL.Add('Init_Position_Cartesian_X =' + FloatToStr(Init_Position_Cartesian_X) + ',');
      SQL.Add('Init_Position_Cartesian_Y =' + FloatToStr(Init_Position_Cartesian_Y) + ',');
      SQL.Add('Init_Altitude =' + FloatToStr(Init_Altitude) + ',');
      SQL.Add('Init_Fuel =' + FloatToStr(Init_Fuel) + ',');
      SQL.Add('Init_Lubricants =' + FloatToStr(Init_Lubricants) + ',');
      SQL.Add('Init_Freshwater =' + FloatToStr(Init_Freshwater) + ',');
      SQL.Add('Init_Water =' + FloatToStr(Init_Water) + ',');
      SQL.Add('Init_Food =' + FloatToStr(Init_Food) + ',');
      SQL.Add('Init_Course =' + FloatToStr(Init_Course) + ',');
      SQL.Add('Init_Helm_Angle =' + FloatToStr(Init_Helm_Angle) + ',');
      SQL.Add('Init_Ground_Speed =' + IntToStr(Init_Ground_Speed) + ',');
      SQL.Add('Init_Vertical_Speed =' + IntToStr(Init_Vertical_Speed) + ',');
      SQL.Add('Init_Command_Altitude =' + FloatToStr(Init_Command_Altitude)+ ',');
      SQL.Add('Init_Command_Course =' + FloatToStr(Init_Command_Course) + ',');
      SQL.Add('Init_Command_Helm_Angle =' + FloatToStr(Init_Command_Helm_Angle)+ ',');
      SQL.Add('Init_Command_Ground =' + IntToStr(Init_Command_Ground) + ',');
      SQL.Add('Init_Command_Vert =' + IntToStr(Init_Command_Vert) + ',');
      SQL.Add('Deg_of_Rotation =' + FloatToStr(Deg_of_Rotation) + ',');
      SQL.Add('Radius_of_Travel =' + FloatToStr(Radius_of_Travel) + ',');
      SQL.Add('Direction_of_Travel =' + IntToStr(Direction_of_Travel) + ',');
      SQL.Add('Circle_Latitude =' + FloatToStr(Circle_Latitude) + ',');
      SQL.Add('Circle_Longitude =' + FloatToStr(Circle_Longitude) + ',');
      SQL.Add('Circle_X =' + FloatToStr(Circle_X) + ',');
      SQL.Add('Circle_Y =' + FloatToStr(Circle_Y) + ',');
      SQL.Add('Dynamic_Circle_Range_Offset =' + FloatToStr(Dynamic_Circle_Range_Offset) + ',');
      SQL.Add('Dynamic_Circle_Angle_Offset =' + IntToStr(Dynamic_Circle_Angle_Offset) + ',');
      SQL.Add('Dynamic_Circle_Offset_Mode =' + IntToStr(Dynamic_Circle_Offset_Mode) + ',');
      SQL.Add('Period_Distance =' + FloatToStr(Period_Distance) + ',');
      SQL.Add('Amplitude_Distance =' + FloatToStr(Amplitude_Distance) + ',');
      SQL.Add('Zig_Zag_Leg_Type =' + IntToStr(Zig_Zag_Leg_Type) + ',');
      SQL.Add('Target_Angle_Offset =' + FloatToStr(Target_Angle_Offset) + ',');
      SQL.Add('Target_Angle_Type =' + IntToStr(Target_Angle_Type) + ',');
      SQL.Add('Target_Range =' + FloatToStr(Target_Range) + ',');
      // SQL.Add('Guidance_Target ='+ IntToStr(Guidance_Target)+',' );
      // SQL.Add('Pattern_Instance_Index ='+ IntToStr(Pattern_Instance_Index)+',' );
      SQL.Add('Angular_Offset  =' + FloatToStr(Angular_Offset) + ',');
      SQL.Add('Anchor_Cartesian_X =' + FloatToStr(Anchor_Cartesian_X) + ',');
      SQL.Add('Anchor_Cartesian_Y =' + FloatToStr(Anchor_Cartesian_Y) + ',');
      SQL.Add('Anchor_Latitude =' + FloatToStr(Anchor_Latitude) + ',');
      SQL.Add('Anchor_Longitude =' + FloatToStr(Anchor_Longitude) + ',');
      SQL.Add('Current_Drift =' + IntToStr(Current_Drift) + ',');
      SQL.Add('Waypoint_Termination =' + IntToStr(Waypoint_Termination) + ',');
      SQL.Add('Termination_Heading =' + FloatToStr(Termination_Heading) + ',');
      // SQL.Add('Cond_List_Instance_Index  ='+ IntToStr(Cond_List_Instance_Index )+',' );
      SQL.Add('Damage =' + FloatToStr(Damage) + ',');
      SQL.Add('DE_Index = ' + IntToStr(DE_Index));
    end;

    SQL.Add('WHERE Platform_Event_Index = ' + IntToStr(pi_id) { +' AND ' } );
    ExecSQL;

  end;
end;
// ------------------------------------------------------------------------------

function TdmTTT.InsertPlatform_Activation(var rec: TPlatform_Instance): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FActivation do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Platform_Activation (');

      SQL.Add('Deployment_Index, ');
      SQL.Add('Platform_Instance_Index, ');
      SQL.Add('Platform_Activation_Time, ');
      SQL.Add('Init_Guidance_Type, ');
      SQL.Add('Init_Position_Latitude, ');
      SQL.Add('Init_Position_Longitude, ');
      SQL.Add('Init_Position_Cartesian_X, ');
      SQL.Add('Init_Position_Cartesian_Y, ');
      SQL.Add('Init_Altitude, ');
      SQL.Add('Init_Fuel, ');
      SQL.Add('Init_Lubricants, ');
      SQL.Add('Init_Freshwater, ');
      SQL.Add('Init_Water, ');
      SQL.Add('Init_Food, ');
      SQL.Add('Init_Course, ');
      SQL.Add('Init_Helm_Angle, ');
      SQL.Add('Init_Ground_Speed, ');
      SQL.Add('Init_Vertical_Speed, ');
      SQL.Add('Init_Command_Altitude, ');
      SQL.Add('Init_Command_Course, ');
      SQL.Add('Init_Command_Helm_Angle, ');
      SQL.Add('Init_Command_Ground, ');
      SQL.Add('Init_Command_Vert, ');
      SQL.Add('Deg_of_Rotation, ');
      SQL.Add('Radius_of_Travel, ');
      SQL.Add('Direction_of_Travel, ');
      SQL.Add('Circle_Latitude, ');
      SQL.Add('Circle_Longitude, ');
      SQL.Add('Circle_X, ');
      SQL.Add('Circle_Y, ');
      SQL.Add('Dynamic_Circle_Range_Offset, ');
      SQL.Add('Dynamic_Circle_Angle_Offset, ');
      SQL.Add('Dynamic_Circle_Offset_Mode, ');
      SQL.Add('Period_Distance, ');
      SQL.Add('Amplitude_Distance, ');
      SQL.Add('Zig_Zag_Leg_Type, ');
      SQL.Add('Target_Angle_Offset, ');
      SQL.Add('Target_Angle_Type, ');
      SQL.Add('Target_Range, ');
      // SQL.Add('Guidance_Target, ');
      // SQL.Add('Pattern_Instance_Index, ');
      SQL.Add('Angular_Offset, ');
      SQL.Add('Anchor_Cartesian_X, ');
      SQL.Add('Anchor_Cartesian_Y, ');
      SQL.Add('Anchor_Latitude, ');
      SQL.Add('Anchor_Longitude, ');
      SQL.Add('Current_Drift, ');
      SQL.Add('Waypoint_Termination, ');
      SQL.Add('Termination_Heading, ');
      // SQL.Add('Cond_List_Instance_Index, ');
      SQL.Add('Damage, ');
      SQL.Add('DE_Index) ');
      SQL.Add('VALUES ( ');
      // SQL.Add(IntToStr(Platform_Event_Index)+',');
      SQL.Add(IntToStr(Deployment_Index) + ',');
      SQL.Add(IntToStr(Platform_Instance_Index) + ',');
      SQL.Add(IntToStr(Platform_Activation_Time) + ',');
      SQL.Add(IntToStr(Init_Guidance_Type) + ',');
      SQL.Add(FloatToStr(Init_Position_Latitude) + ',');
      SQL.Add(FloatToStr(Init_Position_Longitude) + ',');
      SQL.Add(FloatToStr(Init_Position_Cartesian_X) + ',');
      SQL.Add(FloatToStr(Init_Position_Cartesian_Y) + ',');
      SQL.Add(FloatToStr(Init_Altitude) + ',');
      SQL.Add(FloatToStr(Init_Fuel) + ',');
      SQL.Add(FloatToStr(Init_Lubricants) + ',');
      SQL.Add(FloatToStr(Init_Freshwater) + ',');
      SQL.Add(FloatToStr(Init_Water) + ',');
      SQL.Add(FloatToStr(Init_Food) + ',');
      SQL.Add(FloatToStr(Init_Course) + ',');
      SQL.Add(FloatToStr(Init_Helm_Angle) + ',');
      SQL.Add(IntToStr(Init_Ground_Speed) + ',');
      SQL.Add(IntToStr(Init_Vertical_Speed) + ',');
      SQL.Add(FloatToStr(Init_Command_Altitude) + ',');
      SQL.Add(FloatToStr(Init_Command_Course) + ',');
      SQL.Add(FloatToStr(Init_Command_Helm_Angle) + ',');
      SQL.Add(IntToStr(Init_Command_Ground) + ',');
      SQL.Add(IntToStr(Init_Command_Vert) + ',');
      SQL.Add(FloatToStr(Deg_of_Rotation) + ',');
      SQL.Add(FloatToStr(Radius_of_Travel) + ',');
      SQL.Add(IntToStr(Direction_of_Travel) + ',');
      SQL.Add(FloatToStr(Circle_Latitude) + ',');
      SQL.Add(FloatToStr(Circle_Longitude) + ',');
      SQL.Add(FloatToStr(Circle_X) + ',');
      SQL.Add(FloatToStr(Circle_Y) + ',');
      SQL.Add(FloatToStr(Dynamic_Circle_Range_Offset) + ',');
      SQL.Add(IntToStr(Dynamic_Circle_Angle_Offset) + ',');
      SQL.Add(IntToStr(Dynamic_Circle_Offset_Mode) + ',');
      SQL.Add(FloatToStr(Period_Distance) + ',');
      SQL.Add(FloatToStr(Amplitude_Distance) + ',');
      SQL.Add(IntToStr(Zig_Zag_Leg_Type) + ',');
      SQL.Add(FloatToStr(Target_Angle_Offset) + ',');
      SQL.Add(IntToStr(Target_Angle_Type) + ',');
      SQL.Add(FloatToStr(Target_Range) + ',');
      // SQL.Add(IntToStr(Guidance_Target)+',');
      // SQL.Add(IntToStr(Pattern_Instance_Index)+',');
      SQL.Add(FloatToStr(Angular_Offset) + ',');
      SQL.Add(FloatToStr(Anchor_Cartesian_X) + ',');
      SQL.Add(FloatToStr(Anchor_Cartesian_Y) + ',');
      SQL.Add(FloatToStr(Anchor_Latitude) + ',');
      SQL.Add(FloatToStr(Anchor_Longitude) + ',');
      SQL.Add(IntToStr(Current_Drift) + ',');
      SQL.Add(IntToStr(Waypoint_Termination) + ',');
      SQL.Add(FloatToStr(Termination_Heading) + ',');
      // SQL.Add(IntToStr(Cond_List_Instance_Index)+',');
      SQL.Add(FloatToStr(Damage) + ',');
      SQL.Add(IntToStr(DE_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Platform_Event_Index FROM Platform_Activation ');
      SQL.Add('WHERE (Deployment_Index = ' + IntToStr(Deployment_Index) + ') ');
      SQL.Add('AND (Platform_Instance_Index = ' + IntToStr(Platform_Instance_Index) + ') ');
      Open;

      Platform_Event_Index := FieldByName('Platform_Event_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.InsertPlatform_Embark_Library(var rec: TVehicle_On_Base): Integer;
begin
  Result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Platform_Embark_Library ');
      SQL.Add('(Embark_Library_Index, Vehicle_Index, Quantity ');
      SQL.Add(') ');
      SQL.Add('VALUES ( ');
      SQL.Add(IntToStr(Base_Index) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Quantity));
      SQL.Add(')');
    end;
    ExecSQL;
  end;
end;


function TdmTTT.deletePlatform_ActivationByIndex(const platform_instace_index: string)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    // delete platform Activation
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Activation');
    SQL.Add('WHERE Platform_Instance_Index = ' + platform_instace_index);
    ExecSQL;
    // delete platform Instance
//    Close;
//    SQL.Clear;
//    SQL.Add('DELETE FROM Platform_Instance');
//    SQL.Add('WHERE Platform_Instance_Index = ' + platform_instace_index);
//    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deletePlatformActivationByDeploy(const deploy_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Activation ');
    SQL.Add('WHERE Deployment_Index=' + deploy_id);
    ExecSQL;

  end;
end;

function TdmTTT.DeletePlatformCapability(id: integer): integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Capability ');
    SQL.Add('WHERE Platform_Capability_Index = ' + inttostr(id));
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------
function TdmTTT.getPlatformType(var aRec: TList): Integer;
var
  recType: TPlatform_Type;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('Select *');
    SQL.Add('FROM Platform_Type_Def');
    Open;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        recType := TPlatform_Type.Create;

        recType.FData.Platform_Type := FieldByName('Platform_Type').AsInteger;
        recType.FData.Platform_Type_Definition := FieldByName
          ('Platform_Type_Definition').AsString;

        aRec.Add(recType);
        ZQ.Next;
      end;
    end;

  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllResource_Allocation(var aRec: TList): Integer;
var
  rec: TResource_Allocation;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Resource_Allocation ');
    SQL.Add('ORDER BY Allocation_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TResource_Allocation.Create;
        with rec.FData do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier')
            .AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;
        if rec.FData.Resource_Alloc_Index <> 1 then
          aRec.Add(rec);

        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetResourceAlloc_byGameDef(const id: Integer; var aRec: TList): Integer;
var
  rec: TResource_Allocation;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Resource_Allocation ');
    SQL.Add('WHERE  Defaults_Index = '+ IntToStr(id));
    SQL.Add('ORDER BY Allocation_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TResource_Allocation.Create;
        with rec.FData do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Allocation_Identifier := FieldByName('Allocation_Identifier')
            .AsString;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Game_Start_Time := FieldByName('Game_Start_Time').AsFloat;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;


function TdmTTT.getAllRuntimePlatform(allocIndex: Integer;
  var list: TList): Integer;
var
  rec: TRuntime_Platform_Library;
  listPLE: TList;
  recList: TList;
  i, J: Integer;
  aObject: TObject;
begin
  Result := 0;
  if not Assigned(list) then
    list := TList.Create;
  recList := TList.Create;
  listPLE := TList.Create;
  rec := TRuntime_Platform_Library.Create;
  GetRuntime_Platform_LibraryByResourceAlloc(allocIndex, recList, rec);

  if recList.Count = 0 then
    exit;

  // cuma ambil yang pertama ajah
  rec := TRuntime_Platform_Library(recList[0]);

  for i := 0 to recList.Count - 1 do
  begin
    // ple := TPlatform_Library_Entry(rec.FPlatform_Library_Entry[i]);
    getAllPlatform_Library_Entry(TRuntime_Platform_Library(recList[0])
        .FData.Platform_Library_Index,
      TRuntime_Platform_Library(recList[i]).FPlatform_Library_Entry);
    listPLE := TRuntime_Platform_Library(recList[i]).FPlatform_Library_Entry;
    for J := 0 to listPLE.Count - 1 do
    begin
      with TPlatform_Library_Entry(listPLE[J]).FData do
      begin
        if Vehicle_Index <> 0 then
        begin
          GetVehicle_Definition(Vehicle_Index, TVehicle_Definition(aObject));
          // getAllVehicleProperties(Vehicle_Index,TVehicle_Definition(aObject));
        end;

        if Missile_Index <> 0 then
          getMissile_Def(TMissile_Definition(aObject), Missile_Index);

        if Torpedo_Index <> 0 then
          getTorpedo_Def(TTorpedo_Definition(aObject), Torpedo_Index);

        if Mine_Index <> 0 then
          getMine_def(TMine_Definition(aObject), Mine_Index);

        if Hybrid_Index <> 0 then
          ;

        if Sonobuoy_Index <> 0 then
          ;

        if aObject <> nil then
          list.Add(aObject);
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetMaxResource_Allocation(var id: Integer): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT MAX(Resource_Alloc_Index) as last');
    SQL.Add('FROM Resource_Allocation ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      id := Fields[0].AsInteger;
    end;
  end;
end;

function TdmTTT.getInstance_Ident_Index(const VIndex: Integer;
  const Inst_Identifier: string): Integer;
begin
  result := 0;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Instance_Ident_Index');
    SQL.Add('FROM Platform_Instance_Identifier ');
    SQL.Add('WHERE Vehicle_Index =' + IntToStr(VIndex)+' AND ');
    SQL.Add('Instance_Identifier ='+ quotedStr(Inst_Identifier));
    Open;

    result := FieldByName('Instance_Ident_Index').AsInteger;
  end;
end;

function TdmTTT.getMine_def(rec: TMine_Definition; id: Integer): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Mine_Definition ';

    if id <> 0 then
      ssql := ssql + 'WHERE Mine_Index=' + IntToStr(id);

    SQL.Add(ssql);
    SQL.Add('ORDER BY Mine_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      rec := TMine_Definition.Create;
      with rec.FData do
      begin
        Mine_Index := FieldByName('Mine_Index').AsInteger;
        Mine_Identifier := FieldByName('Mine_Identifier').AsString;
        Platform_Domain := FieldByName('Platform_Domain').AsInteger;
        Platform_Category := FieldByName('Platform_Category').AsInteger;
        Platform_Type := FieldByName('Platform_Type').AsInteger;
        Mine_Classification := FieldByName('Mine_Classification').AsInteger;
        Length := FieldByName('Length').AsSingle;
        Width := FieldByName('Width').AsSingle;
        Height := FieldByName('Height').AsSingle;
        Mooring_Type := FieldByName('Mooring_Type').AsInteger;
        Max_Laying_Depth := FieldByName('Max_Laying_Depth').AsSingle;
        Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
        Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
        Mine_Lethality := FieldByName('Mine_Lethality').AsInteger;
        Engagement_Range := FieldByName('Engagement_Range').AsSingle;
        Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
        Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
        Detectability_Type := FieldByName('Detectability_Type').AsInteger;
      end;
    end;
  end;
end;
// ------------------------------------------------------------------------------

function TdmTTT.getMineByLibrary(const id_Library: Integer;
  var vList: TList): Integer;
var
  rec: TMine_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Platform_Library_Entry a ';
    ssql := ssql +
      'join Mine_Definition b on a.Mine_Index = b.Mine_Index ';
    ssql := ssql + 'WHERE a.Library_Index = ' + IntToStr(id_Library) + ' ';
    ssql := ssql + 'AND a.Platform_Type = 4';

//     ShowMessage(ssql);
    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(vList) then
        vList := TList.Create
      else
        vList.Clear;

      while not ZQ.Eof do
      begin
        rec := TMine_On_Board.Create;
        with rec.FMine_Def do
        begin
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Mine_Identifier := FieldByName('Mine_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Mine_Classification := FieldByName('Mine_Classification').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Mooring_Type := FieldByName('Mooring_Type').AsInteger;
          Max_Laying_Depth := FieldByName('Max_Laying_Depth').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Mine_Lethality := FieldByName('Mine_Lethality').AsInteger;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;
        vList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// --------------------------------------------------------------------------

function TdmTTT.getAllMine_POD_vs_Range(const id: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
var
    rec: TMine_On_Board;

begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Mine_POD_vs_Range ' );
    SQL.Add('WHERE (Mine_Index = ' +  IntToStr(id) + ') ' );
    SQL.Add('ORDER BY Range ASC ' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TMine_On_Board.Create;
        with rec.FMine_POD do begin
          List_Index          := FieldByName('List_Index').AsInteger;
          Mine_Index          := FieldByName('Mine_Index').AsInteger;
          Prob_of_Detonation  := FieldByName('Prob_of_Detonation').AsSingle;
          Range               := FieldByName('Range').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;


      SQL.Clear;
      SQL.Add('SELECT MIN(Range) as X_MIN, ');
      SQL.Add('MAX(Prob_of_Detonation) as Y_MAX, ');
      SQL.Add('MIN(Prob_of_Detonation) as Y_MIN ');
      SQL.Add('FROM  Mine_POD_vs_Range ' );
      SQL.Add('WHERE (Mine_Index = ' +  IntToStr(id) + ') ' );
      Open;
      xMin  := FieldByName('X_MIN').AsSingle;
      yMax  := FieldByName('Y_MAX').AsSingle;
      yMin  := FieldByName('Y_MIN').AsSingle;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllBomb_POH_vs_Range(const id: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
var
    rec: TBomb_Definition;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Bomb_POH_vs_Range ' );
    SQL.Add('WHERE (Bomb_Index = ' +  IntToStr(id) + ')' );
    SQL.Add('ORDER BY Range ASC ' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TBomb_Definition.Create;
        with rec.FBomb_POH do begin
          List_Index    := FieldByName('List_Index').AsInteger;
          Bomb_Index    := FieldByName('Bomb_Index').AsInteger;
          Prob_of_Hit   := FieldByName('Prob_of_Hit').AsSingle;
          Range         := FieldByName('Range').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;

      SQL.Clear;
      SQL.Add('SELECT MIN(Range) as X_MIN, ');
      SQL.Add('MAX(Prob_of_Hit) as Y_MAX, ');
      SQL.Add('MIN(Prob_of_Hit) as Y_MIN ');
      SQL.Add('FROM  Bomb_POH_vs_Range ' );
      SQL.Add('WHERE (Bomb_Index = ' +  IntToStr(id) + ')' );
      Open;
      xMin  := FieldByName('X_MIN').AsSingle;
      yMax  := FieldByName('Y_MAX').AsSingle;
      yMin  := FieldByName('Y_MIN').AsSingle;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.DeleteBomb_POH_vs_Range(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Bomb_POH_vs_Range  ');
    SQL.Add('WHERE (Bomb_Index = ' +  id + ')' );
    ExecSQL;
  end;
end;

function TdmTTT.DeleteByID_GameReport(const id: String): Boolean;
begin
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Game_Report');
    SQL.Add('WHERE (Id_Game_Report = ' + id + ')');
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.insertBomb_POH_vs_Range(rec: TBomb_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FBomb_POH do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Bomb_POH_vs_Range ');
      SQL.Add
        ('(Bomb_Index,Prob_of_Hit,Range)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Bomb_Index) + ',');
      SQL.Add(FloatToStr(Prob_of_Hit) + ',');
      SQL.Add(FloatToStr(Range) + ')');
      ExecSQL;
    end;
  end;
end;


//-------------------------------------------------------------------------

function TdmTTT.DeleteMine_POD_vs_Range(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Mine_POD_vs_Range  ');
      SQL.Add('WHERE (Mine_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.insertMine_POD_vs_Range(rec: TMine_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FMine_POD do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Mine_POD_vs_Range ');
      SQL.Add
        ('(Mine_Index,Prob_of_Detonation,Range)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Mine_Index) + ',');
      SQL.Add(FloatToStr(Prob_of_Detonation) + ',');
      SQL.Add(FloatToStr(Range) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------
function TdmTTT.getMissile_Def(rec: TMissile_Definition; id: Integer): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Missile_Definition ';

    if id <> 0 then
      ssql := ssql + 'WHERE Missile_Index =' + IntToStr(id);

    SQL.Add(ssql);
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      rec := TMissile_Definition.Create;
      First;
      with rec.FData do
      begin
        Missile_Index := FieldByName('Missile_Index').AsInteger;
        Class_Identifier := FieldByName('Class_Identifier').AsString;
        Platform_Domain := FieldByName('Platform_Domain').AsInteger;
        Platform_Category := FieldByName('Platform_Category').AsInteger;
        Platform_Type := FieldByName('Platform_Type').AsInteger;
        Max_Range := FieldByName('Max_Range').AsSingle;
        Min_Range := FieldByName('Min_Range').AsSingle;
        Motion_Index := FieldByName('Motion_Index').AsInteger;
        Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
        Second_Seeker_Pattern_Capable := FieldByName
          ('Second_Seeker_Pattern_Capable').AsInteger;
        Seeker_Bias_Capable := FieldByName('Seeker_Bias_Capable').AsInteger;
        Fixed_Seeker_Turn_On_Range := FieldByName('Fixed_Seeker_Turn_On_Range')
          .AsInteger;
        Lethality := FieldByName('Lethality').AsInteger;
        Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
        Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
        Default_Altitude := FieldByName('Default_Altitude').AsSingle;
        Length := FieldByName('Length').AsSingle;
        Width := FieldByName('Width').AsSingle;
        Height := FieldByName('Height').AsSingle;
        Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
        Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
        Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
        Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
        Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
        Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
        Pursuit_Guide_Type := FieldByName('Pursuit_Guide_Type').AsInteger;
        Primary_Guide_Type := FieldByName('Primary_Guide_Type').AsInteger;
        Secondary_Guide_Type := FieldByName('Secondary_Guide_Type').AsInteger;
        Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
        Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
        Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
        Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
        Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;
        Primary_Target_Domain := FieldByName('Primary_Target_Domain').AsInteger;
        SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
        CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
        TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
        IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
        AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
        Transmitted_Frequency := FieldByName('Transmitted_Frequency').AsFloat;
        Scan_Rate := FieldByName('Scan_Rate').AsSingle;
        Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
        Pulse_Width := FieldByName('Pulse_Width').AsSingle;
        Xmit_Power := FieldByName('Xmit_Power').AsSingle;
        TARH_Jamming_A_Probability := FieldByName('TARH_Jamming_A_Probability')
          .AsSingle;
        TARH_Jamming_B_Probability := FieldByName('TARH_Jamming_B_Probability')
          .AsSingle;
        TARH_Jamming_C_Probability := FieldByName('TARH_Jamming_C_Probability')
          .AsSingle;
        Wpt_Capable := FieldByName('Wpt_Capable').AsInteger;
        Max_Num_Wpts := FieldByName('Max_Num_Wpts').AsInteger;
        Min_Final_Leg_Length := FieldByName('Min_Final_Leg_Length').AsSingle;
        Engagement_Range := FieldByName('Engagement_Range').AsSingle;
        Max_Firing_Depth := FieldByName('Max_Firing_Depth').AsSingle;
        Upper_Received_Freq := FieldByName('Upper_Received_Freq').AsFloat;
        Lower_Received_Freq := FieldByName('Lower_Received_Freq').AsFloat;
        Fly_Out_Required := FieldByName('Fly_Out_Required').AsInteger;
        Fly_Out_Range := FieldByName('Fly_Out_Range').AsSingle;
        Fly_Out_Altitude := FieldByName('Fly_Out_Altitude').AsSingle;
        Booster_Separation_Required := FieldByName
          ('Booster_Separation_Required')
          .AsInteger;
        Booster_Separation_Range := FieldByName('Booster_Separation_Range')
          .AsSingle;
        Booster_Separation_Box_Width := FieldByName
          ('Booster_Separation_Box_Width').AsSingle;
        Booster_Separation_Box_Length := FieldByName
          ('Booster_Separation_Box_Length').AsSingle;
        Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
        Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
        Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
        Terminal_Guidance_Capability := FieldByName
          ('Terminal_Guidance_Capability').AsInteger;
        Terminal_Altitude_Required := FieldByName('Terminal_Altitude_Required')
          .AsInteger;
        Terminal_Acquisition_Altitude := FieldByName
          ('Terminal_Acquisition_Altitude').AsSingle;
        Terminal_Sinuation_Start_Range := FieldByName
          ('Terminal_Sinuation_Start_Range').AsSingle;
        Terminal_Sinuation_Period := FieldByName('Terminal_Sinuation_Period')
          .AsSingle;
        Terminal_Sinuation_Amplitude := FieldByName
          ('Terminal_Sinuation_Amplitude').AsSingle;
        Terminal_Pop_Up_Range := FieldByName('Terminal_Pop_Up_Range').AsSingle;
        Terminal_Pop_Up_Altitude := FieldByName('Terminal_Pop_Up_Altitude')
          .AsSingle;
        Mid_Course_Update_Mode := FieldByName('Mid_Course_Update_Mode')
          .AsInteger;
        Home_On_Jam_Type_A_Capable := FieldByName('Home_On_Jam_Type_A_Capable')
          .AsInteger;
        Home_On_Jam_Type_B_Capable := FieldByName('Home_On_Jam_Type_B_Capable')
          .AsInteger;
        Home_On_Jam_Type_C_Capable := FieldByName('Home_On_Jam_Type_C_Capable')
          .AsInteger;
        Launch_Method := FieldByName('Launch_Method').AsInteger;
        Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
        Launch_Speed := FieldByName('Launch_Speed').AsInteger;
        Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
          .AsInteger;
        Term_Guide_Azimuth_Narrow := FieldByName('Term_Guide_Azimuth_Narrow')
          .AsSingle;
        Term_Guide_Elevation_Narrow := FieldByName
          ('Term_Guide_Elevation_Narrow').AsSingle;
        Term_Guide_Range_Narrow := FieldByName('Term_Guide_Range_Narrow')
          .AsSingle;
        Spot_Number := FieldByName('Spot_Number').AsInteger;
        ECCM_Type := FieldByName('ECCM_Type').AsInteger;
        ECM_Detonation := FieldByName('ECM_Detonation').AsInteger;
        ECM_Detection := FieldByName('ECM_Detection').AsInteger;
        Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        IRCM_Detonation := FieldByName('IRCM_Detonation').AsInteger;
        IRCM_Detection := FieldByName('IRCM_Detection').AsInteger;
        Sea_State_Modelling_Capable := FieldByName
          ('Sea_State_Modelling_Capable')
          .AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateResource(rec: TResource_Allocation; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Resource_Allocation');
      SQL.Add('SET ');
      SQL.Add('Allocation_Identifier =''' + Allocation_Identifier + ''',');
      SQL.Add('Game_Enviro_Index =' + IntToStr(Game_Enviro_Index) + ',');
      SQL.Add('Defaults_Index =' + IntToStr(Defaults_Index) + ',');
      SQL.Add('Role_List_Index =' + IntToStr(Role_List_Index) + ',');
      SQL.Add('D_Day =' + FloatToStr(D_Day) + ',');
      SQL.Add('Game_Start_Time =' + FloatToStr(Game_Start_Time) + ' ');
    end;

    SQL.Add('WHERE (Resource_Alloc_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateGlobalConverge(rec: TGlobal_Convergence_Zone; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Global_Convergence_Zone ');
      SQL.Add('SET ');
  //  SQL.Add('Game_Enviro_Index =' + IntToStr(Game_Enviro_Index) + ',');
      SQL.Add('Occurance_Range =' + FloatToStr(Occurance_Range) + ',');
      SQL.Add('Width =' + FloatToStr(Width) + ',');
      SQL.Add('Signal_Reduction_Term =' + FloatToStr(Signal_Reduction_Term) + ',');
      SQL.Add('Increase_per_CZ =' + FloatToStr(Increase_per_CZ) + ',');
      SQL.Add('Max_Sonar_Depth =' + FloatToStr(Max_Sonar_Depth) + ' ');
    end;

    SQL.Add('WHERE (Game_Enviro_Index =' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertResource(var rec: TResource_Allocation): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Resource_Allocation');
      SQL.Add(
        '(Allocation_Identifier,Game_Enviro_Index,Defaults_Index,Role_List_Index,D_Day,Game_Start_Time)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Allocation_Identifier + ''',');
      SQL.Add(IntToStr(Game_Enviro_Index) + ',');
      SQL.Add(IntToStr(Defaults_Index) + ',');
      SQL.Add(IntToStr(Role_List_Index) + ',');
      SQL.Add(FloatToStr(D_Day) + ',');
      SQL.Add(FloatToStr(Game_Start_Time) + ')');
      // ShowMessage(SQL.Text);
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Resource_Allocation ');
      SQL.Add('WHERE Allocation_Identifier = ' + quotedStr
          (Allocation_Identifier));

      Open;

      with rec.FData do
      begin
        Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteResource_Allocation(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Allocation  ');
    SQL.Add('WHERE (Resource_Alloc_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetStudent_Role_Definition(const role_id, id: Integer;
  var pList: TList; var rec: TStudent_Role_Definition): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := ssql + 'SELECT * FROM Student_Role_Definition ';

    if role_id <> 0 then
      ssql := ssql + 'WHERE Student_Role_Index = ' + IntToStr(role_id)
    else if id <> 0 then
      ssql := ssql + 'WHERE (Role_List_Index = ' + IntToStr(id) + ')';

    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TStudent_Role_Definition.Create;
        with rec.FData do
        begin
          Student_Role_Index := FieldByName('Student_Role_Index').AsInteger;
          Role_Identifier := FieldByName('Role_Identifier').AsString;
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetStudentRoleByResource(const ra_id: Integer;
  var sList: TList): boolean;
var
  ssql: string;
  rec: TStudent_Role_List;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := ssql +
      'SELECT * FROM Student_Role_List a JOIN Resource_Allocation b ';
    ssql := ssql + 'ON a.Role_List_Index = b.Role_List_Index ';

    if ra_id <> 0 then
      ssql := ssql + 'WHERE b.Resource_Alloc_Index = ' + IntToStr(ra_id);

    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(sList) then
    begin
      sList.Create;
    end
    else
    begin
      sList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TStudent_Role_List.Create;
        with rec.FData do
        begin
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Role_List_Identifier := FieldByName('Role_List_Identifier').AsString;
        end;

        sList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateStudent_Def(rec: TStudent_Role_Definition;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Student_Role_Definition');
      SQL.Add('SET ');
      SQL.Add('Role_Identifier =''' + Role_Identifier + ''',');
      SQL.Add('Role_List_Index =' + IntToStr(Role_List_Index) + ' ');
    end;

    SQL.Add('WHERE (Student_Role_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertStudent_Def(rec: TStudent_Role_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Student_Role_Definition');
      SQL.Add('(Role_Identifier,Role_List_Index) ');
      SQL.Add('VALUES (');
      SQL.Add('''' + Role_Identifier + ''',');
      SQL.Add(FloatToStr(Role_List_Index) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteStudent_Role_Definition(const id: string;const index:integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Student_Role_Definition  ');
    if index = 0 then
      SQL.Add('WHERE (Role_List_Index = ' + id + ')')
    else
      SQL.Add('WHERE (Student_Role_Index = ' + id + ')');
   ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateStudent_List(rec: TStudent_Role_List;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Student_Role_List');
      SQL.Add('SET ');
      SQL.Add('Role_List_Identifier =''' + Role_List_Identifier + ''' ');
    end;

    SQL.Add('WHERE (Role_List_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertStudent_List(rec: TStudent_Role_List): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Student_Role_List');
      SQL.Add('(Role_List_Identifier) ');
      SQL.Add('VALUES (');
      SQL.Add('''' + Role_List_Identifier + ''')');
      ExecSQL;
      SQL.Clear;
      SQL.Add('SELECT * FROM Student_Role_List ');
      SQL.Add('WHERE Role_List_Identifier = ' + quotedStr(Role_List_Identifier)
        );

      Open;

      with rec.FData do
      begin
        Role_List_Index := FieldByName('Role_List_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetPlatformIdentIndex(var aRec : TList): Boolean;
var
  aPI : TPlatform_Instance;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Platform_Instance_Index, Vehicle_Index, Instance_Name ');
    SQL.Add('FROM Platform_Instance ');
    SQL.Add('WHERE Vehicle_Index is not null and ');
    SQL.Add('Instance_Ident_Index is null');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        aPI := TPlatform_Instance.Create;
        with aPI.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
        end;
        aRec.Add(aPI);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetIdentifierById(const id: integer): string;
begin
  result := '';
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Instance_Identifier ');
    SQL.Add('FROM Platform_Instance_Identifier ');
    SQL.Add('WHERE Instance_Ident_Index = ' + IntToStr(id));
    Open;

    if not IsEmpty then
    begin
      First;
      Result := Fields[0].AsString;
    end;
  end;
end;

function TdmTTT.GetIdentIndex(const aPI: TPlatform_Instance): integer;
begin
   result := 0;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Instance_Ident_Index ');
    SQL.Add('FROM Platform_Instance_Identifier ');
    SQL.Add('WHERE Vehicle_Index = ' + IntToStr(aPI.FData.Vehicle_Index));
    SQL.Add('and Instance_Identifier = ' + QuotedStr(aPI.FData.Instance_Name));
    Open;

    if not IsEmpty then
    begin
      First;
      Result := Fields[0].AsInteger;
    end;
  end;
end;

function TdmTTT.GetIDVecTarget(const Ident: string): Integer;
begin
  result := 0;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Vehicle_Index ');
    SQL.Add('FROM Vehicle_Definition ');
    SQL.Add('WHERE Vehicle_Identifier = ' + QuotedStr(Ident));
    Open;

    if not IsEmpty then
    begin
      First;
      Result := Fields[0].AsInteger;
    end;
  end;


end;

function TdmTTT.getAllPlatformCapability(mList: TList): Integer;
var
  rec : TTransport;
begin
 result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Capability ');
    SQL.Add('ORDER BY Capability_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(mList) then
        mList := TList.Create;
    end;

    while not ZQ.Eof do
    begin
      rec := TTransport.Create;
      with rec.FData do
      begin
        Transport_Index       := FieldByName('Platform_Capability_Index').AsInteger;
        Transport_Identifier           := FieldByName('Capability_Identifier').AsString;
        Carriable                       := FieldByName('Carriable').AsBoolean;
        Hangar_Unit_Carried             := FieldByName('Hangar_Unit_Carried').AsBoolean;
        Deck_Unit_Carried               := FieldByName('Deck_Unit_Carried').AsBoolean;
        Personnel_Unit_Carried          := FieldByName('Personnel_Unit_Carried').AsBoolean;
        FixedWing_Carried               := FieldByName('FixedWing_Carried').AsBoolean;
        Rotary_Carried                  := FieldByName('Rotary_Carried').AsBoolean;
        Amphibious_Carried              := FieldByName('Amphibious_Carried').AsBoolean;
        Land_Carried                    := FieldByName('Land_Carried').AsBoolean;
        Max_Hangar_Capacity             := FieldByName('Max_Hangar_Capacity').AsInteger;
        Max_Hangar_Weight               := FieldByName('Max_Hangar_Weight').AsFloat ;
        Max_Deck_Weight                 := FieldByName('Max_Deck_Weight').AsFloat;
        Deck_Width                      := FieldByName('Deck_Width').AsFloat;
        Deck_Length                     := FieldByName('Deck_Length').AsFloat;
        Max_Personnel_Capacity          := FieldByName('Max_Personnel_Capacity').AsInteger;
      end;

      mList.Add(rec);
      ZQ.Next;
    end;

  end;
end;

function TdmTTT.getAllPlatFormInstance(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TPlatform_Instance;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM ');
    SQL.Add('PlatForm_Instance a LEFT JOIN Platform_Activation b ');
    SQL.Add('ON a.Platform_Instance_Index = b.Platform_Instance_Index ');
    SQL.Add('WHERE (a.Resource_Alloc_Index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Force_Designation, a.Instance_Name');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance.Create;
        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger; // byte
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
          Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
        end;

        with rec.FActivation do
        begin
          Platform_Event_Index := FieldByName('Platform_Event_Index').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Platform_Activation_Time := FieldByName('Platform_Activation_Time')
            .AsInteger;
          Init_Guidance_Type := FieldByName('Init_Guidance_Type').AsInteger;
          Init_Position_Latitude := FieldByName('Init_Position_Latitude')
            .AsFloat;
          Init_Position_Longitude := FieldByName('Init_Position_Longitude')
            .AsFloat;
          Init_Position_Cartesian_X := FieldByName('Init_Position_Cartesian_X')
            .AsSingle;
          Init_Position_Cartesian_Y := FieldByName('Init_Position_Cartesian_Y')
            .AsSingle;
          Init_Altitude := FieldByName('Init_Altitude').AsSingle;
          Init_Fuel := FieldByName('Init_Fuel').AsSingle;
          Init_Lubricants := FieldByName('Init_Lubricants').AsSingle;
          Init_Freshwater := FieldByName('Init_Freshwater').AsSingle;
          Init_Water := FieldByName('Init_Water').AsSingle;
          Init_Food := FieldByName('Init_Food').AsSingle;
          Init_Course := FieldByName('Init_Course').AsSingle;
          Init_Helm_Angle := FieldByName('Init_Helm_Angle').AsSingle;
          Init_Ground_Speed := FieldByName('Init_Ground_Speed').AsInteger;
          Init_Vertical_Speed := FieldByName('Init_Vertical_Speed').AsInteger;
          Init_Command_Altitude := FieldByName('Init_Command_Altitude')
            .AsSingle;
          Init_Command_Course := FieldByName('Init_Command_Course').AsSingle;
          Init_Command_Helm_Angle := FieldByName('Init_Command_Helm_Angle')
            .AsSingle;
          Init_Command_Ground := FieldByName('Init_Command_Ground').AsInteger;
          Init_Command_Vert := FieldByName('Init_Command_Vert').AsInteger;
          Deg_of_Rotation := FieldByName('Deg_of_Rotation').AsSingle;
          Radius_of_Travel := FieldByName('Radius_of_Travel').AsSingle;
          Direction_of_Travel := FieldByName('Direction_of_Travel').AsInteger;
          Circle_Latitude := FieldByName('Circle_Latitude').AsFloat;
          Circle_Longitude := FieldByName('Circle_Longitude').AsFloat;
          Circle_X := FieldByName('Circle_X').AsSingle;
          Circle_Y := FieldByName('Circle_Y').AsSingle;
          Dynamic_Circle_Range_Offset := FieldByName
            ('Dynamic_Circle_Range_Offset').AsSingle;
          Dynamic_Circle_Angle_Offset := FieldByName
            ('Dynamic_Circle_Angle_Offset').AsInteger;
          Dynamic_Circle_Offset_Mode := FieldByName
            ('Dynamic_Circle_Offset_Mode')
            .AsInteger;
          Period_Distance := FieldByName('Period_Distance').AsSingle;
          Amplitude_Distance := FieldByName('Amplitude_Distance').AsSingle;
          Zig_Zag_Leg_Type := FieldByName('Zig_Zag_Leg_Type').AsInteger;
          Target_Angle_Offset := FieldByName('Target_Angle_Offset').AsSingle;
          Target_Angle_Type := FieldByName('Target_Angle_Type').AsInteger;
          Target_Range := FieldByName('Target_Range').AsSingle;
          Guidance_Target := FieldByName('Guidance_Target').AsInteger;
          Pattern_Instance_Index := FieldByName('Pattern_Instance_Index')
            .AsInteger;
          Angular_Offset := FieldByName('Angular_Offset').AsSingle;
          Anchor_Cartesian_X := FieldByName('Anchor_Cartesian_X').AsSingle;
          Anchor_Cartesian_Y := FieldByName('Anchor_Cartesian_Y').AsSingle;
          Anchor_Latitude := FieldByName('Anchor_Latitude').AsSingle;
          Anchor_Longitude := FieldByName('Anchor_Longitude').AsSingle;
          Current_Drift := FieldByName('Current_Drift').AsInteger;
          Waypoint_Termination := FieldByName('Waypoint_Termination').AsInteger;
          Termination_Heading := FieldByName('Termination_Heading').AsSingle;
          Cond_List_Instance_Index := FieldByName('Cond_List_Instance_Index')
            .AsInteger;
          Damage := FieldByName('Damage').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getPlatformInstanceByIndex(const id: Integer;
  var rec: TPlatform_Instance): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Platform_Instance ');
    SQL.Add('WHERE (Platform_Instance_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;
      if not Assigned(rec) then
        rec := TPlatform_Instance.Create;

      with rec.FData do
      begin
        Platform_Instance_Index := FieldByName('Platform_Instance_Index')
          .AsInteger;
        Instance_Name := FieldByName('Instance_Name').AsString;
      end;
    end;
  end;
end;



// ------------------------------------------------------------------------------

function TdmTTT.getAllPlatFormInstanceForceClassification(const v_id,
  id: Integer; var aRec: TList; force: Integer;
  classification: Integer): Integer;
var

  rec: TPlatform_Instance;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;

    ssql := 'SELECT * ';
    ssql := ssql + 'FROM ';
    ssql := ssql + '  Platform_Instance a INNER JOIN Vehicle_Definition b ';
    ssql := ssql +
      '  ON a.Vehicle_Index = b.Vehicle_Index INNER JOIN Resource_Allocation c ';
    ssql := ssql + '  ON a.Resource_Alloc_Index = c.Resource_Alloc_Index  ';
    ssql := ssql + 'WHERE (a.Resource_Alloc_Index = ' + IntToStr(id) + ')';

    if (v_id <> 0) then
      ssql := ssql + ' AND (a.Vehicle_Index = ' + IntToStr(v_id) + ')';

    if (force <> -1) then
      ssql := ssql + ' AND (a.Force_Designation = ' + IntToStr(force) + ')';

    if (classification <> -1) then
      ssql := ssql + ' AND (b.Platform_Domain = ' + IntToStr(classification)
        + ')';

    {
      SQL.Add('SELECT * ');
      SQL.Add('FROM ');
      SQL.Add('  Platform_Instance a INNER JOIN Vehicle_Definition b ' );
      SQL.Add('  ON a.Vehicle_Index = b.Vehicle_Index INNER JOIN Resource_Allocation c ');
      SQL.Add('  ON a.Resource_Alloc_Index = c.Resource_Alloc_Index  ' );
      SQL.Add('WHERE (Resource_Alloc_Index = ' +  IntToStr(id) + ')' );
      if (force<>-1) then
      SQL.Add(' AND (a.Force_Designation = ' +  IntToStr(force) + ')' );
      if (classification<>-1) then
      SQL.Add(' AND (b.Platform_Domain = ' +  IntToStr(classification) + ')' );

      }
    SQL.Add(ssql);
    SQL.Add('ORDER BY a.Instance_Name');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance.Create;
        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger; // byte
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
          Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
        end;
        {
          with rec.FActivation do begin
          Platform_Event_Index          := FieldByName('Platform_Event_Index').AsInteger;
          Deployment_Index              := FieldByName('Deployment_Index').AsInteger;
          Platform_Instance_Index       := FieldByName('Platform_Instance_Index').AsInteger;
          Platform_Activation_Time      := FieldByName('Platform_Activation_Time').AsInteger;
          Init_Guidance_Type            := FieldByName('Init_Guidance_Type').AsInteger;
          Init_Position_Latitude        := FieldByName('Init_Position_Latitude').AsFloat;
          Init_Position_Longitude       := FieldByName('Init_Position_Longitude').AsFloat;
          Init_Position_Cartesian_X     := FieldByName('Init_Position_Cartesian_X').AsSingle;
          Init_Position_Cartesian_Y     := FieldByName('Init_Position_Cartesian_Y').AsSingle;
          Init_Altitude                 := FieldByName('Init_Altitude').AsSingle;
          Init_Course                   := FieldByName('Init_Course').AsSingle;
          Init_Helm_Angle               := FieldByName('Init_Helm_Angle').AsSingle;
          Init_Ground_Speed             := FieldByName('Init_Ground_Speed').AsInteger;
          Init_Vertical_Speed           := FieldByName('Init_Vertical_Speed').AsInteger;
          Init_Command_Altitude         := FieldByName('Init_Command_Altitude').AsSingle;
          Init_Command_Course           := FieldByName('Init_Command_Course').AsSingle;
          Init_Command_Helm_Angle       := FieldByName('Init_Command_Helm_Angle').AsSingle;
          Init_Command_Ground           := FieldByName('Init_Command_Ground').AsInteger;
          Init_Command_Vert             := FieldByName('Init_Command_Vert').AsInteger;
          Deg_of_Rotation               := FieldByName('Deg_of_Rotation').AsSingle;
          Radius_of_Travel              := FieldByName('Radius_of_Travel').AsSingle;
          Direction_of_Travel           := FieldByName('Direction_of_Travel').AsInteger;
          Circle_Latitude               := FieldByName('Circle_Latitude').AsFloat;
          Circle_Longitude              := FieldByName('Circle_Longitude').AsFloat;
          Circle_X                      := FieldByName('Circle_X').AsSingle;
          Circle_Y                      := FieldByName('Circle_Y').AsSingle;
          Dynamic_Circle_Range_Offset   := FieldByName('Dynamic_Circle_Range_Offset').AsSingle;
          Dynamic_Circle_Angle_Offset   := FieldByName('Dynamic_Circle_Angle_Offset').AsInteger;
          Dynamic_Circle_Offset_Mode    := FieldByName('Dynamic_Circle_Offset_Mode').AsInteger;
          Period_Distance               := FieldByName('Period_Distance').AsSingle;
          Amplitude_Distance            := FieldByName('Amplitude_Distance').AsSingle;
          Zig_Zag_Leg_Type              := FieldByName('Zig_Zag_Leg_Type').AsInteger;
          Target_Angle_Offset           := FieldByName('Target_Angle_Offset').AsSingle;
          Target_Angle_Type             := FieldByName('Target_Angle_Type').AsInteger;
          Target_Range                  := FieldByName('Target_Range').AsSingle;
          Guidance_Target               := FieldByName('Guidance_Target').AsInteger;
          Pattern_Instance_Index        := FieldByName('Pattern_Instance_Index').AsInteger;
          Angular_Offset                := FieldByName('Angular_Offset').AsSingle;
          Anchor_Cartesian_X            := FieldByName('Anchor_Cartesian_X').AsSingle;
          Anchor_Cartesian_Y            := FieldByName('Anchor_Cartesian_Y').AsSingle;
          Anchor_Latitude               := FieldByName('Anchor_Latitude').AsSingle;
          Anchor_Longitude              := FieldByName('Anchor_Longitude').AsSingle;
          Current_Drift                 := FieldByName('Current_Drift').AsInteger;
          Waypoint_Termination          := FieldByName('Waypoint_Termination').AsInteger;
          Termination_Heading           := FieldByName('Termination_Heading').AsSingle;
          Cond_List_Instance_Index      := FieldByName('Cond_List_Instance_Index').AsInteger;
          Damage                        := FieldByName('Damage').AsSingle;
          end; }

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------
//
//function TdmTTT.getPlatFormInstance(const ra_id, force : Integer;
//   const instance:string; var aRec: TList): Integer;
//var
//
//  rec: TPlatform_Instance;
//  ssql: string;
//begin
//
//  result := -1;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    ssql := ssql + 'SELECT * FROM PlatForm_Instance ';
//
//    if (ra_id <> 0) AND (force <> 0) then
//    begin
//      ssql := ssql + 'WHERE Resource_Alloc_Index = ' + IntToStr(ra_id)
//        + ' AND ';
//      ssql := ssql + 'Force_Designation = ' + IntToStr(force);
//    end
//    else if (ra_id <> 0) AND (force = 0) then
//    begin
//      ssql := ssql + 'WHERE Resource_Alloc_Index = ' + IntToStr(ra_id);
//      ssql := ssql + 'ORDER BY Force_Designation, Instance_Name';
//    end
//
//
//    else if instance <> '' then
//      ssql := ssql + 'WHERE Instance_Name = ''' + instance + '''';
//
//    SQL.Add(ssql);
//    Open;
//
//    result := RecordCount;
//    if not IsEmpty then
//    begin
//
//      First;
//
//      if not Assigned(aRec) then
//        aRec := TList.Create
//      else
//        aRec.Clear;
//
//      while not ZQ.Eof do
//      begin
//        rec := TPlatform_Instance.Create;
//        with rec.FData do
//        begin
//          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
//            .AsInteger;
//          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
//          Platform_Type := FieldByName('Platform_Type').AsInteger;
//          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
//          Missile_Index := FieldByName('Missile_Index').AsInteger;
//          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
//          Mine_Index    := FieldByName('Mine_Index').AsInteger;
//          Hybrid_Index  := FieldByName('Hybrid_Index').AsInteger;
//          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
//          Sonobuoy_Index  := FieldByName('Sonobuoy_Index').AsInteger;
//          Instance_Name := FieldByName('Instance_Name').AsString;
//          Force_Designation := FieldByName('Force_Designation').AsInteger;
//          Track_ID := FieldByName('Track_ID').AsString;
//          Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
//
//        end;
//
//        aRec.Add(rec);
//        ZQ.Next;
//
//      end;
//    end;
//  end;
//end;

// ------------------------------------------------------------------------------

function TdmTTT.filterPlatFormInstance(const ra_id, force, clas, deployed: Integer;
   var aRec: TList): Integer;
var

  rec: TPlatform_Instance;
  ssql: string;
begin

  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;

    ssql := ssql + 'SELECT * FROM Platform_Instance a ';

    if clas <> -1 then
      ssql := ssql + 'LEFT JOIN Vehicle_Definition b ON a.Vehicle_Index = b.Vehicle_Index ';

    if deployed = 1 then
      ssql := ssql + 'LEFT JOIN (select c.Platform_Instance_Index,count(*) as quantity '+
              'from Platform_Instance a,Platform_Activation c '+
              'where c.Platform_Instance_Index = a.Platform_Instance_Index '+
              'group by c.Platform_Instance_Index ) d '+
              'ON a.Platform_Instance_Index = d.Platform_Instance_Index ';

    ssql := ssql + 'WHERE a.Resource_Alloc_Index = ' + IntToStr(ra_id);

    if force <> -1 then
      ssql := ssql + ' AND a.Force_Designation = ' + IntToStr(force);
    if clas <> -1 then
      ssql := ssql + ' AND b.Platform_Domain = ' + IntToStr(clas);
    if deployed = 1 then
      ssql := ssql + ' AND d.quantity IS NULL ';

    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance.Create;
        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger; // byte
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
          Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getPlatformInstanceByGroup(const group_id: Integer;
  var cList: TList): Integer;
var

  rec: TCubicle_Group_Assignment;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM ');
    SQL.Add('PlatForm_Instance a  JOIN Cubicle_group_Assignment b ');
    SQL.Add('ON a.Platform_Instance_Index = b.Platform_Instance_Index ');
    SQL.Add('WHERE (b.Group_Index = ' + IntToStr(group_id) + ')');
    SQL.Add('ORDER BY a.Instance_Name');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(cList) then
        cList := TList.Create
      else
        cList.Clear;

      while not ZQ.Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;
        with rec.FPlatform do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger; // byte
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
          Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
        end;

        cList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.getPlatformInstanceByMissile(const miss_id: Integer;
  var cList: TList): Integer;
var
  i: Integer;
  rec: TPlatform_Instance;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM PlatForm_Instance ');
    SQL.Add('WHERE (Missile_Index = ' + IntToStr(miss_id) + ')');
    SQL.Add('ORDER BY Instance_Name');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(cList) then
        cList := TList.Create
      else
        cList.Clear;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance.Create;
        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger; // byte
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
          Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
        end;

        cList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.getPlatformInstanceByHybrid(const hyb_id: Integer;
  var cList: TList): Integer;
var
  i: Integer;
  rec: TPlatform_Instance;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM PlatForm_Instance ');
    SQL.Add('WHERE (Hybrid_Index = ' + IntToStr(hyb_id) + ')');
    SQL.Add('ORDER BY Instance_Name');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(cList) then
        cList := TList.Create
      else
        cList.Clear;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance.Create;
        with rec.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger; // byte
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
          Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
        end;

        cList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

//------------------------------------------------------------------------------

function TdmTTT.getPlatformInstanceByName(const id,ra_id,force: string; var rec: TPlatform_Instance):boolean;
var ssql : string;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    ssql := ssql +
      'SELECT distinct c.Platform_Instance_Index,c.Instance_Name ';
    ssql := ssql +
      'FROM Cubicle_Group a INNER JOIN Cubicle_Group_Assignment b ';
    ssql := ssql +
      'ON a.Group_Index = b.Group_Index INNER JOIN Platform_Instance c ';
    ssql := ssql +
      'ON b.Platform_Instance_Index = c.Platform_Instance_Index WHERE ';

    ssql := ssql +'c.Instance_Name = ' +  QuotedStr(id) + ' AND ';
    ssql := ssql + 'c.Resource_Alloc_Index = ' + ra_id + ' AND ';
    ssql := ssql + 'a.Force_Designation = '+ force;
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not IsEmpty then begin

      First;
      if not Assigned(rec) then
        rec := TPlatform_Instance.Create;

      with rec.FData do begin
        Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
        Instance_Name           := FieldByName('Instance_Name').AsString;
      end;

    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.DeletePlatform_Instance_IdentifierByVec(const id: string): integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Instance_Identifier  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.DeletePlatform_Embark_Library(const lib_id: string): Integer;
begin
 Result := -1;
 with ZQ do
 begin
   Close;
   SQL.Clear;
   SQL.Add('DELETE FROM Platform_Embark_Library ');
   SQL.Add('WHERE Embark_Library_Index = ' + lib_id);
   ExecSQL;
 end;
end;

function TdmTTT.DeletePlatform_Instance_Identifier(const id: string): integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Instance_Identifier  ');
    SQL.Add('WHERE (Instance_Ident_Index = ' + id + ')');
    ExecSQL;
  end;
end;

function TdmTTT.UpdatePlatform_Instance_Identifier(const id, aIdent: string): integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Platform_Instance_Identifier  ');
    SQL.Add('SET Instance_Identifier = ' + QuotedStr(aIdent));
    SQL.Add('WHERE (Instance_Ident_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.InsertPlatform_Instance_Identifier
  (var rec: TPlatform_Instance_Identifier): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Platform_Instance_Identifier  ');
      SQL.Add('(Vehicle_Index,Instance_Identifier,vbs_class_name,model_path)');
      SQL.Add('VALUES ( ');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add('''' + vbs_class_name + ''',');
      SQL.Add('''' + model_path + ''')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Platform_Instance_Identifier ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index) +' ');
      SQL.Add('AND Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      Open;

      Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetPlatform_Instance_Identifier(const v_id: Integer;
  const v_ident: string; var vList: TList;
  var rec: TPlatform_Instance_Identifier): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Platform_Instance_Identifier WHERE ';

    if v_id <> 0 then
      ssql := ssql + '(Vehicle_Index = ' + IntToStr(v_id) + ')';

    if (v_id <> 0) and (v_ident <> '') then
      ssql := ssql + ' AND ';

    if v_ident <> '' then
      ssql := ssql + '(Instance_Identifier = ''' + v_ident + ''')';

    ssql := ssql + ' ORDER BY Instance_Identifier';
    SQL.Add(ssql);
    Open;

    if not Assigned(vList) then
      vList := TList.Create
    else
      vList.Clear;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance_Identifier.Create;
        with rec.FData do
        begin
          Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          vbs_class_name := FieldByName('vbs_class_name').AsString;
          model_path := FieldByName('model_path').AsString;
        end;
        vList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.getMaxIDPlatformInstance(var id: Integer): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT MAX(Platform_Instance_Index) as last');
    SQL.Add('FROM Platform_Instance ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      id := Fields[0].AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertPlatformCapability(rec: TTransport): Integer;
begin
  Result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Platform_Capability ');
      SQL.Add(
        '(Capability_Identifier,Carriable,Hangar_Unit_Carried ,Deck_Unit_Carried,Personnel_Unit_Carried,');
      SQL.Add(
        'FixedWing_Carried,Rotary_Carried,Amphibious_Carried,Land_Carried,Max_Hangar_Capacity,Max_Hangar_Weight,');
      SQL.Add(
        'Max_Deck_Weight,Deck_Width,Deck_Length,Max_Personnel_Capacity)');

      SQL.Add(' VALUES (');

      SQL.Add('''' + Transport_Identifier + ''',');
      SQL.Add(BoolToStr(Carriable) + ',');
      SQL.Add(BoolToStr(Hangar_Unit_Carried) + ',');
      SQL.Add(BoolToStr(Deck_Unit_Carried ) + ',');
      SQL.Add(BoolToStr(Personnel_Unit_Carried) + ',');
      SQL.Add(BoolToStr(FixedWing_Carried) + ',');
      SQL.Add(BoolToStr(Rotary_Carried) + ',');
      SQL.Add(BoolToStr(Amphibious_Carried) + ',');
      SQL.Add(BoolToStr(Land_Carried) + ',');
      SQL.Add(IntToStr(Max_Hangar_Capacity) + ',');
      SQL.Add(FloatToStr(Max_Hangar_Weight) + ',');
      SQL.Add(FloatToStr(Max_Deck_Weight) + ',');
      SQL.Add(FloatToStr(Deck_Width) + ',');
      SQL.Add(FloatToStr(Deck_Length) + ',');
      SQL.Add(IntToStr(Max_Personnel_Capacity)+')');

      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Platform_Capability_Index FROM Platform_Capability ');
      SQL.Add('WHERE Capability_Identifier =' + quotedStr(Transport_Identifier));
      Open;
      with rec.FData do
      begin
        Transport_Index := FieldByName('Platform_Capability_Index').AsInteger;
      end;

    end;
  end;
end;

//
//function TdmTTT.insertPlatformInstance(const rec: TPlatform_Instance;
//  const id: Integer): Integer;
//begin
//  result := -1;
//  with ZQ do
//  begin
//    with rec.FData do
//    begin
//      Close;
//      SQL.Clear;
//      SQL.Add('INSERT INTO Platform_Instance ');
//      if id = 1 then
//      begin
//        SQL.Add(
//          '(Resource_Alloc_Index,Platform_Type,Vehicle_Index,Instance_Name,Force_Designation,Track_ID,Instance_Ident_Index)');
//        SQL.Add(' VALUES (');
//        SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
//        SQL.Add(IntToStr(Platform_Type) + ',');
//        SQL.Add(IntToStr(Vehicle_Index) + ',');
//        SQL.Add('''' + Instance_Name + ''',');
//        SQL.Add(IntToStr(Force_Designation) + ',');
//        SQL.Add('''' + Track_ID + ''',');
//        SQL.Add(IntToStr(Instance_Ident_Index)+')');
//      end
//      else if id = 2 then
//      begin
//        SQL.Add(
//          '(Resource_Alloc_Index,Platform_Type,Missile_Index,Instance_Name,Force_Designation,Track_ID)');
//        SQL.Add(' VALUES (');
//        SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
//        SQL.Add(IntToStr(Platform_Type) + ',');
//        SQL.Add(IntToStr(Missile_Index) + ',');
//        SQL.Add('''' + Instance_Name + ''',');
//        SQL.Add(IntToStr(Force_Designation) + ',');
//        SQL.Add('''' + Track_ID + ''')');
//      end
//      else if id = 3 then
//      begin
//        SQL.Add(
//          '(Resource_Alloc_Index,Platform_Type,Torpedo_Index,Instance_Name,Force_Designation,Track_ID)');
//        SQL.Add(' VALUES (');
//        SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
//        SQL.Add(IntToStr(Platform_Type) + ',');
//        SQL.Add(IntToStr(Torpedo_Index) + ',');
//        SQL.Add('''' + Instance_Name + ''',');
//        SQL.Add(IntToStr(Force_Designation) + ',');
//        SQL.Add('''' + Track_ID + ''')');
//      end
//      else if id = 4 then
//      begin
//        SQL.Add(
//          '(Resource_Alloc_Index,Platform_Type,Sonobuoy_Index,Instance_Name,Force_Designation,Track_ID)');
//        SQL.Add(' VALUES (');
//        SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
//        SQL.Add(IntToStr(Platform_Type) + ',');
//        SQL.Add(IntToStr(Sonobuoy_Index) + ',');
//        SQL.Add('''' + Instance_Name + ''',');
//        SQL.Add(IntToStr(Force_Designation) + ',');
//        SQL.Add('''' + Track_ID + ''')');
//      end
//      else if id = 5 then
//      begin
//        SQL.Add(
//          '(Resource_Alloc_Index,Platform_Type,Mine_Index,Instance_Name,Force_Designation,Track_ID)');
//        SQL.Add(' VALUES (');
//        SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
//        SQL.Add(IntToStr(Platform_Type) + ',');
//        SQL.Add(IntToStr(Mine_Index) + ',');
//        SQL.Add('''' + Instance_Name + ''',');
//        SQL.Add(IntToStr(Force_Designation) + ',');
//        SQL.Add('''' + Track_ID + ''')');
//      end
//      else if id = 6 then
//      begin
//        SQL.Add(
//          '(Resource_Alloc_Index,Platform_Type,Satellite_Index,Instance_Name,Force_Designation,Track_ID)');
//        SQL.Add(' VALUES (');
//        SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
//        SQL.Add(IntToStr(Platform_Type) + ',');
//        SQL.Add(IntToStr(Satellite_Index) + ',');
//        SQL.Add('''' + Instance_Name + ''',');
//        SQL.Add(IntToStr(Force_Designation) + ',');
//        SQL.Add('''' + Track_ID + ''')');
//      end
//      else if id = 7 then
//      begin
//        SQL.Add(
//          '(Resource_Alloc_Index,Platform_Type,Hybrid_Index,Instance_Name,Force_Designation,Track_ID)');
//        SQL.Add(' VALUES (');
//        SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
//        SQL.Add(IntToStr(Platform_Type) + ',');
//        SQL.Add(IntToStr(Hybrid_Index) + ',');
//        SQL.Add('''' + Instance_Name + ''',');
//        SQL.Add(IntToStr(Force_Designation) + ',');
//        SQL.Add('''' + Track_ID + ''')');
//      end;
//      // ShowMessage(SQL.Text);
//      ExecSQL;
//
//    end;
//  end;
//
//end;

// ------------------------------------------------------------------------------

// ------------------------------------------------------------------------------

function TdmTTT.GetVehicle_Definition(const id: Integer;
  var rec: TVehicle_Definition): boolean;
var
  i, J, pre: Integer;
  predefined: TPredefined_Pattern;
  pattern: TPattern_Point;
begin
  result := false;
  predefined := nil;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Vehicle_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Vehicle_Index = b.Vehicle_Index ');
    SQL.Add('LEFT JOIN Platform_Instance_Identifier c ');
    SQL.Add('ON a.Vehicle_Index = c.Vehicle_Index ');
    SQL.Add('WHERE (a.Vehicle_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      if not Assigned(rec) then
        rec := TVehicle_Definition.Create;
      with rec.FData do
      begin
        Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
        Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        Platform_Domain := FieldByName('Platform_Domain').AsInteger;
        Platform_Category := FieldByName('Platform_Category').AsInteger;
        Platform_Type := FieldByName('Platform_Type').AsInteger;
        Motion_Characteristics := FieldByName('Motion_Characteristics')
          .AsInteger;
        Length := FieldByName('Length').AsSingle;
        Width := FieldByName('Width').AsSingle;
        Height := FieldByName('Height').AsSingle;
        Draft := FieldByName('Draft').AsSingle;
        Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
        Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
        Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
        Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
        Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
        Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross').AsSingle;
        Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
        Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
        Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
        LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
          .AsSingle;
        Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
          .AsSingle;
        Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
          .AsSingle;
        HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
          .AsSingle;
        Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
          .AsSingle;
        Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact').AsInteger;
        Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
          .AsBoolean;
        Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
        Min_Delay_Between_Chaff_Rounds := FieldByName
          ('Min_Delay_Between_Chaff_Rounds').AsInteger;
        Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
        SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
        CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
        TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
        IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
        AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
        Active_Acoustic_Tor_POH_Mod := FieldByName
          ('Active_Acoustic_Tor_POH_Mod').AsSingle;
        Passive_Acoustic_Tor_POH_Mod := FieldByName
          ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
        Active_Passive_Tor_POH_Mod := FieldByName('Active_Passive_Tor_POH_Mod')
          .AsSingle;
        Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
          .AsSingle;
        Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
          .AsSingle;
        Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier').AsSingle;
        Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
          .AsSingle;
        Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
          .AsSingle;
        Acoustic_Mine_POH_Modifier := FieldByName('Acoustic_Mine_POH_Modifier')
          .AsSingle;
        Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
          .AsSingle;
        Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
          .AsSingle;
        Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
          .AsSingle;
        HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
        UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
        HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
        VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
        UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
        SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
        UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
        HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
        UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
        SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
        Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
        Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
          .AsBoolean;
        Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
        Readying_Time := FieldByName('Readying_Time').AsInteger;
        Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
        Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
        Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
        Periscope_Height_Above_Water := FieldByName
          ('Periscope_Height_Above_Water').AsSingle;
        Periscope_Front_Radar_Xsection := FieldByName
          ('Periscope_Front_Radar_Xsection').AsSingle;
        Periscope_Side_Radar_Xsection := FieldByName
          ('Periscope_Side_Radar_Xsection').AsSingle;
        Periscope_Front_Vis_Xsection := FieldByName
          ('Periscope_Front_Vis_Xsection').AsSingle;
        Periscope_Side_Vis_Xsection := FieldByName
          ('Periscope_Side_Vis_Xsection').AsSingle;
        Periscope_Front_IR_Xsection := FieldByName
          ('Periscope_Front_IR_Xsection').AsSingle;
        Periscope_Side_IR_Xsection := FieldByName('Periscope_Side_IR_Xsection')
          .AsSingle;
        Engagement_Range := FieldByName('Engagement_Range').AsSingle;
        Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
          .AsBoolean;
        Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
        Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
          .AsInteger;
        Sonobuoy_Deploy_Max_Altitude := FieldByName
          ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
        Sonobuoy_Deploy_Min_Altitude := FieldByName
          ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
        Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
          .AsInteger;
        Air_Drop_Torpedo_Max_Altitude := FieldByName
          ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
        Air_Drop_Torpedo_Min_Altitude := FieldByName
          ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
        Air_Drop_Torpedo_Max_Speed := FieldByName('Air_Drop_Torpedo_Max_Speed')
          .AsInteger;
        TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
        HMS_Noise_Reduction_Factor := FieldByName('HMS_Noise_Reduction_Factor')
          .AsSingle;
        TAS_Noise_Reduction_Factor := FieldByName('TAS_Noise_Reduction_Factor')
          .AsSingle;
        Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
          .AsBoolean;
        HF_Mid_Course_Update_Capable := FieldByName
          ('HF_Mid_Course_Update_Capable').AsBoolean;
        UHF_Mid_Course_Update_Capable := FieldByName
          ('UHF_Mid_Course_Update_Capable').AsBoolean;
//        SATCOM_Mid_Course_Update_Capable    := FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;
        Font_id    := FieldByName('Font_id').AsInteger;
        Symbol_id    := FieldByName('Symbol_id').AsInteger;
        Quantity_Group_Personal    := FieldByName('Quantity_Group_Personal').AsInteger;
        Vbs_Class_Name    := FieldByName('Vbs_Class_Name').AsString;
        Platform_Capability_Index := FieldByName('Platform_Capability_Index').AsInteger;//dng
        Logistics_Index    := FieldByName('Logistics_Index').AsInteger;
        Tactical_Symbol_Name    := FieldByName('Tactical_Symbol_Name').AsString;
        GangwayPosition := FieldByName('GangwayPosition').AsInteger;
        DWT := FieldByName('DWT').AsSingle;
        last_updated := FieldByName('last_updated').AsDateTime;//dng
      end;

      with rec.FNote do
      begin
        Note_Index := FieldByName('Note_Index').AsInteger;
        Note_Type := FieldByName('Note_Type').AsInteger;
        Notes := FieldByName('Notes').AsString;
      end;
      {
        with rec.FPlatform_Ident do
        begin
        Instance_Ident_Index    := FieldByName('Instance_Ident_Index').AsInteger;
        Vehicle_Index           := FieldByName('Vehicle_Index').AsInteger;
        Instance_Identifier     := FieldByName('Instance_Identifier').AsString;
        end;
        }

      for i := 0 to RecordCount - 1 do
      begin
        Close;
        SQL.Clear;
        SQL.Add('SELECT *');
        SQL.Add('FROM Predefined_Pattern a LEFT JOIN Note_Storage b ');
        SQL.Add('ON a.Pattern_Index = b.Pattern_Index ');
        SQL.Add('WHERE a.Vehicle_Index = ' + IntToStr(rec.FData.Vehicle_Index));
        Open;

        First;

        while not ZQ.Eof do
        begin
          predefined := TPredefined_Pattern.Create;

          with predefined.FData do
          begin
            Pattern_Index := FieldByName('Pattern_Index').AsInteger;
            Pattern_Identifier := FieldByName('Pattern_Identifier').AsString;
            Pattern_Type := FieldByName('Pattern_Type').AsInteger;
            Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
            Pattern_Termination := FieldByName('Pattern_Termination').AsInteger;
            Termination_Heading := FieldByName('Termination_Heading').AsSingle;
          end;

          with rec.FNote do
          begin
            Note_Index := FieldByName('Note_Index').AsInteger;
            Note_Type := FieldByName('Note_Type').AsInteger;
            Notes := FieldByName('Notes').AsString;
          end;

          rec.predefined.Add(predefined);
          ZQ.Next;
        end;

        pre := RecordCount;
        for J := 0 to pre - 1 do
        begin
          Close;
          SQL.Add('SELECT * ');
          SQL.Add('FROM Pattern_Point ');
          SQL.Add('WHERE Pattern_Index =' + IntToStr
              (predefined.FData.Pattern_Index));
          Open;

          ZQ.First;

          while not ZQ.Eof do
          begin
            pattern := TPattern_Point.Create;

            with pattern.FData do
            begin
              Pattern_Index := FieldByName('Pattern_Index').AsInteger;
              Point_Number := FieldByName('Point_Number').AsInteger;
              Heading := FieldByName('Heading').AsSingle;
              Range := FieldByName('Range').AsSingle;
            end;

            predefined.pattern.Add(pattern);
            ZQ.Next;
          end;
        end;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetAllVehicle_Def(var vList: TList; var id: Integer;
  var rec: TVehicle_Definition): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Vehicle_Definition a LEFT JOIN Note_Storage b ';
    ssql := ssql + 'ON a.Vehicle_Index = b.Vehicle_Index ';
    if id <> 0 then
    begin
      ssql := ssql + 'WHERE (a.Vehicle_Index = ' + IntToStr(id) + ') ';
      ssql := ssql + 'ORDER BY Vehicle_Identifier ASC '
    end
    else
      ssql := ssql + 'ORDER BY Vehicle_Identifier ASC ';

    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(vList) then
        vList := TList.Create
      else
        vList.Clear;

      while not ZQ.Eof do
      begin
        rec := TVehicle_Definition.Create;
        with rec.FData do
        begin

          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics')
            .AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross')
            .AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
            .AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact')
            .AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
            .AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName
            ('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName
            ('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName
            ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName
            ('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
            .AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
            .AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier')
            .AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
            .AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
            .AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName
            ('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
            .AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
            .AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
            .AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
            .AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName
            ('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName
            ('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName
            ('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName
            ('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName
            ('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName
            ('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName
            ('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
            .AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
            .AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName
            ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName
            ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
            .AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName
            ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName
            ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName
            ('Air_Drop_Torpedo_Max_Speed')
            .AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName
            ('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName
            ('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
            .AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName
            ('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := ZQ.FieldByName
            ('UHF_Mid_Course_Update_Capable').AsBoolean;
          DWT := FieldByName('DWT').AsSingle;
          last_updated := FieldByName('last_updated').AsDateTime;
//          SATCOM_Mid_Course_Update_Capable := ZQ.FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;

          Font_id := FieldByName
            ('font_id').AsInteger;
          Symbol_id := FieldByName
            ('symbol_id').AsInteger;
          Quantity_Group_Personal := FieldByName
            ('Quantity_Group_Personal').AsInteger;
          Vbs_Class_Name := FieldByName
            ('vbs_class_name').AsString;
          Platform_Capability_Index := FieldByName('Platform_Capability_Index').AsInteger;  //dng
          Logistics_Index := FieldByName('Logistics_Index').AsInteger;
          Tactical_Symbol_Name := FieldByName
            ('Tactical_Symbol_Name').AsString;
          GangwayPosition := FieldByName('GangwayPosition').AsInteger;
          DWT := FieldByName('DWT').AsSingle;
          last_updated := FieldByName('last_updated').AsDateTime;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        vList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------



function TdmTTT.GetVehicleBy(const domain, tipe,embarked: string;
  var vList: TList): Integer;
var
  rec: TVehicle_Definition;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Vehicle_Definition a ';

    if domain <> '' then
    begin
      ssql := ssql + 'WHERE a.Platform_Domain = ' + domain;
      if tipe <> '' then
      begin
        ssql := ssql + ' AND a.Platform_Type = ' + tipe;
      end;
    end
    else if tipe <> '' then
    begin
      ssql := ssql + 'WHERE a.Platform_Type = ' + tipe;
      if domain <> '' then
      begin
        ssql := ssql + ' AND a.Platform_Domain = ' + domain;
      end;
    end;
    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(vList) then
        vList := TList.Create
      else
        vList.Clear;

      while not ZQ.Eof do
      begin
        rec := TVehicle_Definition.Create;

        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics')
            .AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross')
            .AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
            .AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact')
            .AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
            .AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName
            ('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName
            ('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName
            ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName
            ('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
            .AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
            .AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier')
            .AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
            .AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
            .AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName
            ('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
            .AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
            .AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
            .AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
            .AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName
            ('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName
            ('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName
            ('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName
            ('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName
            ('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName
            ('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName
            ('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
            .AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
            .AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName
            ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName
            ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
            .AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName
            ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName
            ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName
            ('Air_Drop_Torpedo_Max_Speed')
            .AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName
            ('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName
            ('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
            .AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName
            ('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := FieldByName
            ('UHF_Mid_Course_Update_Capable').AsBoolean;
//          SATCOM_Mid_Course_Update_Capable    := FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;
          Font_id := FieldByName
            ('font_id').AsInteger;
          Symbol_id := FieldByName
            ('symbol_id').AsInteger;
          Quantity_Group_Personal := FieldByName
            ('Quantity_Group_Personal').AsInteger;
          Vbs_Class_Name := FieldByName
            ('vbs_class_name').AsString;
          Platform_Capability_Index    := FieldByName('Platform_Capability_Index').AsInteger;
          Logistics_Index    := FieldByName('Logistics_Index').AsInteger;
          Tactical_Symbol_Name := FieldByName
            ('Tactical_Symbol_Name').AsString;
          GangwayPosition := FieldByName('GangwayPosition').AsInteger;
          DWT := FieldByName('DWT').AsSingle;
          last_updated := FieldByName('last_updated').AsDateTime;

        end;

        vList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getVehicleByLibrary(const id_Library: Integer;
  var vList: TList): Integer;
var
  rec: TVehicle_Definition;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Platform_Library_Entry a ';
    ssql := ssql +
      'join Vehicle_Definition b on a.Vehicle_Index = b.Vehicle_Index ';
    ssql := ssql + 'WHERE a.Library_Index = ' + IntToStr(id_Library) + ' ';
    ssql := ssql + 'AND a.Platform_Type = 1';

    // ShowMessage(ssql);
    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(vList) then
        vList := TList.Create
      else
        vList.Clear;

      while not ZQ.Eof do
      begin
        rec := TVehicle_Definition.Create;

        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics')
            .AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross')
            .AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
            .AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact')
            .AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
            .AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName
            ('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName
            ('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName
            ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName
            ('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
            .AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
            .AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier')
            .AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
            .AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
            .AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName
            ('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
            .AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
            .AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
            .AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
            .AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName
            ('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName
            ('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName
            ('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName
            ('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName
            ('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName
            ('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName
            ('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
            .AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
            .AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName
            ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName
            ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
            .AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName
            ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName
            ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName
            ('Air_Drop_Torpedo_Max_Speed')
            .AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName
            ('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName
            ('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
            .AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName
            ('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := FieldByName
            ('UHF_Mid_Course_Update_Capable').AsBoolean;
//          SATCOM_Mid_Course_Update_Capable    := FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;
          Font_id := FieldByName
            ('font_id').AsInteger;
          Symbol_id := FieldByName
            ('symbol_id').AsInteger;
          Quantity_Group_Personal := FieldByName
            ('Quantity_Group_Personal').AsInteger;
          Vbs_Class_Name := FieldByName
            ('vbs_class_name').AsString;
          Platform_Capability_Index    := FieldByName('Platform_Capability_Index').AsInteger;
          Logistics_Index    := FieldByName('Logistics_Index').AsInteger;
          Tactical_Symbol_Name := FieldByName
            ('Tactical_Symbol_Name').AsString;
          GangwayPosition := FieldByName('GangwayPosition').AsInteger;
          DWT := FieldByName('DWT').AsSingle;
          last_updated := FieldByName('last_updated').AsDateTime;
        end;

        vList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;
// ------------------------------------------------------------------------------

function TdmTTT.updateVehicle_Def(var rec: TVehicle_Definition;
  const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Vehicle_Definition ');
      SQL.Add('SET ');
      SQL.Add('Vehicle_Identifier = ''' + Vehicle_Identifier + ''',');
      SQL.Add('Platform_Domain = ' + IntToStr(Platform_Domain) + ',');
      SQL.Add('Platform_Category = ' + IntToStr(Platform_Category) + ',');
      SQL.Add('Platform_Type = ' + IntToStr(Platform_Type) + ',');
      SQL.Add('Motion_Characteristics = ' + IntToStr(Motion_Characteristics)
          + ',');
      SQL.Add('Length = ' + FloatToStr(Length) + ',');
      SQL.Add('Width = ' + FloatToStr(Width) + ',');
      SQL.Add('Height = ' + FloatToStr(Height) + ',');
      SQL.Add('Draft = ' + FloatToStr(Draft) + ',');
      SQL.Add('Front_Radar_Cross = ' + FloatToStr(Front_Radar_Cross) + ',');
      SQL.Add('Side_Radar_Cross = ' + FloatToStr(Side_Radar_Cross) + ',');
      SQL.Add('Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross)
          + ',');
      SQL.Add('Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add('Magnetic_Cross = ' + FloatToStr(Magnetic_Cross) + ',');
      SQL.Add('Front_Visual_EO_Cross = ' + FloatToStr(Front_Visual_EO_Cross)
          + ',');
      SQL.Add('Side_Visual_EO_Cross = ' + FloatToStr(Side_Visual_EO_Cross)
          + ',');
      SQL.Add('Front_Infrared_Cross = ' + FloatToStr(Front_Infrared_Cross)
          + ',');
      SQL.Add('Side_Infrared_Cross = ' + FloatToStr(Side_Infrared_Cross) + ',');
      SQL.Add('LSpeed_Acoustic_Intens = ' + FloatToStr(LSpeed_Acoustic_Intens)
          + ',');
      SQL.Add('Below_Cav_Acoustic_Intens = ' + FloatToStr
          (Below_Cav_Acoustic_Intens) + ',');
      SQL.Add('Above_Cav_Acoustic_Intens = ' + FloatToStr
          (Above_Cav_Acoustic_Intens) + ',');
      SQL.Add('HSpeed_Acoustic_Intens = ' + FloatToStr(HSpeed_Acoustic_Intens)
          + ',');
      SQL.Add('Cavitation_Speed_Switch = ' + FloatToStr
          (Cavitation_Speed_Switch) + ',');
      SQL.Add('Time_of_Weapon_Impact = ' + IntToStr(Time_of_Weapon_Impact)
          + ',');
      SQL.Add('Chaff_Seduction_Capable = ' + BoolToStr(Chaff_Seduction_Capable)
          + ',');
      SQL.Add('Seduction_Mode_Prob = ' + FloatToStr(Seduction_Mode_Prob) + ',');
      SQL.Add('Min_Delay_Between_Chaff_Rounds = ' + IntToStr
          (Min_Delay_Between_Chaff_Rounds) + ',');
      SQL.Add('Max_Chaff_Salvo_Size = ' + IntToStr(Max_Chaff_Salvo_Size) + ',');
      SQL.Add('SARH_POH_Modifier = ' + FloatToStr(SARH_POH_Modifier) + ',');
      SQL.Add('CG_POH_Modifier = ' + FloatToStr(CG_POH_Modifier) + ',');
      SQL.Add('TARH_POH_Modifier = ' + FloatToStr(TARH_POH_Modifier) + ',');
      SQL.Add('IR_POH_Modifier = ' + FloatToStr(IR_POH_Modifier) + ',');
      SQL.Add('AR_POH_Modifier = ' + FloatToStr(AR_POH_Modifier) + ',');
      SQL.Add('Active_Acoustic_Tor_POH_Mod = ' + FloatToStr
          (Active_Acoustic_Tor_POH_Mod) + ',');
      SQL.Add('Passive_Acoustic_Tor_POH_Mod = ' + FloatToStr
          (Passive_Acoustic_Tor_POH_Mod) + ',');
      SQL.Add('Active_Passive_Tor_POH_Mod = ' + FloatToStr
          (Active_Passive_Tor_POH_Mod) + ',');
      SQL.Add('Wake_Home_POH_Modifier = ' + FloatToStr(Wake_Home_POH_Modifier)
          + ',');
      SQL.Add('Wire_Guide_POH_Modifier = ' + FloatToStr
          (Wire_Guide_POH_Modifier) + ',');
      SQL.Add('Mag_Mine_POH_Modifier = ' + FloatToStr(Mag_Mine_POH_Modifier)
          + ',');
      SQL.Add('Press_Mine_POH_Modifier = ' + FloatToStr
          (Press_Mine_POH_Modifier) + ',');
      SQL.Add('Impact_Mine_POH_Modifier = ' + FloatToStr
          (Impact_Mine_POH_Modifier) + ',');
      SQL.Add('Acoustic_Mine_POH_Modifier = ' + FloatToStr
          (Acoustic_Mine_POH_Modifier) + ',');
      SQL.Add('Sub_Comm_Antenna_Height = ' + FloatToStr
          (Sub_Comm_Antenna_Height) + ',');
      SQL.Add('Rel_Comm_Antenna_Height = ' + FloatToStr
          (Rel_Comm_Antenna_Height) + ',');
      SQL.Add('Max_Comm_Operating_Depth = ' + FloatToStr
          (Max_Comm_Operating_Depth) + ',');
      SQL.Add('HF_Link_Capable = ' + BoolToStr(HF_Link_Capable) + ',');
      SQL.Add('UHF_Link_Capable = ' + BoolToStr(UHF_Link_Capable) + ',');
      SQL.Add('HF_Voice_Capable = ' + BoolToStr(HF_Voice_Capable) + ',');
      SQL.Add('VHF_Voice_Capable = ' + BoolToStr(VHF_Voice_Capable) + ',');
      SQL.Add('UHF_Voice_Capable = ' + BoolToStr(UHF_Voice_Capable) + ',');
      SQL.Add('SATCOM_Voice_Capable = ' + BoolToStr(SATCOM_Voice_Capable)
          + ',');
      SQL.Add('UWT_Voice_Capable = ' + BoolToStr(UWT_Voice_Capable) + ',');
      SQL.Add('HF_MHS_Capable = ' + BoolToStr(HF_MHS_Capable) + ',');
      SQL.Add('UHF_MHS_Capable = ' + BoolToStr(UHF_MHS_Capable) + ',');
      SQL.Add('SATCOM_MHS_Capable = ' + BoolToStr(SATCOM_MHS_Capable) + ',');
      SQL.Add('Damage_Capacity = ' + IntToStr(Damage_Capacity) + ',');
      SQL.Add('Plat_Basing_Capability = ' + BoolToStr(Plat_Basing_Capability)
          + ',');
      SQL.Add('Chaff_Capability = ' + BoolToStr(Chaff_Capability) + ',');
      SQL.Add('Readying_Time = ' + IntToStr(Readying_Time) + ',');
      SQL.Add('Sonobuoy_Capable = ' + BoolToStr(Sonobuoy_Capable) + ',');
      SQL.Add('Nav_Light_Capable = ' + BoolToStr(Nav_Light_Capable) + ',');
      SQL.Add('Periscope_Depth = ' + FloatToStr(Periscope_Depth) + ',');
      SQL.Add('Periscope_Height_Above_Water = ' + FloatToStr
          (Periscope_Height_Above_Water) + ',');
      SQL.Add('Periscope_Front_Radar_Xsection = ' + FloatToStr
          (Periscope_Front_Radar_Xsection) + ',');
      SQL.Add('Periscope_Side_Radar_Xsection = ' + FloatToStr
          (Periscope_Side_Radar_Xsection) + ',');
      SQL.Add('Periscope_Front_Vis_Xsection = ' + FloatToStr
          (Periscope_Front_Vis_Xsection) + ',');
      SQL.Add('Periscope_Side_Vis_Xsection = ' + FloatToStr
          (Periscope_Side_Vis_Xsection) + ',');
      SQL.Add('Periscope_Front_IR_Xsection = ' + FloatToStr
          (Periscope_Front_IR_Xsection) + ',');
      SQL.Add('Periscope_Side_IR_Xsection = ' + FloatToStr
          (Periscope_Side_IR_Xsection) + ',');
      SQL.Add('Engagement_Range = ' + FloatToStr(Engagement_Range) + ',');
      SQL.Add('Auto_Air_Defense_Capable = ' + BoolToStr
          (Auto_Air_Defense_Capable) + ',');
      SQL.Add('Alert_State_Time = ' + FloatToStr(Alert_State_Time) + ',');
      SQL.Add('Detectability_Type = ' + IntToStr(Detectability_Type) + ',');
      SQL.Add('Max_Sonobuoys_To_Monitor = ' + IntToStr
          (Max_Sonobuoys_To_Monitor) + ',');
      SQL.Add('Sonobuoy_Deploy_Max_Altitude = ' + IntToStr
          (Sonobuoy_Deploy_Max_Altitude) + ',');
      SQL.Add('Sonobuoy_Deploy_Min_Altitude = ' + IntToStr
          (Sonobuoy_Deploy_Min_Altitude) + ',');
      SQL.Add('Sonobuoy_Deploy_Max_Speed = ' + IntToStr
          (Sonobuoy_Deploy_Max_Speed) + ',');
      SQL.Add('Air_Drop_Torpedo_Max_Altitude = ' + IntToStr
          (Air_Drop_Torpedo_Max_Altitude) + ',');
      SQL.Add('Air_Drop_Torpedo_Min_Altitude = ' + IntToStr
          (Air_Drop_Torpedo_Min_Altitude) + ',');
      SQL.Add('Air_Drop_Torpedo_Max_Speed = ' + IntToStr
          (Air_Drop_Torpedo_Max_Speed) + ',');
      SQL.Add('TMA_Rate_Factor = ' + FloatToStr(TMA_Rate_Factor) + ',');
      SQL.Add('HMS_Noise_Reduction_Factor = ' + FloatToStr
          (HMS_Noise_Reduction_Factor) + ',');
      SQL.Add('TAS_Noise_Reduction_Factor = ' + FloatToStr
          (TAS_Noise_Reduction_Factor) + ',');
      SQL.Add('Infrared_Decoy_Capable = ' + BoolToStr(Infrared_Decoy_Capable)
          + ',');
      SQL.Add('HF_Mid_Course_Update_Capable = ' + BoolToStr
          (HF_Mid_Course_Update_Capable) + ',');
      SQL.Add('UHF_Mid_Course_Update_Capable = ' + BoolToStr
          (UHF_Mid_Course_Update_Capable) + ',');
//      SQL.Add('SATCOM_Mid_Course_Update_Capable = ' + BoolToStr
//          (SATCOM_Mid_Course_Update_Capable)+ ',');
      SQL.Add('Font_id = ' + IntToStr
          (Font_id)+ ',');
      SQL.Add('Symbol_id = ' + IntToStr
          (Symbol_id)+ ',');
      SQL.Add('Quantity_Group_Personal = ' + IntToStr
          (Quantity_Group_Personal)+ ',');
      SQL.Add('Vbs_Class_Name = ''' + Vbs_Class_Name + ''',');
      SQL.Add('Platform_Capability_Index = ' + IntToStr
          (Platform_Capability_Index)+ ',');
      SQL.Add('Logistics_Index = ' + IntToStr
          (Logistics_Index)+ ',');
      SQL.Add('Tactical_Symbol_Name = ' + QuotedStr(Tactical_Symbol_Name)+ ',');
      SQL.Add('GangwayPosition = ' + IntToStr
          (GangwayPosition)+ ',');
      SQL.Add('DWT = ' + FloatToStr(DWT)+ ',');
      SQL.Add('last_updated = GETDATE()');    //dng

      SQL.Add(' WHERE (Vehicle_Index = ' + id + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertVehicle_Def(rec: TVehicle_Definition): Integer;
var
  query : string;
begin
  result := -1;
//  DecimalSeparator := '.';
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Vehicle_Definition ');
      SQL.Add(
        '(Vehicle_Identifier,Platform_Domain,Platform_Category,Platform_Type,Motion_Characteristics,');
      SQL.Add(
        'Length,Width,Height,Draft,Front_Radar_Cross,Side_Radar_Cross,Front_Acoustic_Cross,Side_Acoustic_Cross,Magnetic_Cross,');
      SQL.Add(
        'Front_Visual_EO_Cross,Side_Visual_EO_Cross,Front_Infrared_Cross,Side_Infrared_Cross,LSpeed_Acoustic_Intens,');
      SQL.Add(
        'Below_Cav_Acoustic_Intens,Above_Cav_Acoustic_Intens,HSpeed_Acoustic_Intens,Cavitation_Speed_Switch,');
      SQL.Add(
        'Time_of_Weapon_Impact,Chaff_Seduction_Capable,Seduction_Mode_Prob,Min_Delay_Between_Chaff_Rounds,Max_Chaff_Salvo_Size,');
      SQL.Add(
        'SARH_POH_Modifier,CG_POH_Modifier,TARH_POH_Modifier,IR_POH_Modifier,AR_POH_Modifier,');
      SQL.Add(
        'Active_Acoustic_Tor_POH_Mod,Passive_Acoustic_Tor_POH_Mod,Active_Passive_Tor_POH_Mod,Wake_Home_POH_Modifier,Wire_Guide_POH_Modifier,');
      SQL.Add(
        'Mag_Mine_POH_Modifier,Press_Mine_POH_Modifier,Impact_Mine_POH_Modifier,Acoustic_Mine_POH_Modifier,');
      SQL.Add(
        'Sub_Comm_Antenna_Height,Rel_Comm_Antenna_Height,Max_Comm_Operating_Depth,HF_Link_Capable,UHF_Link_Capable,');
      SQL.Add(
        'HF_Voice_Capable,VHF_Voice_Capable,UHF_Voice_Capable,SATCOM_Voice_Capable,UWT_Voice_Capable,');
      SQL.Add(
        'HF_MHS_Capable,UHF_MHS_Capable,Satcom_MHS_Capable,Damage_Capacity,');
      SQL.Add(
        'Plat_Basing_Capability,Chaff_Capability,Readying_Time,Sonobuoy_Capable,Nav_Light_Capable,Periscope_Depth,');
      SQL.Add(
        'Periscope_Height_Above_Water,Periscope_Front_Radar_Xsection,Periscope_Side_Radar_Xsection,Periscope_Front_Vis_Xsection,Periscope_Side_Vis_Xsection,');
      SQL.Add(
        'Periscope_Front_IR_Xsection,Periscope_Side_IR_Xsection,Engagement_Range,Auto_Air_Defense_Capable,Alert_State_Time,');
      SQL.Add(
        'Detectability_Type,Max_Sonobuoys_To_Monitor,Sonobuoy_Deploy_Max_Altitude,Sonobuoy_Deploy_Min_Altitude,');
      SQL.Add(
        'Sonobuoy_Deploy_Max_Speed,Air_Drop_Torpedo_Max_Altitude,Air_Drop_Torpedo_Min_Altitude,Air_Drop_Torpedo_Max_Speed,TMA_Rate_Factor,');
      SQL.Add(
        'HMS_Noise_Reduction_Factor,TAS_Noise_Reduction_Factor,Infrared_Decoy_Capable,HF_Mid_Course_Update_Capable,');
      SQL.Add
        ('UHF_Mid_Course_Update_Capable,');//SATCOM_Mid_Course_Update_Capable,font_id,symbol_id,Quantity_Group_Personal,vbs_class_name,Logistics_Index)');
      SQL.Add
        ('font_id,symbol_id,Quantity_Group_Personal,vbs_class_name,Platform_Capability_Index,Logistics_Index, Tactical_Symbol_Name, GangwayPosition, DWT, last_updated)');    //dng

      SQL.Add(' VALUES (');

//      SQL.Add('''' + Vehicle_Identifier + ''',');
      SQL.Add( QuotedStr(Vehicle_Identifier) + ',');
      SQL.Add(IntToStr(Platform_Domain) + ',');
      SQL.Add(IntToStr(Platform_Category) + ',');
      SQL.Add(IntToStr(Platform_Type) + ',');
      SQL.Add(IntToStr(Motion_Characteristics) + ',');
      SQL.Add(FloatToStr(Length) + ',');
      SQL.Add(FloatToStr(Width) + ',');
      SQL.Add(FloatToStr(Height) + ',');
      SQL.Add(FloatToStr(Draft) + ',');
      SQL.Add(FloatToStr(Front_Radar_Cross) + ',');
      SQL.Add(FloatToStr(Side_Radar_Cross) + ',');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(Magnetic_Cross) + ',');
      SQL.Add(FloatToStr(Front_Visual_EO_Cross) + ',');
      SQL.Add(FloatToStr(Side_Visual_EO_Cross) + ',');
      SQL.Add(FloatToStr(Front_Infrared_Cross) + ',');
      SQL.Add(FloatToStr(Side_Infrared_Cross) + ',');
      SQL.Add(FloatToStr(LSpeed_Acoustic_Intens) + ',');
      SQL.Add(FloatToStr(Below_Cav_Acoustic_Intens) + ',');
      SQL.Add(FloatToStr(Above_Cav_Acoustic_Intens) + ',');
      SQL.Add(FloatToStr(HSpeed_Acoustic_Intens) + ',');
      SQL.Add(FloatToStr(Cavitation_Speed_Switch) + ',');
      SQL.Add(IntToStr(Time_of_Weapon_Impact) + ',');
      SQL.Add(BoolToStr(Chaff_Seduction_Capable) + ',');
      SQL.Add(FloatToStr(Seduction_Mode_Prob) + ',');
      SQL.Add(IntToStr(Min_Delay_Between_Chaff_Rounds) + ',');
      SQL.Add(IntToStr(Max_Chaff_Salvo_Size) + ',');
      SQL.Add(FloatToStr(SARH_POH_Modifier) + ',');
      SQL.Add(FloatToStr(CG_POH_Modifier) + ',');
      SQL.Add(FloatToStr(TARH_POH_Modifier) + ',');
      SQL.Add(FloatToStr(IR_POH_Modifier) + ',');
      SQL.Add(FloatToStr(AR_POH_Modifier) + ',');
      SQL.Add(FloatToStr(Active_Acoustic_Tor_POH_Mod) + ',');
      SQL.Add(FloatToStr(Passive_Acoustic_Tor_POH_Mod) + ',');
      SQL.Add(FloatToStr(Active_Passive_Tor_POH_Mod) + ',');
      SQL.Add(FloatToStr(Wake_Home_POH_Modifier) + ',');
      SQL.Add(FloatToStr(Wire_Guide_POH_Modifier) + ',');
      SQL.Add(FloatToStr(Mag_Mine_POH_Modifier) + ',');
      SQL.Add(FloatToStr(Press_Mine_POH_Modifier) + ',');
      SQL.Add(FloatToStr(Impact_Mine_POH_Modifier) + ',');
      SQL.Add(FloatToStr(Acoustic_Mine_POH_Modifier) + ',');
      SQL.Add(FloatToStr(Sub_Comm_Antenna_Height) + ',');
      SQL.Add(FloatToStr(Rel_Comm_Antenna_Height) + ',');
      SQL.Add(FloatToStr(Max_Comm_Operating_Depth) + ',');
      SQL.Add(BoolToStr(HF_Link_Capable) + ',');
      SQL.Add(BoolToStr(UHF_Link_Capable) + ',');
      SQL.Add(BoolToStr(HF_Voice_Capable) + ',');
      SQL.Add(BoolToStr(VHF_Voice_Capable) + ',');
      SQL.Add(BoolToStr(UHF_Voice_Capable) + ',');
      SQL.Add(BoolToStr(SATCOM_Voice_Capable) + ',');
      SQL.Add(BoolToStr(UWT_Voice_Capable) + ',');
      SQL.Add(BoolToStr(HF_MHS_Capable) + ',');
      SQL.Add(BoolToStr(UHF_MHS_Capable) + ',');
      SQL.Add(BoolToStr(SATCOM_MHS_Capable) + ',');
      SQL.Add(IntToStr(Damage_Capacity) + ',');
      SQL.Add(BoolToStr(Plat_Basing_Capability) + ',');
      SQL.Add(BoolToStr(Chaff_Capability) + ',');
      SQL.Add(IntToStr(Readying_Time) + ',');
      SQL.Add(BoolToStr(Sonobuoy_Capable) + ',');
      SQL.Add(BoolToStr(Nav_Light_Capable) + ',');
      SQL.Add(FloatToStr(Periscope_Depth) + ',');
      SQL.Add(FloatToStr(Periscope_Height_Above_Water) + ',');
      SQL.Add(FloatToStr(Periscope_Front_Radar_Xsection) + ',');
      SQL.Add(FloatToStr(Periscope_Side_Radar_Xsection) + ',');
      SQL.Add(FloatToStr(Periscope_Front_Vis_Xsection) + ',');
      SQL.Add(FloatToStr(Periscope_Side_Vis_Xsection) + ',');
      SQL.Add(FloatToStr(Periscope_Front_IR_Xsection) + ',');
      SQL.Add(FloatToStr(Periscope_Side_IR_Xsection) + ',');
      SQL.Add(FloatToStr(Engagement_Range) + ',');
      SQL.Add(BoolToStr(Auto_Air_Defense_Capable) + ',');
      SQL.Add(FloatToStr(Alert_State_Time) + ',');
      SQL.Add(IntToStr(Detectability_Type) + ',');
      SQL.Add(IntToStr(Max_Sonobuoys_To_Monitor) + ',');
      SQL.Add(IntToStr(Sonobuoy_Deploy_Max_Altitude) + ',');
      SQL.Add(IntToStr(Sonobuoy_Deploy_Min_Altitude) + ',');
      SQL.Add(IntToStr(Sonobuoy_Deploy_Max_Speed) + ',');
      SQL.Add(IntToStr(Air_Drop_Torpedo_Max_Altitude) + ',');
      SQL.Add(IntToStr(Air_Drop_Torpedo_Min_Altitude) + ',');
      SQL.Add(IntToStr(Air_Drop_Torpedo_Max_Speed) + ',');
      SQL.Add(FloatToStr(TMA_Rate_Factor) + ',');
      SQL.Add(FloatToStr(HMS_Noise_Reduction_Factor) + ',');
      SQL.Add(FloatToStr(TAS_Noise_Reduction_Factor) + ',');
      SQL.Add(BoolToStr(Infrared_Decoy_Capable) + ',');
      SQL.Add(BoolToStr(HF_Mid_Course_Update_Capable) + ',');
      SQL.Add(BoolToStr(UHF_Mid_Course_Update_Capable) + ',');
      {SQL.Add(BoolToStr(SATCOM_Mid_Course_Update_Capable) + ','); }
      SQL.Add(IntToStr(Font_id) + ',');
      SQL.Add(IntToStr(Symbol_id) + ',');
      SQL.Add(IntToStr(Quantity_Group_Personal) + ',');
      SQL.Add(QuotedStr(Vbs_Class_Name) + ',');
      SQL.Add(IntToStr(Platform_Capability_Index) + ',');   //dng
      SQL.Add(IntToStr(Logistics_Index) + ',');
      SQL.Add(QuotedStr(Tactical_Symbol_Name) + ',');
      SQL.Add(IntToStr(GangwayPosition) + ',');
      SQL.add(FloatToStr(DWT)+ ',');
      SQL.Add('GETDATE()' + ')');       //dng

      {query := sql.Text;
      SQL.Clear;
      SQL.Add(query);  }

      ExecSQL;


      SQL.Clear;
      SQL.Add('SELECT * FROM Vehicle_Definition ');
      SQL.Add('WHERE Vehicle_Identifier =' + quotedStr(Vehicle_Identifier));
      Open;
      with rec.FData do
      begin
        Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteVehicle(const id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Vehicle_Definition ');
    SQL.Add('WHERE (Vehicle_Index = ' + IntToStr(id) + ')');
    ExecSQL;

  end;
end;

// ==Vehicle detail 1. Sensor ===================================================
// ------------------------------------------------------------------------------
function TdmTTT.getAllEO_On_Board(const id, index: Integer;
  var aRec: TList): Integer;
var
  i,b_num: Integer;
  rec: TEOD_On_Board;
  EO_Blind: TBlind_Zone;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  EO_On_Board a JOIN EO_Detection_Definition b ';
    ssql := ssql + 'ON a.EO_Index = b.EO_Index LEFT JOIN Note_Storage c ';
    ssql := ssql + 'ON c.EO_Index = b.EO_Index LEFT JOIN Vehicle_Definition d ';
    ssql := ssql + 'ON a.Vehicle_Index = d.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // if id tidak null
      if id <> 0 then
        ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
    end
    else
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 AND a.EO_Index =' + IntToStr
        (index);

    SQL.Add(ssql);
    SQL.Add('ORDER BY b.Class_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TEOD_On_Board.Create;
        with rec.FData do
        begin
          EO_Instance_Index := FieldByName('EO_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          EO_Index := FieldByName('EO_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FEO_Def do
        begin
          EO_Index := FieldByName('EO_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
         { Sensor_Type := FieldByName('Sensor_Type').AsInteger;
          Detection_Range := FieldByName('Detection_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Num_FC_Channels := FieldByName('Num_FC_Channels').AsInteger;  }
        end;
        {
        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;  }
        aRec.Add(rec);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM EO_On_Board a JOIN Blind_ZOne_Definition b ');
        SQL.Add('ON a.EO_Instance_Index = b.EO_Instance_Index ');
        SQL.Add('WHERE (a.EO_Instance_Index = ' + IntToStr
            (rec.FData.EO_Instance_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          EO_Blind := TBlind_Zone.Create;

          with rec.FBlind_Zone.FData do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
            EO_Instance_Index := FieldByName('EO_Instance_Index').AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;
          end;

          rec.FBlind.Add(EO_Blind);

          //added by bebe
          b_num := FieldByName('BlindZone_Number').AsInteger;
          if b_num = 1 then
          begin
            with rec.FBZone_1 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              EO_Instance_Index := FieldByName('EO_Instance_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end
          else if b_num = 2 then
          begin
            with rec.FBZone_2 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              EO_Instance_Index := FieldByName('EO_Instance_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end;

          ZQ.Next;

        end;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateEO(rec: TEOD_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE EO_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Instance_Identifier=''' + Instance_Identifier + ''',');
      SQL.Add('Instance_Type  =' + IntToStr(Instance_Type) + ',');
      SQL.Add('EO_Index =' + IntToStr(EO_Index) + ',');
      SQL.Add('Antenna_Height =' + FloatToStr(Antenna_Height));
    end;

    SQL.Add(' WHERE (EO_Instance_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertEO(rec: TEOD_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO EO_On_Board ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Vehicle_Index,EO_Index,Antenna_Height)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(EO_Index) + ',');
      SQL.Add(FloatToStr(Antenna_Height) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM EO_On_Board ');
      SQL.Add('WHERE Instance_Identifier = ' + QuotedStr(Instance_Identifier) + ' ');
      SQL.Add('AND EO_Index = ' + IntToStr(EO_Index)+ ' ');
      SQL.Add('AND Vehicle_Index = ' + IntToStr(Vehicle_Index));
      Open;

      EO_Instance_Index := FieldByName('EO_Instance_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

/// /====================================================
function TdmTTT.DeleteEO_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM EO_On_Board  ');
    SQL.Add('WHERE (EO_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

function TdmTTT.getEO_Def(const id: Integer; var aRec: TList;
  var rec: TEOD_On_Board): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM EO_Detection_Definition ';
    ssql := ssql + 'a LEFT JOIN Note_Storage b ON a.EO_Index = b.EO_Index ';
    if id <> 0 then
      ssql := ssql + 'WHERE a.EO_Index = ' + IntToStr(id);

    ssql := ssql + 'ORDER BY Class_Identifier ';
    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TEOD_On_Board.Create;

        with rec.FEO_Def do
        begin
          EO_Index := FieldByName('EO_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sensor_Type := FieldByName('Sensor_Type').AsInteger;
          Detection_Range := FieldByName('Detection_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Num_FC_Channels := FieldByName('Num_FC_Channels').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateEO_Def(rec: TEOD_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FEO_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE EO_Detection_Definition ');
      SQL.Add('SET ');
      SQL.Add('Class_Identifier =''' + Class_Identifier + ''',');
      SQL.Add('Sensor_Type  =' + IntToStr(Sensor_Type) + ',');
      SQL.Add('Detection_Range =' + FloatToStr(Detection_Range) + ',');
      SQL.Add('Known_Cross_Section =' + FloatToStr(Known_Cross_Section) + ',');
      SQL.Add('Max_Range  =' + FloatToStr(Max_Range) + ',');
      SQL.Add('Scan_Rate =' + FloatToStr(Scan_Rate) + ',');
      SQL.Add('Num_FC_Channels =' + IntToStr(Num_FC_Channels));
    end;

    SQL.Add(' WHERE (EO_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertEO_Def(rec: TEOD_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FEO_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO EO_Detection_Definition ');
      SQL.Add(
        '(Class_Identifier,Sensor_Type,Detection_Range,Known_Cross_Section,');
      SQL.Add('Max_Range,Scan_Rate,Num_FC_Channels)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Class_Identifier + ''',');
      SQL.Add(IntToStr(Sensor_Type) + ',');
      SQL.Add(FloatToStr(Detection_Range) + ',');
      SQL.Add(FloatToStr(Known_Cross_Section) + ',');
      SQL.Add(FloatToStr(Max_Range) + ',');
      SQL.Add(FloatToStr(Scan_Rate) + ',');
      SQL.Add(IntToStr(Num_FC_Channels) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT EO_Index FROM EO_Detection_Definition ');
      SQL.Add('WHERE Class_Identifier =' + quotedStr(Class_Identifier));
      Open;
      with rec.FEO_Def do
      begin
        EO_Index := FieldByName('EO_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteEO_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(12,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE EO_Detection_Definition ');
    SQL.Add('WHERE EO_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getFilterSimbol(const aSrch: string; const FontType: Byte; var FontTaktisList: TList): integer;
var select,from,where,group : string;
rec: TFontTaktis;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

 with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Font_Taktis ');

    if FontType = 0 then
      SQL.Add('WHERE FONT_ID >= 221 and FONT_ID <= 404')
    else if FontType = 1 then
      SQL.Add('WHERE FONT_ID >= 10 and FONT_ID <= 220')
    else if FontType = 2 then
      SQL.Add('WHERE FONT_ID >= 405 and FONT_ID <= 539');

    SQL.Add('AND KETERANGAN LIKE' + QuotedStr('%' + aSrch + '%'));
    SQL.Add('order by FONT_ID');
    Open;

    SQL.Add(select);
    Open;
    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(FontTaktisList) then
        FontTaktisList := TList.Create;
    end;

    while not ZQ.Eof do
    begin
      rec := TFontTaktis.Create;
      with rec.FData do
      begin
        FONT_ID := FieldByName('FONT_ID').AsInteger;
        FONT_NAME := FieldByName('FONT_NAME').AsString;
        FONT_INDEX := FieldByName('FONT_INDEX').AsInteger;
        KETERANGAN := FieldByName('KETERANGAN').AsString;

      end;

      FontTaktisList.Add(rec);
      ZQ.Next;
    end;
    end;
  end;

function TdmTTT.getFilterVehicle(const aSrch: string; const negara, domain,tipe,weapon,wpn_id,sensor,sensor_id,emb_id: Integer;
var vList: TList):integer;
var select,from,where,group : string;
rec : TVehicle_Definition;
begin
  result := -1;
  if not ZConn.Connected then
    exit;


  with ZQ do
  begin
    Close;
    SQL.Clear;
    select := 'SELECT distinct a.* FROM Vehicle_Definition a ';

    if domain <> -1 then
    begin
      where := 'WHERE a.Platform_Domain = '+ IntToStr(domain);
    end;

    if negara <> -1 then
    begin
      if length(where) > 0 then
         where := where + 'AND a.Vehicle_Identifier like '  + quotedStr('%indonesia%')
      else
         where := 'WHERE a.Vehicle_Identifier like '  + quotedStr('%indonesia%');
    end;

    if aSrch <> '' then
    begin
      from := ',Platform_Instance_Identifier h ';
      if length(where) > 0 then
         where := where + ' AND a.Vehicle_Index = h.Vehicle_Index '
      else
         where := ' WHERE a.Vehicle_Index = h.Vehicle_Index ';

         where := where +' AND (a.Vehicle_Identifier like '+ quotedStr('%' + aSrch + '%') + 'OR h.Instance_Identifier like ' + quotedStr('%' + aSrch + '%') + ')';
    end;

    if tipe <> -1 then
    begin
      if length(where) > 0 then
         where := where + ' AND a.Platform_Type = '+ IntToStr(tipe)
      else
         where := 'WHERE a.Platform_Type = '+ IntToStr(tipe);
    end;

    if sensor > -1 then
    begin
      if sensor_id <> -1 then
      begin
        case sensor of
          0:
          begin
            from  := from + ',EO_On_Board d,EO_Detection_Definition e ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.EO_Index = e.EO_Index ';
            where := where +' AND d.EO_Index = '+ IntToStr(sensor_id);
          end;
          1:
          begin
            from  := from + ',ESM_On_Board d,ESM_Definition e ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.ESM_Index = e.ESM_Index ';
            where := where +' AND d.ESM_Index = '+ IntToStr(sensor_id);
          end;
          2:
          begin
            from  := from + ',IFF_Sensor_On_Board d ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

//            where := where +' AND d.IFF_Instance_Index = '+ IntToStr(sensor_id);
          end;
          3:
          begin
            from  := from + ',MAD_Sensor_On_Board d,MAD_Definition e ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.MAD_Index = e.MAD_Index ';
            where := where +' AND d.MAD_Index = '+ IntToStr(sensor_id);
          end;
          4:
          begin
            from  := from + ',Radar_On_Board d,Radar_Definition e ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.Radar_Index = e.Radar_Index ';
            where := where +' AND d.Radar_Index = '+ IntToStr(sensor_id);
          end;
          5:
          begin
            from  := from + ',Sonar_On_Board d,Sonar_Definition e ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.Sonar_Index = e.Sonar_Index ';
            where := where +' AND d.Sonar_Index = '+ IntToStr(sensor_id);
          end;
          6:
          begin
            from  := from + ',Sonobuoy_On_Board d,Sonobuoy_Definition e ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.Sonobuoy_Index = e.Sonobuoy_Index ';
            where := where +' AND d.Sonobuoy_Index = '+ IntToStr(sensor_id);
          end;
          7:
          begin
            from  := from + ',Visual_Sensor_On_Board d ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

//            where := where +' AND d.Visual_Instance_Index = '+ IntToStr(sensor_id);
          end;
        end;
      end
      else
      begin
        case sensor of
          0:
          begin
            from  := from + ',(select e.Vehicle_Index,count(*) as quantity from ';
            from  := from + 'EO_On_Board e group by e.Vehicle_Index) d ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.quantity > 0 ';
          end;
          1:
          begin
            from  := from + ',(select e.Vehicle_Index,count(*) as quantity from ';
            from  := from + 'ESM_On_Board e group by e.Vehicle_Index) d ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.quantity > 0 ';
          end;
          2:
          begin
            from  := from + ',IFF_Sensor_On_Board d ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

//            where := where +' AND d.IFF_Instance_Index = '+ IntToStr(sensor_id);
          end;
          3:
          begin
            from  := from + ',(select e.Vehicle_Index,count(*) as quantity from ';
            from  := from + 'MAD_Sensor_On_Board e group by e.Vehicle_Index) d ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.quantity > 0 ';
          end;
          4:
          begin
            from  := from + ',(select e.Vehicle_Index,count(*) as quantity from ';
            from  := from + 'Radar_On_Board e group by e.Vehicle_Index) d ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.quantity > 0 ';
          end;
          5:
          begin
            from  := from + ',(select e.Vehicle_Index,count(*) as quantity from ';
            from  := from + 'Sonar_On_Board e group by e.Vehicle_Index) d ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.quantity > 0 ';
          end;
          6:
          begin
            from  := from + ',(select e.Vehicle_Index,count(*) as quantity from ';
            from  := from + 'Sonobuoy_On_Board e group by e.Vehicle_Index) d ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

            where := where +' AND d.quantity > 0 ';
          end;
          7:
          begin
            from  := from + ',Visual_Sensor_On_Board d ';
            if length(where) > 0 then
              where := where + ' AND a.Vehicle_Index = d.Vehicle_Index '
            else
              where := ' WHERE a.Vehicle_Index = d.Vehicle_Index ';

//            where := where +' AND d.Visual_Instance_Index = '+ IntToStr(sensor_id);
          end;
        end;
      end;
    end;
    if weapon <> -1 then
    begin
      if wpn_id <> -1 then
      begin
        if length(from) > 0 then
        begin
          case weapon of
            0:
            begin
              from  := from + ',                Fitted_Weapon_On_Board b,Mine_Definition c ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + 'AND b.Mine_Index = c.Mine_Index ';
              where := where + 'AND b.Mine_Index = '+ IntToStr(wpn_id);
            end;
            1:
            begin
              from  := from + ',Fitted_Weapon_On_Board b,Missile_Definition c ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + 'AND b.Missile_Index = c.Missile_Index ';
              where := where + 'AND b.Missile_Index = '+ IntToStr(wpn_id);
            end;
            2:
            begin
              from  := from + ',Fitted_Weapon_On_Board b,Torpedo_Definition c ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + 'AND b.Torpedo_Index = c.Torpedo_Index ';
              where := where + 'AND b.Torpedo_Index = '+ IntToStr(wpn_id);
            end;
          end;
        end
        else
        begin
          case weapon of
            0:
            begin
              from  := from + ',Fitted_Weapon_On_Board b,Mine_Definition c ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + 'AND b.Mine_Index = c.Mine_Index ';
              where := where + 'AND b.Mine_Index = '+ IntToStr(wpn_id);
            end;
            1:
            begin
              from  := from + ',Fitted_Weapon_On_Board b,Missile_Definition c ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + 'AND b.Missile_Index = c.Missile_Index ';
              where := where + 'AND b.Missile_Index = '+ IntToStr(wpn_id);
            end;
            2:
            begin
              from  := from + ',Fitted_Weapon_On_Board b,Torpedo_Definition c ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + 'AND b.Torpedo_Index = c.Torpedo_Index ';
              where := where + 'AND b.Torpedo_Index = '+ IntToStr(wpn_id);
            end;
          end;
        end;
      end
      else
      begin
        if length(from) > 0 then
        begin
          case weapon of
            0:
            begin
              from  := from + ',(select c.Vehicle_Index,count(*) as quantity from ';
              from  := from + 'Fitted_Weapon_On_Board c where c.Mine_Index is not null group by c.Vehicle_Index) b ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + ' AND b.quantity > 0 ';
            end;
            1:
            begin
              from  := from + ',(select c.Vehicle_Index,count(*) as quantity from ';
              from  := from + 'Fitted_Weapon_On_Board c where c.Missile_Index is not null group by c.Vehicle_Index) b ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + ' AND b.quantity > 0 ';
            end;
            2:
            begin
              from  := from + ',(select c.Vehicle_Index,count(*) as quantity from ';
              from  := from + 'Fitted_Weapon_On_Board c where c.Torpedo_Index is not null group by c.Vehicle_Index) b ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + ' AND b.quantity > 0 ';
            end;
          end;
        end
        else
        begin
          case weapon of
            0:
            begin
              from  := from + ',(select c.Vehicle_Index,count(*) as quantity from ';
              from  := from + 'Fitted_Weapon_On_Board c where c.Mine_Index is not null group by c.Vehicle_Index) b ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + ' AND b.quantity > 0 ';
            end;
            1:
            begin
              from  := from + ',(select c.Vehicle_Index,count(*) as quantity from ';
              from  := from + 'Fitted_Weapon_On_Board c where c.Missile_Index is not null group by c.Vehicle_Index) b ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + ' AND b.quantity > 0 ';
            end;
            2:
            begin
              from  := from + ',(select c.Vehicle_Index,count(*) as quantity from ';
              from  := from + 'Fitted_Weapon_On_Board c where c.Torpedo_Index is not null group by c.Vehicle_Index) b ';
              if length(where) > 0 then
                where := where + ' AND a.Vehicle_Index = b.Vehicle_Index '
              else
                where := ' WHERE a.Vehicle_Index = b.Vehicle_Index ';

              where := where + ' AND b.quantity > 0 ';
            end;
          end;
        end;
      end;
    end;

    if emb_id > 0 then
    begin
      if length(from) > 0 then
      begin
        from  := from + ',Hosted_Platform f ';
        if length(where) > 0 then
          where := where + ' AND a.Vehicle_Index = f.Vehicle_Index '
        else
          where := ' WHERE a.Vehicle_Index = f.Vehicle_Index ';

//        where := where + 'AND f.Vehicle_Index = c.Vehicle_Index ';
        where := where + 'AND f.Hosted_Vehicle_Index = '+ IntToStr(emb_id);
      end
      else
      begin
        from  := from + ',Hosted_Platform f ';
        if length(where) > 0 then
          where := where + ' AND a.Vehicle_Index = f.Vehicle_Index '
        else
          where := ' WHERE a.Vehicle_Index = f.Vehicle_Index ';

//        where := where + 'AND b.Mine_Index = c.Mine_Index ';
        where := where + 'AND f.Hosted_Vehicle_Index = '+ IntToStr(emb_id);
      end;
    end
    else if emb_id = 0 then
    begin
      if length(from) > 0 then
      begin
        from  := from + ',(select g.Vehicle_Index,count(*) as quantity from ';
        from  := from + 'Hosted_Platform g group by g.Vehicle_Index) f ';
        if length(where) > 0 then
          where := where + ' AND a.Vehicle_Index = f.Vehicle_Index '
        else
          where := ' WHERE a.Vehicle_Index = f.Vehicle_Index ';

        where := where + ' AND f.quantity > 0 ';
      end
      else
      begin
        from  := from + ',(select g.Vehicle_Index,count(*) as quantity from ';
        from  := from + 'Hosted_Platform g group by g.Vehicle_Index) f ';
        if length(where) > 0 then
          where := where + ' AND a.Vehicle_Index = f.Vehicle_Index '
        else
          where := ' WHERE a.Vehicle_Index = f.Vehicle_Index ';

        where := where + ' AND f.quantity > 0 ';
      end;
    end;

    if length(where) > 0 then
      where := where +' AND a.Platform_Domain <> 8' // buat filter supaya tipe target gak muncul
    else
      where :=' WHERE a.Platform_Domain <> 8';

    select := select + from + where + group;
    select := select + ' ORDER BY Vehicle_Identifier ASC';
//    ShowMessage(select);
    SQL.Add(select);
    Open;


    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(vList) then
        vList := TList.Create
      else
        vList.Clear;

      while not ZQ.Eof do
      begin
        rec := TVehicle_Definition.Create;
        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics')
            .AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross')
            .AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
            .AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact')
            .AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
            .AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName
            ('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName
            ('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName
            ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName
            ('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
            .AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
            .AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier')
            .AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
            .AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
            .AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName
            ('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
            .AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
            .AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
            .AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
            .AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName
            ('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName
            ('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName
            ('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName
            ('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName
            ('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName
            ('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName
            ('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
            .AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
            .AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName
            ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName
            ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
            .AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName
            ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName
            ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName
            ('Air_Drop_Torpedo_Max_Speed')
            .AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName
            ('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName
            ('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
            .AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName
            ('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := FieldByName
            ('UHF_Mid_Course_Update_Capable').AsBoolean;
//          SATCOM_Mid_Course_Update_Capable := FieldByName
//            ('SATCOM_Mid_Course_Update_Capable').AsBoolean;
          Font_id := FieldByName('Font_id').AsInteger;
          Symbol_id := FieldByName('Symbol_id').AsInteger;
          Quantity_Group_Personal := FieldByName('Quantity_Group_Personal').AsInteger;
          Vbs_Class_Name := FieldByName('Vbs_Class_Name').AsString;
          Logistics_Index := FieldByName('Logistics_Index').AsInteger;
          Tactical_Symbol_Name := FieldByName('Tactical_Symbol_Name').AsString;
          GangwayPosition := FieldByName('GangwayPosition').AsInteger;
          DWT := FieldByName('DWT').AsSingle;
          last_updated := FieldByName('last_updated').AsDateTime;
        end;
//        case sensor of
//          0 :
//          begin
//            with rec.FEO.FEO_Def do
//            begin
//              EO_Index             := FieldByName('EO_Index').AsInteger;
//            end;
//          end;
//          1:
//          begin
//            with rec.FESM.FESM_Def do
//            begin
//              ESM_Index            := FieldByName('ESM_Index').AsInteger;
//            end;
//          end;
//          2:
//          begin
//            with rec.FIFF.FData do
//            begin
//              IFF_Instance_Index    := FieldByName('IFF_Instance_Index').AsInteger;
//            end;
//          end;
//          3:
//          begin
//            with rec.FMAD.FMAD_Def do
//            begin
//              MAD_Index   := FieldByName('MAD_Index').AsInteger;
//            end;
//          end;
//          4:
//          begin
//            with rec.FRadar.FDef do
//            begin
//              Radar_Index          := FieldByName('Radar_Index').AsInteger;
//            end;
//          end;
//          5:
//          begin
//            with rec.FSonar.FDef do
//            begin
//              Sonar_Index          := FieldByName('Sonar_Index').AsInteger;
//            end;
//          end;
//          6:
//          begin
//            with rec.FSonobuoy.FDef do
//            begin
//              Sonobuoy_Index      := FieldByName('Sonobuoy_Index').AsInteger;
//            end;
//          end;
//          7:
//          begin
//            with rec.FVisual.FData do
//            begin
//              Visual_Instance_Index := FieldByName('Visual_Instance_Index').AsInteger;
//            end;
//          end;
//        end;

//        with rec.FMissile.FData do
//        begin
//          Mine_Index      := FieldByName('Mine_Index').AsInteger;
//          Missile_Index   := FieldByName('Missile_Index').AsInteger;
//          Torpedo_Index   := FieldByName('Torpedo_Index').AsInteger;
//        end;

        vList.Add(rec);
        ZQ.Next;

      end;
    end;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllESM_On_Board(const id, index: Integer;
  var aRec: TList): Integer;
var
  i: Integer;
  rec: TESM_On_Board;
  ESM_Blind: TBlind_Zone;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  ESM_On_Board a JOIN  ESM_Definition b ';
    ssql := ssql + '   ON a.ESM_Index = b.ESM_Index LEFT JOIN Note_Storage c';
    ssql := ssql +
      '   ON c.ESM_Index = b.ESM_Index LEFT JOIN Vehicle_Definition d ';
    ssql := ssql + 'ON a.Vehicle_Index = d.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak 0
      if id <> 0 then
        ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
    end
    else
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 AND a.ESM_Index =' + IntToStr
        (index);

    SQL.Add(ssql);
    SQL.Add('ORDER BY a.Instance_Identifier');

    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TESM_On_Board.Create;
        with rec.FData do
        begin
          ESM_Instance_Index := FieldByName('ESM_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          ESM_Index := FieldByName('ESM_Index').AsInteger;
          Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
          Max_Operational_Depth := FieldByName('Max_Operational_Depth')
            .AsSingle;
          Submerged_Antenna_Height := FieldByName('Submerged_Antenna_Height')
            .AsSingle;
        end;

        with rec.FESM_Def do
        begin
          ESM_Index := FieldByName('ESM_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Low_Detect_Frequency1 := FieldByName('Low_Detect_Frequency1').AsFloat;
          High_Detect_Frequency1 := FieldByName('High_Detect_Frequency1')
            .AsFloat;
          Low_Detect_Frequency2 := FieldByName('Low_Detect_Frequency2').AsFloat;
          High_Detect_Frequency2 := FieldByName('High_Detect_Frequency2')
            .AsFloat;
          ESM_Classification := FieldByName('ESM_Classification').AsInteger;
          Emitter_Detect_Range_Factor := FieldByName
            ('Emitter_Detect_Range_Factor').AsSingle;
          Comm_Intercept_Capable := FieldByName('Comm_Intercept_Capable')
            .AsInteger;
          Frequency_Identify_Range := FieldByName('Frequency_Identify_Range')
            .AsFloat;
          PRF_Identify_Range := FieldByName('PRF_Identify_Range').AsSingle;
          Pulsewidth_Identify_Range := FieldByName('Pulsewidth_Identify_Range')
            .AsSingle;
          Scan_Period_Identify_Range := FieldByName
            ('Scan_Period_Identify_Range').AsSingle;
          Sector_Blank_Detection_Factor := FieldByName
            ('Sector_Blank_Detection_Factor').AsSingle;
          Identification_Period := FieldByName('Identification_Period')
            .AsSingle;
          Classification_Period := FieldByName('Classification_Period')
            .AsSingle;
          Minimum_Bearing_Error_Variance := FieldByName
            ('Minimum_Bearing_Error_Variance').AsSingle;
          Initial_Bearing_Error_Variance := FieldByName
            ('Initial_Bearing_Error_Variance').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        with ZQ do begin
          Close;
          SQL.Clear;
          SQL.Add('SELECT *');
          SQL.Add('FROM ESM_On_Board a JOIN Blind_Zone_Definition b ');
          SQL.Add('On a.ESM_Instance_Index = b.ESM_Instance_Index ');
          SQL.Add('WHERE (a.ESM_Instance_Index = ' + IntToStr
              (rec.FData.ESM_Instance_Index) + ')');
          Open;

          if not IsEmpty then
          begin
            First;

            while not Eof do
            begin
              ESM_Blind := TBlind_Zone.Create;

              with rec.FBlind_Zone.FData do
              begin
                Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
                Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
                BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
                ESM_Instance_Index := FieldByName('ESM_Instance_Index').AsInteger;
                Start_Angle := FieldByName('Start_Angle').AsSingle;
                End_Angle := FieldByName('End_Angle').AsSingle;
              end;

              rec.FBlind.Add(ESM_Blind);
              Next;
            end;
          end;

          //added by bebe
          Close;
          SQL.Clear;
          SQL.Add('SELECT * ');
          SQL.Add('FROM ESM_On_Board a JOIN Blind_Zone_Definition b ');
          SQL.Add('ON a.ESM_Instance_Index = b.ESM_Instance_Index ');
          SQL.Add('WHERE (a.ESM_Instance_Index = ' + IntToStr
              (rec.FData.ESM_Instance_Index) + ')');
          SQL.Add('AND b.BlindZone_Number = 1 ');
          Open;

          if not IsEmpty then
          begin
            First;

            with rec.FBZone_1 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              ESM_Instance_Index := FieldByName('ESM_Instance_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end;

          Close;
          SQL.Clear;
          SQL.Add('SELECT * ');
          SQL.Add('FROM ESM_On_Board a JOIN Blind_Zone_Definition b ');
          SQL.Add('ON a.ESM_Instance_Index = b.ESM_Instance_Index ');
          SQL.Add('WHERE (a.ESM_Instance_Index = ' + IntToStr
              (rec.FData.ESM_Instance_Index) + ')');
          SQL.Add('AND b.BlindZone_Number = 2 ');
          Open;

          if not IsEmpty then
          begin
            First;

            with rec.FBZone_2 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              ESM_Instance_Index := FieldByName('ESM_Instance_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end;
        end;

      end;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateESM(rec: TESM_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE ESM_On_Board ');
      SQL.Add('SET ');
      SQL.Add('ESM_Instance_Index  =' + IntToStr(ESM_Instance_Index) + ',');
      SQL.Add('Instance_Identifier=''' + Instance_Identifier + ''',');
      SQL.Add('Instance_Type  =' + IntToStr(Instance_Type) + ',');
      SQL.Add('ESM_Index =' + IntToStr(ESM_Index) + ',');
      SQL.Add('Rel_Antenna_Height =' + FloatToStr(Rel_Antenna_Height) + ',');
      SQL.Add('Max_Operational_Depth =' + FloatToStr(Max_Operational_Depth)
          + ',');
      SQL.Add('Submerged_Antenna_Height =' + FloatToStr
          (Submerged_Antenna_Height));
    end;

    SQL.Add(' WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertESM(rec: TESM_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO ESM_On_Board ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Vehicle_Index,ESM_Index,Rel_Antenna_Height,Max_Operational_Depth,Submerged_Antenna_Height)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(ESM_Index) + ',');
      SQL.Add(FloatToStr(Rel_Antenna_Height) + ',');
      SQL.Add(FloatToStr(Max_Operational_Depth) + ',');
      SQL.Add(FloatToStr(Submerged_Antenna_Height) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM ESM_On_Board ');
      SQL.Add('WHERE Instance_Identifier = '+ QuotedStr(Instance_Identifier) + ' ');
      SQL.Add('AND ESM_Index = ' + IntToStr(ESM_Index) + ' ');
      SQL.Add('AND Vehicle_Index = ' + IntToStr(Vehicle_Index) );
      Open;

      ESM_Instance_Index := FieldByName('ESM_Instance_Index').AsInteger;

    end;
  end;
end;

// -----------------------------------------------------------------------------
 ////====================================================
function TdmTTT.UpdateESM_On_Board(const id: string;
  var rec: TESM_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE ESM_On_Board  ');
      SQL.Add('SET ' );
      //SQL.Add('ESM_Instance_Index = '+IntToStr(ESM_Instance_Index)+',');
      SQL.Add('Instance_Identifier = '+ QuotedStr(Instance_Identifier)+',');
      SQL.Add('Instance_Type = '+IntToStr(Instance_Type)+',');
      SQL.Add('Vehicle_Index = '+IntToStr(Vehicle_Index)+',');
      SQL.Add('ESM_Index = '+IntToStr(ESM_Index)+',');
      SQL.Add('Rel_Antenna_Height = '+FloatToStr(Rel_Antenna_Height)+',');
      SQL.Add('Max_Operational_Depth = '+FloatToStr(Max_Operational_Depth)+',');
      SQL.Add('Submerged_Antenna_Height = '+FloatToStr(Submerged_Antenna_Height)+ ' ');
    end;
    SQL.Add('WHERE (ESM_Instance_Index = ' +  id + ')' );
    //ShowMessage(SQL.Text);
    ExecSQL;
  end;
end;
//-------------------------------------------------------------------

/// /====================================================
function TdmTTT.DeleteESM_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM ESM_On_Board  ');
    SQL.Add('WHERE (ESM_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

function TdmTTT.deleteESM(id: string): Integer;
begin
  result := -1;
  deleteNote(10,id);
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM ESM_Definition ');
    SQL.Add('WHERE ESM_Index = ' + id);
    ExecSQL;
  end;

end;

function TdmTTT.getESM_Def(var aRec: TList): boolean;
var
  rec: TESM_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM ESM_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.ESM_Index = b.ESM_Index ORDER BY Class_Identifier ');

    Open;

    result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TESM_On_Board.Create;
        with rec.FESM_Def do
        begin
          ESM_Index := FieldByName('ESM_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Low_Detect_Frequency1 := FieldByName('Low_Detect_Frequency1').AsFloat;
          High_Detect_Frequency1 := FieldByName('High_Detect_Frequency1')
            .AsFloat;
          Low_Detect_Frequency2 := FieldByName('Low_Detect_Frequency2').AsFloat;
          High_Detect_Frequency2 := FieldByName('High_Detect_Frequency2')
            .AsFloat;
          ESM_Classification := FieldByName('ESM_Classification').AsInteger;
          Emitter_Detect_Range_Factor := FieldByName
            ('Emitter_Detect_Range_Factor').AsSingle;
          Comm_Intercept_Capable := FieldByName('Comm_Intercept_Capable')
            .AsInteger;
          Frequency_Identify_Range := FieldByName('Frequency_Identify_Range')
            .AsFloat;
          PRF_Identify_Range := FieldByName('PRF_Identify_Range').AsSingle;
          Pulsewidth_Identify_Range := FieldByName('Pulsewidth_Identify_Range')
            .AsSingle;
          Scan_Period_Identify_Range := FieldByName
            ('Scan_Period_Identify_Range').AsSingle;
          Sector_Blank_Detection_Factor := FieldByName
            ('Sector_Blank_Detection_Factor').AsSingle;
          Identification_Period := FieldByName('Identification_Period')
            .AsSingle;
          Classification_Period := FieldByName('Classification_Period')
            .AsSingle;
          Minimum_Bearing_Error_Variance := FieldByName
            ('Minimum_Bearing_Error_Variance').AsSingle;
          Initial_Bearing_Error_Variance := FieldByName
            ('Initial_Bearing_Error_Variance').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;





// -----------------------------------------------------------------------------

function TdmTTT.updateESM_Def(rec: TESM_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FESM_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE ESM_Definition ');
      SQL.Add('SET ');
      SQL.Add('Class_Identifier =''' + Class_Identifier + ''',');
      SQL.Add('Low_Detect_Frequency1  =' + FloatToStr(Low_Detect_Frequency1)
          + ',');
      SQL.Add('High_Detect_Frequency1 =' + FloatToStr(High_Detect_Frequency1)
          + ',');
      SQL.Add('Low_Detect_Frequency2 =' + FloatToStr(Low_Detect_Frequency2)
          + ',');
      SQL.Add('High_Detect_Frequency2 =' + FloatToStr(High_Detect_Frequency2)
          + ',');
      SQL.Add('ESM_Classification =' + IntToStr(ESM_Classification) + ',');
      SQL.Add('Emitter_Detect_Range_Factor  =' + FloatToStr
          (Emitter_Detect_Range_Factor) + ',');
      SQL.Add('Comm_Intercept_Capable =' + FloatToStr(Comm_Intercept_Capable)
          + ',');
      SQL.Add('Frequency_Identify_Range =' + FloatToStr
          (Frequency_Identify_Range) + ',');
      SQL.Add('PRF_Identify_Range =' + FloatToStr(PRF_Identify_Range) + ',');
      SQL.Add('Pulsewidth_Identify_Range =' + FloatToStr
          (Pulsewidth_Identify_Range) + ',');
      SQL.Add('Scan_Period_Identify_Range =' + FloatToStr
          (Scan_Period_Identify_Range) + ',');
      SQL.Add('Sector_Blank_Detection_Factor  =' + FloatToStr
          (Sector_Blank_Detection_Factor) + ',');
      SQL.Add('Identification_Period =' + FloatToStr(Identification_Period)
          + ',');
      SQL.Add('Classification_Period =' + FloatToStr(Classification_Period)
          + ',');
      SQL.Add('Minimum_Bearing_Error_Variance =' + FloatToStr
          (Minimum_Bearing_Error_Variance) + ',');
      SQL.Add('Initial_Bearing_Error_Variance =' + FloatToStr
          (Initial_Bearing_Error_Variance));
    end;

    SQL.Add(' WHERE (ESM_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// -----------------------------------------------------------------------------

function TdmTTT.insertESM_Def(rec: TESM_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FESM_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO ESM_Definition ');
      SQL.Add(
        '(Class_Identifier,Low_Detect_Frequency1,High_Detect_Frequency1,Low_Detect_Frequency2,');
      SQL.Add(
        'High_Detect_Frequency2,ESM_Classification,Emitter_Detect_Range_Factor,Comm_Intercept_Capable,');
      SQL.Add(
        'Frequency_Identify_Range,PRF_Identify_Range,Pulsewidth_Identify_Range,Scan_Period_Identify_Range,');
      SQL.Add(
        'Sector_Blank_Detection_Factor,Identification_Period,Classification_Period,Minimum_Bearing_Error_Variance,Initial_Bearing_Error_Variance)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Class_Identifier + ''',');
      SQL.Add(FloatToStr(Low_Detect_Frequency1) + ',');
      SQL.Add(FloatToStr(High_Detect_Frequency1) + ',');
      SQL.Add(FloatToStr(Low_Detect_Frequency2) + ',');
      SQL.Add(FloatToStr(High_Detect_Frequency2) + ',');
      SQL.Add(IntToStr(ESM_Classification) + ',');
      SQL.Add(FloatToStr(Emitter_Detect_Range_Factor) + ',');
      SQL.Add(FloatToStr(Comm_Intercept_Capable) + ',');
      SQL.Add(FloatToStr(Frequency_Identify_Range) + ',');
      SQL.Add(FloatToStr(PRF_Identify_Range) + ',');
      SQL.Add(FloatToStr(Pulsewidth_Identify_Range) + ',');
      SQL.Add(FloatToStr(Scan_Period_Identify_Range) + ',');
      SQL.Add(FloatToStr(Sector_Blank_Detection_Factor) + ',');
      SQL.Add(FloatToStr(Identification_Period) + ',');
      SQL.Add(FloatToStr(Classification_Period) + ',');
      SQL.Add(FloatToStr(Minimum_Bearing_Error_Variance) + ',');
      SQL.Add(FloatToStr(Initial_Bearing_Error_Variance) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT ESM_Index FROM ESM_Definition ');
      SQL.Add('WHERE Class_Identifier =' + quotedStr(Class_Identifier));
      Open;
      with rec.FESM_Def do
      begin
        ESM_Index := FieldByName('ESM_Index').AsInteger;
      end;
    end;
  end;
end;

// -----------------------------------------------------------------------------

function TdmTTT.getAllIFF_Sensor_On_Board(const id, index: Integer;
  var aRec: TList): Integer;
var
  i, J: Integer;
  rec: TIFF_Sensor_On_Board;
  iffScript: TScripted_IFF;
  iffPattern: TPattern_IFF;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql +
      'FROM  IFF_Sensor_On_Board a LEFT JOIN Vehicle_Definition d ';
    ssql := ssql + 'ON a.Vehicle_Index = d.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak 0
      if id <> 0 then
      begin
        //ssql := ssql + 'JOIN Platform_IFF_Activation b ';
        //ssql := ssql + 'ON a.IFF_Instance_Index = b.IFF_Instance_Index ';
        ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
      end;
    end
    else
      if id <> 0 then
      begin
        ssql := ssql + 'JOIN Platform_IFF_Activation b ';
        ssql := ssql + 'ON a.IFF_Instance_Index = b.IFF_Instance_Index ';
        ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ') AND ';
        ssql := ssql + '(a.IFF_Instance_Index =' + IntToStr(index) +')';
      end
      else
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 AND a.IFF_Instance_Index =' +
        IntToStr(index);

    SQL.Add(ssql);
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;
//    ShowMessage(ssql);
    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TIFF_Sensor_On_Board.Create;

        with rec.FData do
        begin
          IFF_Instance_Index := FieldByName('IFF_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          IFF_Capability := FieldByName('IFF_Capability').AsInteger;
          Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
          Submerged_Antenna_Height := FieldByName('Submerged_Antenna_Height')
            .AsSingle;
          Max_Operational_Depth := FieldByName('Max_Operational_Depth')
            .AsSingle;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM IFF_Sensor_On_Board a JOIN Scripted_IFF_Event b ');
        SQL.Add('ON a.IFF_Instance_Index = b.IFF_Instance_Index ');
        SQL.Add('WHERE (a.IFF_Instance_Index =' + IntToStr
            (rec.FData.IFF_Instance_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          iffScript := TScripted_IFF.Create;

          with iffScript.Event.FData do
          begin
            Scripted_Event_Index := FieldByName('Scripted_Event_Index')
              .AsInteger;
            IFF_Instance_Index := FieldByName('IFF_Instance_Index').AsInteger;
            IFF_Interrogator_Control := FieldByName('IFF_Interrogator_Control')
              .AsInteger;
            IFF_Transponder_Control := FieldByName('IFF_Transponder_Control')
              .AsInteger;
          end;

          GetScripted_Behav(iffScript.Event.FData.Scripted_Event_Index,
            iffScript.Behav);

          rec.FScripted_IFF.Add(iffScript);

          ZQ.Next;

        end;
      end;

      for J := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[J];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM IFF_Sensor_On_Board a JOIN Pattern_IFF_Event b ');
        SQL.Add('ON a.IFF_Instance_Index = b.IFF_Instance_Index ');
        SQL.Add('WHERE (a.IFF_Instance_Index =' + IntToStr
            (rec.FData.IFF_Instance_Index) + ')');
        Open;
        ZQ.First;
        while not ZQ.Eof do
        begin
          iffPattern := TPattern_IFF.Create;

          with iffPattern.Event.FData do
          begin
            Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
              .AsInteger;
            IFF_Instance_Index := FieldByName('IFF_Instance_Index').AsInteger;
            IFF_Interrogator_Control := FieldByName('IFF_Interrogator_Control')
              .AsInteger;
            IFF_Transponder_Control := FieldByName('IFF_Transponder_Control')
              .AsInteger;
          end;

          GetScripted_Pattern(iffPattern.Event.FData.Scripted_Pattern_Index,
            iffPattern.pattern);

          rec.FPattern_IFF.Add(iffPattern);

          ZQ.Next;

        end;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateIFF(rec: TIFF_Sensor_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE IFF_Sensor_On_Board ');
      SQL.Add('SET ');
      //SQL.Add('IFF_Instance_Index  =' + IntToStr(IFF_Instance_Index) + ',');
      SQL.Add('Instance_Identifier=''' + Instance_Identifier + ''',');
      SQL.Add('Instance_Type  =' + IntToStr(Instance_Type) + ',');
      SQL.Add('IFF_Capability =' + IntToStr(IFF_Capability) + ',');
      SQL.Add('Rel_Antenna_Height =' + FloatToStr(Rel_Antenna_Height) + ',');
      SQL.Add('Max_Operational_Depth =' + FloatToStr(Max_Operational_Depth)
          + ',');
      SQL.Add('Submerged_Antenna_Height =' + FloatToStr
          (Submerged_Antenna_Height));
    end;

    SQL.Add(' WHERE (IFF_Instance_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertIFF(rec: TIFF_Sensor_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO IFF_Sensor_On_Board ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Vehicle_Index,IFF_Capability,Rel_Antenna_Height,Max_Operational_Depth,Submerged_Antenna_Height)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(IFF_Capability) + ',');
      SQL.Add(FloatToStr(Rel_Antenna_Height) + ',');
      SQL.Add(FloatToStr(Max_Operational_Depth) + ',');
      SQL.Add(FloatToStr(Submerged_Antenna_Height) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM IFF_Sensor_On_Board ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index) );
      Open;

      IFF_Instance_Index := FieldByName('IFF_Instance_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

/// /====================================================
function TdmTTT.DeleteIFF_Sensor_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM IFF_Sensor_On_Board  ');
    SQL.Add('WHERE (IFF_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

function TdmTTT.updateScriptIFF(rec: TScripted_IFF_Event; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Scripted_IFF_Event ');
      SQL.Add('SET ');
      SQL.Add('IFF_Instance_Index =' + IntToStr(IFF_Instance_Index) + ',');
      SQL.Add('IFF_Interrogator_Control=' + IntToStr(IFF_Interrogator_Control)
          + ',');
      SQL.Add('IFF_Transponder_Control=' + IntToStr(IFF_Transponder_Control));
    end;

    SQL.Add(' WHERE (Scripted_Event_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllMAD_Sensor_On_Board(const id, index: Integer;
  var aRec: TList): Integer;
var
  rec: TMAD_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  MAD_Sensor_On_Board a JOIN MAD_Definition b ';
    ssql := ssql + 'ON a.MAD_Index = b.MAD_Index LEFT JOIN Note_Storage c ';
    ssql := ssql +
      'ON c.MAD_Index = b.MAD_Index LEFT JOIN Vehicle_Definition d ';
    ssql := ssql + 'ON a.Vehicle_Index = d.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak 0
      if id <> 0 then
      begin
        ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
      end;
    end
    else
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 AND a.MAD_Index =' + IntToStr
        (index);

    SQL.Add(ssql);
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TMAD_On_Board.Create;

        with rec.FData do
        begin
          MAD_Instance_Index := FieldByName('MAD_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          MAD_Index := FieldByName('MAD_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FMAD_Def do
        begin
          MAD_Index := FieldByName('MAD_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Baseline_Detect_Range := FieldByName('Baseline_Detect_Range')
            .AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateMAD(rec: TMAD_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE MAD_Sensor_On_Board ');
      SQL.Add('SET ');
      //SQL.Add('MAD_Instance_Index  =' + IntToStr(MAD_Instance_Index) + ',');
      SQL.Add('Instance_Identifier=''' + Instance_Identifier + ''',');
      SQL.Add('Instance_Type  =' + IntToStr(Instance_Type) + ',');
      SQL.Add('MAD_Index =' + IntToStr(MAD_Index) + ',');
      SQL.Add('Antenna_Height =' + FloatToStr(Antenna_Height));
    end;

    SQL.Add(' WHERE (MAD_Instance_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertMAD(rec: TMAD_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO MAD_Sensor_On_Board ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Vehicle_Index,MAD_Index,Antenna_Height)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(MAD_Index) + ',');
      SQL.Add(FloatToStr(Antenna_Height) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM MAD_Sensor_On_Board ');
      SQL.Add('WHERE Instance_Identifier = '+ QuotedStr(Instance_Identifier) + ' ');
      SQL.Add('AND MAD_Index = ' + IntToStr(MAD_Index) + ' ');
      SQL.Add('AND Vehicle_Index = ' + IntToStr(Vehicle_Index) );
      Open;

      MAD_Instance_Index := FieldByName('MAD_Instance_Index').AsInteger;

    end;
  end;
end;

/// /====================================================
function TdmTTT.DeleteMAD_Sensor_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM MAD_Sensor_On_Board  ');
    SQL.Add('WHERE (MAD_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

function TdmTTT.DeleteAllSensorAssetFromVehicle(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Radar_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM MAD_Sensor_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM ESM_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Sonobuoy_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Sonar_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM EO_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM IFF_Sensor_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Visual_Sensor_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// -----------------------------------------------------------------------------


function TdmTTT.DeleteAllWeaponAssetFromVehicle(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Fitted_Weapon_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;
  end;
end;

function TdmTTT.DeleteAll_GameReport(rec: TRuntime_Game_Report): Integer;
begin
  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('Delete from Game_Report');
    ExecSQL;
  end;
end;

// ----------------------------------------------------------------------------

function TdmTTT.DeleteAllCountermsAssetFromVehicle(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Jammer_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Air_Bubble_Mount  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Acoustic_Decoy_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Defensive_Jammer_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Towed_Jammer_Decoy_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Floating_Decoy_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Chaff_Launcher_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Chaff_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Infrared_Decoy_On_Board  ');
    SQL.Add('WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getSensor_On_Board(const index, id: Integer; sens_name: string): Boolean;
var
  ssql,tabel: string;
begin
  result := False;
  if not ZConn.Connected then
    exit;

  case index of
    1: tabel := 'Radar_On_Board';
    2: tabel := 'MAD_Sensor_On_Board';
    3: tabel := 'ESM_On_Board';
    4: tabel := 'Sonar_On_Board';
    5: tabel := 'EO_On_Board';
    6: tabel := 'IFF_Sensor_On_Board';
    7: tabel := 'Visual_Sensor_On_Board';
    8: tabel := 'Sonobuoy_On_Board';
  end;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM ' + tabel;
    ssql := ssql + ' WHERE ';

    if id <> 0 then
      ssql := ssql + 'Vehicle_Index = ' + IntToStr(id);

    if (id <> 0) and (name <> '') then
      ssql := ssql + ' AND ';

    if sens_name <> '' then
      ssql := ssql + 'Instance_Identifier = ' + QuotedStr(sens_name);

    SQL.Add(ssql);
    Open;

    if not IsEmpty then
      Result := True;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getWeapon_On_Board(const index, id: Integer; weap_name: string): Boolean;
var
  ssql,tabel: string;
begin
  result := False;
  if not ZConn.Connected then
    exit;

  case index of
    1: tabel := 'Fitted_Weapon_On_Board';
    2: tabel := 'Point_Effect_On_Board';
  end;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM ' + tabel;
    ssql := ssql + ' WHERE ';

    if id <> 0 then
      ssql := ssql + 'Vehicle_Index = ' + IntToStr(id);

    if (id <> 0) and (name <> '') then
      ssql := ssql + ' AND ';

    if weap_name <> '' then
      ssql := ssql + 'Instance_Identifier = ' + QuotedStr(weap_name);

    SQL.Add(ssql);
    Open;

    if not IsEmpty then
      Result := True;
  end;
end;

function TdmTTT.Get_IdResourceAlloc(const id: Integer;
  var recList: TList): Boolean;
var
  rec: TResource_Allocation;
begin
  result := False;
  if not ZConn.Connected then
   Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM ');
    SQL.Add('Resource_Plotting_Mapping a JOIN Resource_Allocation b ');
    SQL.Add('ON a.Resource_Alloc_Index = b.Resource_Alloc_Index');
    SQL.Add('WHERE a.Plotting_Index = ' + IntToStr(id));
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      if not Assigned(reclist) then
       reclist := TList.Create
      else
        reclist.Clear;

      while not ZQ.Eof do
      begin
        rec := TResource_Allocation.Create;
        with rec.FPlotting_Usage  do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Alloc_Identifier := FieldByName('Allocation_Identifier').AsString;
          Plotting_Index := FieldByName('Plotting_Index').AsInteger;
          Plotting_Name := FieldByName('Plotting_Name').AsString;
        end;
        recList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getCountermeasure_On_Board(const index, id: Integer; count_name: string): Boolean;
var
  ssql,tabel: string;
begin
  result := False;
  if not ZConn.Connected then
    exit;

  case index of
    1: tabel := 'Jammer_On_Board';
    2: tabel := 'Air_Bubble_Mount';
    3: tabel := 'Acoustic_Decoy_On_Board';
    4: tabel := 'Defensive_Jammer_On_Board';
    5: tabel := 'Towed_Jammer_Decoy_On_Board';
    6: tabel := 'Floating_Decoy_On_Board';
    7: tabel := 'Chaff_On_Board';
    8: tabel := 'Infrared_Decoy_On_Board';
  end;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM ' + tabel;
    ssql := ssql + ' WHERE ';

    if id <> 0 then
      ssql := ssql + 'Vehicle_Index = ' + IntToStr(id);

    if (id <> 0) and (name <> '') then
      ssql := ssql + ' AND ';

    if count_name <> '' then
      ssql := ssql + 'Instance_Identifier = ' + QuotedStr(count_name);

    SQL.Add(ssql);
    Open;

    if not IsEmpty then
      Result := True;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getMAD_Def(const id: Integer; var aRec: TList;
  var rec: TMAD_On_Board): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM MAD_Definition ';
    ssql := ssql + 'a LEFT JOIN Note_Storage b ON a.MAD_Index = b.MAD_Index ';
    if id <> 0 then
      ssql := ssql + 'WHERE a.MAD_Index = ' + IntToStr(id);

    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TMAD_On_Board.Create;

        with rec.FMAD_Def do
        begin
          MAD_Index := FieldByName('MAD_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Baseline_Detect_Range := FieldByName('Baseline_Detect_Range')
            .AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateMAD_Def(rec: TMAD_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FMAD_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE MAD_Definition ');
      SQL.Add('SET ');
      SQL.Add('Class_Identifier =''' + Class_Identifier + ''',');
      SQL.Add('Baseline_Detect_Range  =' + FloatToStr(Baseline_Detect_Range)
          + ',');
      SQL.Add('Known_Cross_Section =' + FloatToStr(Known_Cross_Section));
    end;

    SQL.Add(' WHERE (MAD_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertMAD_Def(rec: TMAD_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FMAD_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO MAD_Definition ');
      SQL.Add('(Class_Identifier,Baseline_Detect_Range,Known_Cross_Section)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Class_Identifier + ''',');
      SQL.Add(FloatToStr(Baseline_Detect_Range) + ',');
      SQL.Add(FloatToStr(Known_Cross_Section) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT MAD_Index FROM MAD_Definition ');
      SQL.Add('WHERE Class_Identifier =' + quotedStr(Class_Identifier));
      Open;
      with rec.FMAD_Def do
      begin
        MAD_Index := FieldByName('MAD_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteMAD_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(11,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE MAD_Definition ');
    SQL.Add('WHERE MAD_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllVisual_Sensor_On_Board(const id, index: Integer;
  var aRec: TList): Integer;
var
  i,b_num: Integer;
  rec: TVisual_Sensor_On_Board;
  Visual_Blind: TBlind_Zone;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql +
      'FROM  Visual_Sensor_On_Board a LEFT JOIN Vehicle_Definition d ';
    ssql := ssql + 'ON a.Vehicle_Index = d.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak 0
      if id <> 0 then
        ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
    end
    else
      ssql := ssql +
        'WHERE a.Vehicle_Index > 0 AND a.Visual_Instance_Index =' + IntToStr
        (index);

    SQL.Add(ssql);
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TVisual_Sensor_On_Board.Create;
        with rec.FData do
        begin
          Visual_Instance_Index := FieldByName('Visual_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Observer_Height := FieldByName('Observer_Height').AsSingle;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Visual_Sensor_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.Visual_Instance_Index = b.Visual_Instance_Index ');
        SQL.Add('WHERE (a.Visual_Instance_Index = ' + IntToStr
            (rec.FData.Visual_Instance_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          Visual_Blind := TBlind_Zone.Create;

          with rec.FBlind_Zone.FData do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
            Visual_Instance_Index := FieldByName('Visual_Instance_Index')
              .AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;
          end;

          rec.FBlind.Add(Visual_Blind);

          //added by bebe
          b_num := FieldByName('BlindZone_Number').AsInteger;
          if b_num = 1 then
          begin
            with rec.FBZone_1 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Visual_Instance_Index := FieldByName('Visual_Instance_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end
          else if b_num = 2 then
          begin
            with rec.FBZone_2 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Visual_Instance_Index := FieldByName('Visual_Instance_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end;
          ZQ.Next;

        end;
      end;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateVisual(rec: TVisual_Sensor_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Visual_Sensor_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Instance_Identifier=''' + Instance_Identifier + ''', ');
      SQL.Add('Instance_Type  =' + IntToStr(Instance_Type) + ', ');
      SQL.Add('Observer_Height =' + FloatToStr(Observer_Height));
    end;

    SQL.Add(' WHERE (Visual_Instance_Index = ' + id + ')');
    ExecSQL;

  end;
end;



// ------------------------------------------------------------------------------

function TdmTTT.insertVisual(rec: TVisual_Sensor_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
     { SQL.Add(
        'SET IDENTITY_INSERT Runtime_DB.[dbo].[Visual_Sensor_On_Board] ON;');
      ExecSQL;
      SQL.Clear;   }
      SQL.Add('INSERT INTO Visual_Sensor_On_Board ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Vehicle_Index,Observer_Height)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(FloatToStr(Observer_Height) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Visual_Sensor_On_Board ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index));
      Open;

      Visual_Instance_Index := FieldByName('Visual_Instance_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

/// /====================================================
function TdmTTT.DeleteVisual_Sensor_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Visual_Sensor_On_Board  ');
    SQL.Add('WHERE (Visual_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// -------------------------------------------------------------------

function TdmTTT.getAllFCR_On_Board(const id: Integer; var aRec: TList): Integer;
var
  i: Integer;
  rec: TFCR_On_Board;
  FCR_Blind: TBlind_Zone;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  FCR_On_Board a JOIN FCR_Definition b ');
    SQL.Add('   ON a.Radar_Index = b.FCR_Index LEFT JOIN Note_Storage c');
    SQL.Add('   ON c.FCR_Index = b.FCR_Index');
    SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Instance_Identifier');

    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TFCR_On_Board.Create;

        with rec.FData do
        begin
          FCR_Instance_Index := FieldByName('FCR_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
        end;

        with rec.FFCR_def do
        begin
          FCR_Index := FieldByName('FCR_Index').AsInteger;
          Radar_Identifier := FieldByName('Radar_Identifier').AsString;
          Radar_Emitter := FieldByName('Radar_Emitter').AsString;
          Frequency := FieldByName('Frequency').AsSingle;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Radar_Power := FieldByName('Radar_Power').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Max_Unambig_Detection_Range := FieldByName
            ('Max_Unambig_Detection_Range').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM FCR_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.FCR_Instance_Index = b.FCR_Instance_Index ');
        SQL.Add('WHERE (a.FCR_Instance_Index = ' + IntToStr
            (rec.FData.FCR_Instance_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          FCR_Blind := TBlind_Zone.Create;

          with rec.FBlind_Zone.FData do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
            FCR_Instance_Index := FieldByName('FCR_Instance_Index').AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;
          end;

          rec.FBlind.Add(FCR_Blind);
          ZQ.Next;

        end;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllRadar_On_Board(const id, index: Integer;
  var aRec: TList): Integer;
var
  i, J, k, l: Integer;
  radar: TRadar_On_Board;
  radarScript: TScripted_Radar;
  radarPattern: TPattern_Radar;
  radarVertical: TRadar_Vertical;
  Radar_Blind: TBlind_Zone;
  ssql: string;
  pVerticalCoverage: TRecRadar_Vertical_Coverage;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Radar_Definition a INNER JOIN Radar_On_Board b ';
    ssql := ssql + 'ON a.Radar_Index = b.Radar_Index INNER JOIN Radar_Type c ';
    ssql := ssql +
      'ON a.Radar_Type = c.Radar_Type_Index INNER JOIN ECCM_Type d ';
    ssql := ssql +
      'ON a.ECCM_Type = d.ECCM_Type_Index LEFT JOIN Note_Storage e ';
    ssql := ssql +
      'ON e.Radar_Index = b.Radar_Index LEFT JOIN Vehicle_Definition f ';
    ssql := ssql + 'ON b.Vehicle_Index = f.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE b.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak 0
      if id <> 0 then
      begin
        ssql := ssql + 'WHERE (b.Vehicle_index = ' + IntToStr(id) + ')';
      end;
    end
    else
      ssql := ssql + 'WHERE b.Vehicle_Index > 0 AND b.Radar_Index =' + IntToStr
        (index);

    SQL.Add(ssql);
    SQL.Add('ORDER BY b.Instance_Identifier');
    Open;
    result := RecordCount;
    if IsEmpty then
      exit;
    First;
  end;

  if not Assigned(aRec) then
    aRec := TList.Create
  else
    aRec.Clear;

  with ZQ do
  begin
    while not ZQ.Eof do
    begin
      radar := TRadar_On_Board.Create;
      with radar.FData do
      begin
        Radar_Instance_Index := FieldByName('Radar_Instance_Index').AsInteger;
        Instance_Identifier := FieldByName('Instance_Identifier').AsString;
        Instance_Type := FieldByName('Instance_Type').AsInteger;
        Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
        Radar_Index := FieldByName('Radar_Index').AsInteger;
        Rel_Antenna_Height := FieldByName('Rel_Antenna_Height').AsSingle;
        Submerged_Antenna_Height := FieldByName('Submerged_Antenna_Height')
          .AsSingle;
        Max_Operational_Depth := FieldByName('Max_Operational_Depth').AsSingle;
      end;

      with radar.FDef do
      begin
        Radar_Index := FieldByName('Radar_Index').AsInteger;
        Radar_Identifier := FieldByName('Radar_Identifier').AsString;
        Radar_Emitter := FieldByName('Radar_Emitter').AsString;
        Radar_Type := FieldByName('Radar_Type').AsInteger;
        Frequency := FieldByName('Frequency').AsSingle;
        Scan_Rate := FieldByName('Scan_Rate').AsSingle;
        Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
        Pulse_Width := FieldByName('Pulse_Width').AsSingle;
        Radar_Power := FieldByName('Radar_Power').AsSingle;
        Detection_Range := FieldByName('Detection_Range').AsSingle;
        Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
        Max_Unambig_Detect_Range := FieldByName('Max_Unambig_Detect_Range')
          .AsSingle;
        IFF_Capability := FieldByName('IFF_Capability').AsBoolean;
        Altitude_Data_Capability := FieldByName('Altitude_Data_Capability')
          .AsBoolean;
        Ground_Speed_Data_Capability := FieldByName
          ('Ground_Speed_Data_Capability').AsBoolean;
        Heading_Data_Capability := FieldByName('Heading_Data_Capability')
          .AsBoolean;
        Plat_Type_Recog_Capability := FieldByName('Plat_Type_Recog_Capability')
          .AsBoolean;
        Plat_Class_Recog_Capability := FieldByName
          ('Plat_Class_Recog_Capability')
          .AsBoolean;
        Clutter_Rejection := FieldByName('Clutter_Rejection').AsSingle;
        Anti_Jamming_Capable := FieldByName('Anti_Jamming_Capable').AsBoolean;
        Curve_Definition_Index := FieldByName('Curve_Definition_Index')
          .AsInteger;
        Second_Vert_Coverage := FieldByName('Second_Vert_Coverage').AsBoolean;
        Jamming_A_Resistant := FieldByName('Jamming_A_Resistant').AsBoolean;
        Jamming_B_Resistant := FieldByName('Jamming_B_Resistant').AsBoolean;
        Jamming_C_Resistant := FieldByName('Jamming_C_Resistant').AsBoolean;
        Anti_Jamming_A_Resistant := FieldByName('Anti_Jamming_A_Resistant')
          .AsBoolean;
        Anti_Jamming_B_Resistant := FieldByName('Anti_Jamming_B_Resistant')
          .AsBoolean;
        Anti_Jamming_C_Resistant := FieldByName('Anti_Jamming_C_Resistant')
          .AsBoolean;
        Anti_Jamming_Range_Reduction := FieldByName
          ('Anti_Jamming_Range_Reduction').AsSingle;
        Beam_Width := FieldByName('Beam_Width').AsSingle;
        Sector_Scan_Capable := FieldByName('Sector_Scan_Capable').AsBoolean;
        Off_Axis_Jammer_Reduction := FieldByName('Off_Axis_Jammer_Reduction')
          .AsSingle;
        Num_FCR_Channels := FieldByName('Num_FCR_Channels').AsInteger;
        Radar_Spot_Number := FieldByName('Radar_Spot_Number').AsInteger;
        Radar_Horizon_Factor := FieldByName('Radar_Horizon_Factor').AsSingle;
        Main_Lobe_Gain := FieldByName('Main_Lobe_Gain').AsSingle;
        Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
          .AsSingle;
        ECCM_Type := FieldByName('ECCM_Type').AsInteger;
        MTI_Capable := FieldByName('MTI_Capable').AsBoolean;
        MTI_MinTargetSpeed := FieldByName('MTI_MinTargetSpeed').AsSingle;

      end;

      with radar.FType do
      begin
        Radar_Type_Index := FieldByName('Radar_Type_Index').AsInteger;
        Radar_Type_Name := FieldByName('Radar_Type_Name').AsString;
      end;

      with radar.FECCM_Type do
      begin
        ECCM_Type_Index := FieldByName('ECCM_Type_Index').AsInteger;
        ECCM_Type_Name := FieldByName('ECCM_Type_Name').AsString;
      end;

      with radar.FNote do
      begin
        Note_Index := FieldByName('Note_Index').AsInteger;
        Note_Type := FieldByName('Note_Type').AsInteger;
        Notes := FieldByName('Notes').AsString;
      end;

      with radar.FVehicle.FData do
      begin
        Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
      end;

      aRec.Add(radar);
      ZQ.Next;
    end;

    for k := 0 to aRec.Count - 1 do
    begin
      radar := aRec.Items[k];

      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM Radar_Definition a JOIN Radar_Vertical_Coverage b ');
      SQL.Add('ON a.Radar_Index = b.Radar_Index ');
      SQL.Add('WHERE (a.Radar_Index = ' + IntToStr(radar.FData.Radar_Index)
          + ')');
      Open;

      ZQ.First;

      while not ZQ.Eof do
      begin
        // New(pVerticalCoverage);
        with pVerticalCoverage do
        begin
          Coverage_Index := FieldByName('Coverage_Index').AsInteger;
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Coverage_Diagram := FieldByName('Coverage_Diagram').AsInteger;
          Vert_Coverage_Range := FieldByName('Vert_Coverage_Range').AsSingle;
          Vert_Cover_Min_Elevation := FieldByName('Vert_Cover_Min_Elevation')
            .AsSingle;
          Vert_Cover_Max_Elevation := FieldByName('Vert_Cover_Max_Elevation')
            .AsSingle;
        end;
        // radar.FRadar_Vertical.Add(pVerticalCoverage);
        ZQ.Next;
      end;
    end;

    for i := 0 to aRec.Count - 1 do
    begin
      radar := aRec.Items[i];
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM Radar_On_Board a JOIN Scripted_Radar_Event b ');
      SQL.Add('ON a.Radar_Index = b.Radar_Index ');
      SQL.Add('WHERE (a.Radar_Index = ' + IntToStr(radar.FData.Radar_Index)
          + ')');
      Open;

      ZQ.First;

      while not ZQ.Eof do
      begin
        radarScript := TScripted_Radar.Create;

        with radarScript.Event.FData do
        begin
          Scripted_Event_Index := FieldByName('Scripted_Event_Index').AsInteger;
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Radar_Control := FieldByName('Radar_Control').AsInteger;
        end;

        GetScripted_Behav(radarScript.Event.FData.Scripted_Event_Index,
          radarScript.Behav);

        radar.FScripted_Radar.Add(radarScript);
        ZQ.Next;
      end;
    end;

    for J := 0 to aRec.Count - 1 do
    begin
      radar := aRec.Items[J];
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM Radar_On_Board a JOIN Pattern_Radar_Event b ');
      SQL.Add('ON a.Radar_Index = b.Radar_Index ');
      SQL.Add('WHERE (a.Radar_Index = ' + IntToStr(radar.FData.Radar_Index)
          + ')');
      Open;

      ZQ.First;

      while not ZQ.Eof do
      begin
        radarPattern := TPattern_Radar.Create;

        with radarPattern.Event.FData do
        begin
          Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
            .AsInteger;
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Radar_Control := FieldByName('Radar_Control').AsInteger;
        end;

        GetScripted_Pattern(radarPattern.Event.FData.Scripted_Pattern_Index,
          radarPattern.pattern);

        radar.FScripted_Pattern.Add(radarPattern);

        ZQ.Next;
      end;
    end;

    for l := 0 to aRec.Count - 1 do
    begin
      radar := aRec.Items[l];
      with ZQ do begin
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Radar_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.Radar_Instance_Index = b.Radar_Instance_Index ');
        SQL.Add('WHERE (a.Radar_Instance_Index = ' + IntToStr
            (radar.FData.Radar_Instance_Index) + ')');
        SQL.Add('AND b.BlindZone_Number = 1 ');
        Open;

        if not IsEmpty then
        begin
          First;

          //added by bebe
          with radar.FBZone_1 do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
            Radar_Instance_Index := FieldByName('Radar_Instance_Index').AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;
          end;

          while not ZQ.Eof do
          begin
            Radar_Blind := TBlind_Zone.Create;

            with radar.FBlind_Zone.FData do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Radar_Instance_Index := FieldByName('Radar_Instance_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;


            radar.FBlind.Add(Radar_Blind);
            ZQ.Next;
          end;
        end;

        //added by bebe
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Radar_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.Radar_Instance_Index = b.Radar_Instance_Index ');
        SQL.Add('WHERE (a.Radar_Instance_Index = ' + IntToStr
            (radar.FData.Radar_Instance_Index) + ')');
        SQL.Add('AND b.BlindZone_Number = 2 ');
        Open;

        if not IsEmpty then
        begin
          First;

          with radar.FBZone_2 do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
            Radar_Instance_Index := FieldByName('Radar_Instance_Index').AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;
          end;
        end;
      end;
    end;
  end;
end;

// -----------------------------------------------------------------------------

function TdmTTT.updateScriptRadar(rec: TScripted_Radar_Event;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Scripted_Radar_Event ');
      SQL.Add('SET ');
      SQL.Add('Radar_Index  =' + IntToStr(Radar_Index) + ',');
      SQL.Add('Radar_Control=' + IntToStr(Radar_Control));
    end;

    SQL.Add(' WHERE (Scripted_Event_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateRadar_Def(rec: TRadar_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Radar_Definition ');
      SQL.Add('SET ');
      SQL.Add('Radar_Identifier  =''' + Radar_Identifier + ''',');
      SQL.Add('Radar_Emitter = ''' + Radar_Emitter + ''',');
      SQL.Add('Radar_Type =' + IntToStr(Radar_Type) + ',');
      SQL.Add('Frequency =' + FloatToStr(Frequency) + ',');
      SQL.Add('Scan_Rate =' + FloatToStr(Scan_Rate) + ',');
      SQL.Add('Pulse_Rep_Freq =' + FloatToStr(Pulse_Rep_Freq) + ',');
      SQL.Add('Pulse_Width =' + FloatToStr(Pulse_Width) + ',');
      SQL.Add('Radar_Power =' + FloatToStr(Radar_Power) + ',');
      SQL.Add('Detection_Range =' + FloatToStr(Detection_Range) + ',');
      SQL.Add('Known_Cross_Section =' + FloatToStr(Known_Cross_Section) + ',');
      SQL.Add('Max_Unambig_Detect_Range =' + FloatToStr
          (Max_Unambig_Detect_Range) + ',');
      SQL.Add('IFF_Capability =' + BoolToStr(IFF_Capability) + ',');
      SQL.Add('Altitude_Data_Capability =' + BoolToStr
          (Altitude_Data_Capability) + ',');
      SQL.Add('Ground_Speed_Data_Capability =' + BoolToStr
          (Ground_Speed_Data_Capability) + ',');
      SQL.Add('Heading_Data_Capability =' + BoolToStr(Heading_Data_Capability)
          + ',');
      SQL.Add('Plat_Type_Recog_Capability =' + BoolToStr
          (Plat_Type_Recog_Capability) + ',');
      SQL.Add('Plat_Class_Recog_Capability =' + BoolToStr
          (Plat_Class_Recog_Capability) + ',');
      SQL.Add('Clutter_Rejection =' + FloatToStr(Clutter_Rejection) + ',');
      SQL.Add('Anti_Jamming_Capable =' + BoolToStr(Anti_Jamming_Capable) + ',');
      SQL.Add('Curve_Definition_Index =' + IntToStr(Curve_Definition_Index)
          + ',');
      SQL.Add('Second_Vert_Coverage =' + BoolToStr(Second_Vert_Coverage) + ',');
      SQL.Add('Jamming_A_Resistant =' + BoolToStr(Jamming_A_Resistant) + ',');
      SQL.Add('Jamming_B_Resistant =' + BoolToStr(Jamming_B_Resistant) + ',');
      SQL.Add('Jamming_C_Resistant =' + BoolToStr(Jamming_C_Resistant) + ',');
      SQL.Add('Anti_Jamming_A_Resistant =' + BoolToStr
          (Anti_Jamming_A_Resistant) + ',');
      SQL.Add('Anti_Jamming_B_Resistant =' + BoolToStr
          (Anti_Jamming_B_Resistant) + ',');
      SQL.Add('Anti_Jamming_C_Resistant =' + BoolToStr
          (Anti_Jamming_C_Resistant) + ',');
      SQL.Add('Anti_Jamming_Range_Reduction =' + FloatToStr
          (Anti_Jamming_Range_Reduction) + ',');
      SQL.Add('Beam_Width =' + FloatToStr(Beam_Width) + ',');
      SQL.Add('Sector_Scan_Capable =' + BoolToStr(Sector_Scan_Capable) + ',');
      SQL.Add('Off_Axis_Jammer_Reduction =' + FloatToStr
          (Off_Axis_Jammer_Reduction) + ',');
      SQL.Add('Num_FCR_Channels =' + IntToStr(Num_FCR_Channels) + ',');
      SQL.Add('Radar_Spot_Number =' + IntToStr(Radar_Spot_Number) + ',');
      SQL.Add('Radar_Horizon_Factor =' + FloatToStr(Radar_Horizon_Factor)
          + ',');
      SQL.Add('Main_Lobe_Gain =' + FloatToStr(Main_Lobe_Gain) + ',');
      SQL.Add('Counter_Detection_Factor =' + FloatToStr
          (Counter_Detection_Factor) + ',');
      SQL.Add('ECCM_Type =' + IntToStr(ECCM_Type) + ',');
      SQL.Add('MTI_Capable =' + BoolToStr(MTI_Capable) + ',');
      SQL.Add('MTI_MinTargetSpeed =' + FloatToStr(MTI_MinTargetSpeed));
    end;

    SQL.Add(' WHERE (Radar_Index = ' + id + ')');
    ExecSQL;
    //updateNote(rec,7,id);

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteRadar_Definition(const id: string): Integer;
begin
  result := -1;
  deleteNote(7,id);
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Radar_Definition  ');
    SQL.Add('WHERE (Radar_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertPatern_Radar_Event(var rec: TPattern_Radar_Event): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Pattern_Radar_Event  ');
      SQL.Add('(Scripted_Pattern_Index, Radar_Index, Radar_Control)');
      SQL.Add('VALUES ( ' );
      SQL.Add(IntToStr(Scripted_Pattern_Index)+',');
      SQL.Add(IntToStr(Radar_Index)+',');
      SQL.Add(IntToStr(Radar_Control)+')');
    ExecSQL;

    {SQL.Clear;
    SQL.Add('SELECT Scripted_Pattern_Index FROM Pattern_Radar_Event ');
    SQL.Add('WHERE Radar_Index =' + inttostr(Radar_Index));
    Open;
    Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index').AsInteger;  }
    end;
  end;
end;

// ------------------------------------------------------------------------------
function TdmTTT.InsertPersonel_All(var rec: TPersonel; IdAction,
  IdPersonel: Integer): Integer;
begin
  Result := -1;
  with ZQ do
  begin
//      rec := TPersonel.Create;
      case IdAction of
        0:{brigade}
          begin
            Close;
//            rec := TBrigade.Create;
            SQL.Clear;
            SQL.Add('INSERT INTO Personel_Brigade');
//            SQL.Add('(Brigade_Identifier ' + ')');
            SQL.Add('VALUES (');
            SQL.Add(QuotedStr(rec.Identifier) + ',');
            SQL.Add('GETDATE()' + ')');
            ExecSQL;

            SQL.Clear;
            SQL.Add('SELECT * FROM Personel_Brigade ');
            SQL.Add('WHERE Brigade_Identifier = ' + QuotedStr(rec.Identifier));
            SQL.Add(' ORDER BY Brigade_Index desc');
            Open;
//            TGroup(rec).IdBrigade := FieldByName('Brigade_Index').AsInteger;
            Result := FieldByName('Brigade_Index').AsInteger;
          end;
        1:{batalyon}
          begin
            Close;
//            TBatalyon.Create;
            SQL.Clear;
            SQL.Add('INSERT INTO Personel_Batalyon ');
            SQL.Add('(Brigade_Index, Batalyon_Identifier ' + ')');
            SQL.Add('VALUES (');
            SQL.Add(IntToStr(IdPersonel) + ',');
            SQL.Add(QuotedStr(rec.Identifier) + ')');
            ExecSQL;

            SQL.Clear;
            SQL.Add('SELECT * FROM Personel_Batalyon ');
            SQL.Add('WHERE Brigade_Index = ' + IntToStr(IdPersonel));
            SQL.Add('AND Batalyon_Identifier = ' + QuotedStr(rec.Identifier));
            SQL.Add(' ORDER BY Batalyon_Index desc');
            Open;
//            TGroup(rec).IdBatalyon := FieldByName('Batalyon_Index').AsInteger;
            Result := FieldByName('Batalyon_Index').AsInteger;
          end;
        2:{kompi}
          begin
            Close;
//            TKompi.Create;
            SQL.Clear;
            SQL.Add('INSERT INTO Personel_Kompi ');
            SQL.Add('(Batalyon_Index, Kompi_Identifier, Brigade_Index ' + ')');
            SQL.Add('VALUES (');
            SQL.Add(IntToStr(IdPersonel) + ',');
            SQL.Add(QuotedStr(rec.Identifier) + ',');
            SQL.Add(IntToStr(TKompi(rec).IdBrigade) + ')');
            ExecSQL;

            SQL.Clear;
            SQL.Add('SELECT * FROM Personel_Kompi ');
            SQL.Add('WHERE Batalyon_Index = ' + IntToStr(IdPersonel));
            SQL.Add('AND Kompi_Identifier = ' + QuotedStr(rec.Identifier));
            SQL.Add(' ORDER BY Kompi_Index desc');
            Open;
//            TGroup(rec).IdKompi := FieldByName('Kompi_Index').AsInteger;
            Result := FieldByName('Kompi_Index').AsInteger;
          end;
        3:{pleton}
          begin
            Close;
//            TPlatoon.Create;
            SQL.Clear;
            SQL.Add('INSERT INTO Personel_Pleton ');
            SQL.Add('(Kompi_Index, Pleton_Identifier, Brigade_Index ' + ')');
            SQL.Add('VALUES (');
            SQL.Add(IntToStr(IdPersonel) + ',');
            SQL.Add(QuotedStr(rec.Identifier) + ',');
            SQL.Add(IntToStr(TPlatoon(rec).IdBrigade) + ')');
            ExecSQL;

            SQL.Clear;
            SQL.Add('SELECT * FROM Personel_Pleton ');
            SQL.Add('WHERE Kompi_Index = ' + IntToStr(IdPersonel));
            SQL.Add('AND Pleton_Identifier = ' + QuotedStr(rec.Identifier));
            SQL.Add(' ORDER BY Pleton_Index desc');
            Open;
//            TGroup(rec).IdPlatoon := FieldByName('Pleton_Index').AsInteger;
            Result := FieldByName('Pleton_Index').AsInteger;
          end;
        4:{regu}
          begin
            Close;
//            TGroup.Create;
            SQL.Clear;
            SQL.Add('INSERT INTO Personel_Regu ');
            SQL.Add('(Brigade_Index, Batalyon_Index, Kompi_Index,Pleton_Index, ');
            SQL.Add('Regu_Identifier, Quantity ' + ')');
            SQL.Add('VALUES (');
            SQL.Add(IntToStr(TGroup(rec).IdBrigade) + ',');
            SQL.Add(IntToStr(TGroup(rec).IdBatalyon) + ',');
            SQL.Add(IntToStr(TGroup(rec).IdKompi) + ',');
            SQL.Add(IntToStr(TGroup(rec).IdPlatoon) + ',');
            SQL.Add(QuotedStr(rec.Identifier) + ',');
            SQL.Add(IntToStr(TGroup(rec).quantity) + ')');
          end;
      end;

      ExecSQL;

  end;
end;

function TdmTTT.InsertPersonel_Embark_Library(
  var rec: TPersonel_Embark_Library): Integer;
begin
  Result := -1;
//  if not ZQ.Connected then
//    exit;

  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Personel_Embark_Library ');
      SQL.Add('(Embark_Library_Index, Brigade_Index, Brigade_Identifier, ');
      SQL.Add('Vehicle_Index ' + ')');
      SQL.Add('VALUES (');
      SQL.Add(IntToStr(Embark_Library_Index) + ',');
      SQL.Add(IntToStr(Brigade_Index) + ',');
      SQL.Add(QuotedStr(Brigade_Identifier) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ')');
    end;
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateRainfall_On_ESM(rec: TRainfall_On_ESM;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Rainfall_On_ESM  ');
      SQL.Add('SET ');
      SQL.Add('Rain_0_Effect = ' + FloatToStr(Rain_0_Effect) + ',');
      SQL.Add('Rain_1_Effect = ' + FloatToStr(Rain_1_Effect) + ',');
      SQL.Add('Rain_2_Effect = ' + FloatToStr(Rain_2_Effect) + ',');
      SQL.Add('Rain_3_Effect = ' + FloatToStr(Rain_3_Effect) + ',');
      SQL.Add('Rain_4_Effect = ' + FloatToStr(Rain_4_Effect) + ',');
      SQL.Add('Rain_5_Effect = ' + FloatToStr(Rain_5_Effect) + ',');
      SQL.Add('Rain_6_Effect = ' + FloatToStr(Rain_6_Effect) + ',');
    end;
    SQL.Add('WHERE (Radar_Frequency = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateRainfall_On_Radar(rec: TRainfall_On_Radar;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Rainfall_On_Radar  ');
      SQL.Add('SET ');
      SQL.Add('Rain_0_Effect = ' + FloatToStr(Rain_0_Effect) + ',');
      SQL.Add('Rain_1_Effect = ' + FloatToStr(Rain_1_Effect) + ',');
      SQL.Add('Rain_2_Effect = ' + FloatToStr(Rain_2_Effect) + ',');
      SQL.Add('Rain_3_Effect = ' + FloatToStr(Rain_3_Effect) + ',');
      SQL.Add('Rain_4_Effect = ' + FloatToStr(Rain_4_Effect) + ',');
      SQL.Add('Rain_5_Effect = ' + FloatToStr(Rain_5_Effect) + ',');
      SQL.Add('Rain_6_Effect = ' + FloatToStr(Rain_6_Effect) + ',');
    end;
    SQL.Add('WHERE (Radar_Frequency = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetRadar_Definition(var aRec: TList): boolean;
var
  rec: TRadar_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Radar_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Radar_Index = b.Radar_Index ORDER BY Radar_Identifier');

    Open;

    result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TRadar_On_Board.Create;
        with rec.FDef do
        begin
          Radar_Index := FieldByName('Radar_Index').AsInteger;
          Radar_Identifier := FieldByName('Radar_Identifier').AsString;
          Radar_Emitter := FieldByName('Radar_Emitter').AsString;
          Radar_Type := FieldByName('Radar_Type').AsInteger;
          Frequency := FieldByName('Frequency').AsSingle;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Radar_Power := FieldByName('Radar_Power').AsSingle;
          Detection_Range := FieldByName('Detection_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Unambig_Detect_Range := FieldByName('Max_Unambig_Detect_Range')
            .AsSingle;
          IFF_Capability := FieldByName('IFF_Capability').AsBoolean;
          Altitude_Data_Capability := FieldByName('Altitude_Data_Capability')
            .AsBoolean;
          Ground_Speed_Data_Capability := FieldByName
            ('Ground_Speed_Data_Capability').AsBoolean;
          Heading_Data_Capability := FieldByName('Heading_Data_Capability')
            .AsBoolean;
          Plat_Type_Recog_Capability := FieldByName
            ('Plat_Type_Recog_Capability')
            .AsBoolean;
          Plat_Class_Recog_Capability := FieldByName
            ('Plat_Class_Recog_Capability').AsBoolean;
          Clutter_Rejection := FieldByName('Clutter_Rejection').AsSingle;
          Anti_Jamming_Capable := FieldByName('Anti_Jamming_Capable').AsBoolean;
          Curve_Definition_Index := FieldByName('Curve_Definition_Index')
            .AsInteger;
          Second_Vert_Coverage := FieldByName('Second_Vert_Coverage').AsBoolean;
          Jamming_A_Resistant := FieldByName('Jamming_A_Resistant').AsBoolean;
          Jamming_B_Resistant := FieldByName('Jamming_B_Resistant').AsBoolean;
          Jamming_C_Resistant := FieldByName('Jamming_C_Resistant').AsBoolean;
          Anti_Jamming_A_Resistant := FieldByName('Anti_Jamming_A_Resistant')
            .AsBoolean;
          Anti_Jamming_B_Resistant := FieldByName('Anti_Jamming_B_Resistant')
            .AsBoolean;
          Anti_Jamming_C_Resistant := FieldByName('Anti_Jamming_C_Resistant')
            .AsBoolean;
          Anti_Jamming_Range_Reduction := FieldByName
            ('Anti_Jamming_Range_Reduction').AsSingle;
          Beam_Width := FieldByName('Beam_Width').AsSingle;
          Sector_Scan_Capable := FieldByName('Sector_Scan_Capable').AsBoolean;
          Off_Axis_Jammer_Reduction := FieldByName('Off_Axis_Jammer_Reduction')
            .AsSingle;
          Num_FCR_Channels := FieldByName('Num_FCR_Channels').AsInteger;
          Radar_Spot_Number := FieldByName('Radar_Spot_Number').AsInteger;
          Radar_Horizon_Factor := FieldByName('Radar_Horizon_Factor').AsSingle;
          Main_Lobe_Gain := FieldByName('Main_Lobe_Gain').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
          ECCM_Type := FieldByName('ECCM_Type').AsInteger;
          MTI_Capable := FieldByName('MTI_Capable').AsBoolean;
          MTI_MinTargetSpeed := FieldByName('MTI_MinTargetSpeed').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;
        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;
// -------------------------------------------------------------------

/// /====================================================
function TdmTTT.InsertRadar_On_Board(var rec: TRadar_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Radar_On_Board  ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Vehicle_Index,Radar_Index,Rel_Antenna_Height,Submerged_Antenna_Height,Max_Operational_Depth)');
      SQL.Add(' VALUES (');
      SQL.Add(QuotedStr(Instance_Identifier) + ',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Radar_Index) + ',');
      SQL.Add(FloatToStr(Rel_Antenna_Height) + ',');
      SQL.Add(FloatToStr(Submerged_Antenna_Height) + ',');
      SQL.Add(FloatToStr(Max_Operational_Depth) + ')');
    end;
    ExecSQL;

    with rec.FData do
    begin
      SQL.Clear;
      SQL.Add('SELECT * FROM Radar_On_Board ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index) +' ');
      SQL.Add('AND Radar_Index = ' + IntToStr(Radar_Index)+' ');
      SQL.Add('AND Instance_Identifier = ' + QuotedStr(Instance_Identifier));
      Open;

      Radar_Instance_Index := FieldByName('Radar_Instance_Index').AsInteger;
    end;

  end;
end;
// -------------------------------------------------------------------

////====================================================
function TdmTTT.UpdateRadar_On_Board(const id: string;
  var rec: TRadar_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Radar_On_Board  ');
      SQL.Add('SET ' );
      //SQL.Add('Radar_Instance_Index = '+IntToStr(Radar_Instance_Index)+',');
      SQL.Add('Instance_Identifier = '+ QuotedStr(Instance_Identifier)+',');
      SQL.Add('Instance_Type = '+IntToStr(Instance_Type)+',');
      SQL.Add('Vehicle_Index = '+IntToStr(Vehicle_Index)+',');
      SQL.Add('Radar_Index = '+IntToStr(Radar_Index)+',');
      SQL.Add('Rel_Antenna_Height = '+FloatToStr(Rel_Antenna_Height)+',');
      SQL.Add('Submerged_Antenna_Height = '+FloatToStr(Submerged_Antenna_Height)+',');
      SQL.Add('Max_Operational_Depth = '+FloatToStr(Max_Operational_Depth));
    end;
    SQL.Add('WHERE (Radar_Instance_Index = ' +  id + ')' );
    //ShowMessage(SQL.Text);
    ExecSQL;
  end;
end;
//-------------------------------------------------------------------


/// /====================================================
function TdmTTT.DeleteRadar_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Radar_On_Board  ');
    SQL.Add('WHERE (Radar_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

/// /====================================================
function TdmTTT.DeleteRadar_On_Board_ByRadarIndex(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Radar_On_Board  ');
    SQL.Add('WHERE (Radar_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

function TdmTTT.insertRadar_Def(rec: TRadar_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Radar_Definition ');
      SQL.Add
        ('(Radar_Identifier,Radar_Emitter,Radar_Type,Frequency,Scan_Rate,');
      SQL.Add(
        'Pulse_Rep_Freq,Pulse_Width,Radar_Power,Detection_Range,Known_Cross_Section,');
      SQL.Add(
        'Max_Unambig_Detect_Range,IFF_Capability,Altitude_Data_Capability,Ground_Speed_Data_Capability,');
      SQL.Add(
        'Heading_Data_Capability,Plat_Type_Recog_Capability,Plat_Class_Recog_Capability,Clutter_Rejection,');
      SQL.Add(
        'Anti_Jamming_Capable,Curve_Definition_Index,Second_Vert_Coverage,Jamming_A_Resistant,');
      SQL.Add(
        'Jamming_B_Resistant,Jamming_C_Resistant,Anti_Jamming_A_Resistant,Anti_Jamming_B_Resistant,');
      SQL.Add(
        'Anti_Jamming_C_Resistant,Anti_Jamming_Range_Reduction,Beam_Width,Sector_Scan_Capable,');
      SQL.Add(
        'Off_Axis_Jammer_Reduction,Num_FCR_Channels,Radar_Spot_Number,Radar_Horizon_Factor,');
      SQL.Add(
        'Main_Lobe_Gain,Counter_Detection_Factor,ECCM_Type,MTI_Capable,MTI_MinTargetSpeed)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Radar_Identifier + ''',');
      SQL.Add('''' + Radar_Emitter + ''',');
      SQL.Add(IntToStr(Radar_Type) + ',');
      SQL.Add(FloatToStr(Frequency) + ',');
      SQL.Add(FloatToStr(Scan_Rate) + ',');
      SQL.Add(FloatToStr(Pulse_Rep_Freq) + ',');
      SQL.Add(FloatToStr(Pulse_Width) + ',');
      SQL.Add(FloatToStr(Radar_Power) + ',');
      SQL.Add(FloatToStr(Detection_Range) + ',');
      SQL.Add(FloatToStr(Known_Cross_Section) + ',');
      SQL.Add(FloatToStr(Max_Unambig_Detect_Range) + ',');
      SQL.Add(BoolToStr(IFF_Capability) + ',');
      SQL.Add(BoolToStr(Altitude_Data_Capability) + ',');
      SQL.Add(BoolToStr(Ground_Speed_Data_Capability) + ',');
      SQL.Add(BoolToStr(Heading_Data_Capability) + ',');
      SQL.Add(BoolToStr(Plat_Type_Recog_Capability) + ',');
      SQL.Add(BoolToStr(Plat_Class_Recog_Capability) + ',');
      SQL.Add(FloatToStr(Clutter_Rejection) + ',');
      SQL.Add(BoolToStr(Anti_Jamming_Capable) + ',');
      SQL.Add(IntToStr(Curve_Definition_Index) + ',');
      SQL.Add(BoolToStr(Second_Vert_Coverage) + ',');
      SQL.Add(BoolToStr(Jamming_A_Resistant) + ',');
      SQL.Add(BoolToStr(Jamming_B_Resistant) + ',');
      SQL.Add(BoolToStr(Jamming_C_Resistant) + ',');
      SQL.Add(BoolToStr(Anti_Jamming_A_Resistant) + ',');
      SQL.Add(BoolToStr(Anti_Jamming_B_Resistant) + ',');
      SQL.Add(BoolToStr(Anti_Jamming_C_Resistant) + ',');
      SQL.Add(FloatToStr(Anti_Jamming_Range_Reduction) + ',');
      SQL.Add(FloatToStr(Beam_Width) + ',');
      SQL.Add(BoolToStr(Sector_Scan_Capable) + ',');
      SQL.Add(FloatToStr(Off_Axis_Jammer_Reduction) + ',');
      SQL.Add(IntToStr(Num_FCR_Channels) + ',');
      SQL.Add(IntToStr(Radar_Spot_Number) + ',');
      SQL.Add(FloatToStr(Radar_Horizon_Factor) + ',');
      SQL.Add(FloatToStr(Main_Lobe_Gain) + ',');
      SQL.Add(FloatToStr(Counter_Detection_Factor) + ',');
      SQL.Add(IntToStr(ECCM_Type) + ',');
      SQL.Add(BoolToStr(MTI_Capable) + ',');
      SQL.Add(FloatToStr(MTI_MinTargetSpeed) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Radar_Index FROM Radar_Definition ');
      SQL.Add('WHERE Radar_Identifier =' + quotedStr(Radar_Identifier));
      Open;
      with rec.FDef do
      begin
        Radar_Index := FieldByName('Radar_Index').AsInteger;
      end;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertRainfall_On_ESM(rec: TRainfall_On_ESM): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Rainfall_On_ESM] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Rainfall_On_ESM');
      SQL.Add('(Radar_Frequency,Rain_0_Effect,Rain_1_Effect,Rain_2_Effect');
      SQL.Add('Rain_3_Effect,Rain_4_Effect,Rain_5_Effect,Rain_6_Effect)');
      SQL.Add(' VALUES (');
      SQL.Add(FloatToStr(Radar_Frequency) + ',');
      SQL.Add(FloatToStr(Rain_0_Effect) + ',');
      SQL.Add(FloatToStr(Rain_1_Effect) + ',');
      SQL.Add(FloatToStr(Rain_2_Effect) + ',');
      SQL.Add(FloatToStr(Rain_3_Effect) + ',');
      SQL.Add(FloatToStr(Rain_4_Effect) + ',');
      SQL.Add(FloatToStr(Rain_5_Effect) + ',');
      SQL.Add(FloatToStr(Rain_6_Effect) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertRainfall_On_Radar(rec: TRainfall_On_Radar): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Rainfall_On_Radar] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Rainfall_On_Radar ');
      SQL.Add('(Radar_Frequency,Rain_0_Effect,Rain_1_Effect,Rain_2_Effect');
      SQL.Add('Rain_3_Effect,Rain_4_Effect,Rain_5_Effect,Rain_6_Effect)');
      SQL.Add(' VALUES (');
      SQL.Add(FloatToStr(Radar_Frequency) + ',');
      SQL.Add(FloatToStr(Rain_0_Effect) + ',');
      SQL.Add(FloatToStr(Rain_1_Effect) + ',');
      SQL.Add(FloatToStr(Rain_2_Effect) + ',');
      SQL.Add(FloatToStr(Rain_3_Effect) + ',');
      SQL.Add(FloatToStr(Rain_4_Effect) + ',');
      SQL.Add(FloatToStr(Rain_5_Effect) + ',');
      SQL.Add(FloatToStr(Rain_6_Effect) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetRadar_Interval_Def(const id: Integer; var pList: TList;
  var rec: TRadar_Interval_Definition): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Radar_Interval_Definition ';

    if id <> 0 then
      ssql := ssql + 'WHERE (Interval_List_Index = ' + IntToStr(id) + ')';

    ssql := ssql + 'ORDER BY Priority ';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRadar_Interval_Definition.Create;
        with rec.FData do
        begin
          Interval_List_Index  := FieldByName('Interval_List_Index').AsInteger;
          Priority             := FieldByName('Priority').AsInteger;
          Radar_State          := FieldByName('Radar_State').AsInteger;
          Num_Scans            := FieldByName('Num_Scans').AsInteger;
          Radar_Off_Time       := FieldByName('Radar_Off_Time').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ---------------------------------------------------------------------------

function TdmTTT.updateRadar_Interval_Def(rec: TRadar_Interval_Definition;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Radar_Interval_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Priority = ' + IntToStr(Priority) + ',');
      SQL.Add('Radar_State = ' + IntToStr(Radar_State) + ',');
      SQL.Add('Num_Scans = ' + IntToStr(Num_Scans) + ',');
      SQL.Add('Radar_Off_Time = ' + IntToStr(Radar_Off_Time));
    end;
    SQL.Add('WHERE (Interval_List_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertRadar_Interval_Def(rec: TRadar_Interval_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
//      SQL.Add(
//        'SET IDENTITY_INSERT Runtime_DB.[dbo].[Radar_Interval_Definition] ON;');
//      ExecSQL;
//      SQL.Clear;
      SQL.Add('INSERT INTO Radar_Interval_Definition ');
      SQL.Add(
        '(Interval_List_Index,Priority,Radar_State,Num_Scans,Radar_Off_Time)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Interval_List_Index) + ',');
      SQL.Add(IntToStr(Priority) + ',');
      SQL.Add(IntToStr(Radar_State) + ',');
      SQL.Add(IntToStr(Num_Scans) + ',');
      SQL.Add(IntToStr(Radar_Off_Time) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteRadar_Interval_Def(const id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Radar_Interval_Definition  ');
    SQL.Add('WHERE (Interval_List_Index = ' + IntToStr(id) + ')');
    ExecSQL;
  end;
end;

// ----------------------------------------------------------------------------

function TdmTTT.getAllSonar_On_Board(const id, index: Integer;
  var aRec: TList): Integer;
var
  i, J, k, b_num: Integer;
  rec: TSonar_On_Board;
  sonarScript: TScripted_Sonar;
  sonarPattern: TPattern_Sonar;
  Sonar_Blind: TBlind_Zone;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Sonar_On_Board a JOIN Sonar_Definition b ';
    ssql := ssql +
      'ON a.Sonar_Index = b.Sonar_Index INNER JOIN Sonar_Category c ';
    ssql := ssql +
      'ON b.Sonar_Category_Index = c.Sonar_Category_Index LEFT JOIN Note_Storage d ';
    ssql := ssql +
      'ON d.Sonar_Index = b.Sonar_Index LEFT JOIN Vehicle_Definition e ';
    ssql := ssql + 'ON a.Vehicle_Index = e.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak sama dg 0
      if id <> 0 then
      begin
        ssql := ssql + ' WHERE (a.Vehicle_Index = ' + IntToStr(id) + ')';
      end
      else
        ssql := ssql + ' ORDER BY a.Sonar_Index ASC';
    end
    else
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 AND a.Sonar_Index =' + IntToStr
        (index);

    SQL.Add(ssql);
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TSonar_On_Board.Create;

        with rec.FData do
        begin
          Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Time_2_Deploy := FieldByName('Time_2_Deploy').AsInteger;
          Time_2_Stow := FieldByName('Time_2_Stow').AsInteger;
        end;

        with rec.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
          Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
          Sonar_Classification := FieldByName('Sonar_Classification').AsInteger;
          Passive_Int_Period := FieldByName('Passive_Int_Period').AsInteger;
          Active_Int_Period := FieldByName('Active_Int_Period').AsInteger;
          TIOW_Short_Range := FieldByName('TIOW_Short_Range').AsSingle;
          TIOW_Medium_Range := FieldByName('TIOW_Medium_Range').AsSingle;
          TIOW_Long_Range := FieldByName('TIOW_Long_Range').AsSingle;
          Passive_Detect_Range := FieldByName('Passive_Detect_Range').AsSingle;
          Active_Detect_Range := FieldByName('Active_Detect_Range').AsSingle;
          Max_Detect_Range := FieldByName('Max_Detect_Range').AsSingle;
          Known_Signal_Source := FieldByName('Known_Signal_Source').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Sonar_Directivity_Index := FieldByName('Sonar_Directivity_Index')
            .AsSingle;
          Active_Operating_Power := FieldByName('Active_Operating_Power')
            .AsSingle;
          Active_Freq_of_Op := FieldByName('Active_Freq_of_Op').AsSingle;
          Passive_Freq_of_Op := FieldByName('Passive_Freq_of_Op').AsSingle;
          Max_Operating_Depth := FieldByName('Max_Operating_Depth').AsSingle;
          Sonar_Depth_Rate_of_Change := FieldByName
            ('Sonar_Depth_Rate_of_Change').AsSingle;
          Depth_per_Speed := FieldByName('Depth_per_Speed').AsSingle;
          Kinking_Processing := FieldByName('Kinking_Processing').AsBoolean;
          Turn_Rate_2_Kink := FieldByName('Turn_Rate_2_Kink').AsSingle;
          Time_2_Settle_Kinked := FieldByName('Time_2_Settle_Kinked').AsInteger;
          Bearing_Processing := FieldByName('Bearing_Processing').AsBoolean;
          Time_2_Resolve_Bearing := FieldByName('Time_2_Resolve_Bearing')
            .AsInteger;
          Passive_Processing := FieldByName('Passive_Processing').AsBoolean;
          Target_Identification := FieldByName('Target_Identification')
            .AsBoolean;
          Time_2_Identify := FieldByName('Time_2_Identify').AsInteger;
          Curve_Detection_Index := FieldByName('Curve_Detection_Index')
            .AsInteger;
          Track_Analysis := FieldByName('Track_Analysis').AsInteger;
          Time_2_Provide_Track := FieldByName('Time_2_Provide_Track').AsInteger;
          Ownship_Increase_due_to_Active := FieldByName
            ('Ownship_Increase_due_to_Active').AsSingle;
          Tow_Speed := FieldByName('Tow_Speed').AsSingle;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Maximum_Tow_Speed := FieldByName('Maximum_Tow_Speed').AsSingle;
          Maximum_Sonar_Speed := FieldByName('Maximum_Sonar_Speed').AsSingle;
          Depth_Finding_Capable := FieldByName('Depth_Finding_Capable')
            .AsBoolean;
          Tracking_Capable := FieldByName('Tracking_Capable').AsBoolean;
          Surface_Detection_Capable := FieldByName('Surface_Detection_Capable')
            .AsBoolean;
          SubSurface_Detection_Capable := FieldByName
            ('SubSurface_Detection_Capable').AsBoolean;
          Torpedo_Detection_Capable := FieldByName('Torpedo_Detection_Capable')
            .AsBoolean;
          Mine_Detection_Capable := FieldByName('Mine_Detection_Capable')
            .AsBoolean;
          Cable_Length := FieldByName('Cable_Length').AsSingle;
          Maximum_Reported_Bearing_Error := FieldByName
            ('Maximum_Reported_Bearing_Error').AsSingle;
          Average_Beam_Width := FieldByName('Average_Beam_Width').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
        end;

        with rec.FCategory do
        begin
          Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
          Sonar_Category_Name := FieldByName('Sonar_Category_Name').AsString;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Sonar_On_Board a JOIN Scripted_Sonar_Event b ');
        SQL.Add('ON a.Sonar_Index = b.Sonar_Index ');
        SQL.Add(' WHERE (a.Sonar_Index = ' + IntToStr(rec.FData.Sonar_Index)
            + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          sonarScript := TScripted_Sonar.Create;

          with sonarScript.Event.FData do
          begin
            Scripted_Event_Index := FieldByName('Scripted_Event_Index')
              .AsInteger;
            Sonar_Index := FieldByName('Sonar_Index').AsInteger;
            Sonar_Control := FieldByName('Sonar_Control').AsInteger;
          end;

          GetScripted_Behav(sonarScript.Event.FData.Scripted_Event_Index,
            sonarScript.Behav);

          rec.FScripted_sonar.Add(sonarScript);

          ZQ.Next;

        end;
      end;

      for J := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[J];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Sonar_On_Board a JOIN Pattern_Sonar_Event b ');
        SQL.Add('ON a.Sonar_Index = b.Sonar_Index ');
        SQL.Add('WHERE (a.Sonar_Index = ' + IntToStr(rec.FData.Sonar_Index)
            + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          sonarPattern := TPattern_Sonar.Create;

          with sonarPattern.Event.FData do
          begin
            Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
              .AsInteger;
            Sonar_Index := FieldByName('Sonar_Index').AsInteger;
            Sonar_Control := FieldByName('Sonar_Control').AsInteger;
          end;

          GetScripted_Pattern(sonarPattern.Event.FData.Scripted_Pattern_Index,
            sonarPattern.pattern);

          rec.FPattern_Sonar.Add(sonarPattern);

          ZQ.Next;

        end;
      end;

      for k := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[k];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Sonar_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.Sonar_Instance_Index = b.Sonar_Instance_Index ');
        SQL.Add('WHERE (a.Sonar_Instance_Index = ' + IntToStr
            (rec.FData.Sonar_Instance_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          Sonar_Blind := TBlind_Zone.Create;

          with rec.FBlind_Zone.FData do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
            Sonar_Instance_Index := FieldByName('Sonar_Instance_Index')
              .AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;
          end;

          rec.FBlind.Add(Sonar_Blind);

          //added by bebe
          b_num := FieldByName('BlindZone_Number').AsInteger;
          if b_num = 1 then
          begin
            with rec.FBZone_1 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end
          else if b_num = 2 then
          begin
            with rec.FBZone_2 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end;

          ZQ.Next;
        end;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateSonar(rec: TSonar_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Sonar_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Sonar_Instance_Index  =' + IntToStr(Sonar_Instance_Index) + ',');
      SQL.Add('Instance_Identifier=''' + Instance_Identifier + ''',');
      SQL.Add('Instance_Type  =' + IntToStr(Instance_Type) + ',');
      SQL.Add('Sonar_Index =' + IntToStr(Sonar_Index) + ',');
      SQL.Add('Minimum_Depth =' + FloatToStr(Minimum_Depth) + ',');
      SQL.Add('Time_2_Deploy  =' + IntToStr(Time_2_Deploy) + ',');
      SQL.Add('Time_2_Stow =' + IntToStr(Time_2_Stow));
    end;

    SQL.Add(' WHERE (Vehicle_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertSonar(rec: TSonar_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Sonar_On_Board ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Vehicle_Index,Sonar_Index,Minimum_Depth,Time_2_Deploy,Time_2_Stow)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Sonar_Index) + ',');
      SQL.Add(FloatToStr(Minimum_Depth) + ',');
      SQL.Add(IntToStr(Time_2_Deploy) + ',');
      SQL.Add(IntToStr(Time_2_Stow) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Sonar_On_Board ');
      SQL.Add('WHERE Instance_Identifier = ' + QuotedStr(Instance_Identifier) + ' ');
      SQL.Add('AND Sonar_Index = ' + IntToStr(Sonar_Index) + ' ');
      SQL.Add('AND Vehicle_Index = ' + IntToStr(Vehicle_Index));
      Open;

      Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

////====================================================
function TdmTTT.UpdateSonar_On_Board(const id: string;
  var rec: TSonar_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Sonar_On_Board  ');
      SQL.Add('SET ' );
      SQL.Add('Instance_Identifier = '+ QuotedStr(Instance_Identifier)+',');
      SQL.Add('Instance_Type = '+IntToStr(Instance_Type)+',');
      SQL.Add('Vehicle_Index = '+IntToStr(Vehicle_Index)+',');
      SQL.Add('Sonar_Index = '+IntToStr(Sonar_Index)+',');
      SQL.Add('Minimum_Depth = '+FloatToStr(Minimum_Depth)+',');
      SQL.Add('Time_2_Deploy = '+IntToStr(Time_2_Deploy)+',');
      SQL.Add('Time_2_Stow = '+IntToStr(Time_2_Stow)+' ');
    end;
    SQL.Add('WHERE (Sonar_Instance_Index = ' +  id + ')' );
    ExecSQL;
  end;
end;
//-------------------------------------------------------------------

function TdmTTT.DeleteSonar_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Sonar_On_Board  ');
    SQL.Add('WHERE (Sonar_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

function TdmTTT.getSonar_Def(const id: Integer; var aRec: TList;
  var rec: TSonar_On_Board): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Sonar_Definition ';
    ssql := ssql + 'a LEFT JOIN Note_Storage b ON a.Sonar_Index = b.Sonar_Index ';
    ssql := ssql + 'LEFT JOIN POD_vs_SNR_Curve_Definition c ';
    ssql := ssql + 'ON a.Curve_Detection_Index = c.Curve_Definition_Index ';


    if id <> 0 then
      ssql := ssql + 'WHERE a.Sonar_Index = ' + IntToStr(id);

    ssql := ssql + ' ORDER BY a.Sonar_Identifier ';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TSonar_On_Board.Create;

        with rec.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
          Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
          Sonar_Classification := FieldByName('Sonar_Classification').AsInteger;
          Passive_Int_Period := FieldByName('Passive_Int_Period').AsInteger;
          Active_Int_Period := FieldByName('Active_Int_Period').AsInteger;
          TIOW_Short_Range := FieldByName('TIOW_Short_Range').AsSingle;
          TIOW_Medium_Range := FieldByName('TIOW_Medium_Range').AsSingle;
          TIOW_Long_Range := FieldByName('TIOW_Long_Range').AsSingle;
          Passive_Detect_Range := FieldByName('Passive_Detect_Range').AsSingle;
          Active_Detect_Range := FieldByName('Active_Detect_Range').AsSingle;
          Max_Detect_Range := FieldByName('Max_Detect_Range').AsSingle;
          Known_Signal_Source := FieldByName('Known_Signal_Source').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Sonar_Directivity_Index := FieldByName('Sonar_Directivity_Index')
            .AsSingle;
          Active_Operating_Power := FieldByName('Active_Operating_Power')
            .AsSingle;
          Active_Freq_of_Op := FieldByName('Active_Freq_of_Op').AsSingle;
          Passive_Freq_of_Op := FieldByName('Passive_Freq_of_Op').AsSingle;
          Max_Operating_Depth := FieldByName('Max_Operating_Depth').AsSingle;
          Sonar_Depth_Rate_of_Change := FieldByName
            ('Sonar_Depth_Rate_of_Change').AsSingle;
          Depth_per_Speed := FieldByName('Depth_per_Speed').AsSingle;
          Kinking_Processing := FieldByName('Kinking_Processing').AsBoolean;
          Turn_Rate_2_Kink := FieldByName('Turn_Rate_2_Kink').AsSingle;
          Time_2_Settle_Kinked := FieldByName('Time_2_Settle_Kinked').AsInteger;
          Bearing_Processing := FieldByName('Bearing_Processing').AsBoolean;
          Time_2_Resolve_Bearing := FieldByName('Time_2_Resolve_Bearing')
            .AsInteger;
          Passive_Processing := FieldByName('Passive_Processing').AsBoolean;
          Target_Identification := FieldByName('Target_Identification')
            .AsBoolean;
          Time_2_Identify := FieldByName('Time_2_Identify').AsInteger;
          Curve_Detection_Index := FieldByName('Curve_Detection_Index')
            .AsInteger;
          Track_Analysis := FieldByName('Track_Analysis').AsInteger;
          Time_2_Provide_Track := FieldByName('Time_2_Provide_Track').AsInteger;
          Ownship_Increase_due_to_Active := FieldByName
            ('Ownship_Increase_due_to_Active').AsSingle;
          Tow_Speed := FieldByName('Tow_Speed').AsSingle;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Maximum_Tow_Speed := FieldByName('Maximum_Tow_Speed').AsSingle;
          Maximum_Sonar_Speed := FieldByName('Maximum_Sonar_Speed').AsSingle;
          Depth_Finding_Capable := FieldByName('Depth_Finding_Capable')
            .AsBoolean;
          Tracking_Capable := FieldByName('Tracking_Capable').AsBoolean;
          Surface_Detection_Capable := FieldByName('Surface_Detection_Capable')
            .AsBoolean;
          SubSurface_Detection_Capable := FieldByName
            ('SubSurface_Detection_Capable').AsBoolean;
          Torpedo_Detection_Capable := FieldByName('Torpedo_Detection_Capable')
            .AsBoolean;
          Mine_Detection_Capable := FieldByName('Mine_Detection_Capable')
            .AsBoolean;
          Cable_Length := FieldByName('Cable_Length').AsSingle;
          Maximum_Reported_Bearing_Error := FieldByName
            ('Maximum_Reported_Bearing_Error').AsSingle;
          Average_Beam_Width := FieldByName('Average_Beam_Width').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        with rec.FPOD do
        begin
          Curve_Definition_Index       := FieldByName('Curve_Definition_Index').AsInteger;
          Curve_Definition_Identifier  := FieldByName('Curve_Definition_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// -------------------------------------------------------------------

function TdmTTT.getAllSonar_Def(var aRec: TList): boolean;
var
  ssql: string;
  rec: TSonar_On_Board;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Sonar_Definition ';
    ssql := ssql + 'a LEFT JOIN Note_Storage b ON a.Sonar_Index = b.Sonar_Index ';
    ssql := ssql + 'LEFT JOIN POD_vs_SNR_Curve_Definition c ';
    ssql := ssql + 'ON a.Curve_Detection_Index = c.Curve_Definition_Index ';
    ssql := ssql + ' ORDER BY a.Sonar_Identifier ';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TSonar_On_Board.Create;

        with rec.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
          Sonar_Category_Index := FieldByName('Sonar_Category_Index').AsInteger;
          Sonar_Classification := FieldByName('Sonar_Classification').AsInteger;
          Passive_Int_Period := FieldByName('Passive_Int_Period').AsInteger;
          Active_Int_Period := FieldByName('Active_Int_Period').AsInteger;
          TIOW_Short_Range := FieldByName('TIOW_Short_Range').AsSingle;
          TIOW_Medium_Range := FieldByName('TIOW_Medium_Range').AsSingle;
          TIOW_Long_Range := FieldByName('TIOW_Long_Range').AsSingle;
          Passive_Detect_Range := FieldByName('Passive_Detect_Range').AsSingle;
          Active_Detect_Range := FieldByName('Active_Detect_Range').AsSingle;
          Max_Detect_Range := FieldByName('Max_Detect_Range').AsSingle;
          Known_Signal_Source := FieldByName('Known_Signal_Source').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Sonar_Directivity_Index := FieldByName('Sonar_Directivity_Index')
            .AsSingle;
          Active_Operating_Power := FieldByName('Active_Operating_Power')
            .AsSingle;
          Active_Freq_of_Op := FieldByName('Active_Freq_of_Op').AsSingle;
          Passive_Freq_of_Op := FieldByName('Passive_Freq_of_Op').AsSingle;
          Max_Operating_Depth := FieldByName('Max_Operating_Depth').AsSingle;
          Sonar_Depth_Rate_of_Change := FieldByName
            ('Sonar_Depth_Rate_of_Change').AsSingle;
          Depth_per_Speed := FieldByName('Depth_per_Speed').AsSingle;
          Kinking_Processing := FieldByName('Kinking_Processing').AsBoolean;
          Turn_Rate_2_Kink := FieldByName('Turn_Rate_2_Kink').AsSingle;
          Time_2_Settle_Kinked := FieldByName('Time_2_Settle_Kinked').AsInteger;
          Bearing_Processing := FieldByName('Bearing_Processing').AsBoolean;
          Time_2_Resolve_Bearing := FieldByName('Time_2_Resolve_Bearing')
            .AsInteger;
          Passive_Processing := FieldByName('Passive_Processing').AsBoolean;
          Target_Identification := FieldByName('Target_Identification')
            .AsBoolean;
          Time_2_Identify := FieldByName('Time_2_Identify').AsInteger;
          Curve_Detection_Index := FieldByName('Curve_Detection_Index')
            .AsInteger;
          Track_Analysis := FieldByName('Track_Analysis').AsInteger;
          Time_2_Provide_Track := FieldByName('Time_2_Provide_Track').AsInteger;
          Ownship_Increase_due_to_Active := FieldByName
            ('Ownship_Increase_due_to_Active').AsSingle;
          Tow_Speed := FieldByName('Tow_Speed').AsSingle;
          Minimum_Depth := FieldByName('Minimum_Depth').AsSingle;
          Maximum_Tow_Speed := FieldByName('Maximum_Tow_Speed').AsSingle;
          Maximum_Sonar_Speed := FieldByName('Maximum_Sonar_Speed').AsSingle;
          Depth_Finding_Capable := FieldByName('Depth_Finding_Capable')
            .AsBoolean;
          Tracking_Capable := FieldByName('Tracking_Capable').AsBoolean;
          Surface_Detection_Capable := FieldByName('Surface_Detection_Capable')
            .AsBoolean;
          SubSurface_Detection_Capable := FieldByName
            ('SubSurface_Detection_Capable').AsBoolean;
          Torpedo_Detection_Capable := FieldByName('Torpedo_Detection_Capable')
            .AsBoolean;
          Mine_Detection_Capable := FieldByName('Mine_Detection_Capable')
            .AsBoolean;
          Cable_Length := FieldByName('Cable_Length').AsSingle;
          Maximum_Reported_Bearing_Error := FieldByName
            ('Maximum_Reported_Bearing_Error').AsSingle;
          Average_Beam_Width := FieldByName('Average_Beam_Width').AsSingle;
          Counter_Detection_Factor := FieldByName('Counter_Detection_Factor')
            .AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        with rec.FPOD do
        begin
          Curve_Definition_Index       := FieldByName('Curve_Definition_Index').AsInteger;
          Curve_Definition_Identifier  := FieldByName('Curve_Definition_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateSonar_Def(rec: TSonar_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Sonar_Definition ');
      SQL.Add('SET ');
      SQL.Add('Sonar_Identifier =''' + Sonar_Identifier + ''',');
      SQL.Add('Sonar_Category_Index  =' + IntToStr(Sonar_Category_Index) + ',');
      SQL.Add('Sonar_Classification =' + IntToStr(Sonar_Classification) + ',');
      SQL.Add('Passive_Int_Period =' + IntToStr(Passive_Int_Period) + ',');
      SQL.Add('Active_Int_Period  =' + IntToStr(Active_Int_Period) + ',');
      SQL.Add('TIOW_Short_Range =' + FloatToStr(TIOW_Short_Range) + ',');
      SQL.Add('TIOW_Medium_Range  =' + FloatToStr(TIOW_Medium_Range) + ',');
      SQL.Add('TIOW_Long_Range =' + FloatToStr(TIOW_Long_Range) + ',');
      SQL.Add('Passive_Detect_Range =' + FloatToStr(Passive_Detect_Range)
          + ',');
      SQL.Add('Active_Detect_Range  =' + FloatToStr(Active_Detect_Range) + ',');
      SQL.Add('Max_Detect_Range =' + FloatToStr(Max_Detect_Range) + ',');
      SQL.Add('Known_Signal_Source =' + FloatToStr(Known_Signal_Source) + ',');
      SQL.Add('Known_Cross_Section  =' + FloatToStr(Known_Cross_Section) + ',');
      SQL.Add('Sonar_Directivity_Index =' + FloatToStr(Sonar_Directivity_Index)
          + ',');
      SQL.Add('Active_Operating_Power =' + FloatToStr(Active_Operating_Power)
          + ',');
      SQL.Add('Active_Freq_of_Op  =' + FloatToStr(Active_Freq_of_Op) + ',');
      SQL.Add('Passive_Freq_of_Op =' + FloatToStr(Passive_Freq_of_Op) + ',');
      SQL.Add('Max_Operating_Depth =' + FloatToStr(Max_Operating_Depth) + ',');
      SQL.Add('Sonar_Depth_Rate_of_Change  =' + FloatToStr
          (Sonar_Depth_Rate_of_Change) + ',');
      SQL.Add('Depth_per_Speed =' + FloatToStr(Depth_per_Speed) + ',');
      SQL.Add('Kinking_Processing =' + BoolToStr(Kinking_Processing) + ',');
      SQL.Add('Turn_Rate_2_Kink  =' + FloatToStr(Turn_Rate_2_Kink) + ',');
      SQL.Add('Time_2_Settle_Kinked =' + IntToStr(Time_2_Settle_Kinked) + ',');
      SQL.Add('Bearing_Processing =' + BoolToStr(Bearing_Processing) + ',');
      SQL.Add('Time_2_Resolve_Bearing  =' + IntToStr(Time_2_Resolve_Bearing)
          + ',');
      SQL.Add('Passive_Processing =' + BoolToStr(Passive_Processing) + ',');
      SQL.Add('Target_Identification =' + BoolToStr(Target_Identification)
          + ',');
      SQL.Add('Time_2_Identify  =' + IntToStr(Time_2_Identify) + ',');
      SQL.Add('Curve_Detection_Index =' + IntToStr(Curve_Detection_Index)
          + ',');
      SQL.Add('Track_Analysis =' + IntToStr(Track_Analysis) + ',');
      SQL.Add('Time_2_Provide_Track  =' + IntToStr(Time_2_Provide_Track) + ',');
      SQL.Add('Ownship_Increase_due_to_Active =' + FloatToStr
          (Ownship_Increase_due_to_Active) + ',');
      SQL.Add('Tow_Speed =' + FloatToStr(Tow_Speed) + ',');
      SQL.Add('Minimum_Depth  =' + FloatToStr(Minimum_Depth) + ',');
      SQL.Add('Maximum_Tow_Speed =' + FloatToStr(Maximum_Tow_Speed) + ',');
      SQL.Add('Maximum_Sonar_Speed =' + FloatToStr(Maximum_Sonar_Speed) + ',');
      SQL.Add('Depth_Finding_Capable =' + BoolToStr(Depth_Finding_Capable)
          + ',');
      SQL.Add('Tracking_Capable  =' + BoolToStr(Tracking_Capable) + ',');
      SQL.Add('Surface_Detection_Capable =' + BoolToStr
          (Surface_Detection_Capable) + ',');
      SQL.Add('SubSurface_Detection_Capable =' + BoolToStr
          (SubSurface_Detection_Capable) + ',');
      SQL.Add('Torpedo_Detection_Capable  =' + BoolToStr
          (Torpedo_Detection_Capable) + ',');
      SQL.Add('Mine_Detection_Capable =' + BoolToStr(Mine_Detection_Capable)
          + ',');
      SQL.Add('Cable_Length =' + FloatToStr(Cable_Length) + ',');
      SQL.Add('Maximum_Reported_Bearing_Error  =' + FloatToStr
          (Maximum_Reported_Bearing_Error) + ',');
      SQL.Add('Average_Beam_Width =' + FloatToStr(Average_Beam_Width) + ',');
      SQL.Add('Counter_Detection_Factor =' + FloatToStr
          (Counter_Detection_Factor));

    end;
    SQL.Add(' WHERE (Sonar_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertSonar_Def(rec: TSonar_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Sonar_Definition ');
      SQL.Add(
        '(Sonar_Identifier,Sonar_Category_Index,Sonar_Classification,Passive_Int_Period,');
      SQL.Add(
        'Active_Int_Period,TIOW_Short_Range,TIOW_Medium_Range,TIOW_Long_Range,Passive_Detect_Range,');
      SQL.Add(
        'Active_Detect_Range,Max_Detect_Range,Known_Signal_Source,Known_Cross_Section,');
      SQL.Add(
        'Sonar_Directivity_Index,Active_Operating_Power,Active_Freq_of_Op,Passive_Freq_of_Op,');
      SQL.Add(
        'Max_Operating_Depth,Sonar_Depth_Rate_of_Change,Depth_per_Speed,Kinking_Processing,');
      SQL.Add(
        'Turn_Rate_2_Kink,Time_2_Settle_Kinked,Bearing_Processing,Time_2_Resolve_Bearing,');
      SQL.Add(
        'Passive_Processing,Target_Identification,Time_2_Identify,Curve_Detection_Index,');
      SQL.Add(
        'Track_Analysis,Time_2_Provide_Track,Ownship_Increase_due_to_Active,Tow_Speed,');
      SQL.Add(
        'Minimum_Depth,Maximum_Tow_Speed,Maximum_Sonar_Speed,Depth_Finding_Capable,Tracking_Capable,');
      SQL.Add(
        'Surface_Detection_Capable,SubSurface_Detection_Capable,Torpedo_Detection_Capable,');
      SQL.Add(
        'Mine_Detection_Capable,Cable_Length,Maximum_Reported_Bearing_Error,Average_Beam_Width,Counter_Detection_Factor)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Sonar_Identifier + ''',');
      SQL.Add(IntToStr(Sonar_Category_Index) + ',');
      SQL.Add(IntToStr(Sonar_Classification) + ',');
      SQL.Add(IntToStr(Passive_Int_Period) + ',');
      SQL.Add(IntToStr(Active_Int_Period) + ',');
      SQL.Add(FloatToStr(TIOW_Short_Range) + ',');
      SQL.Add(FloatToStr(TIOW_Medium_Range) + ',');
      SQL.Add(FloatToStr(TIOW_Long_Range) + ',');
      SQL.Add(FloatToStr(Passive_Detect_Range) + ',');
      SQL.Add(FloatToStr(Active_Detect_Range) + ',');
      SQL.Add(FloatToStr(Max_Detect_Range) + ',');
      SQL.Add(FloatToStr(Known_Signal_Source) + ',');
      SQL.Add(FloatToStr(Known_Cross_Section) + ',');
      SQL.Add(FloatToStr(Sonar_Directivity_Index) + ',');
      SQL.Add(FloatToStr(Active_Operating_Power) + ',');
      SQL.Add(FloatToStr(Active_Freq_of_Op) + ',');
      SQL.Add(FloatToStr(Passive_Freq_of_Op) + ',');
      SQL.Add(FloatToStr(Max_Operating_Depth) + ',');
      SQL.Add(FloatToStr(Sonar_Depth_Rate_of_Change) + ',');
      SQL.Add(FloatToStr(Depth_per_Speed) + ',');
      SQL.Add(BoolToStr(Kinking_Processing) + ',');
      SQL.Add(FloatToStr(Turn_Rate_2_Kink) + ',');
      SQL.Add(IntToStr(Time_2_Settle_Kinked) + ',');
      SQL.Add(BoolToStr(Bearing_Processing) + ',');
      SQL.Add(IntToStr(Time_2_Resolve_Bearing) + ',');
      SQL.Add(BoolToStr(Passive_Processing) + ',');
      SQL.Add(BoolToStr(Target_Identification) + ',');
      SQL.Add(IntToStr(Time_2_Identify) + ',');
      SQL.Add(IntToStr(Curve_Detection_Index) + ',');
      SQL.Add(IntToStr(Track_Analysis) + ',');
      SQL.Add(IntToStr(Time_2_Provide_Track) + ',');
      SQL.Add(FloatToStr(Ownship_Increase_due_to_Active) + ',');
      SQL.Add(FloatToStr(Tow_Speed) + ',');
      SQL.Add(FloatToStr(Minimum_Depth) + ',');
      SQL.Add(FloatToStr(Maximum_Tow_Speed) + ',');
      SQL.Add(FloatToStr(Maximum_Sonar_Speed) + ',');
      SQL.Add(BoolToStr(Depth_Finding_Capable) + ',');
      SQL.Add(BoolToStr(Tracking_Capable) + ',');
      SQL.Add(BoolToStr(Surface_Detection_Capable) + ',');
      SQL.Add(BoolToStr(SubSurface_Detection_Capable) + ',');
      SQL.Add(BoolToStr(Torpedo_Detection_Capable) + ',');
      SQL.Add(BoolToStr(Mine_Detection_Capable) + ',');
      SQL.Add(FloatToStr(Cable_Length) + ',');
      SQL.Add(FloatToStr(Maximum_Reported_Bearing_Error) + ',');
      SQL.Add(FloatToStr(Average_Beam_Width) + ',');
      SQL.Add(FloatToStr(Counter_Detection_Factor) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Sonar_Index FROM Sonar_Definition ');
      SQL.Add('WHERE Sonar_Identifier =' + quotedStr(Sonar_Identifier));
      Open;
      with rec.FDef do
      begin
        Sonar_Index := FieldByName('Sonar_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteSonar_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(9,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Sonar_Definition ');
    SQL.Add('WHERE Sonar_Index =' + IntToStr(id));
    ExecSQL;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.updateScriptSonar(rec: TScripted_Sonar_Event;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Scripted_Sonar_Event ');
      SQL.Add('SET ');
      SQL.Add('Sonar_Index =' + IntToStr(Sonar_Index) + ',');
      SQL.Add('Sonar_Control=' + IntToStr(Sonar_Control));
    end;

    SQL.Add(' WHERE (Scripted_Event_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllSonarCategory(var cList: TList): Integer;
var
  cat: array of string;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sonar_Category ');
    SQL.Add('ORDER BY Sonar_Category_Name');
    Open;

    if not IsEmpty then
    begin
      First;
      if not Assigned(cList) then
        cList := TList.Create
      else
        cList.Clear;

      while not ZQ.Eof do
      begin
        cat[0] := FieldByName('Sonar_Category_Index').AsString;
        cat[1] := FieldByName('Sonar_Category_Name').AsString;
        cList.Add(cat);
        ZQ.Next;
      end;

    end;
  end;

end;

// ==Vehicle detail 2. Weapon ===================================================
// ------------------------------------------------------------------------------
function TdmTTT.getAllMissile_OnBoard(const id, index: Integer;
  var aRec: TList): Integer;
var
  i, J, k: Integer;
  rec: TMissile_On_Board;
  weaponScript: TScripted_Weapon;
  weaponPattern: TPattern_Weapon;
  missile_Blind: TBlind_Zone;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql +
      'FROM  Fitted_Weapon_On_Board a INNER JOIN Missile_Definition b ';
    ssql := ssql +
      'ON a.Missile_Index = b.Missile_Index INNER JOIN Fitted_Weap_Launcher_On_Board c';
    ssql := ssql +
      ' ON a.Fitted_Weap_Index = c.Fitted_Weap_Index LEFT JOIN Note_Storage d';
    ssql := ssql +
      ' ON d.Missile_Index = b.Missile_Index LEFT JOIN Vehicle_Definition e ';
    ssql := ssql + 'ON a.Vehicle_Index = e.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak 0
      if id <> 0 then
        ssql := ssql + ' WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
    end
    else
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 AND a.Missile_Index =' +
        IntToStr(index);

    SQL.Add(ssql);
    SQL.Add(' ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TMissile_On_Board.Create;

        with rec.FData do
        begin
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Launch_Angle := FieldByName('Launch_Angle').AsSingle;
          Launch_Angle_Required := FieldByName('Launch_Angle_Required')
            .AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Firing_Delay := FieldByName('Firing_Delay').AsSingle;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        end;

        with rec.FDef do
        begin
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Second_Seeker_Pattern_Capable := FieldByName
            ('Second_Seeker_Pattern_Capable').AsInteger;
          Seeker_Bias_Capable := FieldByName('Seeker_Bias_Capable').AsInteger;
          Fixed_Seeker_Turn_On_Range := FieldByName
            ('Fixed_Seeker_Turn_On_Range')
            .AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Altitude := FieldByName('Default_Altitude').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          Pursuit_Guide_Type := FieldByName('Pursuit_Guide_Type').AsInteger;
          Primary_Guide_Type := FieldByName('Primary_Guide_Type').AsInteger;
          Secondary_Guide_Type := FieldByName('Secondary_Guide_Type').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Transmitted_Frequency := FieldByName('Transmitted_Frequency').AsFloat;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Xmit_Power := FieldByName('Xmit_Power').AsSingle;
          TARH_Jamming_A_Probability := FieldByName
            ('TARH_Jamming_A_Probability').AsSingle;
          TARH_Jamming_B_Probability := FieldByName
            ('TARH_Jamming_B_Probability').AsSingle;
          TARH_Jamming_C_Probability := FieldByName
            ('TARH_Jamming_C_Probability').AsSingle;
          Wpt_Capable := FieldByName('Wpt_Capable').AsInteger;
          Max_Num_Wpts := FieldByName('Max_Num_Wpts').AsInteger;
          Min_Final_Leg_Length := FieldByName('Min_Final_Leg_Length').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Max_Firing_Depth := FieldByName('Max_Firing_Depth').AsSingle;
          Upper_Received_Freq := FieldByName('Upper_Received_Freq').AsFloat;
          Lower_Received_Freq := FieldByName('Lower_Received_Freq').AsFloat;
          Fly_Out_Required := FieldByName('Fly_Out_Required').AsInteger;
          Fly_Out_Range := FieldByName('Fly_Out_Range').AsSingle;
          Fly_Out_Altitude := FieldByName('Fly_Out_Altitude').AsSingle;
          Booster_Separation_Required := FieldByName
            ('Booster_Separation_Required').AsInteger;
          Booster_Separation_Range := FieldByName('Booster_Separation_Range')
            .AsSingle;
          Booster_Separation_Box_Width := FieldByName
            ('Booster_Separation_Box_Width').AsSingle;
          Booster_Separation_Box_Length := FieldByName
            ('Booster_Separation_Box_Length').AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Terminal_Guidance_Capability := FieldByName
            ('Terminal_Guidance_Capability').AsInteger;
          Terminal_Altitude_Required := FieldByName
            ('Terminal_Altitude_Required')
            .AsInteger;
          Terminal_Acquisition_Altitude := FieldByName
            ('Terminal_Acquisition_Altitude').AsSingle;
          Terminal_Sinuation_Start_Range := FieldByName
            ('Terminal_Sinuation_Start_Range').AsSingle;
          Terminal_Sinuation_Period := FieldByName('Terminal_Sinuation_Period')
            .AsSingle;
          Terminal_Sinuation_Amplitude := FieldByName
            ('Terminal_Sinuation_Amplitude').AsSingle;
          Terminal_Pop_Up_Range := FieldByName('Terminal_Pop_Up_Range')
            .AsSingle;
          Terminal_Pop_Up_Altitude := FieldByName('Terminal_Pop_Up_Altitude')
            .AsSingle;
          Mid_Course_Update_Mode := FieldByName('Mid_Course_Update_Mode')
            .AsInteger;
          Home_On_Jam_Type_A_Capable := FieldByName
            ('Home_On_Jam_Type_A_Capable')
            .AsInteger;
          Home_On_Jam_Type_B_Capable := FieldByName
            ('Home_On_Jam_Type_B_Capable')
            .AsInteger;
          Home_On_Jam_Type_C_Capable := FieldByName
            ('Home_On_Jam_Type_C_Capable')
            .AsInteger;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Term_Guide_Azimuth_Narrow := FieldByName('Term_Guide_Azimuth_Narrow')
            .AsSingle;
          Term_Guide_Elevation_Narrow := FieldByName
            ('Term_Guide_Elevation_Narrow').AsSingle;
          Term_Guide_Range_Narrow := FieldByName('Term_Guide_Range_Narrow')
            .AsSingle;
          Spot_Number := FieldByName('Spot_Number').AsInteger;
          ECCM_Type := FieldByName('ECCM_Type').AsInteger;
          ECM_Detonation := FieldByName('ECM_Detonation').AsInteger;
          ECM_Detection := FieldByName('ECM_Detection').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          IRCM_Detonation := FieldByName('IRCM_Detonation').AsInteger;
          IRCM_Detection := FieldByName('IRCM_Detection').AsInteger;
          Sea_State_Modelling_Capable := FieldByName
            ('Sea_State_Modelling_Capable').AsInteger;
        end;

        with rec.FLaunch.FData do
        begin
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Launcher_Type := FieldByName('Launcher_Type').AsInteger;
          Launcher_Angle_Required := FieldByName('Launcher_Angle_Required')
            .AsInteger;
          Launcher_Angle := FieldByName('Launcher_Angle').AsInteger;
          Launcher_Max_Qty := FieldByName('Launcher_Max_Qty').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Scripted_Weapon_Event b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Weapons_Mount ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          weaponScript := TScripted_Weapon.Create;

          with weaponScript.Event.FData do
          begin
            List_Index := FieldByName('List_Index').AsInteger;
            Scripted_Event_Index := FieldByName('Scripted_Event_Index')
              .AsInteger;
            Salvo_Size := FieldByName('Salvo_Size').AsInteger;
            Number_Layed := FieldByName('Number_Layed').AsInteger;
            Distance_Between := FieldByName('Distance_Between').AsSingle;
            Mine_Depth := FieldByName('Mine_Depth').AsSingle;
            Target_Index := FieldByName('Target_Index').AsInteger;
            Weapon_Type := FieldByName('Weapon_Type').AsInteger;
            Point_Effect := FieldByName('Point_Effect').AsInteger;
            Weapons_Mount := FieldByName('Weapons_Mount').AsInteger;
          end;

          GetScripted_Behav(weaponScript.Event.FData.Scripted_Event_Index,
            weaponScript.Behav);

          rec.FScript_Missile.Add(weaponScript);

          ZQ.Next;

        end;
      end;

      for J := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[J];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Pattern_Weapon_Event b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Weapons_Mount ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          weaponPattern := TPattern_Weapon.Create;

          with weaponPattern.Event.FData do
          begin
            List_Index := FieldByName('List_Index').AsInteger;
            Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
              .AsInteger;
            Salvo_Size := FieldByName('Salvo_Size').AsInteger;
            Number_Layed := FieldByName('Number_Layed').AsInteger;
            Distance_Between := FieldByName('Distance_Between').AsSingle;
            Mine_Depth := FieldByName('Mine_Depth').AsSingle;
            Weapon_Type := FieldByName('Weapon_Type').AsInteger;
            Point_Effect := FieldByName('Point_Effect').AsInteger;
            Weapons_Mount := FieldByName('Weapons_Mount').AsInteger;

          end;

          GetScripted_Pattern(weaponPattern.Event.FData.Scripted_Pattern_Index,
            weaponPattern.pattern);

          rec.FPattern_Missile.Add(weaponPattern);

          ZQ.Next;

        end;
      end;

      for k := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[k];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Fitted_Weap_Index ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          missile_Blind := TBlind_Zone.Create;

          with missile_Blind.FData do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;
          end;

          rec.FBlind.Add(missile_Blind);
          ZQ.Next;
        end;
      end;

    end;
  end;
end;

function TdmTTT.getAllMissile_OnBoard2(const id, index: Integer;
  var aRec: TList): Integer;
var
  i, J, k, b_num: Integer;
  rec: TMissile_On_Board;
  weaponScript: TScripted_Weapon;
  weaponPattern: TPattern_Weapon;
  missile_Blind: TBlind_Zone;
  missile_launch: TFitted_Weap_Launcher_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql +
      'FROM  Fitted_Weapon_On_Board a INNER JOIN Missile_Definition b ';
    ssql := ssql +
      'ON a.Missile_Index = b.Missile_Index  LEFT JOIN Vehicle_Definition e ';
    ssql := ssql + 'ON a.Vehicle_Index = e.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak 0
      if id <> 0 then
        ssql := ssql + ' WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
    end
    else
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 AND a.Missile_Index =' +
        IntToStr(index);

    SQL.Add(ssql);
    SQL.Add(' ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TMissile_On_Board.Create;

        with rec.FData do
        begin
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Launch_Angle := FieldByName('Launch_Angle').AsSingle;
          Launch_Angle_Required := FieldByName('Launch_Angle_Required')
            .AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Firing_Delay := FieldByName('Firing_Delay').AsSingle;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        end;

        with rec.FDef do
        begin
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Second_Seeker_Pattern_Capable := FieldByName
            ('Second_Seeker_Pattern_Capable').AsInteger;
          Seeker_Bias_Capable := FieldByName('Seeker_Bias_Capable').AsInteger;
          Fixed_Seeker_Turn_On_Range := FieldByName
            ('Fixed_Seeker_Turn_On_Range')
            .AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Altitude := FieldByName('Default_Altitude').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          Pursuit_Guide_Type := FieldByName('Pursuit_Guide_Type').AsInteger;
          Primary_Guide_Type := FieldByName('Primary_Guide_Type').AsInteger;
          Secondary_Guide_Type := FieldByName('Secondary_Guide_Type').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Transmitted_Frequency := FieldByName('Transmitted_Frequency').AsFloat;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Xmit_Power := FieldByName('Xmit_Power').AsSingle;
          TARH_Jamming_A_Probability := FieldByName
            ('TARH_Jamming_A_Probability').AsSingle;
          TARH_Jamming_B_Probability := FieldByName
            ('TARH_Jamming_B_Probability').AsSingle;
          TARH_Jamming_C_Probability := FieldByName
            ('TARH_Jamming_C_Probability').AsSingle;
          Wpt_Capable := FieldByName('Wpt_Capable').AsInteger;
          Max_Num_Wpts := FieldByName('Max_Num_Wpts').AsInteger;
          Min_Final_Leg_Length := FieldByName('Min_Final_Leg_Length').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Max_Firing_Depth := FieldByName('Max_Firing_Depth').AsSingle;
          Upper_Received_Freq := FieldByName('Upper_Received_Freq').AsFloat;
          Lower_Received_Freq := FieldByName('Lower_Received_Freq').AsFloat;
          Fly_Out_Required := FieldByName('Fly_Out_Required').AsInteger;
          Fly_Out_Range := FieldByName('Fly_Out_Range').AsSingle;
          Fly_Out_Altitude := FieldByName('Fly_Out_Altitude').AsSingle;
          Booster_Separation_Required := FieldByName
            ('Booster_Separation_Required').AsInteger;
          Booster_Separation_Range := FieldByName('Booster_Separation_Range')
            .AsSingle;
          Booster_Separation_Box_Width := FieldByName
            ('Booster_Separation_Box_Width').AsSingle;
          Booster_Separation_Box_Length := FieldByName
            ('Booster_Separation_Box_Length').AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Terminal_Guidance_Capability := FieldByName
            ('Terminal_Guidance_Capability').AsInteger;
          Terminal_Altitude_Required := FieldByName
            ('Terminal_Altitude_Required')
            .AsInteger;
          Terminal_Acquisition_Altitude := FieldByName
            ('Terminal_Acquisition_Altitude').AsSingle;
          Terminal_Sinuation_Start_Range := FieldByName
            ('Terminal_Sinuation_Start_Range').AsSingle;
          Terminal_Sinuation_Period := FieldByName('Terminal_Sinuation_Period')
            .AsSingle;
          Terminal_Sinuation_Amplitude := FieldByName
            ('Terminal_Sinuation_Amplitude').AsSingle;
          Terminal_Pop_Up_Range := FieldByName('Terminal_Pop_Up_Range')
            .AsSingle;
          Terminal_Pop_Up_Altitude := FieldByName('Terminal_Pop_Up_Altitude')
            .AsSingle;
          Mid_Course_Update_Mode := FieldByName('Mid_Course_Update_Mode')
            .AsInteger;
          Home_On_Jam_Type_A_Capable := FieldByName
            ('Home_On_Jam_Type_A_Capable')
            .AsInteger;
          Home_On_Jam_Type_B_Capable := FieldByName
            ('Home_On_Jam_Type_B_Capable')
            .AsInteger;
          Home_On_Jam_Type_C_Capable := FieldByName
            ('Home_On_Jam_Type_C_Capable')
            .AsInteger;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Term_Guide_Azimuth_Narrow := FieldByName('Term_Guide_Azimuth_Narrow')
            .AsSingle;
          Term_Guide_Elevation_Narrow := FieldByName
            ('Term_Guide_Elevation_Narrow').AsSingle;
          Term_Guide_Range_Narrow := FieldByName('Term_Guide_Range_Narrow')
            .AsSingle;
          Spot_Number := FieldByName('Spot_Number').AsInteger;
          ECCM_Type := FieldByName('ECCM_Type').AsInteger;
          ECM_Detonation := FieldByName('ECM_Detonation').AsInteger;
          ECM_Detection := FieldByName('ECM_Detection').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          IRCM_Detonation := FieldByName('IRCM_Detonation').AsInteger;
          IRCM_Detection := FieldByName('IRCM_Detection').AsInteger;
          Sea_State_Modelling_Capable := FieldByName
            ('Sea_State_Modelling_Capable').AsInteger;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weap_Launcher_On_Board c');
        SQL.Add('WHERE (c.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;
        ZQ.First;

        while not ZQ.Eof do
        begin
          missile_launch := TFitted_Weap_Launcher_On_Board.Create;
          with missile_launch.FData do begin
            Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
            Launcher_Type := FieldByName('Launcher_Type').AsInteger;
            Launcher_Angle_Required := FieldByName('Launcher_Angle_Required')
              .AsInteger;
            Launcher_Angle := FieldByName('Launcher_Angle').AsInteger;
            Launcher_Max_Qty := FieldByName('Launcher_Max_Qty').AsInteger;
          end;
          rec.FLaunchs.Add(missile_launch);
          ZQ.Next;
        end;

        rec := aRec.Items[i];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Scripted_Weapon_Event b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Weapons_Mount ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          weaponScript := TScripted_Weapon.Create;

          with weaponScript.Event.FData do
          begin
            List_Index := FieldByName('List_Index').AsInteger;
            Scripted_Event_Index := FieldByName('Scripted_Event_Index')
              .AsInteger;
            Salvo_Size := FieldByName('Salvo_Size').AsInteger;
            Number_Layed := FieldByName('Number_Layed').AsInteger;
            Distance_Between := FieldByName('Distance_Between').AsSingle;
            Mine_Depth := FieldByName('Mine_Depth').AsSingle;
            Target_Index := FieldByName('Target_Index').AsInteger;
            Weapon_Type := FieldByName('Weapon_Type').AsInteger;
            Point_Effect := FieldByName('Point_Effect').AsInteger;
            Weapons_Mount := FieldByName('Weapons_Mount').AsInteger;
          end;

          GetScripted_Behav(weaponScript.Event.FData.Scripted_Event_Index,
            weaponScript.Behav);

          rec.FScript_Missile.Add(weaponScript);

          ZQ.Next;

        end;
      end;

      for J := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[J];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Pattern_Weapon_Event b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Weapons_Mount ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          weaponPattern := TPattern_Weapon.Create;

          with weaponPattern.Event.FData do
          begin
            List_Index := FieldByName('List_Index').AsInteger;
            Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
              .AsInteger;
            Salvo_Size := FieldByName('Salvo_Size').AsInteger;
            Number_Layed := FieldByName('Number_Layed').AsInteger;
            Distance_Between := FieldByName('Distance_Between').AsSingle;
            Mine_Depth := FieldByName('Mine_Depth').AsSingle;
            Weapon_Type := FieldByName('Weapon_Type').AsInteger;
            Point_Effect := FieldByName('Point_Effect').AsInteger;
            Weapons_Mount := FieldByName('Weapons_Mount').AsInteger;

          end;

          GetScripted_Pattern(weaponPattern.Event.FData.Scripted_Pattern_Index,
            weaponPattern.pattern);

          rec.FPattern_Missile.Add(weaponPattern);

          ZQ.Next;

        end;
      end;

      for k := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[k];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Fitted_Weap_Index ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          missile_Blind := TBlind_Zone.Create;

          with missile_Blind.FData do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;
          end;

          rec.FBlind.Add(missile_Blind);

          //added by bebe
          b_num := FieldByName('BlindZone_Number').AsInteger;
          if b_num = 1 then
          begin
            with rec.FBZone_1 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end
          else if b_num = 2 then
          begin
            with rec.FBZone_2 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end;

          ZQ.Next;

        end;

        {//added by bebe
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Fitted_Weap_Launcher_On_Board b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Fitted_Weap_Index ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          missile_launch := TFitted_Weap_Launcher_On_Board.Create;

          with missile_launch.FData do
          begin
            Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
            Launcher_Type := FieldByName('Launcher_Type').AsInteger;
            Launcher_Angle_Required := FieldByName('Launcher_Angle_Required')
              .AsInteger;
            Launcher_Angle := FieldByName('Launcher_Angle').AsInteger;
            Launcher_Max_Qty := FieldByName('Launcher_Max_Qty').AsInteger;
          end;

          rec.FLaunchs.Add(missile_launch);
          ZQ.Next;
        end;   }
      end;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getMissile_OnBoard_Distinct(const id: Integer; var aRec: TList):integer;
var

  rec: TMissile_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
//    ssql := 'SELECT DISTINCT b.Instance_Identifier, b.Fitted_Weap_Index, ';
//    ssql := ssql + 'b.Missile_Index,b.Torpedo_Index,b.Mine_Index,b.Vehicle_Index,';
//    ssql := ssql + 'b.Instance_Type,b.Mount_Type,b.Quantity,b.Firing_Delay ';
    ssql := ssql +
      'FROM Fitted_Weapon_On_Board a JOIN Missile_Definition b ';
    ssql := ssql +
      'ON a.Missile_Index = b.Missile_Index ';
    ssql := ssql + 'INNER JOIN Vehicle_Definition d ' ;
    ssql := ssql +
      ' ON d.Vehicle_Index = a.Vehicle_Index ';

    // jika id tidak 0
      if id <> 0 then
        ssql := ssql + ' WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
    ssql := ssql + ' ORDER BY a.Instance_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TMissile_On_Board.Create;

        with rec.FData do
        begin

          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Firing_Delay := FieldByName('Firing_Delay').AsSingle;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
        end;

        with rec.FDef do
        begin
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Second_Seeker_Pattern_Capable := FieldByName
            ('Second_Seeker_Pattern_Capable').AsInteger;
          Seeker_Bias_Capable := FieldByName('Seeker_Bias_Capable').AsInteger;
          Fixed_Seeker_Turn_On_Range := FieldByName
            ('Fixed_Seeker_Turn_On_Range')
            .AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Altitude := FieldByName('Default_Altitude').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          Pursuit_Guide_Type := FieldByName('Pursuit_Guide_Type').AsInteger;
          Primary_Guide_Type := FieldByName('Primary_Guide_Type').AsInteger;
          Secondary_Guide_Type := FieldByName('Secondary_Guide_Type').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Transmitted_Frequency := FieldByName('Transmitted_Frequency').AsFloat;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Xmit_Power := FieldByName('Xmit_Power').AsSingle;
          TARH_Jamming_A_Probability := FieldByName
            ('TARH_Jamming_A_Probability').AsSingle;
          TARH_Jamming_B_Probability := FieldByName
            ('TARH_Jamming_B_Probability').AsSingle;
          TARH_Jamming_C_Probability := FieldByName
            ('TARH_Jamming_C_Probability').AsSingle;
          Wpt_Capable := FieldByName('Wpt_Capable').AsInteger;
          Max_Num_Wpts := FieldByName('Max_Num_Wpts').AsInteger;
          Min_Final_Leg_Length := FieldByName('Min_Final_Leg_Length').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Max_Firing_Depth := FieldByName('Max_Firing_Depth').AsSingle;
          Upper_Received_Freq := FieldByName('Upper_Received_Freq').AsFloat;
          Lower_Received_Freq := FieldByName('Lower_Received_Freq').AsFloat;
          Fly_Out_Required := FieldByName('Fly_Out_Required').AsInteger;
          Fly_Out_Range := FieldByName('Fly_Out_Range').AsSingle;
          Fly_Out_Altitude := FieldByName('Fly_Out_Altitude').AsSingle;
          Booster_Separation_Required := FieldByName
            ('Booster_Separation_Required').AsInteger;
          Booster_Separation_Range := FieldByName('Booster_Separation_Range')
            .AsSingle;
          Booster_Separation_Box_Width := FieldByName
            ('Booster_Separation_Box_Width').AsSingle;
          Booster_Separation_Box_Length := FieldByName
            ('Booster_Separation_Box_Length').AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Terminal_Guidance_Capability := FieldByName
            ('Terminal_Guidance_Capability').AsInteger;
          Terminal_Altitude_Required := FieldByName
            ('Terminal_Altitude_Required')
            .AsInteger;
          Terminal_Acquisition_Altitude := FieldByName
            ('Terminal_Acquisition_Altitude').AsSingle;
          Terminal_Sinuation_Start_Range := FieldByName
            ('Terminal_Sinuation_Start_Range').AsSingle;
          Terminal_Sinuation_Period := FieldByName('Terminal_Sinuation_Period')
            .AsSingle;
          Terminal_Sinuation_Amplitude := FieldByName
            ('Terminal_Sinuation_Amplitude').AsSingle;
          Terminal_Pop_Up_Range := FieldByName('Terminal_Pop_Up_Range')
            .AsSingle;
          Terminal_Pop_Up_Altitude := FieldByName('Terminal_Pop_Up_Altitude')
            .AsSingle;
          Mid_Course_Update_Mode := FieldByName('Mid_Course_Update_Mode')
            .AsInteger;
          Home_On_Jam_Type_A_Capable := FieldByName
            ('Home_On_Jam_Type_A_Capable')
            .AsInteger;
          Home_On_Jam_Type_B_Capable := FieldByName
            ('Home_On_Jam_Type_B_Capable')
            .AsInteger;
          Home_On_Jam_Type_C_Capable := FieldByName
            ('Home_On_Jam_Type_C_Capable')
            .AsInteger;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Term_Guide_Azimuth_Narrow := FieldByName('Term_Guide_Azimuth_Narrow')
            .AsSingle;
          Term_Guide_Elevation_Narrow := FieldByName
            ('Term_Guide_Elevation_Narrow').AsSingle;
          Term_Guide_Range_Narrow := FieldByName('Term_Guide_Range_Narrow')
            .AsSingle;
          Spot_Number := FieldByName('Spot_Number').AsInteger;
          ECCM_Type := FieldByName('ECCM_Type').AsInteger;
          ECM_Detonation := FieldByName('ECM_Detonation').AsInteger;
          ECM_Detection := FieldByName('ECM_Detection').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          IRCM_Detonation := FieldByName('IRCM_Detonation').AsInteger;
          IRCM_Detection := FieldByName('IRCM_Detection').AsInteger;
          Sea_State_Modelling_Capable := FieldByName
            ('Sea_State_Modelling_Capable').AsInteger;
        end;

        aRec.Add(rec);
        Zq.Next;
      end;
    end;
  end;

end;


// ------------------------------------------------------------------------------

function TdmTTT.getAllMissile(const id: Integer; var mList: TList;
  var rec: TMissile_On_Board): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Missile_Definition ';
    ssql := ssql + 'a LEFT JOIN Note_Storage b ON a.Missile_Index = b.Missile_Index ';
    if id <> 0 then
      ssql := ssql + 'WHERE a.Missile_Index =' + IntToStr(id);

    SQL.Add(ssql);
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(mList) then
        mList := TList.Create
      else
        mList.Clear;

      while not ZQ.Eof do
      begin
        rec := TMissile_On_Board.Create;
        with rec.FDef do
        begin
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Second_Seeker_Pattern_Capable := FieldByName
            ('Second_Seeker_Pattern_Capable').AsInteger;
          Seeker_Bias_Capable := FieldByName('Seeker_Bias_Capable').AsInteger;
          Fixed_Seeker_Turn_On_Range := FieldByName
            ('Fixed_Seeker_Turn_On_Range')
            .AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Altitude := FieldByName('Default_Altitude').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          Pursuit_Guide_Type := FieldByName('Pursuit_Guide_Type').AsInteger;
          Primary_Guide_Type := FieldByName('Primary_Guide_Type').AsInteger;
          Secondary_Guide_Type := FieldByName('Secondary_Guide_Type').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Transmitted_Frequency := FieldByName('Transmitted_Frequency').AsFloat;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Xmit_Power := FieldByName('Xmit_Power').AsSingle;
          TARH_Jamming_A_Probability := FieldByName
            ('TARH_Jamming_A_Probability').AsSingle;
          TARH_Jamming_B_Probability := FieldByName
            ('TARH_Jamming_B_Probability').AsSingle;
          TARH_Jamming_C_Probability := FieldByName
            ('TARH_Jamming_C_Probability').AsSingle;
          Wpt_Capable := FieldByName('Wpt_Capable').AsInteger;
          Max_Num_Wpts := FieldByName('Max_Num_Wpts').AsInteger;
          Min_Final_Leg_Length := FieldByName('Min_Final_Leg_Length').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Max_Firing_Depth := FieldByName('Max_Firing_Depth').AsSingle;
          Upper_Received_Freq := FieldByName('Upper_Received_Freq').AsFloat;
          Lower_Received_Freq := FieldByName('Lower_Received_Freq').AsFloat;
          Fly_Out_Required := FieldByName('Fly_Out_Required').AsInteger;
          Fly_Out_Range := FieldByName('Fly_Out_Range').AsSingle;
          Fly_Out_Altitude := FieldByName('Fly_Out_Altitude').AsSingle;
          Booster_Separation_Required := FieldByName
            ('Booster_Separation_Required').AsInteger;
          Booster_Separation_Range := FieldByName('Booster_Separation_Range')
            .AsSingle;
          Booster_Separation_Box_Width := FieldByName
            ('Booster_Separation_Box_Width').AsSingle;
          Booster_Separation_Box_Length := FieldByName
            ('Booster_Separation_Box_Length').AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Terminal_Guidance_Capability := FieldByName
            ('Terminal_Guidance_Capability').AsInteger;
          Terminal_Altitude_Required := FieldByName
            ('Terminal_Altitude_Required')
            .AsInteger;
          Terminal_Acquisition_Altitude := FieldByName
            ('Terminal_Acquisition_Altitude').AsSingle;
          Terminal_Sinuation_Start_Range := FieldByName
            ('Terminal_Sinuation_Start_Range').AsSingle;
          Terminal_Sinuation_Period := FieldByName('Terminal_Sinuation_Period')
            .AsSingle;
          Terminal_Sinuation_Amplitude := FieldByName
            ('Terminal_Sinuation_Amplitude').AsSingle;
          Terminal_Pop_Up_Range := FieldByName('Terminal_Pop_Up_Range')
            .AsSingle;
          Terminal_Pop_Up_Altitude := FieldByName('Terminal_Pop_Up_Altitude')
            .AsSingle;
          Mid_Course_Update_Mode := FieldByName('Mid_Course_Update_Mode')
            .AsInteger;
          Home_On_Jam_Type_A_Capable := FieldByName
            ('Home_On_Jam_Type_A_Capable')
            .AsInteger;
          Home_On_Jam_Type_B_Capable := FieldByName
            ('Home_On_Jam_Type_B_Capable')
            .AsInteger;
          Home_On_Jam_Type_C_Capable := FieldByName
            ('Home_On_Jam_Type_C_Capable')
            .AsInteger;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Term_Guide_Azimuth_Narrow := FieldByName('Term_Guide_Azimuth_Narrow')
            .AsSingle;
          Term_Guide_Elevation_Narrow := FieldByName
            ('Term_Guide_Elevation_Narrow').AsSingle;
          Term_Guide_Range_Narrow := FieldByName('Term_Guide_Range_Narrow')
            .AsSingle;
          Spot_Number := FieldByName('Spot_Number').AsInteger;
          ECCM_Type := FieldByName('ECCM_Type').AsInteger;
          ECM_Detonation := FieldByName('ECM_Detonation').AsInteger;
          ECM_Detection := FieldByName('ECM_Detection').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          IRCM_Detonation := FieldByName('IRCM_Detonation').AsInteger;
          IRCM_Detection := FieldByName('IRCM_Detection').AsInteger;
          Sea_State_Modelling_Capable := FieldByName
            ('Sea_State_Modelling_Capable').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        mList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getPIMissile(var mList: TList; ra_id, force: Integer): Integer;
var
  rec: TMissile_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT a.*,b.* ');
    SQL.Add('FROM Platform_Instance a JOIN Missile_Definition b ');
    SQL.Add('ON a.Missile_Index = b.Missile_Index ');
    SQL.Add('WHERE a.Resource_Alloc_Index=' + IntToStr(ra_id) + ' AND ');
    SQL.Add('a.Force_Designation =' + IntToStr(force));
    SQL.Add(' UNION ALL ');
    SQL.Add('SELECT a.*,c.* ');
    SQL.Add('FROM Platform_Instance a JOIN Hybrid_Definition b ');
    SQL.Add('ON a.Hybrid_Index = b.Hybrid_Index ');
    SQL.Add('JOIN Missile_Definition c ');
    SQL.Add('ON b.Missile_Index = c.Missile_Index ');
    SQL.Add('WHERE a.Resource_Alloc_Index=' + IntToStr(ra_id) + ' AND ');
    SQL.Add('a.Force_Designation =' + IntToStr(force));
    SQL.Add('ORDER BY Instance_Name');

    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(mList) then
        mList := TList.Create
      else
        mList.Clear;

      while not ZQ.Eof do
      begin
        rec := TMissile_On_Board.Create;
        with rec.FDef do
        begin
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
        end;
        with rec.FPI.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index')
            .AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;
        mList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.updateMissile_Def(rec: TMissile_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Missile_Definition ');
      SQL.Add('SET ');
      SQL.Add('Class_Identifier = ''' + Class_Identifier + ''',');
      SQL.Add('Platform_Domain = ' + IntToStr(Platform_Domain) + ',');
      SQL.Add('Platform_Category = ' + IntToStr(Platform_Category) + ',');
      SQL.Add('Platform_Type = ' + IntToStr(Platform_Type) + ',');
      SQL.Add('Max_Range = ' + FloatToStr(Max_Range) + ',');
      SQL.Add('Min_Range = ' + FloatToStr(Min_Range) + ',');
      SQL.Add('Motion_Index = ' + IntToStr(Motion_Index) + ',');
      SQL.Add('Seeker_TurnOn_Range = ' + FloatToStr(Seeker_TurnOn_Range) + ',');
      SQL.Add('Second_Seeker_Pattern_Capable = ' + IntToStr
          (Second_Seeker_Pattern_Capable) + ',');
      SQL.Add('Seeker_Bias_Capable = ' + IntToStr(Seeker_Bias_Capable) + ',');
      SQL.Add('Fixed_Seeker_Turn_On_Range = ' + IntToStr
          (Fixed_Seeker_Turn_On_Range) + ',');
      SQL.Add('Lethality = ' + IntToStr(Lethality) + ',');
      SQL.Add('Prob_of_Hit = ' + FloatToStr(Prob_of_Hit) + ',');
      SQL.Add('Damage_Capacity = ' + IntToStr(Damage_Capacity) + ',');
      SQL.Add('Default_Altitude = ' + FloatToStr(Default_Altitude) + ',');
      SQL.Add('Length = ' + FloatToStr(Length) + ',');
      SQL.Add('Width = ' + FloatToStr(Width) + ',');
      SQL.Add('Height = ' + FloatToStr(Height) + ',');
      SQL.Add('Front_Radar_Cross = ' + FloatToStr(Front_Radar_Cross) + ',');
      SQL.Add('Side_Radar_Cross = ' + FloatToStr(Side_Radar_Cross) + ',');
      SQL.Add('Front_Visual_Cross = ' + FloatToStr(Front_Visual_Cross) + ',');
      SQL.Add('Side_Visual_Cross = ' + FloatToStr(Side_Visual_Cross) + ',');
      SQL.Add('Front_Infrared_Cross = ' + FloatToStr(Front_Infrared_Cross)
          + ',');
      SQL.Add('Side_Infrared_Cross = ' + FloatToStr(Side_Infrared_Cross) + ',');
      SQL.Add('Pursuit_Guide_Type = ' + IntToStr(Pursuit_Guide_Type) + ',');
      SQL.Add('Primary_Guide_Type = ' + IntToStr(Primary_Guide_Type) + ',');
      SQL.Add('Secondary_Guide_Type = ' + IntToStr(Secondary_Guide_Type) + ',');
      SQL.Add('Anti_Air_Capable = ' + IntToStr(Anti_Air_Capable) + ',');
      SQL.Add('Anti_Sur_Capable = ' + IntToStr(Anti_Sur_Capable) + ',');
      SQL.Add('Anti_SubSur_Capable = ' + IntToStr(Anti_SubSur_Capable) + ',');
      SQL.Add('Anti_Land_Capable = ' + IntToStr(Anti_Land_Capable) + ',');
      SQL.Add('Anti_Amphibious_Capable = ' + IntToStr(Anti_Amphibious_Capable) + ',');
      SQL.Add('Primary_Target_Domain = ' + IntToStr(Primary_Target_Domain)
          + ',');
      SQL.Add('SARH_POH_Modifier = ' + FloatToStr(SARH_POH_Modifier) + ',');
      SQL.Add('CG_POH_Modifier = ' + FloatToStr(CG_POH_Modifier) + ',');
      SQL.Add('TARH_POH_Modifier = ' + FloatToStr(TARH_POH_Modifier) + ',');
      SQL.Add('IR_POH_Modifier = ' + FloatToStr(IR_POH_Modifier) + ',');
      SQL.Add('AR_POH_Modifier = ' + FloatToStr(AR_POH_Modifier) + ',');
      SQL.Add('Transmitted_Frequency = ' + FloatToStr(Transmitted_Frequency)
          + ',');
      SQL.Add('Scan_Rate = ' + FloatToStr(Scan_Rate) + ',');
      SQL.Add('Pulse_Rep_Freq = ' + FloatToStr(Pulse_Rep_Freq) + ',');
      SQL.Add('Pulse_Width = ' + FloatToStr(Pulse_Width) + ',');
      SQL.Add('Xmit_Power = ' + FloatToStr(Xmit_Power) + ',');
      SQL.Add('TARH_Jamming_A_Probability = ' + FloatToStr
          (TARH_Jamming_A_Probability) + ',');
      SQL.Add('TARH_Jamming_B_Probability = ' + FloatToStr
          (TARH_Jamming_B_Probability) + ',');
      SQL.Add('TARH_Jamming_C_Probability = ' + FloatToStr
          (TARH_Jamming_C_Probability) + ',');
      SQL.Add('Wpt_Capable = ' + IntToStr(Wpt_Capable) + ',');
      SQL.Add('Max_Num_Wpts = ' + IntToStr(Max_Num_Wpts) + ',');
      SQL.Add('Min_Final_Leg_Length = ' + FloatToStr(Min_Final_Leg_Length)
          + ',');
      SQL.Add('Engagement_Range = ' + FloatToStr(Engagement_Range) + ',');
      SQL.Add('Max_Firing_Depth = ' + FloatToStr(Max_Firing_Depth) + ',');
      SQL.Add('Upper_Received_Freq = ' + FloatToStr(Upper_Received_Freq) + ',');
      SQL.Add('Lower_Received_Freq = ' + FloatToStr(Lower_Received_Freq) + ',');
      SQL.Add('Fly_Out_Required = ' + IntToStr(Fly_Out_Required) + ',');
      SQL.Add('Fly_Out_Range = ' + FloatToStr(Fly_Out_Range) + ',');
      SQL.Add('Fly_Out_Altitude = ' + FloatToStr(Fly_Out_Altitude) + ',');
      SQL.Add('Booster_Separation_Required = ' + IntToStr
          (Booster_Separation_Required) + ',');
      SQL.Add('Booster_Separation_Range = ' + FloatToStr
          (Booster_Separation_Range) + ',');
      SQL.Add('Booster_Separation_Box_Width = ' + FloatToStr
          (Booster_Separation_Box_Width) + ',');
      SQL.Add('Booster_Separation_Box_Length = ' + FloatToStr
          (Booster_Separation_Box_Length) + ',');
      SQL.Add('Term_Guide_Azimuth = ' + FloatToStr(Term_Guide_Azimuth) + ',');
      SQL.Add('Term_Guide_Elevation = ' + FloatToStr(Term_Guide_Elevation)
          + ',');
      SQL.Add('Term_Guide_Range = ' + FloatToStr(Term_Guide_Range) + ',');
      SQL.Add('Terminal_Guidance_Capability = ' + IntToStr
          (Terminal_Guidance_Capability) + ',');
      SQL.Add('Terminal_Altitude_Required = ' + IntToStr
          (Terminal_Altitude_Required) + ',');
      SQL.Add('Terminal_Acquisition_Altitude = ' + FloatToStr
          (Terminal_Acquisition_Altitude) + ',');
      SQL.Add('Terminal_Sinuation_Start_Range = ' + FloatToStr
          (Terminal_Sinuation_Start_Range) + ',');
      SQL.Add('Terminal_Sinuation_Period = ' + FloatToStr
          (Terminal_Sinuation_Period) + ',');
      SQL.Add('Terminal_Sinuation_Amplitude = ' + FloatToStr
          (Terminal_Sinuation_Amplitude) + ',');
      SQL.Add('Terminal_Pop_Up_Range = ' + FloatToStr(Terminal_Pop_Up_Range)
          + ',');
      SQL.Add('Terminal_Pop_Up_Altitude = ' + FloatToStr
          (Terminal_Pop_Up_Altitude) + ',');
      SQL.Add('Mid_Course_Update_Mode = ' + IntToStr(Mid_Course_Update_Mode)
          + ',');
      SQL.Add('Home_On_Jam_Type_A_Capable = ' + IntToStr
          (Home_On_Jam_Type_A_Capable) + ',');
      SQL.Add('Home_On_Jam_Type_B_Capable = ' + IntToStr
          (Home_On_Jam_Type_B_Capable) + ',');
      SQL.Add('Home_On_Jam_Type_C_Capable = ' + IntToStr
          (Home_On_Jam_Type_C_Capable) + ',');
      SQL.Add('Launch_Method = ' + IntToStr(Launch_Method) + ',');
      SQL.Add('Data_Entry_Method = ' + IntToStr(Data_Entry_Method) + ',');
      SQL.Add('Launch_Speed = ' + IntToStr(Launch_Speed) + ',');
      SQL.Add('Max_Target_Altitude_Delta = ' + IntToStr
          (Max_Target_Altitude_Delta) + ',');
      SQL.Add('Term_Guide_Azimuth_Narrow = ' + FloatToStr
          (Term_Guide_Azimuth_Narrow) + ',');
      SQL.Add('Term_Guide_Elevation_Narrow = ' + FloatToStr
          (Term_Guide_Elevation_Narrow) + ',');
      SQL.Add('Term_Guide_Range_Narrow = ' + FloatToStr
          (Term_Guide_Range_Narrow) + ',');
      SQL.Add('Spot_Number = ' + IntToStr(Spot_Number) + ',');
      SQL.Add('ECCM_Type = ' + IntToStr(ECCM_Type) + ',');
      SQL.Add('ECM_Detonation = ' + IntToStr(ECM_Detonation) + ',');
      SQL.Add('ECM_Detection = ' + IntToStr(ECM_Detection) + ',');
      SQL.Add('Detectability_Type = ' + IntToStr(Detectability_Type) + ',');
      SQL.Add('IRCM_Detonation = ' + IntToStr(IRCM_Detonation) + ',');
      SQL.Add('IRCM_Detection = ' + IntToStr(IRCM_Detection) + ',');
      SQL.Add('Sea_State_Modelling_Capable = ' + IntToStr
          (Sea_State_Modelling_Capable));

    end;

    SQL.Add(' WHERE (Missile_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertMissile_Def(rec: TMissile_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Missile_Definition ');
      SQL.Add(
        '(Class_Identifier,Platform_Domain,Platform_Category,Platform_Type,');
      SQL.Add(
        'Max_Range,Min_Range,Motion_Index,Seeker_TurnOn_Range,Second_Seeker_Pattern_Capable,');
      SQL.Add(
        'Seeker_Bias_Capable,Fixed_Seeker_Turn_On_Range,Lethality,Prob_of_Hit,Damage_Capacity,');
      SQL.Add(
        'Default_Altitude,Length,Width,Height,Front_Radar_Cross,Side_Radar_Cross,Front_Visual_Cross,');
      SQL.Add(
        'Side_Visual_Cross,Front_Infrared_Cross,Side_Infrared_Cross,Pursuit_Guide_Type,Primary_Guide_Type,');
      SQL.Add(
        'Secondary_Guide_Type,Anti_Air_Capable,Anti_Sur_Capable,Anti_SubSur_Capable,Anti_Land_Capable,Anti_Amphibious_Capable,');
      SQL.Add(
        'Primary_Target_Domain,SARH_POH_Modifier,CG_POH_Modifier,TARH_POH_Modifier,IR_POH_Modifier,');
      SQL.Add(
        'AR_POH_Modifier,Transmitted_Frequency,Scan_Rate,Pulse_Rep_Freq,Pulse_Width,Xmit_Power,');
      SQL.Add(
        'TARH_Jamming_A_Probability,TARH_Jamming_B_Probability,TARH_Jamming_C_Probability,');
      SQL.Add(
        'Wpt_Capable,Max_Num_Wpts,Min_Final_Leg_Length,Engagement_Range,Max_Firing_Depth,');
      SQL.Add(
        'Upper_Received_Freq,Lower_Received_Freq,Fly_Out_Required,Fly_Out_Range,Fly_Out_Altitude,');
      SQL.Add(
        'Booster_Separation_Required,Booster_Separation_Range,Booster_Separation_Box_Width,');
      SQL.Add(
        'Booster_Separation_Box_Length,Term_Guide_Azimuth,Term_Guide_Elevation,Term_Guide_Range,');
      SQL.Add(
        'Terminal_Guidance_Capability,Terminal_Altitude_Required,Terminal_Acquisition_Altitude,');
      SQL.Add(
        'Terminal_Sinuation_Start_Range,Terminal_Sinuation_Period,Terminal_Sinuation_Amplitude,');
      SQL.Add(
        'Terminal_Pop_Up_Range,Terminal_Pop_Up_Altitude,Mid_Course_Update_Mode,Home_On_Jam_Type_A_Capable,');
      SQL.Add(
        'Home_On_Jam_Type_B_Capable,Home_On_Jam_Type_C_Capable,Launch_Method,Data_Entry_Method,');
      SQL.Add(
        'Launch_Speed,Max_Target_Altitude_Delta,Term_Guide_Azimuth_Narrow,Term_Guide_Elevation_Narrow,');
      SQL.Add(
        'Term_Guide_Range_Narrow,Spot_Number,ECCM_Type,ECM_Detonation,ECM_Detection,Detectability_Type,');
      SQL.Add('IRCM_Detonation,IRCM_Detection,Sea_State_Modelling_Capable)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Class_Identifier + ''',');
      SQL.Add(IntToStr(Platform_Domain) + ',');
      SQL.Add(IntToStr(Platform_Category) + ',');
      SQL.Add(IntToStr(Platform_Type) + ',');
      SQL.Add(FloatToStr(Max_Range) + ',');
      SQL.Add(FloatToStr(Min_Range) + ',');
      SQL.Add(IntToStr(Motion_Index) + ',');
      SQL.Add(FloatToStr(Seeker_TurnOn_Range) + ',');
      SQL.Add(IntToStr(Second_Seeker_Pattern_Capable) + ',');
      SQL.Add(IntToStr(Seeker_Bias_Capable) + ',');
      SQL.Add(IntToStr(Fixed_Seeker_Turn_On_Range) + ',');
      SQL.Add(IntToStr(Lethality) + ',');
      SQL.Add(FloatToStr(Prob_of_Hit) + ',');
      SQL.Add(IntToStr(Damage_Capacity) + ',');
      SQL.Add(FloatToStr(Default_Altitude) + ',');
      SQL.Add(FloatToStr(Length) + ',');
      SQL.Add(FloatToStr(Width) + ',');
      SQL.Add(FloatToStr(Height) + ',');
      SQL.Add(FloatToStr(Front_Radar_Cross) + ',');
      SQL.Add(FloatToStr(Side_Radar_Cross) + ',');
      SQL.Add(FloatToStr(Front_Visual_Cross) + ',');
      SQL.Add(FloatToStr(Side_Visual_Cross) + ',');
      SQL.Add(FloatToStr(Front_Infrared_Cross) + ',');
      SQL.Add(FloatToStr(Side_Infrared_Cross) + ',');
      SQL.Add(IntToStr(Pursuit_Guide_Type) + ',');
      SQL.Add(IntToStr(Primary_Guide_Type) + ',');
      SQL.Add(IntToStr(Secondary_Guide_Type) + ',');
      SQL.Add(IntToStr(Anti_Air_Capable) + ',');
      SQL.Add(IntToStr(Anti_Sur_Capable) + ',');
      SQL.Add(IntToStr(Anti_SubSur_Capable) + ',');
      SQL.Add(IntToStr(Anti_Land_Capable) + ',');
      SQL.Add(IntToStr(Anti_Amphibious_Capable)+',');
      SQL.Add(IntToStr(Primary_Target_Domain) + ',');
      SQL.Add(FloatToStr(SARH_POH_Modifier) + ',');
      SQL.Add(FloatToStr(CG_POH_Modifier) + ',');
      SQL.Add(FloatToStr(TARH_POH_Modifier) + ',');
      SQL.Add(FloatToStr(IR_POH_Modifier) + ',');
      SQL.Add(FloatToStr(AR_POH_Modifier) + ',');
      SQL.Add(FloatToStr(Transmitted_Frequency) + ',');
      SQL.Add(FloatToStr(Scan_Rate) + ',');
      SQL.Add(FloatToStr(Pulse_Rep_Freq) + ',');
      SQL.Add(FloatToStr(Pulse_Width) + ',');
      SQL.Add(FloatToStr(Xmit_Power) + ',');
      SQL.Add(FloatToStr(TARH_Jamming_A_Probability) + ',');
      SQL.Add(FloatToStr(TARH_Jamming_B_Probability) + ',');
      SQL.Add(FloatToStr(TARH_Jamming_C_Probability) + ',');
      SQL.Add(IntToStr(Wpt_Capable) + ',');
      SQL.Add(IntToStr(Max_Num_Wpts) + ',');
      SQL.Add(FloatToStr(Min_Final_Leg_Length) + ',');
      SQL.Add(FloatToStr(Engagement_Range) + ',');
      SQL.Add(FloatToStr(Max_Firing_Depth) + ',');
      SQL.Add(FloatToStr(Upper_Received_Freq) + ',');
      SQL.Add(FloatToStr(Lower_Received_Freq) + ',');
      SQL.Add(IntToStr(Fly_Out_Required) + ',');
      SQL.Add(FloatToStr(Fly_Out_Range) + ',');
      SQL.Add(FloatToStr(Fly_Out_Altitude) + ',');
      SQL.Add(IntToStr(Booster_Separation_Required) + ',');
      SQL.Add(FloatToStr(Booster_Separation_Range) + ',');
      SQL.Add(FloatToStr(Booster_Separation_Box_Width) + ',');
      SQL.Add(FloatToStr(Booster_Separation_Box_Length) + ',');
      SQL.Add(FloatToStr(Term_Guide_Azimuth) + ',');
      SQL.Add(FloatToStr(Term_Guide_Elevation) + ',');
      SQL.Add(FloatToStr(Term_Guide_Range) + ',');
      SQL.Add(IntToStr(Terminal_Guidance_Capability) + ',');
      SQL.Add(IntToStr(Terminal_Altitude_Required) + ',');
      SQL.Add(FloatToStr(Terminal_Acquisition_Altitude) + ',');
      SQL.Add(FloatToStr(Terminal_Sinuation_Start_Range) + ',');
      SQL.Add(FloatToStr(Terminal_Sinuation_Period) + ',');
      SQL.Add(FloatToStr(Terminal_Sinuation_Amplitude) + ',');
      SQL.Add(FloatToStr(Terminal_Pop_Up_Range) + ',');
      SQL.Add(FloatToStr(Terminal_Pop_Up_Altitude) + ',');
      SQL.Add(IntToStr(Mid_Course_Update_Mode) + ',');
      SQL.Add(IntToStr(Home_On_Jam_Type_A_Capable) + ',');
      SQL.Add(IntToStr(Home_On_Jam_Type_B_Capable) + ',');
      SQL.Add(IntToStr(Home_On_Jam_Type_C_Capable) + ',');
      SQL.Add(IntToStr(Launch_Method) + ',');
      SQL.Add(IntToStr(Data_Entry_Method) + ',');
      SQL.Add(IntToStr(Launch_Speed) + ',');
      SQL.Add(IntToStr(Max_Target_Altitude_Delta) + ',');
      SQL.Add(FloatToStr(Term_Guide_Azimuth_Narrow) + ',');
      SQL.Add(FloatToStr(Term_Guide_Elevation_Narrow) + ',');
      SQL.Add(FloatToStr(Term_Guide_Range_Narrow) + ',');
      SQL.Add(IntToStr(Spot_Number) + ',');
      SQL.Add(IntToStr(ECCM_Type) + ',');
      SQL.Add(IntToStr(ECM_Detonation) + ',');
      SQL.Add(IntToStr(ECM_Detection) + ',');
      SQL.Add(IntToStr(Detectability_Type) + ',');
      SQL.Add(IntToStr(IRCM_Detonation) + ',');
      SQL.Add(IntToStr(IRCM_Detection) + ',');
      SQL.Add(IntToStr(Sea_State_Modelling_Capable) + ')');

      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Missile_Index FROM Missile_Definition ');
      SQL.Add('WHERE Class_Identifier =' + quotedStr(Class_Identifier));
      Open;
      with rec.FDef do
      begin
        Missile_Index := FieldByName('Missile_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteMissile_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(2,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Missile_Definition ');
    SQL.Add('WHERE Missile_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;
// ------------------------------------------------------------------------------

function TdmTTT.getMissileByLibrary(const id_Library: Integer;
  var vList: TList): Integer;
var
  rec: TMissile_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT b.* ';
    ssql := ssql + 'FROM  Platform_Library_Entry a JOIN Missile_Definition b ';
    ssql := ssql + 'ON a.Missile_Index = b.Missile_Index ';
    ssql := ssql + 'WHERE a.Library_Index = ' + IntToStr(id_Library) + ' ';
    ssql := ssql + 'AND a.Platform_Type = 2 ';
    ssql := ssql + 'UNION ALL ';
    ssql := ssql + 'SELECT c.*';
    ssql := ssql + 'FROM Platform_Library_Entry a JOIN Hybrid_Definition b ';
    ssql := ssql + 'ON a.Hybrid_Index = b.Hybrid_Index ';
    ssql := ssql + 'JOIN Missile_Definition c ';
    ssql := ssql + 'ON b.Missile_Index = c.Missile_Index ';
    ssql := ssql + 'WHERE a.Library_Index = ' + IntToStr(id_Library) + ' ';
    ssql := ssql + 'AND a.Platform_Type = 5';

//     ShowMessage(ssql);
    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(vList) then
        vList := TList.Create
      else
        vList.Clear;

      while not ZQ.Eof do
      begin
        rec := TMissile_On_Board.Create;

        with rec.FDef do
        begin
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Second_Seeker_Pattern_Capable := FieldByName
            ('Second_Seeker_Pattern_Capable').AsInteger;
          Seeker_Bias_Capable := FieldByName('Seeker_Bias_Capable').AsInteger;
          Fixed_Seeker_Turn_On_Range := FieldByName
            ('Fixed_Seeker_Turn_On_Range')
            .AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Altitude := FieldByName('Default_Altitude').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          Pursuit_Guide_Type := FieldByName('Pursuit_Guide_Type').AsInteger;
          Primary_Guide_Type := FieldByName('Primary_Guide_Type').AsInteger;
          Secondary_Guide_Type := FieldByName('Secondary_Guide_Type').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Transmitted_Frequency := FieldByName('Transmitted_Frequency').AsFloat;
          Scan_Rate := FieldByName('Scan_Rate').AsSingle;
          Pulse_Rep_Freq := FieldByName('Pulse_Rep_Freq').AsSingle;
          Pulse_Width := FieldByName('Pulse_Width').AsSingle;
          Xmit_Power := FieldByName('Xmit_Power').AsSingle;
          TARH_Jamming_A_Probability := FieldByName
            ('TARH_Jamming_A_Probability').AsSingle;
          TARH_Jamming_B_Probability := FieldByName
            ('TARH_Jamming_B_Probability').AsSingle;
          TARH_Jamming_C_Probability := FieldByName
            ('TARH_Jamming_C_Probability').AsSingle;
          Wpt_Capable := FieldByName('Wpt_Capable').AsInteger;
          Max_Num_Wpts := FieldByName('Max_Num_Wpts').AsInteger;
          Min_Final_Leg_Length := FieldByName('Min_Final_Leg_Length').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Max_Firing_Depth := FieldByName('Max_Firing_Depth').AsSingle;
          Upper_Received_Freq := FieldByName('Upper_Received_Freq').AsFloat;
          Lower_Received_Freq := FieldByName('Lower_Received_Freq').AsFloat;
          Fly_Out_Required := FieldByName('Fly_Out_Required').AsInteger;
          Fly_Out_Range := FieldByName('Fly_Out_Range').AsSingle;
          Fly_Out_Altitude := FieldByName('Fly_Out_Altitude').AsSingle;
          Booster_Separation_Required := FieldByName
            ('Booster_Separation_Required').AsInteger;
          Booster_Separation_Range := FieldByName('Booster_Separation_Range')
            .AsSingle;
          Booster_Separation_Box_Width := FieldByName
            ('Booster_Separation_Box_Width').AsSingle;
          Booster_Separation_Box_Length := FieldByName
            ('Booster_Separation_Box_Length').AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Terminal_Guidance_Capability := FieldByName
            ('Terminal_Guidance_Capability').AsInteger;
          Terminal_Altitude_Required := FieldByName
            ('Terminal_Altitude_Required')
            .AsInteger;
          Terminal_Acquisition_Altitude := FieldByName
            ('Terminal_Acquisition_Altitude').AsSingle;
          Terminal_Sinuation_Start_Range := FieldByName
            ('Terminal_Sinuation_Start_Range').AsSingle;
          Terminal_Sinuation_Period := FieldByName('Terminal_Sinuation_Period')
            .AsSingle;
          Terminal_Sinuation_Amplitude := FieldByName
            ('Terminal_Sinuation_Amplitude').AsSingle;
          Terminal_Pop_Up_Range := FieldByName('Terminal_Pop_Up_Range')
            .AsSingle;
          Terminal_Pop_Up_Altitude := FieldByName('Terminal_Pop_Up_Altitude')
            .AsSingle;
          Mid_Course_Update_Mode := FieldByName('Mid_Course_Update_Mode')
            .AsInteger;
          Home_On_Jam_Type_A_Capable := FieldByName
            ('Home_On_Jam_Type_A_Capable')
            .AsInteger;
          Home_On_Jam_Type_B_Capable := FieldByName
            ('Home_On_Jam_Type_B_Capable')
            .AsInteger;
          Home_On_Jam_Type_C_Capable := FieldByName
            ('Home_On_Jam_Type_C_Capable')
            .AsInteger;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Term_Guide_Azimuth_Narrow := FieldByName('Term_Guide_Azimuth_Narrow')
            .AsSingle;
          Term_Guide_Elevation_Narrow := FieldByName
            ('Term_Guide_Elevation_Narrow').AsSingle;
          Term_Guide_Range_Narrow := FieldByName('Term_Guide_Range_Narrow')
            .AsSingle;
          Spot_Number := FieldByName('Spot_Number').AsInteger;
          ECCM_Type := FieldByName('ECCM_Type').AsInteger;
          ECM_Detonation := FieldByName('ECM_Detonation').AsInteger;
          ECM_Detection := FieldByName('ECM_Detection').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          IRCM_Detonation := FieldByName('IRCM_Detonation').AsInteger;
          IRCM_Detection := FieldByName('IRCM_Detection').AsInteger;
          Sea_State_Modelling_Capable := FieldByName
            ('Sea_State_Modelling_Capable').AsInteger;
        end;

        vList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.GetPoint_Effect_On_Board(const id: integer;
  var rec: TPoint_Effect_On_Board): boolean;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Point_Effect_On_Board ' );
    SQL.Add('WHERE (Point_Effect_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount > 0;
    if not IsEmpty then begin
      First;
      if not Assigned(rec) then
        rec := TPoint_Effect_On_Board.Create;
      with rec.FData do begin
        Point_Effect_Index    := FieldByName('Point_Effect_Index').AsInteger;
        Instance_Identifier   := FieldByName('Instance_Identifier').AsString;
        Instance_Type         := FieldByName('Instance_Type').AsInteger;
        Vehicle_Index         := FieldByName('Vehicle_Index').AsInteger;
        Mount_Type            := FieldByName('Mount_Type').AsInteger;
        Quantity              := FieldByName('Quantity').AsInteger;
        Gun_Index             := FieldByName('Gun_Index').AsInteger;
        Bomb_Index            := FieldByName('Bomb_Index').AsInteger;
        TurretID              := FieldByName('TurretID').AsInteger;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.GetFitted_Weapon_On_Board(const id: integer;
  var rec: TFitted_Weapon_On_Board): boolean;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Blind_Zone_Definition b ' );
    SQL.Add('ON a.Fitted_Weap_Index = b.Fitted_Weap_Index ');
    SQL.Add('WHERE a.Fitted_Weap_Index = ' +  IntToStr(id));

    Open;

    result := RecordCount > 0;
    if not IsEmpty then begin
      First;
      if not Assigned(rec) then
        rec := TFitted_Weapon_On_Board.Create;
      with rec.FData do begin
        Fitted_Weap_Index       := FieldByName('Fitted_Weap_Index').AsInteger;
        Instance_Identifier     := FieldByName('Instance_Identifier').AsString;
        Instance_Type           := FieldByName('Instance_Type').AsInteger;
        Vehicle_Index           := FieldByName('Vehicle_Index').AsInteger;
        Mount_Type              := FieldByName('Mount_Type').AsInteger;
        Launch_Angle            := FieldByName('Launch_Angle').AsSingle;
        Launch_Angle_Required   := FieldByName('Launch_Angle_Required').AsInteger;
        Quantity                := FieldByName('Quantity').AsInteger;
        Firing_Delay            := FieldByName('Firing_Delay').AsSingle;
        Missile_Index           := FieldByName('Missile_Index').AsInteger;
        Torpedo_Index           := FieldByName('Torpedo_Index').AsInteger;
        Mine_Index              := FieldByName('Mine_Index').AsInteger;
        Hybrid_Index            := FieldByName('Hybrid_Index').AsInteger;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.GetFitted_Weapon_On_Board_byMissile(const id: integer;
    var aRec: TList): boolean;
var rec: TFitted_Weapon_On_Board;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Fitted_Weapon_On_Board ' );
    SQL.Add('WHERE Missile_Index = ' +  IntToStr(id));

    Open;

    result := RecordCount > 0;
    if not IsEmpty then begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TFitted_Weapon_On_Board.Create;
        with rec.FData do begin
          Fitted_Weap_Index       := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier     := FieldByName('Instance_Identifier').AsString;
          Instance_Type           := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index           := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type              := FieldByName('Mount_Type').AsInteger;
          Launch_Angle            := FieldByName('Launch_Angle').AsSingle;
          Launch_Angle_Required   := FieldByName('Launch_Angle_Required').AsInteger;
          Quantity                := FieldByName('Quantity').AsInteger;
          Firing_Delay            := FieldByName('Firing_Delay').AsSingle;
          Missile_Index           := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index           := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index              := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index            := FieldByName('Hybrid_Index').AsInteger;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.GetFitted_Weapon_On_Board_byHybrid(const id: integer;
    var aRec: TList): boolean;
var rec: TFitted_Weapon_On_Board;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Fitted_Weapon_On_Board ' );
    SQL.Add('WHERE Hybrid_Index = ' +  IntToStr(id));

    Open;

    result := RecordCount > 0;
    if not IsEmpty then begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TFitted_Weapon_On_Board.Create;
        with rec.FData do begin
          Fitted_Weap_Index       := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier     := FieldByName('Instance_Identifier').AsString;
          Instance_Type           := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index           := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type              := FieldByName('Mount_Type').AsInteger;
          Launch_Angle            := FieldByName('Launch_Angle').AsSingle;
          Launch_Angle_Required   := FieldByName('Launch_Angle_Required').AsInteger;
          Quantity                := FieldByName('Quantity').AsInteger;
          Firing_Delay            := FieldByName('Firing_Delay').AsSingle;
          Missile_Index           := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index           := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index              := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index            := FieldByName('Hybrid_Index').AsInteger;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.InsertFitted_Weapon_On_Board(const index :integer;
  var rec: TFitted_Weapon_On_Board): Integer;
begin

  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Fitted_Weapon_On_Board  ');
      SQL.Add('(Instance_Identifier,Vehicle_Index,Instance_Type,Mount_Type,Quantity,Firing_Delay,');
      case index of
        1:SQL.Add('Missile_Index)');
        2:SQL.Add('Torpedo_Index)');
        3:SQL.Add('Mine_Index)');
        4:SQL.Add('Hybrid_Index)');
      end;
      SQL.Add('VALUES ( ');
      SQL.Add(QuotedStr(Instance_Identifier)+',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Mount_Type) + ',');
      SQL.Add(IntToStr(Quantity) +',');
      SQL.Add(FloatToStr(Firing_Delay)+',');
      case index of
        1:SQL.Add(IntToStr(Missile_Index) + ')');
        2:SQL.Add(IntToStr(Torpedo_Index) + ')');
        3:SQL.Add(IntToStr(Mine_Index) + ')');
        4:SQL.Add(IntToStr(Hybrid_Index) + ')');
      end;
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Fitted_Weapon_On_Board ');
      SQL.Add('WHERE Instance_Identifier = '+ QuotedStr(Instance_Identifier));
      SQL.Add(' AND Vehicle_Index = '+ IntToStr(Vehicle_Index));
      Open;

      Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
    end;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.UpdateFitted_Weapon_OnBoard(const id: string;const index:integer;var rec: TRecFitted_Weapon_On_Board):integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Fitted_Weapon_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Instance_Identifier ='+ QuotedStr(Instance_Identifier)+',');
      SQL.Add('Vehicle_Index ='+ IntToStr(Vehicle_Index) + ',');
      SQL.Add('Instance_Type ='+ IntToStr(Instance_Type) + ',');
      SQL.Add('Mount_Type =' + IntToStr(Mount_Type) + ',');
      SQL.Add('Firing_Delay ='+ FloatToStr(Firing_Delay) +',');
      SQL.Add('Quantity =' + IntToStr(Quantity)+ ',');
      case index of
        1:
          begin
            SQL.Add('Missile_Index = '+IntToStr(Missile_Index)+ ',');
            SQL.Add('Hybrid_Index = NULL');
          end;
        2:SQL.Add('Torpedo_Index ='+IntToStr(Torpedo_Index) );
        3:SQL.Add('Mine_Index ='+IntToStr(Mine_Index));
        4:
          begin
            SQL.Add('Missile_Index = NULL,');
            SQL.Add('Hybrid_Index ='+IntToStr(Hybrid_Index));
          end;
      end;
      SQL.Add(' WHERE Fitted_Weap_index ='+ id);
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteFitted_Weapon_On_Board(const id: string):integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Fitted_Weapon_On_Board  ');
    SQL.Add('WHERE (Fitted_Weap_Index = ' + id + ')');
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.GetFitted_Weap_Launcher_On_Board(const id,tipe: integer;
var rec: TFitted_Weap_Launcher_On_Board; var wList : TList): boolean;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Fitted_Weap_Launcher_On_Board ' );
    SQL.Add('WHERE (Fitted_Weap_Index = ' +  IntToStr(id) + ')' );
    if tipe <> 0 then
       SQL.Add(' AND Launcher_Type ='+ IntToStr(tipe));
    Open;

    result := RecordCount > 0 ;

    if not IsEmpty then
    begin
      First;

      if not Assigned(wList) then
        wList := TList.Create
      else
        wList.Clear;

      while not ZQ.Eof do
      begin
        rec := TFitted_Weap_Launcher_On_Board.Create;
        with rec.FData do begin
          Fitted_Weap_Index         := FieldByName('Fitted_Weap_Index').AsInteger;
          Launcher_Type             := FieldByName('Launcher_Type').AsInteger;
          Launcher_Angle_Required   := FieldByName('Launcher_Angle_Required').AsInteger;
          Launcher_Angle            := FieldByName('Launcher_Angle').AsInteger;
          Launcher_Max_Qty          := FieldByName('Launcher_Max_Qty').AsInteger;
        end;

        wList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateFitted_Weap_Launcher_On_Board(const id,launch: string;
  var rec: TFitted_Weap_Launcher_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Fitted_Weap_Launcher_On_Board  ');
      SQL.Add('SET ' );
      SQL.Add('Launcher_Angle_Required = '+IntToStr(Launcher_Angle_Required)+',');
      SQL.Add('Launcher_Angle = '+ IntToStr(Launcher_Angle) +',');
      SQL.Add('Launcher_Max_Qty = '+IntToStr(Launcher_Max_Qty));
      SQL.Add(' WHERE (Fitted_Weap_Index = ' +  id + ') AND ' );
      SQL.Add('Launcher_Type ='+ launch );
    end;
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.InsertFitted_Weap_Launcher_On_Board(var rec: TRecFitted_Weap_Launcher_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Fitted_Weap_Launcher_On_Board ');
      SQL.Add('(Fitted_Weap_Index,Launcher_Type,Launcher_Angle_Required,');
      SQL.Add('Launcher_Angle,Launcher_Max_Qty)');
      SQL.Add('VALUES ( ' );
      SQL.Add(IntToStr(Fitted_Weap_Index)+',');
      SQL.Add(IntToStr(Launcher_Type)+',');
      SQL.Add(IntToStr(Launcher_Angle_Required)+',');
      SQL.Add(IntToStr(Launcher_Angle)+',');
      SQL.Add(IntToStr(Launcher_Max_Qty)+')');
    end;
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.DeleteFitted_Weap_Launcher_On_Board(index: integer;const id,launch: string): integer;
begin
  result := -1;
  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Fitted_Weap_Launcher_On_Board  ');
    SQL.Add('WHERE (Fitted_Weap_Index = ' +  id + ') ' );
    if index <> 0 then
      SQL.Add('AND Launcher_Type = '+ launch);
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getAllTorpedo_OnBoard(const id, index: Integer;
  var aRec: TList): Integer;
var
  i, J, k, b_num: Integer;
  rec: TTorpedo_On_Board;
  weaponScript: TScripted_Weapon;
  weaponPattern: TPattern_Weapon;
  torpedo_Blind: TBlind_Zone;
  torpedo_launch: TFitted_Weap_Launcher_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Fitted_Weapon_On_Board a JOIN Torpedo_Definition b ';
    ssql := ssql +
      'ON a.Torpedo_Index = b.Torpedo_Index LEFT JOIN Vehicle_Definition d ';
    ssql := ssql + 'ON a.Vehicle_Index = d.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak 0
      if id <> 0 then
        ssql := ssql + 'LEFT JOIN Note_Storage c ';
      ssql := ssql + 'ON c.Torpedo_Index = b.Torpedo_Index ';
      ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
    end
    else
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 AND a.Torpedo_Index =' +
        IntToStr(index);

    SQL.Add(ssql);
    SQL.Add(' ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TTorpedo_On_Board.Create;
        with rec.FData do
        begin
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Launch_Angle := FieldByName('Launch_Angle').AsSingle;
          Launch_Angle_Required := FieldByName('Launch_Angle_Required')
            .AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Firing_Delay := FieldByName('Firing_Delay').AsSingle;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        end;

        with rec.FDef do
        begin
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Lethality := FieldByName('Lethality').AsInteger;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Depth := FieldByName('Default_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Switch_Point := FieldByName('Cavitation_Switch_Point')
            .AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Pursuit_Guidance_Type := FieldByName('Pursuit_Guidance_Type')
            .AsInteger;
          Air_Drop_Capable := FieldByName('Air_Drop_Capable').AsInteger;
          Use_Terminal_Circle := FieldByName('Use_Terminal_Circle').AsInteger;
          Terminal_Circle_Radius := FieldByName('Terminal_Circle_Radius')
            .AsSingle;
          Fixed_Circle_Radius := FieldByName('Fixed_Circle_Radius').AsInteger;
          Lateral_Deceleration := FieldByName('Lateral_Deceleration').AsSingle;
          Airborne_Descent_Rate := FieldByName('Airborne_Descent_Rate').AsFloat;
          Wire_Angle_Offset := FieldByName('Wire_Angle_Offset').AsSingle;
          Guidance_Type := FieldByName('Guidance_Type').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          Active_Acoustic_POH_Mod := FieldByName('Active_Acoustic_POH_Mod')
            .AsSingle;
          Passive_Acoustic_POH_Mod := FieldByName('Passive_Acoustic_POH_Mod')
            .AsSingle;
          Active_Passive_POH_Mod := FieldByName('Active_Passive_POH_Mod')
            .AsSingle;
          WireGuide_POH_Modifier := FieldByName('WireGuide_POH_Modifier')
            .AsSingle;
          WakeHome_POH_Modifier := FieldByName('WakeHome_POH_Modifier')
            .AsSingle;
          Active_Seeker_Power := FieldByName('Active_Seeker_Power').AsSingle;
          Active_Seeker_Freq := FieldByName('Active_Seeker_Freq').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          First_Relative_Gyro_Angle := FieldByName('First_Relative_Gyro_Angle')
            .AsInteger;
          Second_Relative_Gyro_Angle := FieldByName
            ('Second_Relative_Gyro_Angle')
            .AsInteger;
          Max_Torpedo_Gyro_Angle := FieldByName('Max_Torpedo_Gyro_Angle')
            .AsSingle;
          Max_Torpedo_Search_Depth := FieldByName('Max_Torpedo_Search_Depth')
            .AsSingle;
          Acoustic_Torp_Ceiling_Depth := FieldByName
            ('Acoustic_Torp_Ceiling_Depth').AsSingle;
          Fixed_Ceiling_Depth := FieldByName('Fixed_Ceiling_Depth').AsInteger;
          Fixed_Seeker_TurnOn_Range := FieldByName('Fixed_Seeker_TurnOn_Range')
            .AsInteger;
          Sinuation_Runout := FieldByName('Sinuation_Runout').AsInteger;
          Runout_Sinuation_Period := FieldByName('Runout_Sinuation_Period')
            .AsSingle;
          Runout_Sinuation_Amplitude := FieldByName
            ('Runout_Sinuation_Amplitude').AsSingle;
          Min_Runout_Range := FieldByName('Min_Runout_Range').AsSingle;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Opt_Launch_Range_Nuc_Sub := FieldByName('Opt_Launch_Range_Nuc_Sub')
            .AsSingle;
          Opt_Launch_Range_Conv_Sub := FieldByName('Opt_Launch_Range_Conv_Sub')
            .AsSingle;
          Opt_Launch_Range_Other := FieldByName('Opt_Launch_Range_Other')
            .AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weap_Launcher_On_Board c');
        SQL.Add('WHERE (c.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;
        ZQ.First;

        while not ZQ.Eof do
        begin
          torpedo_launch := TFitted_Weap_Launcher_On_Board.Create;
          with torpedo_launch.FData do begin
            Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
            Launcher_Type := FieldByName('Launcher_Type').AsInteger;
            Launcher_Angle_Required := FieldByName('Launcher_Angle_Required')
              .AsInteger;
            Launcher_Angle := FieldByName('Launcher_Angle').AsInteger;
            Launcher_Max_Qty := FieldByName('Launcher_Max_Qty').AsInteger;
          end;
          rec.FLaunchs.Add(torpedo_launch);
          ZQ.Next;
        end;

        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Scripted_Weapon_Event b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Weapons_Mount ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');

        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          weaponScript := TScripted_Weapon.Create;
          with weaponScript.Event.FData do
          begin
            List_Index := FieldByName('List_Index').AsInteger;
            Scripted_Event_Index := FieldByName('Scripted_Event_Index')
              .AsInteger;
            Salvo_Size := FieldByName('Salvo_Size').AsInteger;
            Number_Layed := FieldByName('Number_Layed').AsInteger;
            Distance_Between := FieldByName('Distance_Between').AsSingle;
            Mine_Depth := FieldByName('Mine_Depth').AsSingle;
            Target_Index := FieldByName('Target_Index').AsInteger;
            Weapon_Type := FieldByName('Weapon_Type').AsInteger;
            Point_Effect := FieldByName('Point_Effect').AsInteger;
            Weapons_Mount := FieldByName('Weapons_Mount').AsInteger;
          end;

          GetScripted_Behav(weaponScript.Event.FData.Scripted_Event_Index,
            weaponScript.Behav);

          rec.FScript_Torpedo.Add(weaponScript);

          ZQ.Next;

        end;
      end;

      for J := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[J];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Pattern_Weapon_Event b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Weapons_Mount ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          weaponPattern := TPattern_Weapon.Create;

          with weaponPattern.Event.FData do
          begin
            List_Index := FieldByName('List_Index').AsInteger;
            Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
              .AsInteger;
            Salvo_Size := FieldByName('Salvo_Size').AsInteger;
            Number_Layed := FieldByName('Number_Layed').AsInteger;
            Distance_Between := FieldByName('Distance_Between').AsSingle;
            Mine_Depth := FieldByName('Mine_Depth').AsSingle;
            Weapon_Type := FieldByName('Weapon_Type').AsInteger;
            Point_Effect := FieldByName('Point_Effect').AsInteger;
            Weapons_Mount := FieldByName('Weapons_Mount').AsInteger;

          end;

          GetScripted_Pattern(weaponPattern.Event.FData.Scripted_Pattern_Index,
            weaponPattern.pattern);

          rec.FPattern_Torpedo.Add(weaponPattern);

          ZQ.Next;

        end;
      end;

      for k := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[k];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Fitted_Weap_Index ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          torpedo_Blind := TBlind_Zone.Create;

          with torpedo_Blind.FData do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;
          end;

          rec.FBlind.Add(torpedo_Blind);

          //added by bebe
          b_num := FieldByName('BlindZone_Number').AsInteger;
          if b_num = 1 then
          begin
            with rec.FBZone_1 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end
          else if b_num = 2 then
          begin
            with rec.FBZone_2 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end;

          ZQ.Next;

        end;
      end;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllTorpedo(const id: Integer; var mList: TList;
  var rec: TTorpedo_On_Board): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Torpedo_Definition ';
    ssql := ssql + 'a LEFT JOIN Note_Storage b ON a.Torpedo_Index = b.Torpedo_Index ';
    if id <> 0 then
      ssql := ssql + 'WHERE a.Torpedo_Index = ' + IntToStr(id);

    SQL.Add(ssql);
    SQL.Add(' ORDER BY Class_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(mList) then
        mList := TList.Create
      else
        mList.Clear;

      while not ZQ.Eof do
      begin
        rec := TTorpedo_On_Board.Create;
        with rec.FDef do
        begin
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Lethality := FieldByName('Lethality').AsInteger;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Depth := FieldByName('Default_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Switch_Point := FieldByName('Cavitation_Switch_Point')
            .AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Pursuit_Guidance_Type := FieldByName('Pursuit_Guidance_Type')
            .AsInteger;
          Air_Drop_Capable := FieldByName('Air_Drop_Capable').AsInteger;
          Use_Terminal_Circle := FieldByName('Use_Terminal_Circle').AsInteger;
          Terminal_Circle_Radius := FieldByName('Terminal_Circle_Radius')
            .AsSingle;
          Fixed_Circle_Radius := FieldByName('Fixed_Circle_Radius').AsInteger;
          Lateral_Deceleration := FieldByName('Lateral_Deceleration').AsSingle;
          Airborne_Descent_Rate := FieldByName('Airborne_Descent_Rate').AsFloat;
          Wire_Angle_Offset := FieldByName('Wire_Angle_Offset').AsSingle;
          Guidance_Type := FieldByName('Guidance_Type').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain')
            .AsInteger;
          Active_Acoustic_POH_Mod := FieldByName('Active_Acoustic_POH_Mod')
            .AsSingle;
          Passive_Acoustic_POH_Mod := FieldByName('Passive_Acoustic_POH_Mod')
            .AsSingle;
          Active_Passive_POH_Mod := FieldByName('Active_Passive_POH_Mod')
            .AsSingle;
          WireGuide_POH_Modifier := FieldByName('WireGuide_POH_Modifier')
            .AsSingle;
          WakeHome_POH_Modifier := FieldByName('WakeHome_POH_Modifier')
            .AsSingle;
          Active_Seeker_Power := FieldByName('Active_Seeker_Power').AsSingle;
          Active_Seeker_Freq := FieldByName('Active_Seeker_Freq').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          First_Relative_Gyro_Angle := FieldByName('First_Relative_Gyro_Angle')
            .AsInteger;
          Second_Relative_Gyro_Angle := FieldByName
            ('Second_Relative_Gyro_Angle')
            .AsInteger;
          Max_Torpedo_Gyro_Angle := FieldByName('Max_Torpedo_Gyro_Angle')
            .AsSingle;
          Max_Torpedo_Search_Depth := FieldByName('Max_Torpedo_Search_Depth')
            .AsSingle;
          Acoustic_Torp_Ceiling_Depth := FieldByName
            ('Acoustic_Torp_Ceiling_Depth').AsSingle;
          Fixed_Ceiling_Depth := FieldByName('Fixed_Ceiling_Depth').AsInteger;
          Fixed_Seeker_TurnOn_Range := FieldByName('Fixed_Seeker_TurnOn_Range')
            .AsInteger;
          Sinuation_Runout := FieldByName('Sinuation_Runout').AsInteger;
          Runout_Sinuation_Period := FieldByName('Runout_Sinuation_Period')
            .AsSingle;
          Runout_Sinuation_Amplitude := FieldByName
            ('Runout_Sinuation_Amplitude').AsSingle;
          Min_Runout_Range := FieldByName('Min_Runout_Range').AsSingle;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Opt_Launch_Range_Nuc_Sub := FieldByName('Opt_Launch_Range_Nuc_Sub')
            .AsSingle;
          Opt_Launch_Range_Conv_Sub := FieldByName('Opt_Launch_Range_Conv_Sub')
            .AsSingle;
          Opt_Launch_Range_Other := FieldByName('Opt_Launch_Range_Other')
            .AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        mList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getTorpedo_OnBoard(const id: Integer; var aRec: TList):integer;
var

  rec: TTorpedo_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Fitted_Weapon_On_Board a JOIN Torpedo_Definition b ';
    ssql := ssql +
      'ON a.Torpedo_Index = b.Torpedo_Index LEFT JOIN Vehicle_Definition d ';
    ssql := ssql + 'ON a.Vehicle_Index = d.Vehicle_Index ';
    ssql := ssql + 'LEFT JOIN Note_Storage c ';
    ssql := ssql + 'ON c.Torpedo_Index = b.Torpedo_Index ';

    // jika id tidak 0
    if id <> 0 then
       ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
    ssql := ssql + ' ORDER BY a.Instance_Identifier ';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TTorpedo_On_Board.Create;
        with rec.FData do
        begin
          Fitted_Weap_Index   := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Mount_Type          := FieldByName('Mount_Type').AsInteger;
          Instance_Type       := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Torpedo_Index       := FieldByName('Torpedo_Index').AsInteger;
          Quantity            := FieldByName('Quantity').AsInteger;
          Firing_Delay        := FieldByName('Firing_Delay').AsSingle;
        end;
        with rec.FDef do
        begin
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Lethality := FieldByName('Lethality').AsInteger;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Depth := FieldByName('Default_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Switch_Point := FieldByName('Cavitation_Switch_Point')
            .AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Pursuit_Guidance_Type := FieldByName('Pursuit_Guidance_Type').AsInteger;
          Air_Drop_Capable := FieldByName('Air_Drop_Capable').AsInteger;
          Use_Terminal_Circle := FieldByName('Use_Terminal_Circle').AsInteger;
          Terminal_Circle_Radius := FieldByName('Terminal_Circle_Radius')
            .AsSingle;
          Fixed_Circle_Radius := FieldByName('Fixed_Circle_Radius').AsInteger;
          Lateral_Deceleration := FieldByName('Lateral_Deceleration').AsSingle;
          Airborne_Descent_Rate := FieldByName('Airborne_Descent_Rate').AsFloat;
          Wire_Angle_Offset := FieldByName('Wire_Angle_Offset').AsSingle;
          Guidance_Type := FieldByName('Guidance_Type').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain').AsInteger;
          Active_Acoustic_POH_Mod := FieldByName('Active_Acoustic_POH_Mod')
            .AsSingle;
          Passive_Acoustic_POH_Mod := FieldByName('Passive_Acoustic_POH_Mod')
            .AsSingle;
          Active_Passive_POH_Mod := FieldByName('Active_Passive_POH_Mod')
            .AsSingle;
          WireGuide_POH_Modifier := FieldByName('WireGuide_POH_Modifier')
            .AsSingle;
          WakeHome_POH_Modifier := FieldByName('WakeHome_POH_Modifier').AsSingle;
          Active_Seeker_Power := FieldByName('Active_Seeker_Power').AsSingle;
          Active_Seeker_Freq := FieldByName('Active_Seeker_Freq').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          First_Relative_Gyro_Angle := FieldByName('First_Relative_Gyro_Angle')
            .AsInteger;
          Second_Relative_Gyro_Angle := FieldByName('Second_Relative_Gyro_Angle')
            .AsInteger;
          Max_Torpedo_Gyro_Angle := FieldByName('Max_Torpedo_Gyro_Angle')
            .AsSingle;
          Max_Torpedo_Search_Depth := FieldByName('Max_Torpedo_Search_Depth')
            .AsSingle;
          Acoustic_Torp_Ceiling_Depth := FieldByName
            ('Acoustic_Torp_Ceiling_Depth').AsSingle;
          Fixed_Ceiling_Depth := FieldByName('Fixed_Ceiling_Depth').AsInteger;
          Fixed_Seeker_TurnOn_Range := FieldByName('Fixed_Seeker_TurnOn_Range')
            .AsInteger;
          Sinuation_Runout := FieldByName('Sinuation_Runout').AsInteger;
          Runout_Sinuation_Period := FieldByName('Runout_Sinuation_Period')
            .AsSingle;
          Runout_Sinuation_Amplitude := FieldByName('Runout_Sinuation_Amplitude')
            .AsSingle;
          Min_Runout_Range := FieldByName('Min_Runout_Range').AsSingle;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Opt_Launch_Range_Nuc_Sub := FieldByName('Opt_Launch_Range_Nuc_Sub')
            .AsSingle;
          Opt_Launch_Range_Conv_Sub := FieldByName('Opt_Launch_Range_Conv_Sub')
            .AsSingle;
          Opt_Launch_Range_Other := FieldByName('Opt_Launch_Range_Other')
            .AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

//------------------------------------------------------------------------------

function TdmTTT.getPITorpedo(var mList: TList; ra_id: Integer;
  force: Integer): Integer;
var
  rec: TTorpedo_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Torpedo_Definition a JOIN Platform_Instance b ');
    SQL.Add('ON a.Torpedo_Index = b.Torpedo_Index ');
    SQL.Add('WHERE b.Resource_Alloc_Index=' + IntToStr(ra_id) + ' AND ');
    SQL.Add('b.Force_Designation =' + IntToStr(force));

    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(mList) then
        mList := TList.Create
      else
        mList.Clear;

      while not ZQ.Eof do
      begin
        rec := TTorpedo_On_Board.Create;
        with rec.FDef do
        begin
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
        end;
        with rec.FPI.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index')
            .AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;
        mList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateTorpedo_Def(rec: TTorpedo_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Torpedo_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Class_Identifier = ''' + Class_Identifier + ''',');
      SQL.Add('Platform_Domain = ' + IntToStr(Platform_Domain) + ',');
      SQL.Add('Platform_Category = ' + IntToStr(Platform_Category) + ',');
      SQL.Add('Platform_Type = ' + IntToStr(Platform_Type) + ',');
      SQL.Add('Max_Range = ' + FloatToStr(Max_Range) + ',');
      SQL.Add('Min_Range = ' + FloatToStr(Min_Range) + ',');
      SQL.Add('Motion_Index = ' + IntToStr(Motion_Index) + ',');
      SQL.Add('Seeker_TurnOn_Range = ' + FloatToStr(Seeker_TurnOn_Range) + ',');
      SQL.Add('Lethality = ' + IntToStr(Lethality) + ',');
      SQL.Add('Damage_Capacity = ' + IntToStr(Damage_Capacity) + ',');
      SQL.Add('Default_Depth = ' + FloatToStr(Default_Depth) + ',');
      SQL.Add('Length = ' + FloatToStr(Length) + ',');
      SQL.Add('Width = ' + FloatToStr(Width) + ',');
      SQL.Add('Height = ' + FloatToStr(Height) + ',');
      SQL.Add('Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross)
          + ',');
      SQL.Add('Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add('LSpeed_Acoustic_Intens = ' + FloatToStr(LSpeed_Acoustic_Intens)
          + ',');
      SQL.Add('Below_Cav_Acoustic_Intens = ' + FloatToStr
          (Below_Cav_Acoustic_Intens) + ',');
      SQL.Add('Above_Cav_Acoustic_Intens = ' + FloatToStr
          (Above_Cav_Acoustic_Intens) + ',');
      SQL.Add('HSpeed_Acoustic_Intens = ' + FloatToStr(HSpeed_Acoustic_Intens)
          + ',');
      SQL.Add('Cavitation_Switch_Point = ' + FloatToStr
          (Cavitation_Switch_Point) + ',');
      SQL.Add('Term_Guide_Azimuth = ' + FloatToStr(Term_Guide_Azimuth) + ',');
      SQL.Add('Term_Guide_Elevation = ' + FloatToStr(Term_Guide_Elevation)
          + ',');
      SQL.Add('Term_Guide_Range = ' + FloatToStr(Term_Guide_Range) + ',');
      SQL.Add('Pursuit_Guidance_Type = ' + IntToStr(Pursuit_Guidance_Type)
          + ',');
      SQL.Add('Air_Drop_Capable = ' + IntToStr(Air_Drop_Capable) + ',');
      SQL.Add('Use_Terminal_Circle = ' + IntToStr(Use_Terminal_Circle) + ',');
      SQL.Add('Terminal_Circle_Radius = ' + FloatToStr(Terminal_Circle_Radius)
          + ',');
      SQL.Add('Fixed_Circle_Radius = ' + IntToStr(Fixed_Circle_Radius) + ',');
      SQL.Add('Lateral_Deceleration = ' + FloatToStr(Lateral_Deceleration)
          + ',');
      SQL.Add('Airborne_Descent_Rate = ' + FloatToStr(Airborne_Descent_Rate)
          + ',');
      SQL.Add('Wire_Angle_Offset = ' + FloatToStr(Wire_Angle_Offset) + ',');
      SQL.Add('Guidance_Type = ' + IntToStr(Guidance_Type) + ',');
      SQL.Add('Anti_Sur_Capable = ' + IntToStr(Anti_Sur_Capable) + ',');
      SQL.Add('Anti_SubSur_Capable = ' + IntToStr(Anti_SubSur_Capable) + ',');
      SQL.Add('Primary_Target_Domain = ' + IntToStr(Primary_Target_Domain)
          + ',');
      SQL.Add('Active_Acoustic_POH_Mod = ' + FloatToStr
          (Active_Acoustic_POH_Mod) + ',');
      SQL.Add('Passive_Acoustic_POH_Mod = ' + FloatToStr
          (Passive_Acoustic_POH_Mod) + ',');
      SQL.Add('Active_Passive_POH_Mod = ' + FloatToStr(Active_Passive_POH_Mod)
          + ',');
      SQL.Add('WireGuide_POH_Modifier = ' + FloatToStr(WireGuide_POH_Modifier)
          + ',');
      SQL.Add('WakeHome_POH_Modifier = ' + FloatToStr(WakeHome_POH_Modifier)
          + ',');
      SQL.Add('Active_Seeker_Power = ' + FloatToStr(Active_Seeker_Power) + ',');
      SQL.Add('Active_Seeker_Freq = ' + FloatToStr(Active_Seeker_Freq) + ',');
      SQL.Add('Engagement_Range = ' + FloatToStr(Engagement_Range) + ',');
      SQL.Add('First_Relative_Gyro_Angle = ' + IntToStr
          (First_Relative_Gyro_Angle) + ',');
      SQL.Add('Second_Relative_Gyro_Angle = ' + IntToStr
          (Second_Relative_Gyro_Angle) + ',');
      SQL.Add('Max_Torpedo_Gyro_Angle = ' + FloatToStr(Max_Torpedo_Gyro_Angle)
          + ',');
      SQL.Add('Max_Torpedo_Search_Depth = ' + FloatToStr
          (Max_Torpedo_Search_Depth) + ',');
      SQL.Add('Acoustic_Torp_Ceiling_Depth = ' + FloatToStr
          (Acoustic_Torp_Ceiling_Depth) + ',');
      SQL.Add('Fixed_Ceiling_Depth = ' + IntToStr(Fixed_Ceiling_Depth) + ',');
      SQL.Add('Fixed_Seeker_TurnOn_Range = ' + IntToStr
          (Fixed_Seeker_TurnOn_Range) + ',');
      SQL.Add('Sinuation_Runout = ' + IntToStr(Sinuation_Runout) + ',');
      SQL.Add('Runout_Sinuation_Period = ' + FloatToStr
          (Runout_Sinuation_Period) + ',');
      SQL.Add('Runout_Sinuation_Amplitude = ' + FloatToStr
          (Runout_Sinuation_Amplitude) + ',');
      SQL.Add('Min_Runout_Range = ' + FloatToStr(Min_Runout_Range) + ',');
      SQL.Add('Launch_Method = ' + IntToStr(Launch_Method) + ',');
      SQL.Add('Data_Entry_Method = ' + IntToStr(Data_Entry_Method) + ',');
      SQL.Add('Launch_Speed = ' + IntToStr(Launch_Speed) + ',');
      SQL.Add('Opt_Launch_Range_Nuc_Sub = ' + FloatToStr
          (Opt_Launch_Range_Nuc_Sub) + ',');
      SQL.Add('Opt_Launch_Range_Conv_Sub = ' + FloatToStr
          (Opt_Launch_Range_Conv_Sub) + ',');
      SQL.Add('Opt_Launch_Range_Other = ' + FloatToStr(Opt_Launch_Range_Other)
          + ',');
      SQL.Add('Detectability_Type = ' + IntToStr(Detectability_Type));
    end;
    SQL.Add('WHERE (Torpedo_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertTorpedo_Def(rec: TTorpedo_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Torpedo_Definition ');
      SQL.Add(
        '(Class_Identifier,Platform_Domain,Platform_Category,Platform_Type,');
      SQL.Add(
        'Max_Range,Min_Range,Motion_Index,Seeker_TurnOn_Range,Lethality,Damage_Capacity,');
      SQL.Add(
        'Default_Depth,Length,Width,Height,Front_Acoustic_Cross,Side_Acoustic_Cross,');
      SQL.Add(
        'LSpeed_Acoustic_Intens,Below_Cav_Acoustic_Intens,Above_Cav_Acoustic_Intens,');
      SQL.Add(
        'HSpeed_Acoustic_Intens,Cavitation_Switch_Point,Term_Guide_Azimuth,Term_Guide_Elevation,');
      SQL.Add(
        'Term_Guide_Range,Pursuit_Guidance_Type,Air_Drop_Capable,Use_Terminal_Circle,');
      SQL.Add(
        'Terminal_Circle_Radius,Fixed_Circle_Radius,Lateral_Deceleration,Airborne_Descent_Rate,');
      SQL.Add(
        'Wire_Angle_Offset,Guidance_Type,Anti_Sur_Capable,Anti_SubSur_Capable,Primary_Target_Domain,');
      SQL.Add(
        'Active_Acoustic_POH_Mod,Passive_Acoustic_POH_Mod,Active_Passive_POH_Mod,WireGuide_POH_Modifier,');
      SQL.Add(
        'WakeHome_POH_Modifier,Active_Seeker_Power,Active_Seeker_Freq,Engagement_Range,');
      SQL.Add(
        'First_Relative_Gyro_Angle,Second_Relative_Gyro_Angle,Max_Torpedo_Gyro_Angle,');
      SQL.Add(
        'Max_Torpedo_Search_Depth,Acoustic_Torp_Ceiling_Depth,Fixed_Ceiling_Depth,Fixed_Seeker_TurnOn_Range,');
      SQL.Add(
        'Sinuation_Runout,Runout_Sinuation_Period,Runout_Sinuation_Amplitude,Min_Runout_Range,');
      SQL.Add(
        'Launch_Method,Data_Entry_Method,Launch_Speed,Opt_Launch_Range_Nuc_Sub,Opt_Launch_Range_Conv_Sub,');
      SQL.Add('Opt_Launch_Range_Other,Detectability_Type)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Class_Identifier + ''',');
      SQL.Add(IntToStr(Platform_Domain) + ',');
      SQL.Add(IntToStr(Platform_Category) + ',');
      SQL.Add(IntToStr(Platform_Type) + ',');
      SQL.Add(FloatToStr(Max_Range) + ',');
      SQL.Add(FloatToStr(Min_Range) + ',');
      SQL.Add(IntToStr(Motion_Index) + ',');
      SQL.Add(FloatToStr(Seeker_TurnOn_Range) + ',');
      SQL.Add(IntToStr(Lethality) + ',');
      SQL.Add(IntToStr(Damage_Capacity) + ',');
      SQL.Add(FloatToStr(Default_Depth) + ',');
      SQL.Add(FloatToStr(Length) + ',');
      SQL.Add(FloatToStr(Width) + ',');
      SQL.Add(FloatToStr(Height) + ',');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(LSpeed_Acoustic_Intens) + ',');
      SQL.Add(FloatToStr(Below_Cav_Acoustic_Intens) + ',');
      SQL.Add(FloatToStr(Above_Cav_Acoustic_Intens) + ',');
      SQL.Add(FloatToStr(HSpeed_Acoustic_Intens) + ',');
      SQL.Add(FloatToStr(Cavitation_Switch_Point) + ',');
      SQL.Add(FloatToStr(Term_Guide_Azimuth) + ',');
      SQL.Add(FloatToStr(Term_Guide_Elevation) + ',');
      SQL.Add(FloatToStr(Term_Guide_Range) + ',');
      SQL.Add(IntToStr(Pursuit_Guidance_Type) + ',');
      SQL.Add(IntToStr(Air_Drop_Capable) + ',');
      SQL.Add(IntToStr(Use_Terminal_Circle) + ',');
      SQL.Add(FloatToStr(Terminal_Circle_Radius) + ',');
      SQL.Add(IntToStr(Fixed_Circle_Radius) + ',');
      SQL.Add(FloatToStr(Lateral_Deceleration) + ',');
      SQL.Add(FloatToStr(Airborne_Descent_Rate) + ',');
      SQL.Add(FloatToStr(Wire_Angle_Offset) + ',');
      SQL.Add(IntToStr(Guidance_Type) + ',');
      SQL.Add(IntToStr(Anti_Sur_Capable) + ',');
      SQL.Add(IntToStr(Anti_SubSur_Capable) + ',');
      SQL.Add(IntToStr(Primary_Target_Domain) + ',');
      SQL.Add(FloatToStr(Active_Acoustic_POH_Mod) + ',');
      SQL.Add(FloatToStr(Passive_Acoustic_POH_Mod) + ',');
      SQL.Add(FloatToStr(Active_Passive_POH_Mod) + ',');
      SQL.Add(FloatToStr(WireGuide_POH_Modifier) + ',');
      SQL.Add(FloatToStr(WakeHome_POH_Modifier) + ',');
      SQL.Add(FloatToStr(Active_Seeker_Power) + ',');
      SQL.Add(FloatToStr(Active_Seeker_Freq) + ',');
      SQL.Add(FloatToStr(Engagement_Range) + ',');
      SQL.Add(IntToStr(First_Relative_Gyro_Angle) + ',');
      SQL.Add(IntToStr(Second_Relative_Gyro_Angle) + ',');
      SQL.Add(FloatToStr(Max_Torpedo_Gyro_Angle) + ',');
      SQL.Add(FloatToStr(Max_Torpedo_Search_Depth) + ',');
      SQL.Add(FloatToStr(Acoustic_Torp_Ceiling_Depth) + ',');
      SQL.Add(IntToStr(Fixed_Ceiling_Depth) + ',');
      SQL.Add(IntToStr(Fixed_Seeker_TurnOn_Range) + ',');
      SQL.Add(IntToStr(Sinuation_Runout) + ',');
      SQL.Add(FloatToStr(Runout_Sinuation_Period) + ',');
      SQL.Add(FloatToStr(Runout_Sinuation_Amplitude) + ',');
      SQL.Add(FloatToStr(Min_Runout_Range) + ',');
      SQL.Add(IntToStr(Launch_Method) + ',');
      SQL.Add(IntToStr(Data_Entry_Method) + ',');
      SQL.Add(IntToStr(Launch_Speed) + ',');
      SQL.Add(FloatToStr(Opt_Launch_Range_Nuc_Sub) + ',');
      SQL.Add(FloatToStr(Opt_Launch_Range_Conv_Sub) + ',');
      SQL.Add(FloatToStr(Opt_Launch_Range_Other) + ',');
      SQL.Add(IntToStr(Detectability_Type) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Torpedo_Index FROM Torpedo_Definition ');
      SQL.Add('WHERE Class_Identifier =' + quotedStr(Class_Identifier));
      Open;
      with rec.FDef do
      begin
        Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteTorpedo_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(4,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Torpedo_Definition ');
    SQL.Add('WHERE Torpedo_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllMines_OnBoard(const id, index: Integer;
  var aRec: TList): Integer;
var
  i, J, k: Integer;
  rec: TMine_On_Board;
  weaponScript: TScripted_Weapon;
  weaponPattern: TPattern_Weapon;
  mine_Blind: TBlind_Zone;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;

    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Fitted_Weapon_On_Board a JOIN Mine_Definition b ';
    ssql := ssql + 'ON a.Mine_Index = b.Mine_Index LEFT JOIN Note_Storage c ';
    ssql := ssql +
      'ON b.Mine_Index = c.Mine_Index LEFT JOIN Vehicle_Definition d ';
    ssql := ssql + 'ON a.Vehicle_Index = d.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak 0
      if id <> 0 then
        ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ') ';
    end
    else
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 AND a.Mine_Index =' + IntToStr
        (index) + ' ';

    SQL.Add(ssql);
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TMine_On_Board.Create;
        with rec.FData do
        begin
          Fitted_Weap_Index       := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier     := FieldByName('Instance_Identifier').AsString;
          Instance_Type           := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index           := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type              := FieldByName('Mount_Type').AsInteger;
          Launch_Angle            := FieldByName('Launch_Angle').AsSingle;
          Launch_Angle_Required   := FieldByName('Launch_Angle_Required').AsInteger;
          Quantity                := FieldByName('Quantity').AsInteger;
          Firing_Delay            := FieldByName('Firing_Delay').AsSingle;
          Missile_Index           := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index           := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index              := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index            := FieldByName('Hybrid_Index').AsInteger;
        end;

        with rec.FMine_Def do
        begin
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Mine_Identifier         := FieldByName('Mine_Identifier').AsString;
          Platform_Domain         := FieldByName('Platform_Domain').AsInteger;
          Platform_Category       := FieldByName('Platform_Category').AsInteger;
          Platform_Type           := FieldByName('Platform_Type').AsInteger;
          Mine_Classification     := FieldByName('Mine_Classification').AsInteger;
          Length                  := FieldByName('Length').AsSingle;
          Width                   := FieldByName('Width').AsSingle;
          Height                  := FieldByName('Height').AsSingle;
          Mooring_Type            := FieldByName('Mooring_Type').AsInteger;
          Max_Laying_Depth        := FieldByName('Max_Laying_Depth').AsSingle;
          Front_Acoustic_Cross    := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross     := FieldByName('Side_Acoustic_Cross').AsSingle;
          Mine_Lethality          := FieldByName('Mine_Lethality').AsInteger;
          Engagement_Range        := FieldByName('Engagement_Range').AsSingle;
          Anti_Sur_Capable        := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable     := FieldByName('Anti_SubSur_Capable').AsInteger;
          Detectability_Type      := FieldByName('Detectability_Type').AsInteger;
        end;
        {
          with rec.FNote do begin
          Note_Index                := FieldByName('Note_Index').AsInteger;
          Note_Type                 := FieldByName('Note_Type').AsInteger;
          Notes                     := FieldByName('Notes').AsString;
          end;

          with rec.FVehicle.FData do begin
          Vehicle_Identifier        := FieldByName('Vehicle_Identifier').AsString;
          end;
          }
        aRec.Add(rec);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Scripted_Weapon_Event b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Weapons_Mount ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          weaponScript := TScripted_Weapon.Create;

          with weaponScript.Event.FData do
          begin
            List_Index := FieldByName('List_Index').AsInteger;
            Scripted_Event_Index := FieldByName('Scripted_Event_Index')
              .AsInteger;
            Salvo_Size := FieldByName('Salvo_Size').AsInteger;
            Number_Layed := FieldByName('Number_Layed').AsInteger;
            Distance_Between := FieldByName('Distance_Between').AsSingle;
            Mine_Depth := FieldByName('Mine_Depth').AsSingle;
            Target_Index := FieldByName('Target_Index').AsInteger;
            Weapon_Type := FieldByName('Weapon_Type').AsInteger;
            Point_Effect := FieldByName('Point_Effect').AsInteger;
            Weapons_Mount := FieldByName('Weapons_Mount').AsInteger;
          end;

          GetScripted_Behav(weaponScript.Event.FData.Scripted_Event_Index,
            weaponScript.Behav);

          rec.FScript_Mine.Add(weaponScript);

          ZQ.Next;

        end;
      end;

      for J := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[J];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Pattern_Weapon_Event b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Weapons_Mount ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          weaponPattern := TPattern_Weapon.Create;

          with weaponPattern.Event.FData do
          begin
            List_Index := FieldByName('List_Index').AsInteger;
            Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
              .AsInteger;
            Salvo_Size := FieldByName('Salvo_Size').AsInteger;
            Number_Layed := FieldByName('Number_Layed').AsInteger;
            Distance_Between := FieldByName('Distance_Between').AsSingle;
            Mine_Depth := FieldByName('Mine_Depth').AsSingle;
            Weapon_Type := FieldByName('Weapon_Type').AsInteger;
            Point_Effect := FieldByName('Point_Effect').AsInteger;
            Weapons_Mount := FieldByName('Weapons_Mount').AsInteger;

          end;

          GetScripted_Pattern(weaponPattern.Event.FData.Scripted_Pattern_Index,
            weaponPattern.pattern);

          rec.FPattern_Mine.Add(weaponPattern);

          ZQ.Next;

        end;
      end;

      for k := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[k];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.Fitted_Weap_Index = b.Fitted_Weap_Index ');
        SQL.Add('WHERE (a.Fitted_Weap_Index = ' + IntToStr
            (rec.FData.Fitted_Weap_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          mine_Blind := TBlind_Zone.Create;

          with mine_Blind.FData do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;
          end;

          rec.FBlind.Add(mine_Blind);
          ZQ.Next;

        end;
      end;

    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getMine_OnBoard(const id: Integer; var aRec: TList):integer;
var

  rec: TMine_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;

    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Fitted_Weapon_On_Board a JOIN Mine_Definition b ';
    ssql := ssql + 'ON a.Mine_Index = b.Mine_Index LEFT JOIN Note_Storage c ';
    ssql := ssql +
      'ON b.Mine_Index = c.Mine_Index LEFT JOIN Vehicle_Definition d ';
    ssql := ssql + 'ON a.Vehicle_Index = d.Vehicle_Index ';

    // jika id tidak 0
    if id <> 0 then
      ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ') ';

    ssql := ssql + ' ORDER BY a.Instance_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TMine_On_Board.Create;
        with rec.FData do
        begin
          Fitted_Weap_Index       := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier     := FieldByName('Instance_Identifier').AsString;
          Mount_Type              := FieldByName('Mount_Type').AsInteger;
          Vehicle_Index           := FieldByName('Vehicle_Index').AsInteger;
          Quantity                := FieldByName('Quantity').AsInteger;
          Firing_Delay            := FieldByName('Firing_Delay').AsSingle;
          Mine_Index              := FieldByName('Mine_Index').AsInteger;
        end;

        with rec.FMine_Def do
        begin
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Mine_Identifier := FieldByName('Mine_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Mine_Classification := FieldByName('Mine_Classification').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Mooring_Type := FieldByName('Mooring_Type').AsInteger;
          Max_Laying_Depth := FieldByName('Max_Laying_Depth').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Mine_Lethality := FieldByName('Mine_Lethality').AsInteger;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getAllMine(const id: Integer; var mList: TList;
  var rec: TMine_On_Board): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Mine_Definition ';
    ssql := ssql + 'a LEFT JOIN Note_Storage b ON a.Mine_Index = b.Mine_Index ';
    if id <> 0 then
      ssql := ssql + 'WHERE a.Mine_Index = ' + IntToStr(id);

    SQL.Add(ssql);
    SQL.Add(' ORDER BY Mine_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(mList) then
        mList := TList.Create
      else
        mList.Clear;

      while not ZQ.Eof do
      begin
        rec := TMine_On_Board.Create;
        with rec.FMine_Def do
        begin
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Mine_Identifier := FieldByName('Mine_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Mine_Classification := FieldByName('Mine_Classification').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Mooring_Type := FieldByName('Mooring_Type').AsInteger;
          Max_Laying_Depth := FieldByName('Max_Laying_Depth').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Mine_Lethality := FieldByName('Mine_Lethality').AsInteger;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        mList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getPIMine(var mList: TList; ra_id: Integer;
  force: Integer): Integer;
var
  rec: TMine_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Mine_Definition a JOIN Platform_Instance b ');
    SQL.Add('ON a.Mine_Index = b.Mine_Index ');
    SQL.Add('WHERE b.Resource_Alloc_Index=' + IntToStr(ra_id) + ' AND ');
    SQL.Add('b.Force_Designation =' + IntToStr(force));

    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(mList) then
        mList := TList.Create
      else
        mList.Clear;

      while not ZQ.Eof do
      begin
        rec := TMine_On_Board.Create;
        with rec.FMine_Def do
        begin
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Mine_Identifier := FieldByName('Mine_Identifier').AsString;
        end;
        with rec.FPI.FData do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index')
            .AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;
        mList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.updateMine_Def(rec: TMine_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FMine_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Mine_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Mine_Identifier = ''' + Mine_Identifier + ''',');
      SQL.Add('Platform_Domain = ' + IntToStr(Platform_Domain) + ',');
      SQL.Add('Platform_Category = ' + IntToStr(Platform_Category) + ',');
      SQL.Add('Platform_Type = ' + IntToStr(Platform_Type) + ',');
      SQL.Add('Mine_Classification = ' + IntToStr(Mine_Classification) + ',');
      SQL.Add('Length = ' + FloatToStr(Length) + ',');
      SQL.Add('Width = ' + FloatToStr(Width) + ',');
      SQL.Add('Height = ' + FloatToStr(Height) + ',');
      SQL.Add('Mooring_Type = ' + IntToStr(Mooring_Type) + ',');
      SQL.Add('Max_Laying_Depth = ' + FloatToStr(Max_Laying_Depth) + ',');
      SQL.Add('Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross)
          + ',');
      SQL.Add('Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add('Mine_Lethality = ' + IntToStr(Mine_Lethality) + ',');
      SQL.Add('Engagement_Range = ' + FloatToStr(Engagement_Range) + ',');
      SQL.Add('Anti_Sur_Capable = ' + IntToStr(Anti_Sur_Capable) + ',');
      SQL.Add('Anti_SubSur_Capable = ' + IntToStr(Anti_SubSur_Capable) + ',');
      SQL.Add('Detectability_Type = ' + IntToStr(Detectability_Type));
    end;
    SQL.Add('WHERE (Mine_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertMine_Def(rec: TMine_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FMine_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Mine_Definition ');
      SQL.Add(
        '(Mine_Identifier,Platform_Domain,Platform_Category,Platform_Type,Mine_Classification,');
      SQL.Add(
        'Length,Width,Height,Mooring_Type,Max_Laying_Depth,Front_Acoustic_Cross,Side_Acoustic_Cross,');
      SQL.Add(
        'Mine_Lethality,Engagement_Range,Anti_Sur_Capable,Anti_SubSur_Capable,Detectability_Type)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Mine_Identifier + ''',');
      SQL.Add(IntToStr(Platform_Domain) + ',');
      SQL.Add(IntToStr(Platform_Category) + ',');
      SQL.Add(IntToStr(Platform_Type) + ',');
      SQL.Add(IntToStr(Mine_Classification) + ',');
      SQL.Add(FloatToStr(Length) + ',');
      SQL.Add(FloatToStr(Width) + ',');
      SQL.Add(FloatToStr(Height) + ',');
      SQL.Add(IntToStr(Mooring_Type) + ',');
      SQL.Add(FloatToStr(Max_Laying_Depth) + ',');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add(IntToStr(Mine_Lethality) + ',');
      SQL.Add(FloatToStr(Engagement_Range) + ',');
      SQL.Add(IntToStr(Anti_Sur_Capable) + ',');
      SQL.Add(IntToStr(Anti_SubSur_Capable) + ',');
      SQL.Add(IntToStr(Detectability_Type) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Mine_Index FROM Mine_Definition ');
      SQL.Add('WHERE Mine_Identifier =' + quotedStr(Mine_Identifier));
      Open;
      with rec.FMine_Def do
      begin
        Mine_Index := FieldByName('Mine_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteMine_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(3,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Mine_Definition ');
    SQL.Add('WHERE Mine_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.updateScriptWeapon(rec: TScripted_Weapon_Event;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Scripted_Weapon_Event ');
      SQL.Add('SET ');
      SQL.Add('List_Index =' + IntToStr(List_Index) + ',');
      SQL.Add('Salvo_Size =' + IntToStr(Salvo_Size) + ',');
      SQL.Add('Number_Layed =' + IntToStr(Number_Layed) + ',');
      SQL.Add('Distance_Between =' + FloatToStr(Distance_Between) + ',');
      SQL.Add('Mine_Depth =' + FloatToStr(Mine_Depth) + ',');
      SQL.Add('Target_Index =' + IntToStr(Target_Index) + ',');
      SQL.Add('Weapon_Type =' + IntToStr(Weapon_Type) + ',');
      SQL.Add('Point_Effect =' + IntToStr(Point_Effect) + ',');
      SQL.Add('Weapons_Mount =' + IntToStr(Weapons_Mount));
    end;

    SQL.Add(' WHERE (Scripted_Event_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateSeaState_On_Radar(rec: TSea_State_On_Radar;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Sea_State_On_Radar');
      SQL.Add('SET ');
      SQL.Add('Effect_on_Radar = ' + FloatToStr(Effect_on_Radar));
    end;
    SQL.Add('WHERE (Sea_State = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateFittedWeapon_Launch(rec: TFitted_Weap_Launcher_On_Board;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Fitted_Wep_Launcher_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Launcher_Type =' + IntToStr(Launcher_Type) + ',');
      SQL.Add('Launcher_Angle_Required =' + IntToStr(Launcher_Angle_Required)
          + ',');
      SQL.Add('Launcher_Angle =' + IntToStr(Launcher_Angle) + ',');
      SQL.Add('Launcher_Max_Qty =' + IntToStr(Launcher_Max_Qty));
    end;

    SQL.Add(' WHERE (Fitted_Weap_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertFittedWeapon_Launcher(rec: TFitted_Weap_Launcher_On_Board)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add(
        'SET IDENTITY_INSERT Runtime_DB.[dbo].[Fitted_Weap_Launcher_On_Board] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Fitted_Weap_Launcher_On_Board ');
      SQL.Add(
        '(Fitted_Weap_Index,Launcher_Type,Launcher_Angle_Required,Launcher_Angle,Launcher_Max_Qty)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Fitted_Weap_Index) + ',');
      SQL.Add(IntToStr(Launcher_Type) + ',');
      SQL.Add(IntToStr(Launcher_Angle_Required) + ',');
      SQL.Add(IntToStr(Launcher_Angle) + ',');
      SQL.Add(IntToStr(Launcher_Max_Qty) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetHybrid_Definition(const id: Integer;
  var aRec: TList): Integer;
var
  i: Integer;
  hybrid: THybrid_On_Board;
  fit: TFitted_Weapon_On_Board;
begin
  result := -1;
  hybrid := nil;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Fitted_Weapon_On_Board a JOIN Vehicle_Definition b ');
    SQL.Add('ON a.Vehicle_Index = b.Vehicle_Index ');
    SQL.Add('WHERE (a.Vehicle_Index = ' + IntToStr(id) + ')');

    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        fit := TFitted_Weapon_On_Board.Create;

        with fit.FData do
        begin
          Fitted_Weap_Index := FieldByName('Fitted_Weap_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Launch_Angle := FieldByName('Launch_Angle').AsSingle;
          Launch_Angle_Required := FieldByName('Launch_Angle_Required')
            .AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Firing_Delay := FieldByName('Firing_Delay').AsSingle;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        end;
        aRec.Add(hybrid);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        fit := aRec.Items[i];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Hybrid_Definition a INNER JOIN Missile_Definition b	');
        SQL.Add(
          'ON a.Missile_Index = b.Missile_Index INNER JOIN Torpedo_Definition c ');
        SQL.Add('ON a.Torpedo_Index = c.Torpedo_Index ');
        SQL.Add('WHERE (Hybrid_Index = ' + IntToStr(fit.FData.Hybrid_Index)
            + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          hybrid := THybrid_On_Board.Create;

          with hybrid.FData do
          begin
            Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
            Missile_Index := FieldByName('Missile_Index').AsInteger;
            Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          end;

          fit.FHybrid.Add(hybrid);
          ZQ.Next;

        end;

      end;
    end;
  end;

end;


function TdmTTT.UpdateIdentIndex(const aPI: TPlatform_Instance;
  const id: integer): Boolean;
begin
  result := False;
  with ZQ do
  begin
    with aPI.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Platform_Instance ');
      SQL.Add('SET ');
      SQL.Add('Instance_Ident_Index = ' + IntToStr(id));
      SQL.Add(' WHERE Platform_Instance_Index = ' + IntToStr(Platform_Instance_Index));
    end;

    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------


function TdmTTT.GetHybrid_ByMissile(const id:Integer; var rec: THybrid_On_Board): Boolean;
var
  i: Integer;
begin
  result := False;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT a.*, b.Class_Identifier as mis, c.Class_Identifier as torp ');
    SQL.Add('FROM Hybrid_Definition a LEFT JOIN Missile_Definition b ');
    SQL.Add('ON a.Missile_Index = b.Missile_Index LEFT JOIN Torpedo_Definition c');
    SQL.Add('ON a.Torpedo_Index = c.Torpedo_Index');
    SQL.Add('WHERE a.Missile_Index = ' + IntToStr(id) );

    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      rec := THybrid_On_Board.Create;
      with rec.FData do
      begin
        Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        Missile_Index := FieldByName('Missile_Index').AsInteger;
        Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
      end;
      with rec.FMissile_Def do
      begin
        Missile_Index := FieldByName('Missile_Index').AsInteger;
        Class_Identifier := FieldByName('mis').AsString;
      end;
      with rec.FTorpedo_Def do
      begin
        Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
        Class_Identifier := FieldByName('torp').AsString;
      end;
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.updateReference(rec: TRecReference_Point; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Reference_Point ');
      SQL.Add('SET ');
      SQL.Add('Resource_Alloc_Index =' + IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add('Reference_Identifier = ' + QuotedStr(Reference_Identifier) + ',');
      SQL.Add('Force_Designation =' + IntToStr(Force_Designation) + ',');
      SQL.Add('Track_Type =' + IntToStr(Track_Type) + ',');
      SQL.Add('Symbol_Type =' + IntToStr(Symbol_Type) + ',');
      SQL.Add('Course =' + FloatToStr(Course) + ',');
      SQL.Add('Speed =' + FloatToStr(Speed) + ',');
      SQL.Add('X_Position =' + FloatToStr(X_Position) + ',');
      SQL.Add('Y_Position =' + FloatToStr(Y_Position) + ',');
      SQL.Add('Latitude =' + FloatToStr(Latitude) + ',');
      SQL.Add('Longitude =' + FloatToStr(Longitude) + ',');
      SQL.Add('Track_Bearing =' + FloatToStr(Track_Bearing) + ',');
      SQL.Add('AOP_Start_Time_Offset =' + IntToStr(AOP_Start_Time_Offset));
    end;

    SQL.Add(' WHERE (Reference_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertReference(var rec: TRecReference_Point): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Reference_Point ');
      SQL.Add('(Resource_Alloc_Index,Reference_Identifier,Force_Designation,Track_Type,Symbol_Type,');
      SQL.Add('Course,Speed,X_Position,Y_Position,Latitude,Longitude,Track_Bearing,AOP_Start_Time_Offset)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Resource_Alloc_Index)+',');
      SQL.Add(QuotedStr(Reference_Identifier)+',');
      SQL.Add(IntToStr(Force_Designation)+',');
      SQL.Add(IntToStr(Track_Type)+',');
      SQL.Add(IntToStr(Symbol_Type)+',');
      SQL.Add(FloatToStr(Course)+',');
      SQL.Add(FloatToStr(Speed)+',');
      SQL.Add(FloatToStr(X_Position)+',');
      SQL.Add(FloatToStr(Y_Position)+',');
      SQL.Add(FloatToStr(Latitude)+',');
      SQL.Add(FloatToStr(Longitude)+',');
      SQL.Add(FloatToStr(Track_Bearing)+',');
      SQL.Add(IntToStr(AOP_Start_Time_Offset)+')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Reference_Index FROM Reference_Point ');
      SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index));
      SQL.Add(' AND Force_Designation = ' + IntToStr(Force_Designation));
      SQL.Add(' AND Reference_Identifier = ' + QuotedStr(Reference_Identifier));
      Open;

      Reference_Index := FieldByName('Reference_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------

function TdmTTT.DeleteReference_Point(const ra_id,force: Integer): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Reference_Point  ');
      SQL.Add('WHERE (Resource_Alloc_Index = ' +  IntToStr(ra_id) + ')' );
      SQL.Add('AND (Force_Designation = ' +  IntToStr(force) + ')' );
      ExecSQL;
   end;
end;
//-------------------------------------------------------------------

function TdmTTT.DeleteAllReference_Point(const ra_id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Reference_Point  ');
      SQL.Add('WHERE (Resource_Alloc_Index = ' +  ra_id + ')' );
      ExecSQL;
   end;
end;
//-------------------------------------------------------------------

function TdmTTT.GetResource_Pattern_Mapping(const ra_id: integer; var recList: TList): Boolean;
var
  rec: TResource_Allocation;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Resource_Pattern_Mapping a JOIN Predefined_Pattern b ');
    SQL.Add('on a.Pattern_Index = b.Pattern_Index');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(ra_id) );
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;
      if not Assigned(recList) then
        recList := TList.Create
      else
        recList.Clear;

      while not ZQ.Eof do
      begin
        rec := TResource_Allocation.Create;
        with rec.FResource_Pattern do
        begin
          Pattern_Instance_Index := FieldByName('Pattern_Instance_Index').AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Pattern_Index := FieldByName('Pattern_Index').AsInteger;
        end;
        with rec.FPattern do
        begin
          Pattern_Index := FieldByName('Pattern_Index').AsInteger;
          Pattern_Identifier := FieldByName('Pattern_Identifier').AsString;
          Pattern_Type := FieldByName('Pattern_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Pattern_Termination := FieldByName('Pattern_Termination').AsInteger;
          Termination_Heading := FieldByName('Termination_Heading').AsSingle;
        end;

        recList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;


//--------------------------------------------------------------------


function TdmTTT.UpdateResource_Pattern_Mapping(const id: integer; rec: TRecResource_Pattern_Mapping): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Resource_Pattern_Mapping ');
      SQL.Add('SET ');
      SQL.Add('Resource_Alloc_Index =' + IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add('Pattern_Index = ' + IntToStr(Pattern_Index) );
    end;

    SQL.Add(' WHERE (Pattern_Instance_Index = ' + IntToStr(id) + ')');
    ExecSQL;

  end;
end;


//--------------------------------------------------------------------


function TdmTTT.InsertResource_Embark_Library(const res_id: string;
  var rec: TResource_Base_Mapping): Integer;
begin
  Result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Resource_Embark_Library_Mapping ');
      SQL.Add('(Resource_Alloc_Index, Embark_Library_Index, ');
      SQL.Add('Force, Longitude, Latitude ) ');
      SQL.Add('VALUES ( ');
      SQL.Add(res_id + ',');
      SQL.Add(IntToStr(Base_Index) + ',');
      SQL.Add(IntToStr(Force) + ',');
	    SQL.Add(FloatToStr(Longitude) + ',');
	    SQL.Add(FloatToStr(Latitude) );
      SQL.Add(')');
    end;
    ExecSQL;
  end;
end;

function TdmTTT.InsertResource_Interval_List_Mapping(
  rec: TResource_Allocation): Boolean;
begin
  result := False;
  with ZQ do
  begin
    with rec.FRadarListMap do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Resource_Interval_List_Mapping ');
      SQL.Add(
        '(Resource_Alloc_Index,Interval_List_Index)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add(IntToStr(Interval_List_Index) + ')');
      ExecSQL;

      Result := True;
    end;
  end;
end;
function TdmTTT.InsertResource_Pattern_Mapping(rec: TRecResource_Pattern_Mapping): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Resource_Pattern_Mapping ');
      SQL.Add(
        '(Resource_Alloc_Index,Pattern_Index)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add(IntToStr(Pattern_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Pattern_Instance_Index FROM Resource_Pattern_Mapping ');
      SQL.Add('WHERE (Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index) + ') ');
      SQL.Add('AND (Pattern_Index = ' + IntToStr(Pattern_Index) + ') ');
      Open;

      Pattern_Instance_Index := FieldByName('Pattern_Instance_Index').AsInteger;
    end;
  end;
end;


//--------------------------------------------------------------------

function TdmTTT.DeleteAllResource_Pattern_Mapping(const ra_id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Resource_Pattern_Mapping  ');
      SQL.Add('WHERE (Resource_Alloc_Index = ' +  ra_id + ')' );
      ExecSQL;
   end;
end;


//--------------------------------------------------------------------

function TdmTTT.DeleteResource_Pattern_Mapping(const pat_id: integer): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Resource_Pattern_Mapping  ');
      SQL.Add('WHERE (Pattern_Instance_Index = ' +  IntToStr(pat_id) + ')' );
      ExecSQL;
   end;
end;
//-------------------------------------------------------------------

function TdmTTT.DeleteAllResource_Embark_Library_Mapping(
  const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Embark_Library_Mapping  ');
    SQL.Add('WHERE (Resource_Alloc_Index = ' + id + ')');
    ExecSQL;
  end;
end;

function TdmTTT.DeleteAllResource_Interval_List_Mapping(const ra_id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Resource_Interval_List_Mapping  ');
      SQL.Add('WHERE (Resource_Alloc_Index = ' +  ra_id + ')' );
      ExecSQL;
   end;
end;
//-------------------------------------------------------------------

function TdmTTT.getAllReference_Point(const ra_id,force: integer;
      var aRec: TList): Integer;
var rec: TReference_Point;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Reference_Point ' );
    SQL.Add('WHERE (Resource_Alloc_Index = ' +  IntToStr(ra_id) + ') ' );
    SQL.Add('AND (Force_Designation = ' +  IntToStr(force) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TReference_Point.Create;
        with rec.FData do begin
          Reference_Index         := FieldByName('Reference_Index').AsInteger;
          Resource_Alloc_Index    := FieldByName('Resource_Alloc_Index').AsInteger;
          Reference_Identifier    := FieldByName('Reference_Identifier').AsString;
          Force_Designation       := FieldByName('Force_Designation').AsInteger;
          Track_Type              := FieldByName('Track_Type').AsInteger;
          Symbol_Type             := FieldByName('Symbol_Type').AsInteger;
          Course                  := FieldByName('Course').AsSingle;
          Speed                   := FieldByName('Speed').AsSingle;
          X_Position              := FieldByName('X_Position').AsSingle;
          Y_Position              := FieldByName('Y_Position').AsSingle;
          Latitude                := FieldByName('Latitude').AsFloat;
          Longitude               := FieldByName('Longitude').AsFloat;
          Track_Bearing           := FieldByName('Track_Bearing').AsSingle;
          AOP_Start_Time_Offset   := FieldByName('AOP_Start_Time_Offset').AsInteger;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.GetExternal_Communication_Channel(var aRec: TList;
  const ra_id, com_id: string; var rec: TExternal_Communication_Channel)
  : Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM External_Communication_Channel WHERE ');
    if ra_id <> '' then
      SQL.Add('(Resource_Alloc_Index = ' + ra_id + ')');

    if com_id <> '' then
      SQL.Add('(Comms_Channel_Index = ' + com_id + ')');

    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TExternal_Communication_Channel.Create;
        with rec.FData do
        begin
          Comms_Channel_Index := FieldByName('Comms_Channel_Index').AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Channel_Number := FieldByName('Channel_Number').AsInteger;
          Channel_Identifier := FieldByName('Channel_Identifier').AsString;
          Comms_Band := FieldByName('Comms_Band').AsInteger;
          Channel_Freq := FieldByName('Channel_Freq').AsFloat;
          Channel_Security := FieldByName('Channel_Security').AsInteger;
          Channel_Code := FieldByName('Channel_Code').AsString;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.updateComm(rec: TRecExternal_Communication_Channel;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE External_Communication_Channel ');
      SQL.Add('SET ');
      SQL.Add('Channel_Identifier =' + QuotedStr(Channel_Identifier) + ',');
      SQL.Add('Resource_Alloc_Index =' + IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add('Channel_Number =' + IntToStr(Channel_Number) + ',');
      SQL.Add('Comms_Band =' + IntToStr(Comms_Band) + ',');
      SQL.Add('Channel_Freq =' + FloatToStr(Channel_Freq) + ',');
      SQL.Add('Channel_Security =' + FloatToStr(Channel_Security) + ',');
      SQL.Add('Channel_Code =' + QuotedStr(Channel_Code));
    end;

    SQL.Add(' WHERE (Comms_Channel_Index = ' + id + ')');
    ExecSQL;

  end;
end;

function TdmTTT.insertComm(rec: TRecExternal_Communication_Channel): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO External_Communication_Channel');
      SQL.Add(
        '(Channel_Identifier,Resource_Alloc_Index,Channel_Number,Comms_Band,Channel_Freq,Channel_Security,Channel_Code)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Channel_Identifier + ''',');
      SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add(IntToStr(Channel_Number) + ',');
      SQL.Add(IntToStr(Comms_Band) + ',');
      SQL.Add(FloatToStr(Channel_Freq) + ',');
      SQL.Add(IntToStr(Channel_Security) + ',');
      SQL.Add(QuotedStr(Channel_Code) + ')');
      ExecSQL;
    end;
  end;
end;

function TdmTTT.DeleteExternal_Communication_Channel(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM External_Communication_Channel');
    SQL.Add('WHERE (Comms_Channel_Index = ' + id + ')');
    ExecSQL;
  end;
end;

function TdmTTT.DeleteAllExternal_Communication_Channel(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM External_Communication_Channel  ');
    SQL.Add('WHERE (Resource_Alloc_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------
// ==Vehicle detail 3. CounterMeasure  ==========================================
// ------------------------------------------------------------------------------
function TdmTTT.getAllAcoustic_Decoy_On_Board(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TAcoustic_Decoy_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add
      ('FROM  Acoustic_Decoy_On_Board a JOIN Acoustic_Decoy_Definition b	');
    SQL.Add('ON a.Decoy_Index = b.Decoy_Index LEFT JOIN Note_Storage c ');
    SQL.Add('ON c.Decoy_Index = b.Decoy_Index');
    SQL.Add(' WHERE (a.Vehicle_Index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TAcoustic_Decoy_On_Board.Create;

        with rec.FData do
        begin
          Acoustic_Instance_Index := FieldByName('Acoustic_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Decoy_Index := FieldByName('Decoy_Index').AsInteger;
        end;

        with rec.FAccousticDecoy_Def do
        begin
          Decoy_Index := FieldByName('Decoy_Index').AsInteger;
          Decoy_Identifier := FieldByName('Decoy_Identifier').AsString;
          Acoustic_Intensity_Increase := FieldByName
            ('Acoustic_Intensity_Increase').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getAllAcoustic_Decoy_POH_Modifier(const id: integer;
      var aRec: TList): Integer;
var
    rec: TAcoustic_Decoy_POH_Modifier;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Acoustic_Decoy_POH_Modifier ' );
    SQL.Add('WHERE (Decoy_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TAcoustic_Decoy_POH_Modifier.Create;
        with rec.FAccousticDecoy_POH do begin
          Decoy_Index             := FieldByName('Decoy_Index').AsInteger;
          Torpedo_Guidance_Type   := FieldByName('Torpedo_Guidance_Type').AsInteger;
          Aspect_Angle            := FieldByName('Aspect_Angle').AsInteger;
          POH_Modifier            := FieldByName('POH_Modifier').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getAccoustic_Decoy_On_Board(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TAcoustic_Decoy_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT DISTINCT a.Instance_Identifier,a.Acoustic_Instance_Index, ');
    SQL.Add('a.Quantity,a.Vehicle_Index,a.Decoy_Index ');
    SQL.Add
      ('FROM  Acoustic_Decoy_On_Board a JOIN Acoustic_Decoy_Definition b	');
    SQL.Add('ON a.Decoy_Index = b.Decoy_Index LEFT JOIN Note_Storage c ');
    SQL.Add('ON c.Decoy_Index = b.Decoy_Index ');
    SQL.Add(' WHERE (a.Vehicle_Index = ' + IntToStr(id) + ') ');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TAcoustic_Decoy_On_Board.Create;

        with rec.FData do
        begin
          Acoustic_Instance_Index := FieldByName('Acoustic_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Quantity                := FieldByName('Quantity').AsInteger;
          Vehicle_Index           := FieldByName('Vehicle_Index').AsInteger;
          Decoy_Index             := FieldByName('Decoy_Index').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getAccoustic_Decoy(const id: Integer; var aRec: TList): Integer;
var
  rec: TAcoustic_Decoy_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Acoustic_Decoy_Definition a ';
    ssql := ssql + 'LEFT JOIN Note_Storage b ON a.Decoy_Index = b.Decoy_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE a.Decoy_Index = ' + IntToStr(id);

    ssql := ssql + ' ORDER BY a.Decoy_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TAcoustic_Decoy_On_Board.Create;
        with rec.FAccousticDecoy_Def do
        begin
          Decoy_Index := FieldByName('Decoy_Index').AsInteger;
          Decoy_Identifier := FieldByName('Decoy_Identifier').AsString;
          Acoustic_Intensity_Increase := FieldByName
            ('Acoustic_Intensity_Increase').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateAcoustic_Decoy_Def(rec: TAcoustic_Decoy_On_Board;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FAccousticDecoy_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Acoustic_Decoy_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Decoy_Identifier = ''' + Decoy_Identifier + ''',');
      SQL.Add('Acoustic_Intensity_Increase = ' + FloatToStr
          (Acoustic_Intensity_Increase));
    end;
    SQL.Add('WHERE (Decoy_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertAcoustic_Decoy_Def(rec: TAcoustic_Decoy_On_Board)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FAccousticDecoy_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Acoustic_Decoy_Definition ');
      SQL.Add('(Decoy_Identifier,Acoustic_Intensity_Increase)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Decoy_Identifier + ''',');
      SQL.Add(FloatToStr(Acoustic_Intensity_Increase) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Decoy_Index FROM Acoustic_Decoy_Definition ');
      SQL.Add('WHERE Decoy_Identifier=' + quotedStr(Decoy_Identifier));
      Open;
      with rec.FAccousticDecoy_Def do
      begin
        Decoy_Index := FieldByName('Decoy_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteAccoustic_Decoy_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(20,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Acoustic_Decoy_Definition ');
    SQL.Add('WHERE Decoy_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.UpdateAcoustic_Decoy_On_Board(const id: string;
  var rec: TAcoustic_Decoy_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Acoustic_Decoy_On_Board  ');
      SQL.Add('SET ' );
      SQL.Add('Instance_Identifier = '+ QuotedStr(Instance_Identifier)+',');
      SQL.Add('Instance_Type = '+IntToStr(Instance_Type)+',');
      SQL.Add('Quantity = '+IntToStr(Quantity)+',');
      SQL.Add('Vehicle_Index = '+IntToStr(Vehicle_Index)+',');
      SQL.Add('Decoy_Index = '+IntToStr(Decoy_Index)+' ');
    end;
    SQL.Add('WHERE (Acoustic_Instance_Index = ' +  id + ')' );
    ExecSQL;
  end;
end;

/// /====================================================
function TdmTTT.InsertAcoustic_Decoy_On_Board(var rec: TAcoustic_Decoy_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Acoustic_Decoy_On_Board  ');
      SQL.Add('(Instance_Identifier,Instance_Type,Quantity,Vehicle_Index,Decoy_Index)');
      SQL.Add('VALUES ( ');
      SQL.Add(QuotedStr(Instance_Identifier) + ',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Quantity) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Decoy_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Acoustic_Decoy_On_Board ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index) +' ');
      SQL.Add('AND Decoy_Index = ' + IntToStr(Decoy_Index));
      Open;

      Acoustic_Instance_Index := FieldByName('Acoustic_Instance_Index').AsInteger;
    end;
  end;
end;

//====================================================

function TdmTTT.DeleteAcoustic_Decoy_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Acoustic_Decoy_On_Board  ');
    SQL.Add('WHERE (Acoustic_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

//-------------------------------------------------------------------

//-------------------------------------------------------------------
//
//function TdmTTT.DeleteAcoustic_Decoy_POH_Modifier(const id: string): integer;
//begin
//  result := -1;
//  with ZQ do begin
//      Close;
//      SQL.Clear;
//      SQL.Add('DELETE FROM Acoustic_Decoy_POH_Modifier  ');
//      SQL.Add('WHERE (Decoy_Index = ' +  id + ')' );
//      ExecSQL;
//   end;
//end;

//-------------------------------------------------------------------

function TdmTTT.getAllAir_Bubble_Mount(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TAir_Bubble_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Air_Bubble_Mount a JOIN Air_Bubble_Definition b ');
    SQL.Add(
      'ON a.Air_Bubble_Index = b.Air_Bubble_Index LEFT JOIN Note_Storage c');
    SQL.Add('ON c.Air_Bubble_Index = b.Air_Bubble_Index ');
    SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ') ');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TAir_Bubble_On_Board.Create;
        with rec.FData do
        begin
          Air_Bubble_Instance_Index := FieldByName('Air_Bubble_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Bubble_Qty_On_Board := FieldByName('Bubble_Qty_On_Board').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Air_Bubble_Index := FieldByName('Air_Bubble_Index').AsInteger;
        end;

        with rec.FAirBubble_Def do
        begin
          Air_Bubble_Index := FieldByName('Air_Bubble_Index').AsInteger;
          Air_Bubble_Identifier := FieldByName('Air_Bubble_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Acoustic_Cross := FieldByName('Max_Acoustic_Cross').AsSingle;
          Dissipation_Time := FieldByName('Dissipation_Time').AsSingle;
          Ascent_Rate := FieldByName('Ascent_Rate').AsSingle;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getAir_Buble_Mount(const id: Integer; var aRec: TList):integer;
var

  rec: TAir_Bubble_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT DISTINCT a.Instance_Identifier,a.Air_Bubble_Instance_Index, ');
    SQL.Add('a.Vehicle_Index,a.Bubble_Qty_On_Board,a.Air_Bubble_Index ');
    SQL.Add('FROM  Air_Bubble_Mount a JOIN Air_Bubble_Definition b ');
    SQL.Add(
      'ON a.Air_Bubble_Index = b.Air_Bubble_Index LEFT JOIN Note_Storage c');
    SQL.Add('ON c.Air_Bubble_Index = b.Air_Bubble_Index ');
    SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ') ');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TAir_Bubble_On_Board.Create;
        with rec.FData do
        begin
          Air_Bubble_Instance_Index := FieldByName('Air_Bubble_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Bubble_Qty_On_Board := FieldByName('Bubble_Qty_On_Board').AsInteger;
          Air_Bubble_Index    := FieldByName('Air_Bubble_Index').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getAir_Bubble_Def(const id: Integer; var aRec: TList): Integer;
var
  rec: TAir_Bubble_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Air_Bubble_Definition a ';
    ssql := ssql + 'LEFT JOIN Note_Storage b ON a.Air_Bubble_Index = b.Air_Bubble_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE a.Air_Bubble_Index =' + IntToStr(id);

    ssql := ssql + ' ORDER BY a.Air_Bubble_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TAir_Bubble_On_Board.Create;
        with rec.FAirBubble_Def do
        begin
          Air_Bubble_Index := FieldByName('Air_Bubble_Index').AsInteger;
          Air_Bubble_Identifier := FieldByName('Air_Bubble_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Acoustic_Cross := FieldByName('Max_Acoustic_Cross').AsSingle;
          Dissipation_Time := FieldByName('Dissipation_Time').AsSingle;
          Ascent_Rate := FieldByName('Ascent_Rate').AsSingle;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// -----------------------------------------------------------------------------

function TdmTTT.updateAir_Bubble(rec: TAir_Bubble_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Air_Bubble_Mount ');
      SQL.Add('SET ');
      SQL.Add('Air_Bubble_Index =' + IntToStr
          (Air_Bubble_Index) + ',');
      SQL.Add('Instance_Identifier =''' + Instance_Identifier + ''',');
      SQL.Add('Instance_Type =' + IntToStr(Instance_Type) + ',');
      SQL.Add('Bubble_Qty_On_Board =' + IntToStr(Bubble_Qty_On_Board) + ',');
      SQL.Add('Vehicle_Index =' + IntToStr(Vehicle_Index));
      SQL.Add(' WHERE (Air_Bubble_Instance_Index = ' + id + ')');
    end;
    ExecSQL;

  end;
end;

// -----------------------------------------------------------------------------

function TdmTTT.insertAir_Bubble(rec: TAir_Bubble_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Air_Bubble_Mount ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Bubble_Qty_On_Board,');
      SQL.Add('Vehicle_Index,Air_Bubble_Index)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Bubble_Qty_On_Board) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Air_Bubble_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Air_Bubble_Mount ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index) +' ');
      SQL.Add('AND Air_Bubble_Index = ' + IntToStr(Air_Bubble_Index));
      Open;

      Air_Bubble_Instance_Index := FieldByName('Air_Bubble_Instance_Index').AsInteger;
    end;
  end;
end;

// -----------------------------------------------------------------------------

function TdmTTT.DeleteAir_Bubble_Mount(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Air_Bubble_Mount  ');
    SQL.Add('WHERE (Air_Bubble_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

function TdmTTT.updateAir_Bubble_Def(rec: TAir_Bubble_On_Board;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FAirBubble_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Air_Bubble_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Air_Bubble_Identifier = ''' + Air_Bubble_Identifier + ''',');
      SQL.Add('Platform_Domain = ' + IntToStr(Platform_Domain) + ',');
      SQL.Add('Platform_Category = ' + IntToStr(Platform_Category) + ',');
      SQL.Add('Platform_Type = ' + IntToStr(Platform_Type) + ',');
      SQL.Add('Max_Acoustic_Cross = ' + FloatToStr(Max_Acoustic_Cross) + ',');
      SQL.Add('Dissipation_Time = ' + FloatToStr(Dissipation_Time) + ',');
      SQL.Add('Ascent_Rate = ' + FloatToStr(Ascent_Rate) + ',');
      SQL.Add('Descent_Rate = ' + FloatToStr(Descent_Rate));
    end;
    SQL.Add('WHERE (Air_Bubble_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// -----------------------------------------------------------------------------

function TdmTTT.insertAir_Bubble_Def(rec: TAir_Bubble_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FAirBubble_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Air_Bubble_Definition ');
      SQL.Add('(Air_Bubble_Identifier,Platform_Domain,Platform_Category,');
      SQL.Add(
        'Platform_Type,Max_Acoustic_Cross,Dissipation_Time,Ascent_Rate,Descent_Rate)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Air_Bubble_Identifier + ''',');
      SQL.Add(IntToStr(Platform_Domain) + ',');
      SQL.Add(IntToStr(Platform_Category) + ',');
      SQL.Add(IntToStr(Platform_Type) + ',');
      SQL.Add(FloatToStr(Max_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(Dissipation_Time) + ',');
      SQL.Add(FloatToStr(Ascent_Rate) + ',');
      SQL.Add(FloatToStr(Descent_Rate) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Air_Bubble_Index FROM Air_Bubble_Definition ');
      SQL.Add('WHERE Air_Bubble_Identifier=' + quotedStr(Air_Bubble_Identifier)
        );
      Open;
      with rec.FAirBubble_Def do
      begin
        Air_Bubble_Index := FieldByName('Air_Bubble_Index').AsInteger;
      end;
    end;
  end;
end;

function TdmTTT.InsertBase_Location(var rec: TBase_Location): Integer;
begin
  Result := -1;
  with ZQ do
  begin
    with Rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Base_Location (Base_Identifier, Longitude, Latitude)');
      SQL.Add('VALUES (');
      SQL.Add(QuotedStr(Base_Identifier) + ',');
      SQL.Add(FloatToStr(Longitude) + ',' + FloatToStr(Latitude) + ')');
      ExecSQL;
      {
      SQL.Clear;
      SQL.Add('SELECT * FROM Base_Location ');
      SQL.Add('ORDER BY Base_Identifier ');
      Open;  }
    end;
  end;
end;

// -----------------------------------------------------------------------------

function TdmTTT.deleteAir_Bubble_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(21,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Air_Bubble_Definition ');
    SQL.Add('WHERE Air_Bubble_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;


////====================================================
  function TdmTTT.getAllChaff_Definition(
        var aRec: TList): Integer;
  var
      rec: TChaff_On_Board;
  begin
    result := -1;
    if not zConn.Connected then Exit;

    with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM  Chaff_Definition ' );
      Open;

      result := RecordCount;
      if not IsEmpty then begin

        First;

        if not Assigned(aRec) then
          aRec := TList.Create
        else
          aRec.Clear;

        while not ZQ.Eof do begin
          rec := TChaff_On_Board.Create;
          with rec.FChaff_Def do begin
            Chaff_Index               := FieldByName('Chaff_Index').AsInteger;
            Chaff_Identifier          := FieldByName('Chaff_Identifier').AsString;
            Platform_Domain           := FieldByName('Platform_Domain').AsInteger;
            Platform_Category         := FieldByName('Platform_Category').AsInteger;
            Platform_Type             := FieldByName('Platform_Type').AsInteger;
            Max_Radar_Cross           := FieldByName('Max_Radar_Cross').AsSingle;
            Bloom_Time                := FieldByName('Bloom_Time').AsInteger;
            Max_Dissipation_Time      := FieldByName('Max_Dissipation_Time').AsInteger;
            Min_Dissipation_Time      := FieldByName('Min_Dissipation_Time').AsInteger;
            Descent_Rate              := FieldByName('Descent_Rate').AsSingle;
            Max_Radius                := FieldByName('Max_Radius').AsSingle;
            Max_Radar_Attenuation     := FieldByName('Max_Radar_Attenuation').AsSingle;
            Radar_Affect_Lower_Freq   := FieldByName('Radar_Affect_Lower_Freq').AsSingle;
            Radar_Affect_Upper_Freq   := FieldByName('Radar_Affect_Upper_Freq').AsSingle;
          end;
          aRec.Add(rec);
           ZQ.Next;
        end;
      end;
    end;
  end;

  //------------------------------------------------------------------------------

// -----------------------------------------------------------------------------

function TdmTTT.getAllChaff_On_Board(const id: Integer;
  var aRec: TList): Integer;
var
  i, J: Integer;
  chaff: TChaff_On_Board;
  chaffScript: TScripted_Chaff;
  chaffPattern: TPattern_Chaff;

begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Chaff_On_Board a JOIN Chaff_Definition b ');
    SQL.Add('ON a.Chaff_Index = b.Chaff_Index LEFT JOIN Note_Storage c ');
    SQL.Add('ON c.Chaff_Index = b.Chaff_Index ');
    SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        chaff := TChaff_On_Board.Create;

        with chaff.FData do
        begin
          Chaff_Instance_Index := FieldByName('Chaff_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Chaff_Qty_On_Board := FieldByName('Chaff_Qty_On_Board').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Chaff_Index := FieldByName('Chaff_Index').AsInteger;
        end;

        with chaff.FChaff_Def do
        begin
          Chaff_Index := FieldByName('Chaff_Index').AsInteger;
          Chaff_Identifier := FieldByName('Chaff_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Radar_Cross := FieldByName('Max_Radar_Cross').AsSingle;
          Bloom_Time := FieldByName('Bloom_Time').AsInteger;
          Max_Dissipation_Time := FieldByName('Max_Dissipation_Time').AsInteger;
          Min_Dissipation_Time := FieldByName('Min_Dissipation_Time').AsInteger;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
          Max_Radius := FieldByName('Max_Radius').AsSingle;
          Max_Radar_Attenuation := FieldByName('Max_Radar_Attenuation')
            .AsSingle;
          Radar_Affect_Lower_Freq := FieldByName('Radar_Affect_Lower_Freq')
            .AsSingle;
          Radar_Affect_Upper_Freq := FieldByName('Radar_Affect_Upper_Freq')
            .AsSingle;
        end;

        with chaff.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(chaff);
        ZQ.Next;

      end;

      for i := 0 to aRec.Count - 1 do
      begin
        chaff := aRec.Items[i];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Chaff_On_Board a JOIN Scripted_Chaff_Event b ');
        SQL.Add('ON a.Chaff_Instance_Index = b.Chaff_Instance_Index ');
        SQL.Add('WHERE (a.Chaff_Instance_Index=' + IntToStr
            (chaff.FData.Chaff_Instance_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          chaffScript := TScripted_Chaff.Create;

          with chaffScript.Event.FData do
          begin
            Scripted_Event_Index := FieldByName('Scripted_Event_Index')
              .AsInteger;
            Chaff_Instance_Index := FieldByName('Chaff_Instance_Index')
              .AsInteger;
            Chaff_Bloom_Spacing := FieldByName('Chaff_Bloom_Spacing').AsSingle;
            Num_Blooms_2_Release := FieldByName('Num_Blooms_2_Release')
              .AsInteger;
          end;

          GetScripted_Behav(chaffScript.Event.FData.Scripted_Event_Index,
            chaffScript.Behav);

          chaff.FScripted_Chaffs.Add(chaffScript);

          ZQ.Next;
        end;
      end;

      for J := 0 to aRec.Count - 1 do
      begin
        chaff := aRec.Items[J];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Chaff_On_Board a JOIN Pattern_Chaff_Event b ');
        SQL.Add('ON a.Chaff_Instance_Index = b.Chaff_Instance_Index ');
        SQL.Add('WHERE (a.Chaff_Instance_Index=' + IntToStr
            (chaff.FData.Chaff_Instance_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin

          chaffPattern := TPattern_Chaff.Create;

          with chaffPattern.Event.FData do
          begin
            Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
              .AsInteger;
            Chaff_Instance_Index := FieldByName('Chaff_Instance_Index')
              .AsInteger;
            Chaff_Bloom_Spacing := FieldByName('Chaff_Bloom_Spacing').AsSingle;
            Num_Blooms_2_Release := FieldByName('Num_Blooms_2_Release')
              .AsInteger;

          end;

          GetScripted_Pattern(chaffPattern.Event.FData.Scripted_Pattern_Index,
            chaffPattern.pattern);

          chaff.FScripted_Pattern.Add(chaffPattern);
        end;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getChaff_Def(const id: Integer; var aRec: TList;
  var rec: TChaff_On_Board): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Chaff_Definition a ';
    ssql := ssql + 'LEFT JOIN Note_Storage b ON a.Chaff_Index = b.Chaff_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE a.Chaff_Index =' + IntToStr(id);

    ssql := ssql + ' ORDER BY a.Chaff_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TChaff_On_Board.Create;

        with rec.FChaff_Def do
        begin

          Chaff_Index := FieldByName('Chaff_Index').AsInteger;
          Chaff_Identifier := FieldByName('Chaff_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Radar_Cross := FieldByName('Max_Radar_Cross').AsSingle;
          Bloom_Time := FieldByName('Bloom_Time').AsInteger;
          Max_Dissipation_Time := FieldByName('Max_Dissipation_Time').AsInteger;
          Min_Dissipation_Time := FieldByName('Min_Dissipation_Time').AsInteger;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
          Max_Radius := FieldByName('Max_Radius').AsSingle;
          Max_Radar_Attenuation := FieldByName('Max_Radar_Attenuation')
            .AsSingle;
          Radar_Affect_Lower_Freq := FieldByName('Radar_Affect_Lower_Freq')
            .AsSingle;
          Radar_Affect_Upper_Freq := FieldByName('Radar_Affect_Upper_Freq')
            .AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.updateScriptChaff(rec: TScripted_Chaff_Event;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Scripted_Chaff_Event ');
      SQL.Add('SET ');
      SQL.Add('Chaff_Instance_Index =' + IntToStr(Chaff_Instance_Index) + ',');
      SQL.Add('Chaff_Bloom_Spacing =' + FloatToStr(Chaff_Bloom_Spacing) + ',');
      SQL.Add('Num_Blooms_2_Release =' + IntToStr(Num_Blooms_2_Release));
    end;

    SQL.Add(' WHERE (Scripted_Event_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateChaff(rec: TChaff_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Chaff_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Instance_Identifier =''' + Instance_Identifier + ''',');
      SQL.Add('Instance_Type =' + IntToStr(Instance_Type) + ',');
      SQL.Add('Chaff_Qty_On_Board =' + IntToStr(Chaff_Qty_On_Board) + ',');
      SQL.Add('Vehicle_Index =' + IntToStr(Vehicle_Index) + ',');
      SQL.Add('Chaff_Index =' + IntToStr(Chaff_Index));
    end;

    SQL.Add(' WHERE Chaff_Instance_Index = ' + id );

    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertChaff(rec: TChaff_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Chaff_On_Board ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Chaff_Qty_On_Board,Vehicle_Index,Chaff_Index)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Chaff_Qty_On_Board) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Chaff_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Chaff_Instance_Index FROM Chaff_On_Board ');
      SQL.Add('WHERE (Vehicle_Index = ' + IntToStr(Vehicle_Index) + ') ');
      SQL.Add('AND (Chaff_Index = ' + IntToStr(Chaff_Index) + ') ');
      SQL.Add('AND (Instance_Type = ' + IntToStr(Instance_Type) + ') ');
      Open;

      Chaff_Instance_Index := FieldByName('Chaff_Instance_Index').AsInteger;
    end;
  end;
end;

// -----------------------------------------------------------------------------

function TdmTTT.DeleteChaff_On_Board(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Chaff_On_Board  ');
      SQL.Add('WHERE (Chaff_Instance_Index = ' +  id + ')' );
      ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.GetChaff_Launcher_On_Board(const id,num: integer;
var rec: TChaff_Launcher_On_Board): boolean;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Chaff_Launcher_On_Board ' );
    SQL.Add('WHERE (Vehicle_Index = ' +  IntToStr(id) + ') ' );
    SQL.Add('AND (Launcher_Number = ' +  IntToStr(num) + ')' );

    Open;

    result := RecordCount > 0;
    if not IsEmpty then begin
      First;
      if not Assigned(rec) then
        rec := TChaff_Launcher_On_Board.Create;
      with rec.FData do begin
        Vehicle_Index         := FieldByName('Vehicle_Index').AsInteger;
        Launcher_Number       := FieldByName('Launcher_Number').AsInteger;
        Launcher_Angle        := FieldByName('Launcher_Angle').AsSingle;
        Launcher_Kind         := FieldByName('Launcher_Kind').AsInteger;
        Def_Bloom_Range       := FieldByName('Def_Bloom_Range').AsSingle;
        Def_Bloom_Altitude    := FieldByName('Def_Bloom_Altitude').AsSingle;
        Max_Range             := FieldByName('Max_Range').AsSingle;
        Min_Range             := FieldByName('Min_Range').AsSingle;
        Max_Elevation         := FieldByName('Max_Elevation').AsSingle;
        Min_Elevation         := FieldByName('Min_Elevation').AsSingle;
        Average_Launch_Spd    := FieldByName('Average_Launch_Spd').AsSingle;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateChaff_Launcher_On_Board(const id,num: string;
  var rec: TChaff_Launcher_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Chaff_Launcher_On_Board  ');
      SQL.Add('SET ' );
      SQL.Add('Launcher_Number = '+IntToStr(Launcher_Number)+',');
      SQL.Add('Launcher_Angle = '+FloatToStr(Launcher_Angle)+',');
      SQL.Add('Launcher_Kind = '+IntToStr(Launcher_Kind)+',');
      SQL.Add('Def_Bloom_Range = '+FloatToStr(Def_Bloom_Range)+',');
      SQL.Add('Def_Bloom_Altitude = '+FloatToStr(Def_Bloom_Altitude)+',');
      SQL.Add('Max_Range = '+FloatToStr(Max_Range)+',');
      SQL.Add('Min_Range = '+FloatToStr(Min_Range)+',');
      SQL.Add('Max_Elevation = '+FloatToStr(Max_Elevation)+',');
      SQL.Add('Min_Elevation = '+FloatToStr(Min_Elevation)+',');
      SQL.Add('Average_Launch_Spd = '+FloatToStr(Average_Launch_Spd)+' ');
    end;
    SQL.Add('WHERE (Vehicle_Index = ' +  id + ')' );
    SQL.Add('AND (Launcher_Number = ' +  num + ')' );
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.DeleteChaff_Launcher_On_Board(const id,num: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Chaff_Launcher_On_Board  ');
      SQL.Add('WHERE (Vehicle_Index = ' +  id + ') ' );
      if num <> '0' then
        SQL.Add('AND (Launcher_Number = ' +  num + ')' );
      ExecSQL;
   end;
end;

//------------------------------------------------------------------------------

function TdmTTT.InsertChaff_Launcher_On_Board(var rec: TChaff_Launcher_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Chaff_Launcher_On_Board  ');
      SQL.Add('(Vehicle_Index,Launcher_Number,Launcher_Angle,Launcher_Kind,');
      SQL.Add('Def_Bloom_Range,Def_Bloom_Altitude,Max_Range,Min_Range,');
      SQL.Add('Max_Elevation,Min_Elevation,Average_Launch_Spd)  ');
      SQL.Add('VALUES ( ' );
      SQL.Add(IntToStr(Vehicle_Index)+',');
      SQL.Add(IntToStr(Launcher_Number)+',');
      SQL.Add(FloatToStr(Launcher_Angle)+',');
      SQL.Add(IntToStr(Launcher_Kind)+',');
      SQL.Add(FloatToStr(Def_Bloom_Range)+',');
      SQL.Add(FloatToStr(Def_Bloom_Altitude)+',');
      SQL.Add(FloatToStr(Max_Range)+',');
      SQL.Add(FloatToStr(Min_Range)+',');
      SQL.Add(FloatToStr(Max_Elevation)+',');
      SQL.Add(FloatToStr(Min_Elevation)+',');
      SQL.Add(FloatToStr(Average_Launch_Spd)+')');
    end;
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.insertChaff_Def(rec: TChaff_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FChaff_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Chaff_Definition ');
      SQL.Add(
        '(Chaff_Identifier,Platform_Domain,Platform_Category,Platform_Type,');
      SQL.Add(
        'Max_Radar_Cross,Bloom_Time,Max_Dissipation_Time,Min_Dissipation_Time,Descent_Rate,');
      SQL.Add(
        'Max_Radius,Max_Radar_Attenuation,Radar_Affect_Lower_Freq,Radar_Affect_Upper_Freq)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Chaff_Identifier + ''',');
      SQL.Add(IntToStr(Platform_Domain) + ',');
      SQL.Add(IntToStr(Platform_Category) + ',');
      SQL.Add(IntToStr(Platform_Type) + ',');
      SQL.Add(FloatToStr(Max_Radar_Cross) + ',');
      SQL.Add(IntToStr(Bloom_Time) + ',');
      SQL.Add(IntToStr(Max_Dissipation_Time) + ',');
      SQL.Add(IntToStr(Min_Dissipation_Time) + ',');
      SQL.Add(FloatToStr(Descent_Rate) + ',');
      SQL.Add(FloatToStr(Max_Radius) + ',');
      SQL.Add(FloatToStr(Max_Radar_Attenuation) + ',');
      SQL.Add(FloatToStr(Radar_Affect_Lower_Freq) + ',');
      SQL.Add(FloatToStr(Radar_Affect_Upper_Freq) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Chaff_Index FROM Chaff_Definition ');
      SQL.Add('WHERE Chaff_Identifier=' + quotedStr(Chaff_Identifier));
      Open;
      with rec.FChaff_Def do
      begin
        Chaff_Index := FieldByName('Chaff_Index').AsInteger;
      end;
    end;
  end;
end;

//-----------------------------------------------------------------------------

function TdmTTT.updateChaff_Def(var rec: TChaff_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FChaff_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Chaff_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Chaff_Identifier = ''' + Chaff_Identifier + ''',');
      SQL.Add('Platform_Domain = ' + IntToStr(Platform_Domain) + ',');
      SQL.Add('Platform_Category = ' + IntToStr(Platform_Category) + ',');
      SQL.Add('Platform_Type = ' + IntToStr(Platform_Type) + ',');
      SQL.Add('Max_Radar_Cross = ' + FloatToStr(Max_Radar_Cross) + ',');
      SQL.Add('Bloom_Time = ' + IntToStr(Bloom_Time) + ',');
      SQL.Add('Max_Dissipation_Time = ' + IntToStr(Max_Dissipation_Time) + ',');
      SQL.Add('Min_Dissipation_Time = ' + IntToStr(Min_Dissipation_Time) + ',');
      SQL.Add('Descent_Rate = ' + FloatToStr(Descent_Rate) + ',');
      SQL.Add('Max_Radius = ' + FloatToStr(Max_Radius) + ',');
      SQL.Add('Max_Radar_Attenuation = ' + FloatToStr(Max_Radar_Attenuation)
          + ',');
      SQL.Add('Radar_Affect_Lower_Freq = ' + FloatToStr
          (Radar_Affect_Lower_Freq) + ',');
      SQL.Add('Radar_Affect_Upper_Freq = ' + FloatToStr(Radar_Affect_Upper_Freq)
        );
    end;
    SQL.Add('WHERE (Chaff_Index = ' + id + ')');
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.deleteChaff_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(19,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Chaff_Definition ');
    SQL.Add('WHERE Chaff_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllChaff_Launcher_On_Board(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TChaff_Launcher_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Chaff_Launcher_On_Board a  ');
    SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ')');
    // SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TChaff_Launcher_On_Board.Create;
        with rec.FData do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Launcher_Number := FieldByName('Launcher_Number').AsInteger;
          Launcher_Angle := FieldByName('Launcher_Angle').AsSingle;
          Launcher_Kind := FieldByName('Launcher_Kind').AsInteger;
          Def_Bloom_Range := FieldByName('Def_Bloom_Range').AsSingle;
          Def_Bloom_Altitude := FieldByName('Def_Bloom_Altitude').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Elevation := FieldByName('Max_Elevation').AsSingle;
          Min_Elevation := FieldByName('Min_Elevation').AsSingle;
          Average_Launch_Spd := FieldByName('Average_Launch_Spd').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateCloud_Effects_On_ESM(rec: TCloud_Effects_On_ESM;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Cloud_Effects_On_ESM ');
      SQL.Add('SET ');
      SQL.Add('Cloud_0_Effect = ' + FloatToStr(Cloud_0_Effect) + ',');
      SQL.Add('Cloud_1_Effect = ' + FloatToStr(Cloud_1_Effect) + ',');
      SQL.Add('Cloud_2_Effect = ' + FloatToStr(Cloud_2_Effect) + ',');
      SQL.Add('Cloud_3_Effect = ' + FloatToStr(Cloud_3_Effect) + ',');
      SQL.Add('Cloud_4_Effect = ' + FloatToStr(Cloud_4_Effect) + ',');
      SQL.Add('Cloud_5_Effect = ' + FloatToStr(Cloud_5_Effect) + ',');
      SQL.Add('Cloud_6_Effect = ' + FloatToStr(Cloud_6_Effect));
    end;
    SQL.Add('WHERE (Radar_Frequency = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateCloud_Effects_On_Radar(rec: TCloud_Effects_On_Radar;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Cloud_Effects_On_Radar  ');
      SQL.Add('SET ');
      SQL.Add('Cloud_0_Effect = ' + FloatToStr(Cloud_0_Effect) + ',');
      SQL.Add('Cloud_1_Effect = ' + FloatToStr(Cloud_1_Effect) + ',');
      SQL.Add('Cloud_2_Effect = ' + FloatToStr(Cloud_2_Effect) + ',');
      SQL.Add('Cloud_3_Effect = ' + FloatToStr(Cloud_3_Effect) + ',');
      SQL.Add('Cloud_4_Effect = ' + FloatToStr(Cloud_4_Effect) + ',');
      SQL.Add('Cloud_5_Effect = ' + FloatToStr(Cloud_5_Effect) + ',');
      SQL.Add('Cloud_6_Effect = ' + FloatToStr(Cloud_6_Effect));
    end;
    SQL.Add('WHERE (Radar_Frequency = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertCloud_Effects_On_ESM(rec: TCloud_Effects_On_ESM): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add
        ('SET IDENTITY_INSERT Runtime_DB.[dbo].[Cloud_Effects_On_ESM] ON;');
      ExecSQL;
      SQL.Clear;}
      SQL.Add('INSERT INTO Cloud_Effects_On_ESM');
      SQL.Add('(Radar_Frequency,Cloud_0_Effect,Cloud_1_Effect,Cloud_2_Effect');
      SQL.Add('Cloud_3_Effect,Cloud_4_Effect,Cloud_5_Effect,Cloud_6_Effect)');
      SQL.Add(' VALUES (');
      SQL.Add(FloatToStr(Radar_Frequency) + ',');
      SQL.Add(FloatToStr(Cloud_0_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_1_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_2_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_3_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_4_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_5_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_6_Effect) + ')');
    end;
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertCloud_Effects_On_Radar(rec: TCloud_Effects_On_Radar)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
     { SQL.Add(
        'SET IDENTITY_INSERT Runtime_DB.[dbo].[Cloud_Effects_On_Radar] ON;');
      ExecSQL;
      SQL.Clear;}
      SQL.Add('INSERT INTO Cloud_Effects_On_Radar');
      SQL.Add('(Radar_Frequency,Cloud_0_Effect,Cloud_1_Effect,Cloud_2_Effect');
      SQL.Add('Cloud_3_Effect,Cloud_4_Effect,Cloud_5_Effect,Cloud_6_Effect)');
      SQL.Add(' VALUES (');
      SQL.Add(FloatToStr(Radar_Frequency) + ',');
      SQL.Add(FloatToStr(Cloud_0_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_1_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_2_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_3_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_4_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_5_Effect) + ',');
      SQL.Add(FloatToStr(Cloud_6_Effect) + ')');
    end;
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllGame_Cloud_On_Radar(const id: integer;
      var aRec: TList): Integer;
var
    rec: TGame_Cloud_On_Radar;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Cloud_On_Radar ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Cloud_On_Radar.Create;
        with rec.FData do begin
          Defaults_Index    := FieldByName('Defaults_Index').AsInteger;
          Radar_Frequency   := FieldByName('Radar_Frequency').AsSingle;
          Cloud_0_Effect    := FieldByName('Cloud_0_Effect').AsSingle;
          Cloud_1_Effect    := FieldByName('Cloud_1_Effect').AsSingle;
          Cloud_2_Effect    := FieldByName('Cloud_2_Effect').AsSingle;
          Cloud_3_Effect    := FieldByName('Cloud_3_Effect').AsSingle;
          Cloud_4_Effect    := FieldByName('Cloud_4_Effect').AsSingle;
          Cloud_5_Effect    := FieldByName('Cloud_5_Effect').AsSingle;
          Cloud_6_Effect    := FieldByName('Cloud_6_Effect').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateGame_Cloud_On_Radar(const id,freq: string;
  var rec: TGame_Cloud_On_Radar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Cloud_On_Radar  ');
      SQL.Add('SET ' );
      SQL.Add('Cloud_0_Effect = '+FloatToStr(Cloud_0_Effect)+',');
      SQL.Add('Cloud_1_Effect = '+FloatToStr(Cloud_1_Effect)+',');
      SQL.Add('Cloud_2_Effect = '+FloatToStr(Cloud_2_Effect)+',');
      SQL.Add('Cloud_3_Effect = '+FloatToStr(Cloud_3_Effect)+',');
      SQL.Add('Cloud_4_Effect = '+FloatToStr(Cloud_4_Effect)+',');
      SQL.Add('Cloud_5_Effect = '+FloatToStr(Cloud_5_Effect)+',');
      SQL.Add('Cloud_6_Effect = '+FloatToStr(Cloud_6_Effect));
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  id + ') AND (Radar_Frequency = ' + freq + ')' );
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.InsertGame_Cloud_On_Radar(const id,freq: string;
  var rec: TGame_Cloud_On_Radar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Cloud_On_Radar  ');
      SQL.Add('(Defaults_Index,Radar_Frequency,Cloud_0_Effect,Cloud_1_Effect,Cloud_2_Effect,');
      SQL.Add('Cloud_3_Effect,Cloud_4_Effect,Cloud_5_Effect,Cloud_6_Effect)  ');
      SQL.Add('VALUES ( ' );
      SQL.Add(id+',');
      SQL.Add(freq+',');
      SQL.Add(FloatToStr(Cloud_0_Effect)+',');
      SQL.Add(FloatToStr(Cloud_1_Effect)+',');
      SQL.Add(FloatToStr(Cloud_2_Effect)+',');
      SQL.Add(FloatToStr(Cloud_3_Effect)+',');
      SQL.Add(FloatToStr(Cloud_4_Effect)+',');
      SQL.Add(FloatToStr(Cloud_5_Effect)+',');
      SQL.Add(FloatToStr(Cloud_6_Effect)+')');
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Cloud_On_Radar(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Cloud_On_Radar  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.getAllGame_Cloud_On_ESM(const id: integer;
      var aRec: TList): Integer;
var
    rec: TGame_Cloud_On_ESM;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Cloud_On_ESM ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Cloud_On_ESM.Create;
        with rec.FData do begin
          Defaults_Index    := FieldByName('Defaults_Index').AsInteger;
          Radar_Frequency   := FieldByName('Radar_Frequency').AsSingle;
          Cloud_0_Effect    := FieldByName('Cloud_0_Effect').AsSingle;
          Cloud_1_Effect    := FieldByName('Cloud_1_Effect').AsSingle;
          Cloud_2_Effect    := FieldByName('Cloud_2_Effect').AsSingle;
          Cloud_3_Effect    := FieldByName('Cloud_3_Effect').AsSingle;
          Cloud_4_Effect    := FieldByName('Cloud_4_Effect').AsSingle;
          Cloud_5_Effect    := FieldByName('Cloud_5_Effect').AsSingle;
          Cloud_6_Effect    := FieldByName('Cloud_6_Effect').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateGame_Cloud_On_ESM(const id,freq: string;
  var rec: TGame_Cloud_On_ESM): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Cloud_On_ESM  ');
      SQL.Add('SET ' );
      SQL.Add('Cloud_0_Effect = '+FloatToStr(Cloud_0_Effect)+',');
      SQL.Add('Cloud_1_Effect = '+FloatToStr(Cloud_1_Effect)+',');
      SQL.Add('Cloud_2_Effect = '+FloatToStr(Cloud_2_Effect)+',');
      SQL.Add('Cloud_3_Effect = '+FloatToStr(Cloud_3_Effect)+',');
      SQL.Add('Cloud_4_Effect = '+FloatToStr(Cloud_4_Effect)+',');
      SQL.Add('Cloud_5_Effect = '+FloatToStr(Cloud_5_Effect)+',');
      SQL.Add('Cloud_6_Effect = '+FloatToStr(Cloud_6_Effect));
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  id + ') AND (Radar_Frequency = ' + freq + ')' );
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.InsertGame_Cloud_On_ESM(const id,freq: string;
  var rec: TGame_Cloud_On_ESM): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Cloud_On_ESM  ');
      SQL.Add('(Defaults_Index,Radar_Frequency,Cloud_0_Effect,Cloud_1_Effect,Cloud_2_Effect,');
      SQL.Add('Cloud_3_Effect,Cloud_4_Effect,Cloud_5_Effect,Cloud_6_Effect)  ');
      SQL.Add('VALUES ( ' );
      SQL.Add(id+',');
      SQL.Add(freq+',');
      SQL.Add(FloatToStr(Cloud_0_Effect)+',');
      SQL.Add(FloatToStr(Cloud_1_Effect)+',');
      SQL.Add(FloatToStr(Cloud_2_Effect)+',');
      SQL.Add(FloatToStr(Cloud_3_Effect)+',');
      SQL.Add(FloatToStr(Cloud_4_Effect)+',');
      SQL.Add(FloatToStr(Cloud_5_Effect)+',');
      SQL.Add(FloatToStr(Cloud_6_Effect)+')');
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Cloud_On_ESM(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Cloud_On_ESM  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.getAllDefensive_Jammer_On_Board(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TDefensive_Jammer_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add(
      'FROM  Defensive_Jammer_On_Board a JOIN Defensive_Jammer_Definition b ');
    SQL.Add(
      'ON a.Defensive_Jammer_Index = b.Defensive_Jammer_Index LEFT JOIN Note_Storage c');
    SQL.Add(' ON c.Defensive_Jammer_Index = b.Defensive_Jammer_Index');
    SQL.Add(' WHERE (a.vehicle_Index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TDefensive_Jammer_On_Board.Create;
        with rec.FData do
        begin
          Defensive_Jammer_Instance_Index := FieldByName
            ('Defensive_Jammer_Instance_Id').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index')
            .AsInteger;
        end;

        with rec.FDefensiveJammer_Def do
        begin
          Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index')
            .AsInteger;
          Defensive_Jammer_Identifier := FieldByName
            ('Defensive_Jammer_Identifier').AsString;
          Jammer_TARH_Capable := FieldByName('Jammer_TARH_Capable').AsInteger;
          Jammer_SARH_Capable := FieldByName('Jammer_SARH_Capable').AsInteger;
          Type_A_Seducing_Prob := FieldByName('Type_A_Seducing_Prob').AsSingle;
          Type_B_Seducing_Prob := FieldByName('Type_B_Seducing_Prob').AsSingle;
          Type_C_Seducing_Prob := FieldByName('Type_C_Seducing_Prob').AsSingle;
          ECM_Type := FieldByName('ECM_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

////====================================================

function TdmTTT.getAllDefensive_Jammer_Definition(
        var aRec: TList): Integer;
  var
      rec: TDefensive_Jammer_Definition;
  begin
    result := -1;
    if not zConn.Connected then Exit;

    with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM  Defensive_Jammer_Definition ' );
      //SQL.Add('WHERE (_Index = ' +  IntToStr(id) + ')' );
      Open;

      result := RecordCount;
      if not IsEmpty then begin

        First;

        if not Assigned(aRec) then
          aRec := TList.Create
        else
          aRec.Clear;

        while not ZQ.Eof do begin
          rec := TDefensive_Jammer_Definition.Create;
          with rec.FData do begin
            Defensive_Jammer_Index        := FieldByName('Defensive_Jammer_Index').AsInteger;
            Defensive_Jammer_Identifier   := FieldByName('Defensive_Jammer_Identifier').AsString;
            Jammer_TARH_Capable           := FieldByName('Jammer_TARH_Capable').AsInteger;
            Jammer_SARH_Capable           := FieldByName('Jammer_SARH_Capable').AsInteger;
            Type_A_Seducing_Prob          := FieldByName('Type_A_Seducing_Prob').AsSingle;
            Type_B_Seducing_Prob          := FieldByName('Type_B_Seducing_Prob').AsSingle;
            Type_C_Seducing_Prob          := FieldByName('Type_C_Seducing_Prob').AsSingle;
            ECM_Type                      := FieldByName('ECM_Type').AsInteger;
          end;
          aRec.Add(rec);
           ZQ.Next;
        end;
      end;
    end;
  end;

  //------------------------------------------------------------------------------


// ------------------------------------------------------------------------------

function TdmTTT.getDefensive_Jammer_Def(const id: Integer; var aRec: TList): Integer;
var
  rec: TDefensive_Jammer_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Defensive_Jammer_Definition a ';
    ssql := ssql + 'LEFT JOIN Note_Storage b ON a.Defensive_Jammer_Index = b.Defensive_Jammer_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE a.Defensive_Jammer_Index =' + IntToStr(id);

    ssql := ssql + ' ORDER BY a.Defensive_Jammer_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TDefensive_Jammer_On_Board.Create;
        with rec.FDefensiveJammer_Def do
        begin
          Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index')
            .AsInteger;
          Defensive_Jammer_Identifier := FieldByName
            ('Defensive_Jammer_Identifier').AsString;
          Jammer_TARH_Capable := FieldByName('Jammer_TARH_Capable').AsInteger;
          Jammer_SARH_Capable := FieldByName('Jammer_SARH_Capable').AsInteger;
          Type_A_Seducing_Prob := FieldByName('Type_A_Seducing_Prob').AsSingle;
          Type_B_Seducing_Prob := FieldByName('Type_B_Seducing_Prob').AsSingle;
          Type_C_Seducing_Prob := FieldByName('Type_C_Seducing_Prob').AsSingle;
          ECM_Type := FieldByName('ECM_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.updateDefensive_Jammer_Def(rec: TDefensive_Jammer_On_Board;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDefensiveJammer_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Defensive_Jammer_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Defensive_Jammer_Identifier =''' +
          Defensive_Jammer_Identifier + ''',');
      SQL.Add('Jammer_TARH_Capable = ' + IntToStr(Jammer_TARH_Capable) + ',');
      SQL.Add('Jammer_SARH_Capable = ' + IntToStr(Jammer_SARH_Capable) + ',');
      SQL.Add('Type_A_Seducing_Prob = ' + FloatToStr(Type_A_Seducing_Prob)
          + ',');
      SQL.Add('Type_B_Seducing_Prob = ' + FloatToStr(Type_B_Seducing_Prob)
          + ',');
      SQL.Add('Type_C_Seducing_Prob = ' + FloatToStr(Type_C_Seducing_Prob)
          + ',');
      SQL.Add('ECM_Type = ' + IntToStr(ECM_Type));
    end;
    SQL.Add('WHERE (Defensive_Jammer_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertDefensive_Jammer_Def(rec: TDefensive_Jammer_On_Board)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDefensiveJammer_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Defensive_Jammer_Definition ');
      SQL.Add(
        '(Defensive_Jammer_Identifier,Jammer_TARH_Capable,Jammer_SARH_Capable,'
        );
      SQL.Add(
        'Type_A_Seducing_Prob,Type_B_Seducing_Prob,Type_C_Seducing_Prob,ECM_Type)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Defensive_Jammer_Identifier + ''',');
      SQL.Add(IntToStr(Jammer_TARH_Capable) + ',');
      SQL.Add(IntToStr(Jammer_SARH_Capable) + ',');
      SQL.Add(FloatToStr(Type_A_Seducing_Prob) + ',');
      SQL.Add(FloatToStr(Type_B_Seducing_Prob) + ',');
      SQL.Add(FloatToStr(Type_C_Seducing_Prob) + ',');
      SQL.Add(IntToStr(ECM_Type) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add
        ('SELECT Defensive_Jammer_Index FROM Defensive_Jammer_Definition ');
      SQL.Add('WHERE Defensive_Jammer_Identifier=' + quotedStr
          (Defensive_Jammer_Identifier));
      Open;
      with rec.FDefensiveJammer_Def do
      begin
        Defensive_Jammer_Index := FieldByName('Defensive_Jammer_Index')
          .AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

/// /====================================================
function TdmTTT.DeleteDefensive_Jammer_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Defensive_Jammer_On_Board  ');
    SQL.Add('WHERE (Defensive_Jammer_Instance_Id = ' + id + ')');
    ExecSQL;
  end;
end;

// -------------------------------------------------------------------

/// /====================================================
function TdmTTT.InsertDefensive_Jammer_On_Board(var rec: TDefensive_Jammer_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Defensive_Jammer_On_Board  ');
      SQL.Add('(Instance_Identifier,Instance_Type,Vehicle_Index,Defensive_Jammer_Index)');
      SQL.Add('VALUES ( ');
      SQL.Add(QuotedStr(Instance_Identifier) + ',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Defensive_Jammer_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Defensive_Jammer_On_Board ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index) +' ');
      SQL.Add('AND Defensive_Jammer_Index = ' + IntToStr(Defensive_Jammer_Index));
      Open;

      Defensive_Jammer_Instance_Index := FieldByName('Defensive_Jammer_Instance_Id').AsInteger;
    end;
  end;
end;

// -------------------------------------------------------------------

function TdmTTT.UpdateDefensive_Jammer_On_Board(const id: string;
  var rec: TDefensive_Jammer_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Defensive_Jammer_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Instance_Identifier =' + QuotedStr(Instance_Identifier) + ',');
      SQL.Add('Instance_Type =' + IntToStr(Instance_Type) + ',');
      SQL.Add('Vehicle_Index =' + IntToStr(Vehicle_Index) + ',');
      SQL.Add('Defensive_Jammer_Index =' + IntToStr(Defensive_Jammer_Index));
      SQL.Add(' WHERE (Defensive_Jammer_Instance_Id = ' + id + ')');
    end;
    ExecSQL;
  end;
end;

// -------------------------------------------------------------------

function TdmTTT.deleteDefensive_Jammer_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(16,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Defensive_Jammer_Definition ');
    SQL.Add('WHERE Defensive_Jammer_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;

////====================================================
  function TdmTTT.getAllFloating_Decoy_Definition(
        var aRec: TList): Integer;
  var
      rec: TFloating_Decoy_On_Board;
  begin
    result := -1;
    if not zConn.Connected then Exit;

    with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM  Floating_Decoy_Definition ' );
      //SQL.Add('WHERE (_Index = ' +  IntToStr(id) + ')' );
      Open;

      result := RecordCount;
      if not IsEmpty then begin

        First;

        if not Assigned(aRec) then
          aRec := TList.Create
        else
          aRec.Clear;

        while not ZQ.Eof do begin
          rec := TFloating_Decoy_On_Board.Create;
          with rec.FFloatingDecoy_Def do begin
            Floating_Decoy_Index        := FieldByName('Floating_Decoy_Index').AsInteger;
            Floating_Decoy_Identifier   := FieldByName('Floating_Decoy_Identifier').AsString;
            Platform_Domain             := FieldByName('Platform_Domain').AsInteger;
            Platform_Category           := FieldByName('Platform_Category').AsInteger;
            Platform_Type               := FieldByName('Platform_Type').AsInteger;
            Length                      := FieldByName('Length').AsSingle;
            Width                       := FieldByName('Width').AsSingle;
            Height                      := FieldByName('Height').AsSingle;
            Front_Radar_Cross           := FieldByName('Front_Radar_Cross').AsSingle;
            Side_Radar_Cross            := FieldByName('Side_Radar_Cross').AsSingle;
            Front_Visual_Cross          := FieldByName('Front_Visual_Cross').AsSingle;
            Side_Visual_Cross           := FieldByName('Side_Visual_Cross').AsSingle;
            Front_Acoustic_Cross        := FieldByName('Front_Acoustic_Cross').AsSingle;
            Side_Acoustic_Cross         := FieldByName('Side_Acoustic_Cross').AsSingle;
            Lifetime_Duration           := FieldByName('Lifetime_Duration').AsSingle;
          end;
          aRec.Add(rec);
           ZQ.Next;
        end;
      end;
    end;
  end;

  //------------------------------------------------------------------------------


// ------------------------------------------------------------------------------

function TdmTTT.getAllFloating_Decoy_On_Board(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TFloating_Decoy_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add
      ('FROM  Floating_Decoy_On_Board  a JOIN Floating_Decoy_Definition b ');
    SQL.Add(
      '   ON a.Floating_Decoy_Index = b.Floating_Decoy_Index LEFT JOIN Note_Storage c');
    SQL.Add('   ON c.Floating_Decoy_Index = b.Floating_Decoy_Index');
    SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TFloating_Decoy_On_Board.Create;
        with rec.FData do
        begin
          Floating_Decoy_Instance_Index := FieldByName
            ('Floating_Decoy_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
        end;

        with rec.FFloatingDecoy_Def do
        begin
          Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
          Floating_Decoy_Identifier := FieldByName('Floating_Decoy_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Lifetime_Duration := FieldByName('Lifetime_Duration').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getFloating_Decoy(const id: Integer; var aRec: TList): Integer;
var
  rec: TFloating_Decoy_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Floating_Decoy_Definition a ';
    ssql := ssql + 'LEFT JOIN Note_Storage b ON a.Floating_Decoy_Index = b.Floating_Decoy_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE a.Floating_Decoy_Index  =' + IntToStr(id);

    ssql := ssql + ' ORDER BY a.Floating_Decoy_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TFloating_Decoy_On_Board.Create;
        with rec.FFloatingDecoy_Def do
        begin
          Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
          Floating_Decoy_Identifier := FieldByName('Floating_Decoy_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Lifetime_Duration := FieldByName('Lifetime_Duration').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.updateFloating_Decoy(rec: TFloating_Decoy_On_Board;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Floating_Decoy_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Instance_Identifier =''' + Instance_Identifier + ''',');
      SQL.Add('Instance_Type =' + IntToStr(Instance_Type) + ',');
      SQL.Add('Quantity =' + IntToStr(Quantity) + ',');
      SQL.Add('Vehicle_Index =' + FloatToStr(Vehicle_Index));
    end;

    SQL.Add(' WHERE Floating_Decoy_Instance_Index = ' + id);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertFloating_Decoy(rec: TFloating_Decoy_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      ExecSQL;
      SQL.Clear;
      SQL.Add('INSERT INTO Floating_Decoy_On_Board ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Quantity,Vehicle_Index,Floating_Decoy_Index)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Quantity) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(FloatToStr(Floating_Decoy_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Floating_Decoy_On_Board ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index) +' ');
      SQL.Add('AND Floating_Decoy_Index = ' + IntToStr(Floating_Decoy_Index));
      Open;

      Floating_Decoy_Instance_Index := FieldByName('Floating_Decoy_Instance_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

////====================================================
function TdmTTT.DeleteFloating_Decoy_On_Board(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Floating_Decoy_On_Board  ');
      SQL.Add('WHERE (Floating_Decoy_Instance_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;
//-------------------------------------------------------------------


function TdmTTT.updateFloating_Decoy_Def(rec: TFloating_Decoy_On_Board;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FFloatingDecoy_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Floating_Decoy_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Floating_Decoy_Identifier = ''' + Floating_Decoy_Identifier +
          ''',');
      SQL.Add('Platform_Domain = ' + IntToStr(Platform_Domain) + ',');
      SQL.Add('Platform_Category = ' + IntToStr(Platform_Category) + ',');
      SQL.Add('Platform_Type = ' + IntToStr(Platform_Type) + ',');
      SQL.Add('Length = ' + FloatToStr(Length) + ',');
      SQL.Add('Width = ' + FloatToStr(Width) + ',');
      SQL.Add('Height = ' + FloatToStr(Height) + ',');
      SQL.Add('Front_Radar_Cross = ' + FloatToStr(Front_Radar_Cross) + ',');
      SQL.Add('Side_Radar_Cross = ' + FloatToStr(Side_Radar_Cross) + ',');
      SQL.Add('Front_Visual_Cross = ' + FloatToStr(Front_Visual_Cross) + ',');
      SQL.Add('Side_Visual_Cross = ' + FloatToStr(Side_Visual_Cross) + ',');
      SQL.Add('Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross)
          + ',');
      SQL.Add('Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add('Lifetime_Duration = ' + FloatToStr(Lifetime_Duration));
    end;
    SQL.Add('WHERE (Floating_Decoy_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertFloating_Decoy_Def(rec: TFloating_Decoy_On_Board)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FFloatingDecoy_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Floating_Decoy_Definition ');
      SQL.Add('(Floating_Decoy_Identifier,Platform_Domain,Platform_Category,');
      SQL.Add(
        'Platform_Type,Length,Width,Height,Front_Radar_Cross,Side_Radar_Cross,Front_Visual_Cross,');
      SQL.Add(
        'Side_Visual_Cross,Front_Acoustic_Cross,Side_Acoustic_Cross,Lifetime_Duration)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Floating_Decoy_Identifier + ''',');
      SQL.Add(IntToStr(Platform_Domain) + ',');
      SQL.Add(IntToStr(Platform_Category) + ',');
      SQL.Add(IntToStr(Platform_Type) + ',');
      SQL.Add(FloatToStr(Length) + ',');
      SQL.Add(FloatToStr(Width) + ',');
      SQL.Add(FloatToStr(Height) + ',');
      SQL.Add(FloatToStr(Front_Radar_Cross) + ',');
      SQL.Add(FloatToStr(Side_Radar_Cross) + ',');
      SQL.Add(FloatToStr(Front_Visual_Cross) + ',');
      SQL.Add(FloatToStr(Side_Visual_Cross) + ',');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(Lifetime_Duration) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Floating_Decoy_Index FROM Floating_Decoy_Definition ');
      SQL.Add('WHERE Floating_Decoy_Identifier=' + quotedStr
          (Floating_Decoy_Identifier));
      Open;
      with rec.FFloatingDecoy_Def do
      begin
        Floating_Decoy_Index := FieldByName('Floating_Decoy_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteFloating_Decoy_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(18,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Floating_Decoy_Definition ');
    SQL.Add('WHERE Floating_Decoy_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllInfrared_Decoy_On_Board(const id: Integer;
  var aRec: TList): Integer;
var
  i, J: Integer;
  infraScript: TScripted_Infrared;
  infraPattern: TPattern_Infrared;
  rec: TInfrared_Decoy_On_Board;

begin
  result := -1;
  if not ZConn.Connected then
    exit;
  infraScript := nil;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add
      ('FROM  Infrared_Decoy_On_Board a JOIN Infrared_Decoy_Definition  b ');
    SQL.Add(
      '   ON a.Infrared_Decoy_Index = b.Infrared_Decoy_Index LEFT JOIN Note_Storage c');
    SQL.Add('   ON c.Infrared_Decoy_Index = b.Infrared_Decoy_Index ');
    if id <> 0 then
      SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TInfrared_Decoy_On_Board.Create;
        with rec.FData do
        begin
          Infrared_Decoy_Instance_Index := FieldByName
            ('Infrared_Decoy_Instance_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Infrared_Decoy_Qty_On_Board := FieldByName
            ('Infrared_Decoy_Qty_On_Board').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
        end;

        with rec.FInfraRedDecoy_Def do
        begin
          Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
          Infrared_Decoy_Identifier := FieldByName('Infrared_Decoy_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Infrared_Cross := FieldByName('Max_Infrared_Cross').AsSingle;
          Bloom_Time := FieldByName('Bloom_Time').AsInteger;
          Sustain_Time := FieldByName('Sustain_Time').AsInteger;
          Max_Dissipation_Time := FieldByName('Max_Dissipation_Time').AsInteger;
          Min_Dissipation_Time := FieldByName('Min_Dissipation_Time').AsInteger;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add(
          'FROM Infrared_Decoy_On_Board a JOIN Scripted_Infrared_Decoy_Event b '
          );
        SQL.Add(
          'ON a.Infrared_Decoy_Instance_Index = b..Infrared_Decoy_Instance_Index ');
        SQL.Add('WHERE (a.Infrared_Decoy_Instance_Index = ' + IntToStr
            (rec.FData.Infrared_Decoy_Instance_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          infraScript := TScripted_Infrared.Create;

          with infraScript.Event.FData do
          begin
            Scripted_Event_Index := FieldByName('Scripted_Event_Index').AsInteger;
            Infrared_Decoy_Instance_Index := FieldByName
              ('Infrared_Decoy_Instance_Index').AsInteger;
            Infrared_Decoy_Bloom_Spacing := FieldByName
              ('Infrared_Decoy_Bloom_Spacing').AsSingle;
            Num_Blooms_2_Release := FieldByName('Num_Blooms_2_Release').AsInteger;
          end;

          GetScripted_Behav(infraScript.Event.FData.Scripted_Event_Index,
            infraScript.Behav);

          rec.FScripted_Infra.Add(infraScript);

          ZQ.Next;
        end;

      end;

      for J := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[J];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add(
          'FROM Infrared_Decoy_On_Board a JOIN Pattern_Infrared_Decoy_Event b '
          );
        SQL.Add(
          'ON a.Infrared_Decoy_Instance_Index = b..Infrared_Decoy_Instance_Index ');
        SQL.Add('WHERE (a.Infrared_Decoy_Instance_Index = ' + IntToStr
            (rec.FData.Infrared_Decoy_Instance_Index) + ')');
        Open;

        while not ZQ.Eof do
        begin
          infraPattern := TPattern_Infrared.Create;

          with infraPattern.Event.FData do
          begin
            Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
              .AsInteger;
            Infrared_Decoy_Instance_Index := FieldByName
              ('Infrared_Decoy_Instance_Index').AsInteger;
            Infrared_Decoy_Bloom_Spacing := FieldByName
              ('Infrared_Decoy_Bloom_Spacing').AsSingle;
            Num_Blooms_2_Release := FieldByName('Num_Blooms_2_Release')
              .AsInteger;

          end;

          GetScripted_Pattern(infraPattern.Event.FData.Scripted_Pattern_Index,
            infraPattern.pattern);

          rec.FPattern_Infra.Add(infraPattern);

          ZQ.Next;

        end;
      end;
    end;
  end;
end;

// -----------------------------------------------------------------------------
function TdmTTT.getInfrared_Decoy_Definition(const id: Integer;
  var aRec: TList; var rec: TInfrared_Decoy_On_Board): Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Infrared_Decoy_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Infrared_Decoy_Index = b.Infrared_Decoy_Index ');
    if id <> 0 then
      SQL.Add('WHERE (a.Infrared_Decoy_Index = ' + IntToStr(id) + ') ');
    SQL.Add('ORDER BY a.Infrared_Decoy_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TInfrared_Decoy_On_Board.Create;
        with rec.FInfraRedDecoy_Def do
        begin
          Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
          Infrared_Decoy_Identifier := FieldByName('Infrared_Decoy_Identifier')
            .AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Infrared_Cross := FieldByName('Max_Infrared_Cross').AsSingle;
          Bloom_Time := FieldByName('Bloom_Time').AsInteger;
          Sustain_Time := FieldByName('Sustain_Time').AsInteger;
          Max_Dissipation_Time := FieldByName('Max_Dissipation_Time').AsInteger;
          Min_Dissipation_Time := FieldByName('Min_Dissipation_Time').AsInteger;
          Descent_Rate := FieldByName('Descent_Rate').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------
function TdmTTT.InsertInfrared_Decoy_Definition(
  var rec: TInfrared_Decoy_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FInfraRedDecoy_Def do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Infrared_Decoy_Definition  ');
      SQL.Add('(Infrared_Decoy_Identifier,Platform_Domain,Platform_Category,Platform_Type,');
      SQL.Add('Max_Infrared_Cross,Bloom_Time,Sustain_Time,Max_Dissipation_Time,');
      SQL.Add('Min_Dissipation_Time,Descent_Rate) ');
      SQL.Add('VALUES ( ' );
      SQL.Add(QuotedStr(Infrared_Decoy_Identifier)+',');
      SQL.Add(IntToStr(Platform_Domain)+',');
      SQL.Add(IntToStr(Platform_Category)+',');
      SQL.Add(IntToStr(Platform_Type)+',');
      SQL.Add(FloatToStr(Max_Infrared_Cross)+',');
      SQL.Add(IntToStr(Bloom_Time)+',');
      SQL.Add(IntToStr(Sustain_Time)+',');
      SQL.Add(IntToStr(Max_Dissipation_Time)+',');
      SQL.Add(IntToStr(Min_Dissipation_Time)+',');
      SQL.Add(FloatToStr(Descent_Rate)+')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Infrared_Decoy_Index FROM Infrared_Decoy_Definition ');
      SQL.Add('WHERE Infrared_Decoy_Identifier=' + QuotedStr(Infrared_Decoy_Identifier)
        );
      Open;
      Infrared_Decoy_Index := FieldByName('Infrared_Decoy_Index').AsInteger;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.InsertInfrared_Decoy_On_Board(var rec: TInfrared_Decoy_On_Board)
: integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Infrared_Decoy_On_Board  ');
      SQL.Add('(Instance_Identifier,Instance_Type,Infrared_Decoy_Qty_On_Board,');
      SQL.Add('Vehicle_Index,Infrared_Decoy_Index)');
      SQL.Add(' VALUES (');
      SQL.Add(QuotedStr(Instance_Identifier) + ',');
      SQL.Add(IntToStr(Instance_Type)+',');
      SQL.Add(IntToStr(Infrared_Decoy_Qty_On_Board)+',');
      SQL.Add(IntToStr(Vehicle_Index)+',');
      SQL.Add(IntToStr(Infrared_Decoy_Index)+ ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Infrared_Decoy_Instance_Index FROM Infrared_Decoy_On_Board ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index));
      SQL.Add(' AND Instance_Identifier=' + QuotedStr(Instance_Identifier) );
      Open;
      Infrared_Decoy_Instance_Index := FieldByName('Infrared_Decoy_Instance_Index').AsInteger;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateInfrared_Decoy_Definition(const id: string;
  var rec: TInfrared_Decoy_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FInfraRedDecoy_Def do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Infrared_Decoy_Definition  ');
      SQL.Add('SET ' );
      SQL.Add('Infrared_Decoy_Identifier = '+ QuotedStr(Infrared_Decoy_Identifier)+',');
      SQL.Add('Platform_Domain = '+IntToStr(Platform_Domain)+',');
      SQL.Add('Platform_Category = '+IntToStr(Platform_Category)+',');
      SQL.Add('Platform_Type = '+IntToStr(Platform_Type)+',');
      SQL.Add('Max_Infrared_Cross = '+FloatToStr(Max_Infrared_Cross)+',');
      SQL.Add('Bloom_Time = '+IntToStr(Bloom_Time)+',');
      SQL.Add('Sustain_Time = '+IntToStr(Sustain_Time)+',');
      SQL.Add('Max_Dissipation_Time = '+IntToStr(Max_Dissipation_Time)+',');
      SQL.Add('Min_Dissipation_Time = '+IntToStr(Min_Dissipation_Time)+',');
      SQL.Add('Descent_Rate = '+FloatToStr(Descent_Rate)+' ');
    end;
    SQL.Add('WHERE (Infrared_Decoy_Index = ' +  id + ')' );
    ExecSQL;
  end;
end;
//-------------------------------------------------------------------

function TdmTTT.deleteInfrared_Decoy_Definition(id: Integer): Integer;
begin
  result := -1;
  deleteNote(23,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Infrared_Decoy_Definition ');
    SQL.Add('WHERE Infrared_Decoy_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------

function TdmTTT.deleteInfrared_Decoy_On_Board(id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Infrared_Decoy_On_Board ');
    SQL.Add('WHERE Infrared_Decoy_Instance_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------

function TdmTTT.updateScriptInfrared(rec: TScripted_Infrared_Decoy_Event;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Scripted_Infrared_Decoy_Event ');
      SQL.Add('SET ');
      SQL.Add('Infrared_Decoy_Instance_Index =' + IntToStr
          (Infrared_Decoy_Instance_Index) + ',');
      SQL.Add('Infrared_Decoy_Bloom_Spacing =' + FloatToStr
          (Infrared_Decoy_Bloom_Spacing) + ',');
      SQL.Add('Num_Blooms_2_Release =' + IntToStr(Num_Blooms_2_Release));
    end;

    SQL.Add(' WHERE (Scripted_Event_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------
function TdmTTT.getAllJammer_On_Board(const id: Integer;
  var aRec: TList): Integer;
var
  rec: TRadar_Noise_Jammer_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Jammer_On_Board a JOIN Jammer_Definition  b ');
    SQL.Add('ON a.Jammer_Index = b.Jammer_Index LEFT JOIN Note_Storage c ');
    SQL.Add('ON c.Jammer_Index = b.Jammer_Index ');
    SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TRadar_Noise_Jammer_On_Board.Create;
        with rec.FData do
        begin
          Jammer_Instance_Index := FieldByName('Jammer_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Jammer_Index := FieldByName('Jammer_Index').AsInteger;
          Antenna_Height := FieldByName('Antenna_Height').AsSingle;
        end;

        with rec.FDef do
        begin
          Jammer_Index := FieldByName('Jammer_Index').AsInteger;
          Jammer_Type := FieldByName('Jammer_Type').AsInteger;
          Jammer_Identifier := FieldByName('Jammer_Identifier').AsString;
          Lower_Freq_Limit := FieldByName('Lower_Freq_Limit').AsFloat;
          Upper_Freq_Limit := FieldByName('Upper_Freq_Limit').AsFloat;
          Jammer_Power_Density := FieldByName('Jammer_Power_Density').AsFloat;
          Max_Effective_Range := FieldByName('Max_Effective_Range').AsSingle;
          Max_Sector_Width := FieldByName('Max_Sector_Width').AsSingle;
          Upper_Vert_Coverage_Angle := FieldByName('Upper_Vert_Coverage_Angle')
            .AsSingle;
          Lower_Vert_Coverage_Angle := FieldByName('Lower_Vert_Coverage_Angle')
            .AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getJammer_OnBoard_Distinct(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TRadar_Noise_Jammer_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT DISTINCT a.Instance_Identifier,a.Jammer_Instance_Index, ');
    SQL.Add('a.Vehicle_Index,a.Jammer_Index,a.Antenna_Height ');
    SQL.Add('FROM  Jammer_On_Board a JOIN Jammer_Definition  b ');
    SQL.Add('ON a.Jammer_Index = b.Jammer_Index LEFT JOIN Note_Storage c ');
    SQL.Add('ON c.Jammer_Index = b.Jammer_Index ');
    if id <> 0 then
       SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TRadar_Noise_Jammer_On_Board.Create;
        with rec.FData do
        begin
          Jammer_Instance_Index := FieldByName('Jammer_Instance_Index').AsInteger;
          Instance_Identifier   := FieldByName('Instance_Identifier').AsString;
          Vehicle_Index         := FieldByName('Vehicle_Index').AsInteger;
          Jammer_Index          := FieldByName('Jammer_Index').AsInteger;
          Antenna_Height        := FieldByName('Antenna_Height').AsSingle;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getJammer_Def(const id: Integer; var aRec: TList):integer;
var

  rec: TRadar_Noise_Jammer_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Jammer_Definition ');
    if id <> 0 then
       SQL.Add('WHERE (Jammer_index = ' + IntToStr(id) + ')');

    SQL.Add('ORDER BY Jammer_Identifier ');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TRadar_Noise_Jammer_On_Board.Create;
        with rec.FDef do
        begin
          Jammer_Index              := FieldByName('Jammer_Index').AsInteger;
          Jammer_Type               := FieldByName('Jammer_Type').AsInteger;
          Jammer_Identifier         := FieldByName('Jammer_Identifier').AsString;
          Lower_Freq_Limit          := FieldByName('Lower_Freq_Limit').AsFloat;
          Upper_Freq_Limit          := FieldByName('Upper_Freq_Limit').AsFloat;
          Jammer_Power_Density      := FieldByName('Jammer_Power_Density').AsFloat;
          Max_Effective_Range       := FieldByName('Max_Effective_Range').AsFloat;
          Max_Sector_Width          := FieldByName('Max_Sector_Width').AsFloat;
          Upper_Vert_Coverage_Angle := FieldByName('Upper_Vert_Coverage_Angle').AsFloat;
          Lower_Vert_Coverage_Angle := FieldByName('Lower_Vert_Coverage_Angle').AsFloat;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

//================================================================================
function TdmTTT.updateInfrared_Decoy_On_Board(rec: TInfrared_Decoy_On_Board;
  id: string): Integer;
begin
 result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Infrared_Decoy_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Instance_Identifier =' + QuotedStr(Instance_Identifier) + ',');
      SQL.Add('Instance_Type =' + IntToStr(Instance_Type) + ',');
      SQL.Add('Infrared_Decoy_Qty_On_Board =' + IntToStr(Infrared_Decoy_Qty_On_Board) + ',');
      SQL.Add('Vehicle_Index=' + IntToStr(Vehicle_Index) + ',');
      SQL.Add('Infrared_Decoy_Index = ' + IntToStr(Infrared_Decoy_Index));
    end;

    SQL.Add(' WHERE Infrared_Decoy_Instance_Index   = ' + id);
    ExecSQL;

  end;
end;
//=============================================================================

function TdmTTT.UpdateResource_Interval_List_Mapping(const id: integer;
  rec: TResource_Allocation): integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FRadarListMap do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Resource_Interval_List_Mapping  ');
      SQL.Add('SET ');
      SQL.Add('Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add('Interval_List_Index = ' + IntToStr(Interval_List_Index) + ' ');
    end;
    SQL.Add('WHERE (Interval_List_Index = ' + IntToStr(id) + ')');
    ExecSQL;
  end;
end;

//================================================================================

function TdmTTT.updateJammer(rec: TRadar_Noise_Jammer_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Jammer_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Jammer_Index =' + IntToStr(Jammer_Index)
          + ',');
      SQL.Add('Instance_Identifier =''' + Instance_Identifier + ''',');
      SQL.Add('Instance_Type =' + IntToStr(Instance_Type) + ',');
      SQL.Add('Vehicle_Index=' + IntToStr(Vehicle_Index) + ',');
      SQL.Add('Antenna_Height =' + FloatToStr(Antenna_Height));
    end;

    SQL.Add(' WHERE Jammer_Instance_Index = ' + id);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertJammer(var rec: TRadar_Noise_Jammer_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Jammer_On_Board ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Vehicle_Index,Jammer_Index,Antenna_Height)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Jammer_Index) + ',');
      SQL.Add(FloatToStr(Antenna_Height) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Jammer_On_Board ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index) +' ');
      SQL.Add('AND Jammer_Index = ' + IntToStr(Jammer_Index));
      Open;

      Jammer_Instance_Index := FieldByName('Jammer_Instance_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteJammer_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Jammer_On_Board  ');
    SQL.Add('WHERE (Jammer_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

function TdmTTT.updateJammer_Def(rec: TRadar_Noise_Jammer_On_Board; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Jammer_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Jammer_Type = ' + IntToStr(Jammer_Type) + ',');
      SQL.Add('Jammer_Identifier = ' + (Jammer_Identifier) + ',');
      SQL.Add('Lower_Freq_Limit = ' + FloatToStr(Lower_Freq_Limit) + ',');
      SQL.Add('Upper_Freq_Limit = ' + FloatToStr(Upper_Freq_Limit) + ',');
      SQL.Add('Jammer_Power_Density = ' + FloatToStr(Jammer_Power_Density)
          + ',');
      SQL.Add('Max_Effective_Range = ' + FloatToStr(Max_Effective_Range) + ',');
      SQL.Add('Max_Sector_Width = ' + FloatToStr(Max_Sector_Width) + ',');
      SQL.Add('Upper_Vert_Coverage_Angle = ' + FloatToStr
          (Upper_Vert_Coverage_Angle) + ',');
      SQL.Add('Lower_Vert_Coverage_Angle = ' + FloatToStr
          (Lower_Vert_Coverage_Angle));
    end;
    SQL.Add('WHERE (Jammer_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertJammer_Def(rec: TRadar_Noise_Jammer_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Jammer_Definition] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Jammer_Definition ');
      SQL.Add(
        '(Jammer_Index,Jammer_Type,Jammer_Identifier,Lower_Freq_Limit,Upper_Freq_Limit,Jammer_Power_Density,');
      SQL.Add(
        'Max_Effective_Range,Max_Sector_Width,Upper_Vert_Coverage_Angle,Lower_Vert_Coverage_Angle)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Jammer_Index) + ',');
      SQL.Add(IntToStr(Jammer_Type) + ',');
      SQL.Add('''' + Jammer_Identifier + ''',');
      SQL.Add(FloatToStr(Lower_Freq_Limit) + ',');
      SQL.Add(FloatToStr(Upper_Freq_Limit) + ',');
      SQL.Add(FloatToStr(Jammer_Power_Density) + ',');
      SQL.Add(FloatToStr(Max_Effective_Range) + ',');
      SQL.Add(FloatToStr(Max_Sector_Width) + ',');
      SQL.Add(FloatToStr(Upper_Vert_Coverage_Angle) + ',');
      SQL.Add(FloatToStr(Lower_Vert_Coverage_Angle) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getRadar_Jammer(const id: Integer;
  var aRec: TList; var rec: TRadar_Noise_Jammer_On_Board): Integer;

begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Jammer_Definition a LEFT JOIN Note_Storage b ');
    SQL.Add('ON a.Jammer_Index = b.Jammer_Index ');
    if id <> 0 then
      SQL.Add('WHERE (a.Jammer_Index = ' + IntToStr(id) + ') ');
    SQL.Add('ORDER BY a.Jammer_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TRadar_Noise_Jammer_On_Board.Create;
        with rec.FDef do
        begin
          Jammer_Index              := FieldByName('Jammer_Index').AsInteger;
          Jammer_Type               := FieldByName('Jammer_Type').AsInteger;
          Jammer_Identifier         := FieldByName('Jammer_Identifier').AsString;
          Lower_Freq_Limit          := FieldByName('Lower_Freq_Limit').AsFloat;
          Upper_Freq_Limit          := FieldByName('Upper_Freq_Limit').AsFloat;
          Jammer_Power_Density      := FieldByName('Jammer_Power_Density').AsFloat;
          Max_Effective_Range       := FieldByName('Max_Effective_Range').AsFloat;
          Max_Sector_Width          := FieldByName('Max_Sector_Width').AsFloat;
          Upper_Vert_Coverage_Angle := FieldByName('Upper_Vert_Coverage_Angle').AsFloat;
          Lower_Vert_Coverage_Angle := FieldByName('Lower_Vert_Coverage_Angle').AsFloat;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------

function TdmTTT.InsertRadar_Jammer(var rec: TRadar_Noise_Jammer_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FDef do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Jammer_Definition  ');
      SQL.Add('(Jammer_Type,Jammer_Identifier,Lower_Freq_Limit,Upper_Freq_Limit,');
      SQL.Add('Jammer_Power_Density,Max_Effective_Range,Max_Sector_Width,');
      SQL.Add('Upper_Vert_Coverage_Angle,Lower_Vert_Coverage_Angle)  ');
      SQL.Add('VALUES ( ' );
      SQL.Add(IntToStr(Jammer_Type)+',');
      SQL.Add(QuotedStr(Jammer_Identifier)+',');
      SQL.Add(FloatToStr(Lower_Freq_Limit)+',');
      SQL.Add(FloatToStr(Upper_Freq_Limit)+',');
      SQL.Add(FloatToStr(Jammer_Power_Density)+',');
      SQL.Add(FloatToStr(Max_Effective_Range)+',');
      SQL.Add(FloatToStr(Max_Sector_Width)+',');
      SQL.Add(FloatToStr(Upper_Vert_Coverage_Angle)+',');
      SQL.Add(FloatToStr(Lower_Vert_Coverage_Angle)+')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Jammer_Index FROM Jammer_Definition ');
      SQL.Add('WHERE Jammer_Identifier=' + quotedStr(Jammer_Identifier));
      Open;

      Jammer_Index := FieldByName('Jammer_Index').AsInteger;
    end;
  end;
end;
//-------------------------------------------------------------------

function TdmTTT.UpdateRadar_Jammer(const id: string;
  var rec: TRadar_Noise_Jammer_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FDef do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Jammer_Definition  ');
      SQL.Add('SET ' );
      SQL.Add('Jammer_Type = '+IntToStr(Jammer_Type)+',');
      SQL.Add('Jammer_Identifier = '+QuotedStr(Jammer_Identifier)+',');
      SQL.Add('Lower_Freq_Limit = '+FloatToStr(Lower_Freq_Limit)+',');
      SQL.Add('Upper_Freq_Limit = '+FloatToStr(Upper_Freq_Limit)+',');
      SQL.Add('Jammer_Power_Density = '+FloatToStr(Jammer_Power_Density)+',');
      SQL.Add('Max_Effective_Range = '+FloatToStr(Max_Effective_Range)+',');
      SQL.Add('Max_Sector_Width = '+FloatToStr(Max_Sector_Width)+',');
      SQL.Add('Upper_Vert_Coverage_Angle = '+FloatToStr(Upper_Vert_Coverage_Angle)+',');
      SQL.Add('Lower_Vert_Coverage_Angle = '+FloatToStr(Lower_Vert_Coverage_Angle)+' ');
    end;
    SQL.Add('WHERE (Jammer_Index = ' +  id + ')' );
    ExecSQL;
  end;
end;
//-------------------------------------------------------------------

function TdmTTT.DeleteRadar_Jammer(id: Integer): Integer;
begin
  result := -1;
  deleteNote(15,IntToStr(id));
  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Jammer_Definition  ');
    SQL.Add('WHERE (Jammer_Index = ' +  IntToStr(id) + ')' );
    ExecSQL;
  end;
end;
//-------------------------------------------------------------------

function TdmTTT.getAllPoint_Effect_On_Board(const id: Integer;
  var aRec: TList): Integer;
var
  i, J, k: Integer;
  weaponScript: TScripted_Weapon;
  weaponPattern: TPattern_Weapon;
  rec: TPoint_Effect_On_Board;
  Point_Blind: TBlind_Zone;

begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Point_Effect_On_Board a ');
    SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TPoint_Effect_On_Board.Create;
        with rec.FData do
        begin
          Point_Effect_Index := FieldByName('Point_Effect_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Mount_Type := FieldByName('Mount_Type').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Bomb_Index := FieldByName('Bomb_Index').AsInteger;
          TurretID := FieldByName('TurretID').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[i];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Point_Effect_On_Board a JOIN Scripted_Weapon_Event b ');
        SQL.Add('ON a.Point_Effect_Index = b.Point_Effect ');
        SQL.Add('WHERE a.Point_Effect_Index = (' + IntToStr
            (rec.FData.Point_Effect_Index) + ')');
        Open;

        while not ZQ.Eof do
        begin
          weaponScript := TScripted_Weapon.Create;

          with weaponScript.Event.FData do
          begin
            List_Index := FieldByName('List_Index').AsInteger;
            Scripted_Event_Index := FieldByName('Scripted_Event_Index')
              .AsInteger;
            Salvo_Size := FieldByName('Salvo_Size').AsInteger;
            Number_Layed := FieldByName('Number_Layed').AsInteger;
            Distance_Between := FieldByName('Distance_Between').AsSingle;
            Mine_Depth := FieldByName('Mine_Depth').AsSingle;
            Target_Index := FieldByName('Target_Index').AsInteger;
            Weapon_Type := FieldByName('Weapon_Type').AsInteger;
            Point_Effect := FieldByName('Point_Effect').AsInteger;
            Weapons_Mount := FieldByName('Weapons_Mount').AsInteger;
          end;

          GetScripted_Behav(weaponScript.Event.FData.Scripted_Event_Index,
            weaponScript.Behav);

          rec.FScripted_Point.Add(weaponScript);

          ZQ.Next;

        end;
      end;

      for J := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[J];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Point_Effect_On_Board a JOIN Pattern_Weapon_Event b ');
        SQL.Add('ON a.Point_Effect_Index = b.Point_Effect ');
        SQL.Add('WHERE a.Point_Effect_Index = (' + IntToStr
            (rec.FData.Point_Effect_Index) + ')');
        Open;

        while not ZQ.Eof do
        begin
          weaponPattern := TPattern_Weapon.Create;

          with weaponPattern.Event.FData do
          begin
            List_Index := FieldByName('List_Index').AsInteger;
            Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
              .AsInteger;
            Salvo_Size := FieldByName('Salvo_Size').AsInteger;
            Number_Layed := FieldByName('Number_Layed').AsInteger;
            Distance_Between := FieldByName('Distance_Between').AsSingle;
            Mine_Depth := FieldByName('Mine_Depth').AsSingle;
            Weapon_Type := FieldByName('Weapon_Type').AsInteger;
            Point_Effect := FieldByName('Point_Effect').AsInteger;
            Weapons_Mount := FieldByName('Weapons_Mount').AsInteger;
          end;

          GetScripted_Pattern(weaponPattern.Event.FData.Scripted_Pattern_Index,
            weaponPattern.pattern);

          rec.FPattern_Point.Add(weaponPattern);

          ZQ.Next;

        end;
      end;

      for k := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[k];
        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Point_Effect_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.Point_Effect_Index = b.Point_Effect_Index ');
        SQL.Add('WHERE (a.Point_Effect_Index = ' + IntToStr
            (rec.FData.Point_Effect_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          Point_Blind := TBlind_Zone.Create;

          with rec.FBlind_Zone.FData do
          begin
            Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
            Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
            BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
            Point_Effect_Index := FieldByName('Point_Effect_Index').AsInteger;
            Start_Angle := FieldByName('Start_Angle').AsSingle;
            End_Angle := FieldByName('End_Angle').AsSingle;

          end;

          rec.FBlind.Add(Point_Blind);
          ZQ.Next;
        end;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

////====================================================
  function TdmTTT.getAllTowed_Jammer_Decoy_On_Board_Only(const id: integer;
        var aRec: TList): Integer;
  var
      rec: TTowed_Jammer_Decoy_On_Board;
  begin
    result := -1;
    if not zConn.Connected then Exit;

    with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM  Towed_Jammer_Decoy_On_Board ' );
      SQL.Add('WHERE (Vehicle_Index = ' +  IntToStr(id) + ')' );
      Open;

      result := RecordCount;
      if not IsEmpty then begin

        First;

        if not Assigned(aRec) then
          aRec := TList.Create
        else
          aRec.Clear;

        while not ZQ.Eof do begin
          rec := TTowed_Jammer_Decoy_On_Board.Create;
          with rec.FData do begin
            Towed_Decoy_Instance_Index    := FieldByName('Towed_Decoy_Instance_Index').AsInteger;
            Instance_Identifier           := FieldByName('Instance_Identifier').AsString;
            Instance_Type                 := FieldByName('Instance_Type').AsInteger;
            Quantity                      := FieldByName('Quantity').AsInteger;
            Vehicle_Index                 := FieldByName('Vehicle_Index').AsInteger;
            Towed_Decoy_Index             := FieldByName('Towed_Decoy_Index').AsInteger;
          end;
          aRec.Add(rec);
           ZQ.Next;
        end;
      end;
    end;
  end;

//------------------------------------------------------------------------------


function TdmTTT.getAllTowed_Jammer_Decoy_On_Board(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TTowed_Jammer_Decoy_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add(
      'FROM  Towed_Jammer_Decoy_On_Board a JOIN Towed_Jammer_Decoy_Definition  b ');
    SQL.Add(
      'ON a.Towed_Decoy_Index = b.Towed_Decoy_Index LEFT JOIN Note_Storage c ');
    SQL.Add('ON b.Towed_Decoy_Index = c.Towed_Decoy_Index ');
    SQL.Add('WHERE (a.Vehicle_index = ' + IntToStr(id) + ')');
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TTowed_Jammer_Decoy_On_Board.Create;
        with rec.FData do
        begin
          Towed_Decoy_Instance_Index := FieldByName
            ('Towed_Decoy_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
        end;

        with rec.FDef do
        begin
          Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
          Towed_Decoy_Identifier := FieldByName('Towed_Decoy_Identifier')
            .AsString;
          Decoy_TARH_Capable := FieldByName('Decoy_TARH_Capable').AsInteger;
          Decoy_SARH_Capable := FieldByName('Decoy_SARH_Capable').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Type_A_Seducing_Prob := FieldByName('Type_A_Seducing_Prob').AsSingle;
          Type_B_Seducing_Prob := FieldByName('Type_B_Seducing_Prob').AsSingle;
          Type_C_Seducing_Prob := FieldByName('Type_C_Seducing_Prob').AsSingle;
          Activation_Control_Delay := FieldByName('Activation_Control_Delay')
            .AsSingle;
          Tow_Length := FieldByName('Tow_Length').AsSingle;
          ECM_Type := FieldByName('ECM_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

////====================================================
  function TdmTTT.getAllTowed_Jammer_Decoy_Definition(
        var aRec: TList): Integer;
  var
      rec: TTowed_Jammer_Decoy_On_Board;
  begin
    result := -1;
    if not zConn.Connected then Exit;

    with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM  Towed_Jammer_Decoy_Definition ' );
      //SQL.Add('WHERE (_Index = ' +  IntToStr(id) + ')' );
      Open;

      result := RecordCount;
      if not IsEmpty then begin

        First;

        if not Assigned(aRec) then
          aRec := TList.Create
        else
          aRec.Clear;

        while not ZQ.Eof do begin
          rec := TTowed_Jammer_Decoy_On_Board.Create;
          with rec.FDef do begin
            Towed_Decoy_Index           := FieldByName('Towed_Decoy_Index').AsInteger;
            Towed_Decoy_Identifier      := FieldByName('Towed_Decoy_Identifier').AsString;
            Decoy_TARH_Capable          := FieldByName('Decoy_TARH_Capable').AsInteger;
            Decoy_SARH_Capable          := FieldByName('Decoy_SARH_Capable').AsInteger;
            Platform_Domain             := FieldByName('Platform_Domain').AsInteger;
            Platform_Category           := FieldByName('Platform_Category').AsInteger;
            Platform_Type               := FieldByName('Platform_Type').AsInteger;
            Length                      := FieldByName('Length').AsSingle;
            Width                       := FieldByName('Width').AsSingle;
            Height                      := FieldByName('Height').AsSingle;
            Front_Radar_Cross           := FieldByName('Front_Radar_Cross').AsSingle;
            Side_Radar_Cross            := FieldByName('Side_Radar_Cross').AsSingle;
            Front_Visual_Cross          := FieldByName('Front_Visual_Cross').AsSingle;
            Side_Visual_Cross           := FieldByName('Side_Visual_Cross').AsSingle;
            Front_Acoustic_Cross        := FieldByName('Front_Acoustic_Cross').AsSingle;
            Side_Acoustic_Cross         := FieldByName('Side_Acoustic_Cross').AsSingle;
            Type_A_Seducing_Prob        := FieldByName('Type_A_Seducing_Prob').AsSingle;
            Type_B_Seducing_Prob        := FieldByName('Type_B_Seducing_Prob').AsSingle;
            Type_C_Seducing_Prob        := FieldByName('Type_C_Seducing_Prob').AsSingle;
            Activation_Control_Delay    := FieldByName('Activation_Control_Delay').AsSingle;
            Tow_Length                  := FieldByName('Tow_Length').AsSingle;
            ECM_Type                    := FieldByName('ECM_Type').AsInteger;
          end;
          aRec.Add(rec);
           ZQ.Next;
        end;
      end;
    end;
  end;

  //------------------------------------------------------------------------------

function TdmTTT.getAllVehicleProperties(vIndex: Integer;
  vehicle: TVehicle_Definition): Integer;
begin
  Result := 0;
  if vehicle = nil then
    exit;

  with vehicle do
  begin
    getAllEO_On_Board(vIndex, 0, EOSensors);
    getAllESM_On_Board(vIndex, 0, ESMSensors);
    getAllIFF_Sensor_On_Board(vIndex, 0, IFFSensors);
    getAllMAD_Sensor_On_Board(vIndex, 0, MADSensors);
    getAllVisual_Sensor_On_Board(vIndex, 0, Visualsensors);
    getAllFCR_On_Board(vIndex, FCRSensors);

    getAllRadar_On_Board(vIndex, 0, vehicle.Radars);
    getAllSonar_On_Board(vIndex, 0, vehicle.Sonars);

    // weapon fit on Board
    getAllMissile_OnBoard(vIndex, 0, Missiles);
    getAllTorpedo_OnBoard(vIndex, 0, Torpedos);
    GetHybrid_Definition(vIndex, Hybrids);
    getAllMines_OnBoard(vIndex, 0, Mines);
    GetAllBomb(vIndex, Bombs);
    GetAllGun(vIndex, Guns);

    getAllAcoustic_Decoy_On_Board(vIndex, Acoustic_Decoys);
    getAllAir_Bubble_Mount(vIndex, Air_Bubble_Mount);
    getAllChaff_On_Board(vIndex, Chaffs);
    getAllChaff_Launcher_On_Board(vIndex, Chaff_Launchers);
    getAllDefensive_Jammer_On_Board(vIndex, Defensive_Jammers);
    getAllFloating_Decoy_On_Board(vIndex, Floating_Decoys);
    getAllInfrared_Decoy_On_Board(vIndex, Infrared_Decoys);
    getAllJammer_On_Board(vIndex, Jammers);
    getAllPoint_Effect_On_Board(vIndex, Point_Effects);
    getAllTowed_Jammer_Decoy_On_Board(vIndex, Towed_Jammer_Decoys);
    GetHosted_Platform(vIndex, 0, Hosted_Platform);
    getAllSonobuoy_On_Board(vIndex, 0, Sonobuoy);
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.getTorpedo_Def(rec: TTorpedo_Definition; id: Integer): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Torpedo_Definition ';

    if id <> 0 then
      ssql := ssql + 'WHERE Torpedo_Index = ' + IntToStr(id);

    SQL.Add(ssql);
    SQL.Add('ORDER BY Class_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      rec := TTorpedo_Definition.Create;
      with rec.FData do
      begin
        Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
        Class_Identifier := FieldByName('Class_Identifier').AsString;
        Platform_Domain := FieldByName('Platform_Domain').AsInteger;
        Platform_Category := FieldByName('Platform_Category').AsInteger;
        Platform_Type := FieldByName('Platform_Type').AsInteger;
        Max_Range := FieldByName('Max_Range').AsSingle;
        Min_Range := FieldByName('Min_Range').AsSingle;
        Motion_Index := FieldByName('Motion_Index').AsInteger;
        Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
        Lethality := FieldByName('Lethality').AsInteger;
        Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
        Default_Depth := FieldByName('Default_Depth').AsSingle;
        Length := FieldByName('Length').AsSingle;
        Width := FieldByName('Width').AsSingle;
        Height := FieldByName('Height').AsSingle;
        Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
        Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
        LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
          .AsSingle;
        Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
          .AsSingle;
        Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
          .AsSingle;
        HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
          .AsSingle;
        Cavitation_Switch_Point := FieldByName('Cavitation_Switch_Point')
          .AsSingle;
        Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
        Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
        Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
        Pursuit_Guidance_Type := FieldByName('Pursuit_Guidance_Type').AsInteger;
        Air_Drop_Capable := FieldByName('Air_Drop_Capable').AsInteger;
        Use_Terminal_Circle := FieldByName('Use_Terminal_Circle').AsInteger;
        Terminal_Circle_Radius := FieldByName('Terminal_Circle_Radius')
          .AsSingle;
        Fixed_Circle_Radius := FieldByName('Fixed_Circle_Radius').AsInteger;
        Lateral_Deceleration := FieldByName('Lateral_Deceleration').AsSingle;
        Airborne_Descent_Rate := FieldByName('Airborne_Descent_Rate').AsFloat;
        Wire_Angle_Offset := FieldByName('Wire_Angle_Offset').AsSingle;
        Guidance_Type := FieldByName('Guidance_Type').AsInteger;
        Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
        Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
        Primary_Target_Domain := FieldByName('Primary_Target_Domain').AsInteger;
        Active_Acoustic_POH_Mod := FieldByName('Active_Acoustic_POH_Mod')
          .AsSingle;
        Passive_Acoustic_POH_Mod := FieldByName('Passive_Acoustic_POH_Mod')
          .AsSingle;
        Active_Passive_POH_Mod := FieldByName('Active_Passive_POH_Mod')
          .AsSingle;
        WireGuide_POH_Modifier := FieldByName('WireGuide_POH_Modifier')
          .AsSingle;
        WakeHome_POH_Modifier := FieldByName('WakeHome_POH_Modifier').AsSingle;
        Active_Seeker_Power := FieldByName('Active_Seeker_Power').AsSingle;
        Active_Seeker_Freq := FieldByName('Active_Seeker_Freq').AsSingle;
        Engagement_Range := FieldByName('Engagement_Range').AsSingle;
        First_Relative_Gyro_Angle := FieldByName('First_Relative_Gyro_Angle')
          .AsInteger;
        Second_Relative_Gyro_Angle := FieldByName('Second_Relative_Gyro_Angle')
          .AsInteger;
        Max_Torpedo_Gyro_Angle := FieldByName('Max_Torpedo_Gyro_Angle')
          .AsSingle;
        Max_Torpedo_Search_Depth := FieldByName('Max_Torpedo_Search_Depth')
          .AsSingle;
        Acoustic_Torp_Ceiling_Depth := FieldByName
          ('Acoustic_Torp_Ceiling_Depth').AsSingle;
        Fixed_Ceiling_Depth := FieldByName('Fixed_Ceiling_Depth').AsInteger;
        Fixed_Seeker_TurnOn_Range := FieldByName('Fixed_Seeker_TurnOn_Range')
          .AsInteger;
        Sinuation_Runout := FieldByName('Sinuation_Runout').AsInteger;
        Runout_Sinuation_Period := FieldByName('Runout_Sinuation_Period')
          .AsSingle;
        Runout_Sinuation_Amplitude := FieldByName('Runout_Sinuation_Amplitude')
          .AsSingle;
        Min_Runout_Range := FieldByName('Min_Runout_Range').AsSingle;
        Launch_Method := FieldByName('Launch_Method').AsInteger;
        Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
        Launch_Speed := FieldByName('Launch_Speed').AsInteger;
        Opt_Launch_Range_Nuc_Sub := FieldByName('Opt_Launch_Range_Nuc_Sub')
          .AsSingle;
        Opt_Launch_Range_Conv_Sub := FieldByName('Opt_Launch_Range_Conv_Sub')
          .AsSingle;
        Opt_Launch_Range_Other := FieldByName('Opt_Launch_Range_Other')
          .AsSingle;
        Detectability_Type := FieldByName('Detectability_Type').AsInteger;
      end;
    end;
  end;
end;
// ------------------------------------------------------------------------------

function TdmTTT.getTorpedoByLibrary(const id_Library: Integer;
  var vList: TList): Integer;
var
  rec: TTorpedo_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Platform_Library_Entry a ';
    ssql := ssql +
      'join Torpedo_Definition b on a.Torpedo_Index = b.Torpedo_Index ';
    ssql := ssql + 'WHERE a.Library_Index = ' + IntToStr(id_Library) + ' ';
    ssql := ssql + 'AND a.Platform_Type = 3';

//     ShowMessage(ssql);
    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(vList) then
        vList := TList.Create
      else
        vList.Clear;

      while not ZQ.Eof do
      begin
        rec := TTorpedo_On_Board.Create;
        with rec.FDef do
        begin
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Motion_Index := FieldByName('Motion_Index').AsInteger;
          Seeker_TurnOn_Range := FieldByName('Seeker_TurnOn_Range').AsSingle;
          Lethality := FieldByName('Lethality').AsInteger;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Default_Depth := FieldByName('Default_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Switch_Point := FieldByName('Cavitation_Switch_Point')
            .AsSingle;
          Term_Guide_Azimuth := FieldByName('Term_Guide_Azimuth').AsSingle;
          Term_Guide_Elevation := FieldByName('Term_Guide_Elevation').AsSingle;
          Term_Guide_Range := FieldByName('Term_Guide_Range').AsSingle;
          Pursuit_Guidance_Type := FieldByName('Pursuit_Guidance_Type').AsInteger;
          Air_Drop_Capable := FieldByName('Air_Drop_Capable').AsInteger;
          Use_Terminal_Circle := FieldByName('Use_Terminal_Circle').AsInteger;
          Terminal_Circle_Radius := FieldByName('Terminal_Circle_Radius')
            .AsSingle;
          Fixed_Circle_Radius := FieldByName('Fixed_Circle_Radius').AsInteger;
          Lateral_Deceleration := FieldByName('Lateral_Deceleration').AsSingle;
          Airborne_Descent_Rate := FieldByName('Airborne_Descent_Rate').AsFloat;
          Wire_Angle_Offset := FieldByName('Wire_Angle_Offset').AsSingle;
          Guidance_Type := FieldByName('Guidance_Type').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Primary_Target_Domain := FieldByName('Primary_Target_Domain').AsInteger;
          Active_Acoustic_POH_Mod := FieldByName('Active_Acoustic_POH_Mod')
            .AsSingle;
          Passive_Acoustic_POH_Mod := FieldByName('Passive_Acoustic_POH_Mod')
            .AsSingle;
          Active_Passive_POH_Mod := FieldByName('Active_Passive_POH_Mod')
            .AsSingle;
          WireGuide_POH_Modifier := FieldByName('WireGuide_POH_Modifier')
            .AsSingle;
          WakeHome_POH_Modifier := FieldByName('WakeHome_POH_Modifier').AsSingle;
          Active_Seeker_Power := FieldByName('Active_Seeker_Power').AsSingle;
          Active_Seeker_Freq := FieldByName('Active_Seeker_Freq').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          First_Relative_Gyro_Angle := FieldByName('First_Relative_Gyro_Angle')
            .AsInteger;
          Second_Relative_Gyro_Angle := FieldByName('Second_Relative_Gyro_Angle')
            .AsInteger;
          Max_Torpedo_Gyro_Angle := FieldByName('Max_Torpedo_Gyro_Angle')
            .AsSingle;
          Max_Torpedo_Search_Depth := FieldByName('Max_Torpedo_Search_Depth')
            .AsSingle;
          Acoustic_Torp_Ceiling_Depth := FieldByName
            ('Acoustic_Torp_Ceiling_Depth').AsSingle;
          Fixed_Ceiling_Depth := FieldByName('Fixed_Ceiling_Depth').AsInteger;
          Fixed_Seeker_TurnOn_Range := FieldByName('Fixed_Seeker_TurnOn_Range')
            .AsInteger;
          Sinuation_Runout := FieldByName('Sinuation_Runout').AsInteger;
          Runout_Sinuation_Period := FieldByName('Runout_Sinuation_Period')
            .AsSingle;
          Runout_Sinuation_Amplitude := FieldByName('Runout_Sinuation_Amplitude')
            .AsSingle;
          Min_Runout_Range := FieldByName('Min_Runout_Range').AsSingle;
          Launch_Method := FieldByName('Launch_Method').AsInteger;
          Data_Entry_Method := FieldByName('Data_Entry_Method').AsInteger;
          Launch_Speed := FieldByName('Launch_Speed').AsInteger;
          Opt_Launch_Range_Nuc_Sub := FieldByName('Opt_Launch_Range_Nuc_Sub')
            .AsSingle;
          Opt_Launch_Range_Conv_Sub := FieldByName('Opt_Launch_Range_Conv_Sub')
            .AsSingle;
          Opt_Launch_Range_Other := FieldByName('Opt_Launch_Range_Other')
            .AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
        end;
        vList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllTorpedo_POH_Modifier(const id: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
var
    rec: TTorpedo_On_Board;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Torpedo_POH_Modifier ' );
    SQL.Add('WHERE (Torpedo_Index = ' +  IntToStr(id) + ')' );
    SQL.Add('ORDER BY Aspect_Angle ASC ' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TTorpedo_On_Board.Create;
        with rec.FTorpedo_POH do begin
          Torpedo_Index  := FieldByName('Torpedo_Index').AsInteger;
          Aspect_Angle   := FieldByName('Aspect_Angle').AsInteger;
          POH_Modifier   := FieldByName('POH_Modifier').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;

      SQL.Clear;
      SQL.Add('SELECT MIN(Aspect_Angle) as X_MIN, ');
      SQL.Add('MAX(POH_Modifier) as Y_MAX, ');
      SQL.Add('MIN(POH_Modifier) as Y_MIN ');
      SQL.Add('FROM  Torpedo_POH_Modifier ' );
      SQL.Add('WHERE (Torpedo_Index = ' +  IntToStr(id) + ')' );
      Open;
      xMin  := FieldByName('X_MIN').AsSingle;
      yMax  := FieldByName('Y_MAX').AsSingle;
      yMin  := FieldByName('Y_MIN').AsSingle;
    end;
  end;
end;


//------------------------------------------------------------------------------

function TdmTTT.DeleteTorpedo_POH_Modifier(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Torpedo_POH_Modifier  ');
      SQL.Add('WHERE (Torpedo_Index = ' +  id + ')' );
      ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.insertTorpedo_POH_Modifier(rec: TTorpedo_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FTorpedo_POH do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Torpedo_POH_Modifier ');
      SQL.Add
        ('(Torpedo_Index,Aspect_Angle,POH_Modifier)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Torpedo_Index) + ',');
      SQL.Add(FloatToStr(Aspect_Angle) + ',');
      SQL.Add(FloatToStr(POH_Modifier) + ')');
      ExecSQL;
    end;
  end;
end;


// ---------------------------------------------------------------------------

function TdmTTT.getTowed_Jammer_Def(const id: Integer; var aRec: TList;
  var rec: TTowed_Jammer_Decoy_On_Board): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Towed_Jammer_Decoy_Definition a ';
    ssql := ssql + 'LEFT JOIN Note_Storage b ON a.Towed_Decoy_Index = b.Towed_Decoy_Index ';

    if id <> 0 then
      ssql := ssql + 'WHERE a.Towed_Decoy_Index  =' + IntToStr(id);

    ssql := ssql + ' ORDER BY a.Towed_Decoy_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TTowed_Jammer_Decoy_On_Board.Create;
        with rec.FDef do
        begin
          Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
          Towed_Decoy_Identifier := FieldByName('Towed_Decoy_Identifier')
            .AsString;
          Decoy_TARH_Capable := FieldByName('Decoy_TARH_Capable').AsInteger;
          Decoy_SARH_Capable := FieldByName('Decoy_SARH_Capable').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Visual_Cross := FieldByName('Front_Visual_Cross').AsSingle;
          Side_Visual_Cross := FieldByName('Side_Visual_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Type_A_Seducing_Prob := FieldByName('Type_A_Seducing_Prob').AsSingle;
          Type_B_Seducing_Prob := FieldByName('Type_B_Seducing_Prob').AsSingle;
          Type_C_Seducing_Prob := FieldByName('Type_C_Seducing_Prob').AsSingle;
          Activation_Control_Delay := FieldByName('Activation_Control_Delay')
            .AsSingle;
          Tow_Length := FieldByName('Tow_Length').AsSingle;
          ECM_Type := FieldByName('ECM_Type').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.updateTowed_Jammer(rec: TTowed_Jammer_Decoy_On_Board;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Towed_Jammer_Decoy_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Instance_Identifier =''' + Instance_Identifier + ''',');
      SQL.Add('Instance_Type =' + IntToStr(Instance_Type) + ',');
      SQL.Add('Quantity =' + IntToStr(Quantity) + ',');
      SQL.Add('Vehicle_Index =' + FloatToStr(Vehicle_Index));
    end;

    SQL.Add(' WHERE Towed_Decoy_Instance_Index = ' + id);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateTowed_Jammer_Def(rec: TTowed_Jammer_Decoy_On_Board;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Towed_Jammer_Decoy_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Towed_Decoy_Identifier = ''' + Towed_Decoy_Identifier + ''',');
      SQL.Add('Decoy_TARH_Capable = ' + IntToStr(Decoy_TARH_Capable) + ',');
      SQL.Add('Decoy_SARH_Capable = ' + IntToStr(Decoy_SARH_Capable) + ',');
      SQL.Add('Platform_Domain = ' + IntToStr(Platform_Domain) + ',');
      SQL.Add('Platform_Category = ' + IntToStr(Platform_Category) + ',');
      SQL.Add('Platform_Type = ' + IntToStr(Platform_Type) + ',');
      SQL.Add('Length = ' + FloatToStr(Length) + ',');
      SQL.Add('Width = ' + FloatToStr(Width) + ',');
      SQL.Add('Height = ' + FloatToStr(Height) + ',');
      SQL.Add('Front_Radar_Cross = ' + FloatToStr(Front_Radar_Cross) + ',');
      SQL.Add('Side_Radar_Cross = ' + FloatToStr(Side_Radar_Cross) + ',');
      SQL.Add('Front_Visual_Cross = ' + FloatToStr(Front_Visual_Cross) + ',');
      SQL.Add('Side_Visual_Cross = ' + FloatToStr(Side_Visual_Cross) + ',');
      SQL.Add('Front_Acoustic_Cross = ' + FloatToStr(Front_Acoustic_Cross)
          + ',');
      SQL.Add('Side_Acoustic_Cross = ' + FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add('Type_A_Seducing_Prob = ' + FloatToStr(Type_A_Seducing_Prob)
          + ',');
      SQL.Add('Type_B_Seducing_Prob = ' + FloatToStr(Type_B_Seducing_Prob)
          + ',');
      SQL.Add('Type_C_Seducing_Prob = ' + FloatToStr(Type_C_Seducing_Prob)
          + ',');
      SQL.Add('Activation_Control_Delay = ' + FloatToStr
          (Activation_Control_Delay) + ',');
      SQL.Add('Tow_Length = ' + FloatToStr(Tow_Length) + ',');
      SQL.Add('ECM_Type = ' + IntToStr(ECM_Type));
    end;
    SQL.Add('WHERE (Towed_Decoy_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertTowed_Jammer_Def(rec: TTowed_Jammer_Decoy_On_Board)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Towed_Jammer_Decoy_Definition ');
      SQL.Add(
        '(Towed_Decoy_Identifier,Decoy_TARH_Capable,Decoy_SARH_Capable,Platform_Domain,');
      SQL.Add(
        'Platform_Category,Platform_Type,Length,Width,Height,Front_Radar_Cross,Side_Radar_Cross,');
      SQL.Add(
        'Front_Visual_Cross,Side_Visual_Cross,Front_Acoustic_Cross,Side_Acoustic_Cross,');
      SQL.Add(
        'Type_A_Seducing_Prob,Type_B_Seducing_Prob,Type_C_Seducing_Prob,Activation_Control_Delay,');
      SQL.Add('Tow_Length,ECM_Type)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Towed_Decoy_Identifier + ''',');
      SQL.Add(IntToStr(Decoy_TARH_Capable) + ',');
      SQL.Add(IntToStr(Decoy_SARH_Capable) + ',');
      SQL.Add(IntToStr(Platform_Domain) + ',');
      SQL.Add(IntToStr(Platform_Category) + ',');
      SQL.Add(IntToStr(Platform_Type) + ',');
      SQL.Add(FloatToStr(Length) + ',');
      SQL.Add(FloatToStr(Width) + ',');
      SQL.Add(FloatToStr(Height) + ',');
      SQL.Add(FloatToStr(Front_Radar_Cross) + ',');
      SQL.Add(FloatToStr(Side_Radar_Cross) + ',');
      SQL.Add(FloatToStr(Front_Visual_Cross) + ',');
      SQL.Add(FloatToStr(Side_Visual_Cross) + ',');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(Type_A_Seducing_Prob) + ',');
      SQL.Add(FloatToStr(Type_B_Seducing_Prob) + ',');
      SQL.Add(FloatToStr(Type_C_Seducing_Prob) + ',');
      SQL.Add(FloatToStr(Activation_Control_Delay) + ',');
      SQL.Add(FloatToStr(Tow_Length) + ',');
      SQL.Add(IntToStr(ECM_Type) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Towed_Decoy_Index FROM Towed_Jammer_Decoy_Definition ');
      SQL.Add('WHERE Towed_Decoy_Identifier=' + quotedStr
          (Towed_Decoy_Identifier));
      Open;
      with rec.FDef do
      begin
        Towed_Decoy_Index := FieldByName('Towed_Decoy_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteTowed_Jammer_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(17,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Towed_Jammer_Decoy_Definition ');
    SQL.Add('WHERE Towed_Decoy_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;

function TdmTTT.DeleteUserLogin(id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE User_Login ');
    SQL.Add('WHERE LOGIN_INDEX =' + IntToStr(id));
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertTowed_Jammer(rec: TTowed_Jammer_Decoy_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      ExecSQL;
      SQL.Clear;
      SQL.Add('INSERT INTO Towed_Jammer_Decoy_On_Board ');
      SQL.Add(
        '(Instance_Identifier,Instance_Type,Vehicle_Index,Quantity,Towed_Decoy_Index)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Instance_Identifier + ''',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Quantity) + ',');
      SQL.Add(FloatToStr(Towed_Decoy_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Towed_Jammer_Decoy_On_Board ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index) +' ');
      SQL.Add('AND Towed_Decoy_Index = ' + IntToStr(Towed_Decoy_Index));
      Open;

      Towed_Decoy_Instance_Index := FieldByName('Towed_Decoy_Instance_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

////====================================================
function TdmTTT.DeleteTowed_Jammer_Decoy_On_Board(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Towed_Jammer_Decoy_On_Board  ');
      SQL.Add('WHERE (Towed_Decoy_Instance_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;
//-------------------------------------------------------------------


function TdmTTT.GetGame_Environment_Definition(const id: Integer;
  var rec: TGame_Environment_Definition): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add(
      'FROM Game_Environment_Definition a LEFT OUTER JOIN Global_Convergence_Zone b ');
    SQL.Add('ON b.Game_Enviro_Index = a.Game_Enviro_Index ');
    SQL.Add('WHERE (a.Game_Enviro_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      if not Assigned(rec) then
        rec := TGame_Environment_Definition.Create;

      with rec.FData do
      begin
        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
        Game_Enviro_Identifier := FieldByName('Game_Enviro_Identifier')
          .AsString;
        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        Wind_Speed := FieldByName('Wind_Speed').AsSingle;
        Wind_Direction := FieldByName('Wind_Direction').AsSingle;
        Daytime_Visual_Modifier := FieldByName('Daytime_Visual_Modifier')
          .AsSingle;
        Nighttime_Visual_Modifier := FieldByName('Nighttime_Visual_Modifier')
          .AsSingle;
        Daytime_Infrared_Modifier := FieldByName('Daytime_Infrared_Modifier')
          .AsSingle;
        Nighttime_Infrared_Modifier := FieldByName
          ('Nighttime_Infrared_Modifier').AsSingle;
        Sunrise := FieldByName('Sunrise').AsInteger;
        Sunset := FieldByName('Sunset').AsInteger;
        Period_of_Twilight := FieldByName('Period_of_Twilight').AsInteger;
        Rain_Rate := FieldByName('Rain_Rate').AsInteger;
        Cloud_Base_Height := FieldByName('Cloud_Base_Height').AsSingle;
        Cloud_Attenuation := FieldByName('Cloud_Attenuation').AsInteger;
        Sea_State := FieldByName('Sea_State').AsInteger;
        Ocean_Current_Speed := FieldByName('Ocean_Current_Speed').AsSingle;
        Ocean_Current_Direction := FieldByName('Ocean_Current_Direction')
          .AsSingle;
        Thermal_Layer_Depth := FieldByName('Thermal_Layer_Depth').AsSingle;
        Sound_Velocity_Type := FieldByName('Sound_Velocity_Type').AsInteger;
        Surface_Sound_Speed := FieldByName('Surface_Sound_Speed').AsSingle;
        Layer_Sound_Speed := FieldByName('Layer_Sound_Speed').AsSingle;
        Bottom_Sound_Speed := FieldByName('Bottom_Sound_Speed').AsSingle;
        Bottomloss_Coefficient := FieldByName('Bottomloss_Coefficient')
          .AsInteger;
        Ave_Ocean_Depth := FieldByName('Ave_Ocean_Depth').AsSingle;
        CZ_Active := FieldByName('CZ_Active').AsInteger;
        Surface_Ducting_Active := FieldByName('Surface_Ducting_Active')
          .AsInteger;
        Upper_Limit_Surface_Duct_Depth := FieldByName
          ('Upper_Limit_Surface_Duct_Depth').AsSingle;
        Lower_Limit_Surface_Duct_Depth := FieldByName
          ('Lower_Limit_Surface_Duct_Depth').AsSingle;
        Sub_Ducting_Active := FieldByName('Sub_Ducting_Active').AsInteger;
        Upper_Limit_Sub_Duct_Depth := FieldByName('Upper_Limit_Sub_Duct_Depth')
          .AsSingle;
        Lower_Limit_Sub_Duct_Depth := FieldByName('Lower_Limit_Sub_Duct_Depth')
          .AsSingle;
        Shipping_Rate := FieldByName('Shipping_Rate').AsInteger;
        Shadow_Zone_Trans_Loss := FieldByName('Shadow_Zone_Trans_Loss')
          .AsSingle;
        Atmospheric_Refract_Modifier := FieldByName
          ('Atmospheric_Refract_Modifier').AsSingle;
        Barometric_Pressure := FieldByName('Barometric_Pressure').AsSingle;
        Air_Temperature := FieldByName('Air_Temperature').AsSingle;
        Surface_Temperature := FieldByName('Surface_Temperature').AsSingle;
        Start_HF_Range_Gap := FieldByName('Start_HF_Range_Gap').AsSingle;
        End_HF_Range_Gap := FieldByName('End_HF_Range_Gap').AsSingle;
        Game_Area_Index_2 := FieldByName('Game_Area_Index_2').AsInteger;
        Game_Area_Index_3 := FieldByName('Game_Area_Index_3').AsInteger;
        Game_Def_1 := FieldByName('Game_Def_1').AsString;
        Game_Def_2 := FieldByName('Game_Def_2').AsString;
        Game_Def_3 := FieldByName('Game_Def_3').AsString;
      end;
      with rec.FGlobal_Conv do
      begin
        Converge_Index := FieldByName('Converge_Index').AsInteger;
        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
        Occurance_Range := FieldByName('Occurance_Range').AsSingle;
        Width := FieldByName('Width').AsSingle;
        Signal_Reduction_Term := FieldByName('Signal_Reduction_Term').AsSingle;
        Increase_per_CZ := FieldByName('Increase_per_CZ').AsSingle;
        Max_Sonar_Depth := FieldByName('Max_Sonar_Depth').AsSingle;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Environment_Definition_By_Game_Def(
  const DefName: string; var rec: TGame_Environment_Definition): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Environment_Definition ');
    SQL.Add('WHERE Game_Def_1 = ''' + DefName + ''' OR');
    SQL.Add('Game_Def_2 = ''' + DefName + ''' OR');
    SQL.Add('Game_Def_3 = ''' + DefName + '''');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      if not Assigned(rec) then
        rec := TGame_Environment_Definition.Create;

      with rec.FData do
      begin
        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
        Game_Enviro_Identifier := FieldByName('Game_Enviro_Identifier')
          .AsString;
        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        Wind_Speed := FieldByName('Wind_Speed').AsSingle;
        Wind_Direction := FieldByName('Wind_Direction').AsSingle;
        Daytime_Visual_Modifier := FieldByName('Daytime_Visual_Modifier')
          .AsSingle;
        Nighttime_Visual_Modifier := FieldByName('Nighttime_Visual_Modifier')
          .AsSingle;
        Daytime_Infrared_Modifier := FieldByName('Daytime_Infrared_Modifier')
          .AsSingle;
        Nighttime_Infrared_Modifier := FieldByName
          ('Nighttime_Infrared_Modifier').AsSingle;
        Sunrise := FieldByName('Sunrise').AsInteger;
        Sunset := FieldByName('Sunset').AsInteger;
        Period_of_Twilight := FieldByName('Period_of_Twilight').AsInteger;
        Rain_Rate := FieldByName('Rain_Rate').AsInteger;
        Cloud_Base_Height := FieldByName('Cloud_Base_Height').AsSingle;
        Cloud_Attenuation := FieldByName('Cloud_Attenuation').AsInteger;
        Sea_State := FieldByName('Sea_State').AsInteger;
        Ocean_Current_Speed := FieldByName('Ocean_Current_Speed').AsSingle;
        Ocean_Current_Direction := FieldByName('Ocean_Current_Direction')
          .AsSingle;
        Thermal_Layer_Depth := FieldByName('Thermal_Layer_Depth').AsSingle;
        Sound_Velocity_Type := FieldByName('Sound_Velocity_Type').AsInteger;
        Surface_Sound_Speed := FieldByName('Surface_Sound_Speed').AsSingle;
        Layer_Sound_Speed := FieldByName('Layer_Sound_Speed').AsSingle;
        Bottom_Sound_Speed := FieldByName('Bottom_Sound_Speed').AsSingle;
        Bottomloss_Coefficient := FieldByName('Bottomloss_Coefficient')
          .AsInteger;
        Ave_Ocean_Depth := FieldByName('Ave_Ocean_Depth').AsSingle;
        CZ_Active := FieldByName('CZ_Active').AsInteger;
        Surface_Ducting_Active := FieldByName('Surface_Ducting_Active')
          .AsInteger;
        Upper_Limit_Surface_Duct_Depth := FieldByName
          ('Upper_Limit_Surface_Duct_Depth').AsSingle;
        Lower_Limit_Surface_Duct_Depth := FieldByName
          ('Lower_Limit_Surface_Duct_Depth').AsSingle;
        Sub_Ducting_Active := FieldByName('Sub_Ducting_Active').AsInteger;
        Upper_Limit_Sub_Duct_Depth := FieldByName('Upper_Limit_Sub_Duct_Depth')
          .AsSingle;
        Lower_Limit_Sub_Duct_Depth := FieldByName('Lower_Limit_Sub_Duct_Depth')
          .AsSingle;
        Shipping_Rate := FieldByName('Shipping_Rate').AsInteger;
        Shadow_Zone_Trans_Loss := FieldByName('Shadow_Zone_Trans_Loss')
          .AsSingle;
        Atmospheric_Refract_Modifier := FieldByName
          ('Atmospheric_Refract_Modifier').AsSingle;
        Barometric_Pressure := FieldByName('Barometric_Pressure').AsSingle;
        Air_Temperature := FieldByName('Air_Temperature').AsSingle;
        Surface_Temperature := FieldByName('Surface_Temperature').AsSingle;
        Start_HF_Range_Gap := FieldByName('Start_HF_Range_Gap').AsSingle;
        End_HF_Range_Gap := FieldByName('End_HF_Range_Gap').AsSingle;
        Game_Area_Index_2 := FieldByName('Game_Area_Index_2').AsInteger;
        Game_Area_Index_3 := FieldByName('Game_Area_Index_3').AsInteger;
        Game_Def_1 := FieldByName('Game_Def_1').AsString;
        Game_Def_2 := FieldByName('Game_Def_2').AsString;
        Game_Def_3 := FieldByName('Game_Def_3').AsString;
      end;
    end;
  end;
end;

function TdmTTT.GetGame_Environment_Definition_By_Identifier(const id: String;
  var rec: TGame_Environment_Definition): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add
      ('FROM Game_Environment_Definition a JOIN Global_Convergence_Zone b ');
    SQL.Add('ON b.Game_Enviro_Index = a.Game_Enviro_Index ');
    SQL.Add('WHERE (a.Game_Enviro_Identifier = ' + quotedStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      if not Assigned(rec) then
        rec := TGame_Environment_Definition.Create;

      with rec.FData do
      begin
        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
        Game_Enviro_Identifier := FieldByName('Game_Enviro_Identifier')
          .AsString;
        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        Wind_Speed := FieldByName('Wind_Speed').AsSingle;
        Wind_Direction := FieldByName('Wind_Direction').AsSingle;
        Daytime_Visual_Modifier := FieldByName('Daytime_Visual_Modifier')
          .AsSingle;
        Nighttime_Visual_Modifier := FieldByName('Nighttime_Visual_Modifier')
          .AsSingle;
        Daytime_Infrared_Modifier := FieldByName('Daytime_Infrared_Modifier')
          .AsSingle;
        Nighttime_Infrared_Modifier := FieldByName
          ('Nighttime_Infrared_Modifier').AsSingle;
        Sunrise := FieldByName('Sunrise').AsInteger;
        Sunset := FieldByName('Sunset').AsInteger;
        Period_of_Twilight := FieldByName('Period_of_Twilight').AsInteger;
        Rain_Rate := FieldByName('Rain_Rate').AsInteger;
        Cloud_Base_Height := FieldByName('Cloud_Base_Height').AsSingle;
        Cloud_Attenuation := FieldByName('Cloud_Attenuation').AsInteger;
        Sea_State := FieldByName('Sea_State').AsInteger;
        Ocean_Current_Speed := FieldByName('Ocean_Current_Speed').AsSingle;
        Ocean_Current_Direction := FieldByName('Ocean_Current_Direction')
          .AsSingle;
        Thermal_Layer_Depth := FieldByName('Thermal_Layer_Depth').AsSingle;
        Sound_Velocity_Type := FieldByName('Sound_Velocity_Type').AsInteger;
        Surface_Sound_Speed := FieldByName('Surface_Sound_Speed').AsSingle;
        Layer_Sound_Speed := FieldByName('Layer_Sound_Speed').AsSingle;
        Bottom_Sound_Speed := FieldByName('Bottom_Sound_Speed').AsSingle;
        Bottomloss_Coefficient := FieldByName('Bottomloss_Coefficient')
          .AsInteger;
        Ave_Ocean_Depth := FieldByName('Ave_Ocean_Depth').AsSingle;
        CZ_Active := FieldByName('CZ_Active').AsInteger;
        Surface_Ducting_Active := FieldByName('Surface_Ducting_Active')
          .AsInteger;
        Upper_Limit_Surface_Duct_Depth := FieldByName
          ('Upper_Limit_Surface_Duct_Depth').AsSingle;
        Lower_Limit_Surface_Duct_Depth := FieldByName
          ('Lower_Limit_Surface_Duct_Depth').AsSingle;
        Sub_Ducting_Active := FieldByName('Sub_Ducting_Active').AsInteger;
        Upper_Limit_Sub_Duct_Depth := FieldByName('Upper_Limit_Sub_Duct_Depth')
          .AsSingle;
        Lower_Limit_Sub_Duct_Depth := FieldByName('Lower_Limit_Sub_Duct_Depth')
          .AsSingle;
        Shipping_Rate := FieldByName('Shipping_Rate').AsInteger;
        Shadow_Zone_Trans_Loss := FieldByName('Shadow_Zone_Trans_Loss')
          .AsSingle;
        Atmospheric_Refract_Modifier := FieldByName
          ('Atmospheric_Refract_Modifier').AsSingle;
        Barometric_Pressure := FieldByName('Barometric_Pressure').AsSingle;
        Air_Temperature := FieldByName('Air_Temperature').AsSingle;
        Surface_Temperature := FieldByName('Surface_Temperature').AsSingle;
        Start_HF_Range_Gap := FieldByName('Start_HF_Range_Gap').AsSingle;
        End_HF_Range_Gap := FieldByName('End_HF_Range_Gap').AsSingle;
        Game_Area_Index_2 := FieldByName('Game_Area_Index_2').AsInteger;
        Game_Area_Index_3 := FieldByName('Game_Area_Index_3').AsInteger;
        Game_Def_1 := FieldByName('Game_Def_1').AsString;
        Game_Def_2 := FieldByName('Game_Def_2').AsString;
        Game_Def_3 := FieldByName('Game_Def_3').AsString;
      end;
      with rec.FGlobal_Conv do
      begin
        Converge_Index := FieldByName('Converge_Index').AsInteger;
        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
        Occurance_Range := FieldByName('Occurance_Range').AsSingle;
        Width := FieldByName('Width').AsSingle;
        Signal_Reduction_Term := FieldByName('Signal_Reduction_Term').AsSingle;
        Increase_per_CZ := FieldByName('Increase_per_CZ').AsSingle;
        Max_Sonar_Depth := FieldByName('Max_Sonar_Depth').AsSingle;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetAllGame_Environment_Definition(var gList: TList): Integer;
var
  rec: TGame_Environment_Definition;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Environment_Definition ');
    SQL.Add('ORDER BY Game_Enviro_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(gList) then
        gList := TList.Create
      else
        gList.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Environment_Definition.Create;

        with rec.FData do
        begin
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Game_Enviro_Identifier := FieldByName('Game_Enviro_Identifier')
            .AsString;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          Wind_Speed := FieldByName('Wind_Speed').AsSingle;
          Wind_Direction := FieldByName('Wind_Direction').AsSingle;
          Daytime_Visual_Modifier := FieldByName('Daytime_Visual_Modifier')
            .AsSingle;
          Nighttime_Visual_Modifier := FieldByName('Nighttime_Visual_Modifier')
            .AsSingle;
          Daytime_Infrared_Modifier := FieldByName('Daytime_Infrared_Modifier')
            .AsSingle;
          Nighttime_Infrared_Modifier := FieldByName
            ('Nighttime_Infrared_Modifier').AsSingle;
          Sunrise := FieldByName('Sunrise').AsInteger;
          Sunset := FieldByName('Sunset').AsInteger;
          Period_of_Twilight := FieldByName('Period_of_Twilight').AsInteger;
          Rain_Rate := FieldByName('Rain_Rate').AsInteger;
          Cloud_Base_Height := FieldByName('Cloud_Base_Height').AsSingle;
          Cloud_Attenuation := FieldByName('Cloud_Attenuation').AsInteger;
          Sea_State := FieldByName('Sea_State').AsInteger;
          Ocean_Current_Speed := FieldByName('Ocean_Current_Speed').AsSingle;
          Ocean_Current_Direction := FieldByName('Ocean_Current_Direction')
            .AsSingle;
          Thermal_Layer_Depth := FieldByName('Thermal_Layer_Depth').AsSingle;
          Sound_Velocity_Type := FieldByName('Sound_Velocity_Type').AsInteger;
          Surface_Sound_Speed := FieldByName('Surface_Sound_Speed').AsSingle;
          Layer_Sound_Speed := FieldByName('Layer_Sound_Speed').AsSingle;
          Bottom_Sound_Speed := FieldByName('Bottom_Sound_Speed').AsSingle;
          Bottomloss_Coefficient := FieldByName('Bottomloss_Coefficient')
            .AsInteger;
          Ave_Ocean_Depth := FieldByName('Ave_Ocean_Depth').AsSingle;
          CZ_Active := FieldByName('CZ_Active').AsInteger;
          Surface_Ducting_Active := FieldByName('Surface_Ducting_Active')
            .AsInteger;
          Upper_Limit_Surface_Duct_Depth := FieldByName
            ('Upper_Limit_Surface_Duct_Depth').AsSingle;
          Lower_Limit_Surface_Duct_Depth := FieldByName
            ('Lower_Limit_Surface_Duct_Depth').AsSingle;
          Sub_Ducting_Active := FieldByName('Sub_Ducting_Active').AsInteger;
          Upper_Limit_Sub_Duct_Depth := FieldByName
            ('Upper_Limit_Sub_Duct_Depth').AsSingle;
          Lower_Limit_Sub_Duct_Depth := FieldByName
            ('Lower_Limit_Sub_Duct_Depth').AsSingle;
          Shipping_Rate := FieldByName('Shipping_Rate').AsInteger;
          Shadow_Zone_Trans_Loss := FieldByName('Shadow_Zone_Trans_Loss')
            .AsSingle;
          Atmospheric_Refract_Modifier := FieldByName
            ('Atmospheric_Refract_Modifier').AsSingle;
          Barometric_Pressure := FieldByName('Barometric_Pressure').AsSingle;
          Air_Temperature := FieldByName('Air_Temperature').AsSingle;
          Surface_Temperature := FieldByName('Surface_Temperature').AsSingle;
          Start_HF_Range_Gap := FieldByName('Start_HF_Range_Gap').AsSingle;
          End_HF_Range_Gap := FieldByName('End_HF_Range_Gap').AsSingle;
          Game_Area_Index_2 := FieldByName('Game_Area_Index_2').AsInteger;
          Game_Area_Index_3 := FieldByName('Game_Area_Index_3').AsInteger;
          Game_Def_1 := FieldByName('Game_Def_1').AsString;
          Game_Def_2 := FieldByName('Game_Def_2').AsString;
          Game_Def_3 := FieldByName('Game_Def_3').AsString;
        end;
        if rec.FData.Game_Enviro_Index <> 1 then
          gList.Add(rec);

        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateGame_Environment_Def(rec: TGame_Environment_Definition;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Environment_Definition ');
      SQL.Add('SET ');
      SQL.Add('Game_Enviro_Identifier =''' + Game_Enviro_Identifier + ''',');
      SQL.Add('Game_Area_Index =' + IntToStr(Game_Area_Index) + ',');
      SQL.Add('Wind_Speed =' + FloatToStr(Wind_Speed) + ',');
      SQL.Add('Wind_Direction =' + FloatToStr(Wind_Direction) + ',');
      SQL.Add('Daytime_Visual_Modifier =' + FloatToStr(Daytime_Visual_Modifier)
          + ',');
      SQL.Add('Nighttime_Visual_Modifier =' + FloatToStr
          (Nighttime_Visual_Modifier) + ',');
      SQL.Add('Daytime_Infrared_Modifier =' + FloatToStr
          (Daytime_Infrared_Modifier) + ',');
      SQL.Add('Nighttime_Infrared_Modifier =' + FloatToStr
          (Nighttime_Infrared_Modifier) + ',');
      SQL.Add('Sunrise =' + IntToStr(Sunrise) + ',');
      SQL.Add('Sunset =' + IntToStr(Sunset) + ',');
      SQL.Add('Period_of_Twilight =' + IntToStr(Period_of_Twilight) + ',');
      SQL.Add('Rain_Rate =' + IntToStr(Rain_Rate) + ',');
      SQL.Add('Cloud_Base_Height =' + FloatToStr(Cloud_Base_Height) + ',');
      SQL.Add('Cloud_Attenuation =' + IntToStr(Cloud_Attenuation) + ',');
      SQL.Add('Sea_State =' + FloatToStr(Sea_State) + ',');
      SQL.Add('Ocean_Current_Speed =' + FloatToStr(Ocean_Current_Speed) + ',');
      SQL.Add('Ocean_Current_Direction =' + FloatToStr(Ocean_Current_Direction)
          + ',');
      SQL.Add('Thermal_Layer_Depth =' + FloatToStr(Thermal_Layer_Depth) + ',');
      SQL.Add('Sound_Velocity_Type =' + IntToStr(Sound_Velocity_Type) + ',');
      SQL.Add('Surface_Sound_Speed =' + FloatToStr(Nighttime_Visual_Modifier)
          + ',');
      SQL.Add('Layer_Sound_Speed =' + FloatToStr(Layer_Sound_Speed) + ',');
      SQL.Add('Bottom_Sound_Speed =' + FloatToStr(Bottom_Sound_Speed) + ',');
      SQL.Add('Bottomloss_Coefficient =' + IntToStr(Bottomloss_Coefficient)
          + ',');
      SQL.Add('Ave_Ocean_Depth =' + FloatToStr(Ave_Ocean_Depth) + ',');
      SQL.Add('CZ_Active =' + IntToStr(CZ_Active) + ',');
      SQL.Add('Surface_Ducting_Active =' + IntToStr(Surface_Ducting_Active)
          + ',');
      SQL.Add('Upper_Limit_Surface_Duct_Depth =' + FloatToStr
          (Upper_Limit_Surface_Duct_Depth) + ',');
      SQL.Add('Lower_Limit_Surface_Duct_Depth =' + FloatToStr
          (Lower_Limit_Surface_Duct_Depth) + ',');
      SQL.Add('Sub_Ducting_Active =' + IntToStr(Sub_Ducting_Active) + ',');
      SQL.Add('Upper_Limit_Sub_Duct_Depth =' + FloatToStr
          (Upper_Limit_Sub_Duct_Depth) + ',');
      SQL.Add('Lower_Limit_Sub_Duct_Depth  =' + FloatToStr
          (Lower_Limit_Sub_Duct_Depth) + ',');
      SQL.Add('Shipping_Rate =' + IntToStr(Shipping_Rate) + ',');
      SQL.Add('Shadow_Zone_Trans_Loss =' + FloatToStr(Shadow_Zone_Trans_Loss)
          + ',');
      SQL.Add('Atmospheric_Refract_Modifier =' + FloatToStr
          (Atmospheric_Refract_Modifier) + ',');
      SQL.Add('Barometric_Pressure =' + FloatToStr(Barometric_Pressure) + ',');
      SQL.Add('Air_Temperature =' + FloatToStr(Air_Temperature) + ',');
      SQL.Add('Surface_Temperature =' + FloatToStr(Surface_Temperature) + ',');
      SQL.Add('Start_HF_Range_Gap =' + FloatToStr(Start_HF_Range_Gap) + ',');
      SQL.Add('End_HF_Range_Gap =' + FloatToStr(End_HF_Range_Gap)+ ',');
      SQL.Add('Game_Area_Index_2 =' +FloatToStr(Game_Area_Index_2)+ ',');
      SQL.Add('Game_Area_Index_3 = '+FloatToStr(Game_Area_Index_3)+ ',');
      SQL.Add('Game_Def_1 = '''+ Game_Def_1 + ''',');
      SQL.Add('Game_Def_2 = '''+ Game_Def_2 + ''',');
      SQL.Add('Game_Def_3 = '''+ Game_Def_3 + '''');
    end;

    SQL.Add(' WHERE (Game_Enviro_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteGame_Environment_Def(id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Game_Environment_Definition ');
    SQL.Add('WHERE Game_Enviro_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.insertGame_Environment_Def(rec: TGame_Environment_Definition)
  : TGame_Environment_Definition;
begin
  result := nil;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      {
        SQL.Clear;
        SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Game_Environment_Definition] ON;');
        ExecSQL;
        }
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Environment_Definition ');
      SQL.Add(
        '(Game_Enviro_Identifier,Game_Area_Index,Wind_Speed,Wind_Direction,');
      SQL.Add(
        'Daytime_Visual_Modifier,Nighttime_Visual_Modifier,Daytime_Infrared_Modifier,Nighttime_Infrared_Modifier,');
      SQL.Add(
        'Sunrise,Sunset,Period_of_Twilight,Rain_Rate,Cloud_Base_Height,Cloud_Attenuation,');
      SQL.Add(
        'Sea_State,Ocean_Current_Speed,Ocean_Current_Direction,Thermal_Layer_Depth,Sound_Velocity_Type,');
      SQL.Add(
        'Surface_Sound_Speed,Layer_Sound_Speed,Bottom_Sound_Speed,Bottomloss_Coefficient,Ave_Ocean_Depth,');
      SQL.Add(
        'CZ_Active,Surface_Ducting_Active,Upper_Limit_Surface_Duct_Depth,Lower_Limit_Surface_Duct_Depth, Sub_Ducting_Active, Upper_Limit_Sub_Duct_Depth, Lower_Limit_Sub_Duct_Depth,');
      SQL.Add(
        'Shipping_Rate,Shadow_Zone_Trans_Loss,Atmospheric_Refract_Modifier,Barometric_Pressure,Air_Temperature,');
      SQL.Add('Surface_Temperature,Start_HF_Range_Gap,End_HF_Range_Gap, Game_Area_Index_2, Game_Area_Index_3, Game_Def_1, Game_Def_2, Game_Def_3)');

      SQL.Add(' VALUES (');
      // SQL.Add(IntToStr(Game_Enviro_Index)+',');
      SQL.Add('''' + Game_Enviro_Identifier + ''',');
      SQL.Add(IntToStr(Game_Area_Index) + ',');
      SQL.Add(FloatToStr(Wind_Speed) + ',');
      SQL.Add(FloatToStr(Wind_Direction) + ',');
      SQL.Add(FloatToStr(Daytime_Visual_Modifier) + ',');
      SQL.Add(FloatToStr(Nighttime_Visual_Modifier) + ',');
      SQL.Add(FloatToStr(Daytime_Infrared_Modifier) + ',');
      SQL.Add(FloatToStr(Nighttime_Infrared_Modifier) + ',');
      SQL.Add(IntToStr(Sunrise) + ',');
      SQL.Add(IntToStr(Sunset) + ',');
      SQL.Add(IntToStr(Period_of_Twilight) + ',');
      SQL.Add(IntToStr(Rain_Rate) + ',');
      SQL.Add(FloatToStr(Cloud_Base_Height) + ',');
      SQL.Add(IntToStr(Cloud_Attenuation) + ',');
      SQL.Add(IntToStr(Sea_State) + ',');
      SQL.Add(FloatToStr(Ocean_Current_Speed) + ',');
      SQL.Add(FloatToStr(Ocean_Current_Direction) + ',');
      SQL.Add(FloatToStr(Thermal_Layer_Depth) + ',');
      SQL.Add(IntToStr(Sound_Velocity_Type) + ',');
      SQL.Add(FloatToStr(Surface_Sound_Speed) + ',');
      SQL.Add(FloatToStr(Layer_Sound_Speed) + ',');
      SQL.Add(FloatToStr(Bottom_Sound_Speed) + ',');
      SQL.Add(IntToStr(Bottomloss_Coefficient) + ',');
      SQL.Add(FloatToStr(Ave_Ocean_Depth) + ',');
      SQL.Add(IntToStr(CZ_Active) + ',');
      SQL.Add(IntToStr(Surface_Ducting_Active) + ',');
      SQL.Add(FloatToStr(Upper_Limit_Surface_Duct_Depth) + ',');
      SQL.Add(FloatToStr(Lower_Limit_Surface_Duct_Depth) + ',');
      SQL.Add(IntToStr(Sub_Ducting_Active) + ',');
      SQL.Add(FloatToStr(Upper_Limit_Sub_Duct_Depth) + ',');
      SQL.Add(FloatToStr(Lower_Limit_Sub_Duct_Depth) + ',');
      SQL.Add(IntToStr(Shipping_Rate) + ',');
      SQL.Add(FloatToStr(Shadow_Zone_Trans_Loss) + ',');
      SQL.Add(FloatToStr(Atmospheric_Refract_Modifier) + ',');
      SQL.Add(FloatToStr(Barometric_Pressure) + ',');
      SQL.Add(FloatToStr(Air_Temperature) + ',');
      SQL.Add(FloatToStr(Surface_Temperature) + ',');
      SQL.Add(FloatToStr(Start_HF_Range_Gap) + ',');
      SQL.Add(FloatToStr(End_HF_Range_Gap) + ',');
      SQL.Add(FloatToStr(Game_Area_Index_2) + ',');
      SQL.Add(FloatToStr(Game_Area_Index_3) + ',');
      SQL.Add('''' + Game_Def_1 + ''',');
      SQL.Add('''' + Game_Def_2 + ''',');
      SQL.Add('''' + Game_Def_3 + ''')');

//       ShowMessage(SQL.Text);

      ExecSQL;
    end;
  end;

  // ambil nilai return
  with ZQ do
  begin
    Close;
    SQL.Clear;
   // SQL.Add('USE Runtime_DB');
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Environment_Definition a');
    SQL.Add('WHERE a.Game_Enviro_Identifier Like ' + quotedStr
        (rec.FData.Game_Enviro_Identifier) + '');
    // ShowMessage(SQL.Text);
    Open;

    if not IsEmpty then
    begin
      First;

      if not Assigned(rec) then
        rec := TGame_Environment_Definition.Create;

      with rec.FData do
      begin
        Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
        Game_Enviro_Identifier := FieldByName('Game_Enviro_Identifier')
          .AsString;
        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        Wind_Speed := FieldByName('Wind_Speed').AsSingle;
        Wind_Direction := FieldByName('Wind_Direction').AsSingle;
        Daytime_Visual_Modifier := FieldByName('Daytime_Visual_Modifier')
          .AsSingle;
        Nighttime_Visual_Modifier := FieldByName('Nighttime_Visual_Modifier')
          .AsSingle;
        Daytime_Infrared_Modifier := FieldByName('Daytime_Infrared_Modifier')
          .AsSingle;
        Nighttime_Infrared_Modifier := FieldByName
          ('Nighttime_Infrared_Modifier').AsSingle;
        Sunrise := FieldByName('Sunrise').AsInteger;
        Sunset := FieldByName('Sunset').AsInteger;
        Period_of_Twilight := FieldByName('Period_of_Twilight').AsInteger;
        Rain_Rate := FieldByName('Rain_Rate').AsInteger;
        Cloud_Base_Height := FieldByName('Cloud_Base_Height').AsSingle;
        Cloud_Attenuation := FieldByName('Cloud_Attenuation').AsInteger;
        Sea_State := FieldByName('Sea_State').AsInteger;
        Ocean_Current_Speed := FieldByName('Ocean_Current_Speed').AsSingle;
        Ocean_Current_Direction := FieldByName('Ocean_Current_Direction')
          .AsSingle;
        Thermal_Layer_Depth := FieldByName('Thermal_Layer_Depth').AsSingle;
        Sound_Velocity_Type := FieldByName('Sound_Velocity_Type').AsInteger;
        Surface_Sound_Speed := FieldByName('Surface_Sound_Speed').AsSingle;
        Layer_Sound_Speed := FieldByName('Layer_Sound_Speed').AsSingle;
        Bottom_Sound_Speed := FieldByName('Bottom_Sound_Speed').AsSingle;
        Bottomloss_Coefficient := FieldByName('Bottomloss_Coefficient')
          .AsInteger;
        Ave_Ocean_Depth := FieldByName('Ave_Ocean_Depth').AsSingle;
        CZ_Active := FieldByName('CZ_Active').AsInteger;
        Surface_Ducting_Active := FieldByName('Surface_Ducting_Active')
          .AsInteger;
        Upper_Limit_Surface_Duct_Depth := FieldByName
          ('Upper_Limit_Surface_Duct_Depth').AsSingle;
        Lower_Limit_Surface_Duct_Depth := FieldByName
          ('Lower_Limit_Surface_Duct_Depth').AsSingle;
        Sub_Ducting_Active := FieldByName('Sub_Ducting_Active').AsInteger;
        Upper_Limit_Sub_Duct_Depth := FieldByName('Upper_Limit_Sub_Duct_Depth')
          .AsSingle;
        Lower_Limit_Sub_Duct_Depth := FieldByName('Lower_Limit_Sub_Duct_Depth')
          .AsSingle;
        Shipping_Rate := FieldByName('Shipping_Rate').AsInteger;
        Shadow_Zone_Trans_Loss := FieldByName('Shadow_Zone_Trans_Loss')
          .AsSingle;
        Atmospheric_Refract_Modifier := FieldByName
          ('Atmospheric_Refract_Modifier').AsSingle;
        Barometric_Pressure := FieldByName('Barometric_Pressure').AsSingle;
        Air_Temperature := FieldByName('Air_Temperature').AsSingle;
        Surface_Temperature := FieldByName('Surface_Temperature').AsSingle;
        Start_HF_Range_Gap := FieldByName('Start_HF_Range_Gap').AsSingle;
        End_HF_Range_Gap := FieldByName('End_HF_Range_Gap').AsSingle;
        Game_Area_Index_2 := FieldByName('Game_Area_Index_2').AsInteger;
        Game_Area_Index_3 := FieldByName('Game_Area_Index_3').AsInteger;
        Game_Def_1        := FieldByName('Game_Def_1').AsString;
        Game_Def_2        := FieldByName('Game_Def_2').AsString;
        Game_Def_3        := FieldByName('Game_Def_3').AsString;
      end;
    end;
  end;
  result := rec;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Area_Def(var gList: TList): Integer;
var
  rec: TGame_Environment_Definition;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Area_Definition ');
    SQL.Add('ORDER BY Game_Area_Identifier');
    Open;

    result := RecordCount;
    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(gList) then
        gList := TList.Create
      else
        gList.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Environment_Definition.Create;
        with rec.FGameArea do
        begin
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          Game_Area_Identifier := FieldByName('Game_Area_Identifier').AsString;
          Game_Centre_Lat := FieldByName('Game_Centre_Lat').AsFloat;
          Game_Centre_Long := FieldByName('Game_Centre_Long').AsFloat;
          Game_X_Dimension := FieldByName('Game_X_Dimension').AsSingle;
          Game_Y_Dimension := FieldByName('Game_Y_Dimension').AsSingle;
          Use_Real_World := FieldByName('Use_Real_World').AsInteger;
          Use_Artificial_Landmass := FieldByName('Use_Artificial_Landmass')
            .AsInteger;
          Detail_Map := FieldByName('Detail_Map').AsString;
        end;
        if rec.FGameArea.Game_Area_Index <> 1 then
          gList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Area_DefByID(const id: Integer;
  var gameArea: TGame_Environment_Definition): Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Area_Definition ');
    SQL.Add('WHERE Game_Area_Index = ' + IntToStr(id));
    Open;

    if not ZQ.IsEmpty then
    begin
      if not Assigned(gameArea) then
        gameArea := TGame_Environment_Definition.Create;

      with gameArea.FGameArea do
      begin
        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        Game_Area_Identifier := FieldByName('Game_Area_Identifier').AsString;
        Game_Centre_Lat := FieldByName('Game_Centre_Lat').AsFloat;
        Game_Centre_Long := FieldByName('Game_Centre_Long').AsFloat;
        Game_X_Dimension := FieldByName('Game_X_Dimension').AsSingle;
        Game_Y_Dimension := FieldByName('Game_Y_Dimension').AsSingle;
        Use_Real_World := FieldByName('Use_Real_World').AsInteger;
        Use_Artificial_Landmass := FieldByName('Use_Artificial_Landmass')
          .AsInteger;
        Detail_Map := FieldByName('Detail_Map').AsString;
      end;
    end;
  end;
end;

function TdmTTT.GetGame_Area_Def_ByIdentifier(const Game_Identifier : string;
  var gameArea: TGame_Environment_Definition): Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Area_Definition ');
    SQL.Add('WHERE Game_Area_Identifier = ''' + Game_Identifier + '''');
    Open;

    if not ZQ.IsEmpty then
    begin
      if not Assigned(gameArea) then
        gameArea := TGame_Environment_Definition.Create;

      with gameArea.FGameArea do
      begin
        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        Game_Area_Identifier := FieldByName('Game_Area_Identifier').AsString;
        Game_Centre_Lat := FieldByName('Game_Centre_Lat').AsFloat;
        Game_Centre_Long := FieldByName('Game_Centre_Long').AsFloat;
        Game_X_Dimension := FieldByName('Game_X_Dimension').AsSingle;
        Game_Y_Dimension := FieldByName('Game_Y_Dimension').AsSingle;
        Use_Real_World := FieldByName('Use_Real_World').AsInteger;
        Use_Artificial_Landmass := FieldByName('Use_Artificial_Landmass')
          .AsInteger;
        Detail_Map := FieldByName('Detail_Map').AsString;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getGame_Area_Identifier(id: string; gList: TList;
  var rec: TGame_Environment_Definition): Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Area_Definition ');
    SQL.Add('WHERE Game_Area_Index =' + id);
    Open;

    result := RecordCount;
    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(gList) then
        gList := TList.Create
      else
        gList.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Environment_Definition.Create;
        with rec.FGameArea do
        begin
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          Game_Area_Identifier := FieldByName('Game_Area_Identifier').AsString;
          Game_Centre_Lat := FieldByName('Game_Centre_Lat').AsFloat;
          Game_Centre_Long := FieldByName('Game_Centre_Long').AsFloat;
          Game_X_Dimension := FieldByName('Game_X_Dimension').AsSingle;
          Game_Y_Dimension := FieldByName('Game_Y_Dimension').AsSingle;
          Use_Real_World := FieldByName('Use_Real_World').AsInteger;
          Use_Artificial_Landmass := FieldByName('Use_Artificial_Landmass')
            .AsInteger;
          Detail_Map := FieldByName('Detail_Map').AsString;
        end;
        gList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getGame_Area_By_Envi(id: string; gList: TList;
  var rec: TGame_Environment_Definition): Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Area_Definition a JOIN Game_Environment_Definition b ');
    SQL.Add('ON a.Game_Area_Index = b.Game_Area_Index ');
    SQL.Add('WHERE b.Game_Enviro_Index =' + id);
    Open;

    result := RecordCount;
    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(gList) then
        gList := TList.Create
      else
        gList.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Environment_Definition.Create;
        with rec.FGameArea do
        begin
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          Game_Area_Identifier := FieldByName('Game_Area_Identifier').AsString;
          Game_Centre_Lat := FieldByName('Game_Centre_Lat').AsFloat;
          Game_Centre_Long := FieldByName('Game_Centre_Long').AsFloat;
          Game_X_Dimension := FieldByName('Game_X_Dimension').AsSingle;
          Game_Y_Dimension := FieldByName('Game_Y_Dimension').AsSingle;
          Use_Real_World := FieldByName('Use_Real_World').AsInteger;
          Use_Artificial_Landmass := FieldByName('Use_Artificial_Landmass')
            .AsInteger;
          Detail_Map := FieldByName('Detail_Map').AsString;
        end;
        gList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ----------------------------------------------------------------------

function TdmTTT.updateGame_Area_Def(rec: TGame_Environment_Definition;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FGameArea do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Area_Definition ');
      SQL.Add('SET ');
      SQL.Add('Game_Area_Identifier =''' + Game_Area_Identifier + ''',');
      SQL.Add('Game_Centre_Lat =' + FloatToStr(Game_Centre_Lat) + ',');
      SQL.Add('Game_Centre_Long =' + FloatToStr(Game_Centre_Long) + ',');
      SQL.Add('Game_X_Dimension =' + FloatToStr(Game_X_Dimension) + ',');
      SQL.Add('Game_Y_Dimension =' + FloatToStr(Game_Y_Dimension) + ',');
      SQL.Add('Use_Real_World =' + IntToStr(Use_Real_World) + ',');
      SQL.Add('Use_Artificial_Landmass =' + IntToStr(Use_Artificial_Landmass)
          + ',');
      SQL.Add('Detail_Map =''' + Detail_Map + '''');
    end;

    SQL.Add(' WHERE (Game_Area_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertGame_Area_Def(rec: TGame_Environment_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FGameArea do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Area_Definition ');
      SQL.Add(
        '(Game_Area_Identifier,Game_Centre_Lat,Game_Centre_Long,Game_X_Dimension,Game_Y_Dimension,Use_Real_World,Use_Artificial_Landmass,Detail_Map)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Game_Area_Identifier + ''',');
      SQL.Add(FloatToStr(Game_Centre_Lat) + ',');
      SQL.Add(FloatToStr(Game_Centre_Long) + ',');
      SQL.Add(FloatToStr(Game_X_Dimension) + ',');
      SQL.Add(FloatToStr(Game_Y_Dimension) + ',');
      SQL.Add(IntToStr(Use_Real_World) + ',');
      SQL.Add(IntToStr(Use_Artificial_Landmass) + ',');
      SQL.Add('''' + Detail_Map + '''' + ')');
      // ShowMessage(SQL.Text);
      ExecSQL;

      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM Game_Area_Definition ');
      SQL.Add('WHERE Game_Area_Identifier =' + quotedStr
          (rec.FGameArea.Game_Area_Identifier));
      Open;
      begin
        rec := TGame_Environment_Definition.Create;
        with rec.FGameArea do
        begin
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          Game_Area_Identifier := FieldByName('Game_Area_Identifier').AsString;
          Game_Centre_Lat := FieldByName('Game_Centre_Lat').AsFloat;
          Game_Centre_Long := FieldByName('Game_Centre_Long').AsFloat;
          Game_X_Dimension := FieldByName('Game_X_Dimension').AsSingle;
          Game_Y_Dimension := FieldByName('Game_Y_Dimension').AsSingle;
          Use_Real_World := FieldByName('Use_Real_World').AsInteger;
          Use_Artificial_Landmass := FieldByName('Use_Artificial_Landmass')
            .AsInteger;
          Detail_Map := FieldByName('Detail_Map').AsString;
        end;
      end;
      result := rec.FGameArea.Game_Area_Index;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteGame_Area_Def(id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Game_Area_Definition ');
    SQL.Add('WHERE Game_Area_Index =' + IntToStr(id));
    ExecSQL
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllOverlay_Definition(aRec: TList): Integer;
var
  rec: TMainOverlay_Definition;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Overlay_Definition ');
//    SQL.Add('ORDER BY Overlay_Identifier');
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TMainOverlay_Definition.Create;

        with rec.FData do
        begin
          Overlay_Index := FieldByName('Overlay_Index').AsInteger;
          Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
          Name := FieldByName('Overlay_Filename').AsString;
          Tipe := FieldByName('Static_Overlay').AsInteger;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          domain := FieldByName('Domain').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;


function TdmTTT.GetAllOverlay_Shape(const id: Integer; var aRec: TList): Integer;
var
  rec: TShape_Definition;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Overlay_Shape ');
    SQL.Add('WHERE Overlay_Index = ' + IntToStr(id));
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TShape_Definition.Create;

        with rec.FData do
        begin
          OverlayIndex  := FieldByName('Overlay_Index').AsInteger;
          Tipe          := FieldByName('Static_Overlay').AsInteger;
          ShapeID       := FieldByName('Shape_ID').AsInteger;
          PostStartX    := FieldByName('PostStart_X').AsFloat;
          PostStartY    := FieldByName('PostStart_Y').AsFloat;
          PostEndX      := FieldByName('PostEnd_X').AsFloat;
          PostEndY      := FieldByName('PostEnd_Y').AsFloat;
          Words         := FieldByName('Words').AsString;
          Size          := FieldByName('Size').AsInteger;
          Radius1       := FieldByName('Radius_1').AsFloat;
          Radius2       := FieldByName('Radius_2').AsFloat;
          StartAngle    := FieldByName('Start_Angle').AsInteger;
          EndAngle      := FieldByName('End_Angle').AsInteger;
          Rotasi        := FieldByName('Rotasi').AsInteger;
          Kolom         := FieldByName('Kolom').AsInteger;
          Baris         := FieldByName('Baris').AsInteger;
          color         := FieldByName('Color').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;



// ------------------------------------------------------------------------------

function TdmTTT.GetOverlay_Definition(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TMainOverlay_Definition;

begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Overlay_Definition ');
    SQL.Add('WHERE (Game_Area_index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TMainOverlay_Definition.Create;

        with rec.FData do
        begin
          Overlay_Index := FieldByName('Overlay_Index').AsInteger;
          Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
          Name := FieldByName('Overlay_Filename').AsString;
          Tipe := FieldByName('Static_Overlay').AsInteger;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          domain := FieldByName('Domain').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetOverlay_DefinitionByID(const id: Integer;var rec: TMainOverlay_Definition): Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Overlay_Definition');
    SQL.Add('WHERE (Overlay_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      rec := TMainOverlay_Definition.Create;

      with rec.FData do
      begin
        Overlay_Index := FieldByName('Overlay_Index').AsInteger;
        Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
        Name := FieldByName('Overlay_Filename').AsString;
        Tipe := FieldByName('Static_Overlay').AsInteger;
        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        domain := FieldByName('Domain').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateOverlay_Definition(rec: TMainOverlay_Definition; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Overlay_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Overlay_Identifier = ' + QuotedStr (Overlay_Identifier) + ',');
      SQL.Add('Overlay_Filename = ' + QuotedStr (Name)  + ',');
      SQL.Add('Static_Overlay = ' + IntToStr(Tipe) + ',');
      SQL.Add('Domain = ' + IntToStr(domain));

//      if Domain = 1 then
//      SQL.Add(',' + 'Game_Area_Index = ' + IntToStr(Game_Area_Index));

    end;
    SQL.Add('WHERE (Overlay_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertOverlay_Definition(rec: TMainOverlay_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    //Edited Wahyu

    with rec.FData do
    begin
      Close;

      SQL.Clear;
      SQL.Add('INSERT INTO Overlay_Definition ');
      SQL.Add('(Overlay_Identifier,Overlay_Filename,Static_Overlay,Domain');
      if Game_Area_Index <> 0 then
        SQL.Add(',Game_Area_Index');

      SQL.Add(') VALUES (');
      SQL.Add(QuotedStr (Overlay_Identifier) + ',');
      SQL.Add(QuotedStr (Name)  + ',');
      SQL.Add(IntToStr (Tipe)   + ',');
      SQL.Add(IntToStr (domain));

//      if Game_Area_Index <> 0 then
//        SQL.Add(',' + IntToStr(Game_Area_Index));

      SQL.Add(')');

      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Overlay_Definition');
      SQL.Add('WHERE Overlay_Identifier = ' + quotedStr(Overlay_Identifier));

      Open;
      rec.FData.Overlay_Index := FieldByName('Overlay_Index').AsInteger;
    end;
  end;
  result := rec.FData.Overlay_Index;
end;

function TdmTTT.insertOverlay_Shape(rec: TRec_OverlayShape): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;

      SQL.Clear;
      SQL.Add('INSERT INTO Overlay_Shape');
      SQL.Add('(Overlay_Index,Static_Overlay,Shape_ID,PostStart_X,PostStart_Y');
      SQL.Add(',PostEnd_X,PostEnd_Y,Words,Size,Radius_1,Radius_2');
      SQL.Add(',Start_Angle,End_Angle,Rotasi,Kolom,Baris,Color)');

      SQL.Add(' VALUES (');

      SQL.Add(IntToStr  (OverlayIndex)  + ',');
      SQL.Add(IntToStr  (Tipe)          + ',');
      SQL.Add(IntToStr  (ShapeID)       + ',');
      SQL.Add(FloatToStr(PostStartX)    + ',');
      SQL.Add(FloatToStr(PostStartY)    + ',');
      SQL.Add(FloatToStr(PostEndX)      + ',');
      SQL.Add(FloatToStr(PostEndY)      + ',');
      SQL.Add(QuotedStr (Words)         + ',');
      SQL.Add(IntToStr  (Size)          + ',');
      SQL.Add(FloatToStr(Radius1)       + ',');
      SQL.Add(FloatToStr(Radius2)       + ',');
      SQL.Add(IntToStr  (StartAngle)    + ',');
      SQL.Add(IntToStr  (EndAngle)      + ',');
      SQL.Add(IntToStr  (Rotasi)        + ',');
      SQL.Add(IntToStr  (Kolom)         + ',');
      SQL.Add(IntToStr  (Baris)         + ',');
      SQL.Add(IntToStr (color));

      SQL.Add(')');

      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insert_Resource_Overlay_Mapping(rec: TResource_Allocation)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      {
        SQL.Clear;
        SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Overlay_Definition] ON;');
        ExecSQL;
        }
      SQL.Clear;
      SQL.Add('INSERT INTO Resource_Overlay_Mapping ');
      SQL.Add('(Resource_Alloc_Index,Overlay_Index,Force_Designation)');
      SQL.Add(' VALUES (');
      SQL.Add('' + IntToStr(FData.Resource_Alloc_Index) + ',');
      SQL.Add('' + IntToStr(FOverlay.Overlay_Index) + ',');
      SQL.Add(IntToStr(FResource_Overlay.Force_Designation) + ')');
      ExecSQL;
    end;
  end;
end;
function TdmTTT.isTargetFromPlatformInst(
  const vId: Integer): Boolean;
begin
  Result := false;

  if not zConn.Connected then Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Platform_Domain ');
    SQL.Add('FROM Vehicle_Definition ' );
    SQL.Add('WHERE Vehicle_Index = ' +  IntToStr(vId));

    Open;

    Result := FieldByName('Platform_Domain').AsInteger = 8;

  end;
end;

//============================================================================
function TdmTTT.getRadar_Vertical_Coverage(const tipe,id: integer; var aRec: TList;
  var xMin, yMax, yMin: Double): Integer;

   var
    rec: TRadar_Vertical;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Radar_Vertical_Coverage ' );
    SQL.Add('WHERE (Radar_Index = ' +  IntToStr(id) + ')' );
    if tipe <> 0 then
      SQL.Add('AND (Coverage_Diagram = ' +  IntToStr(tipe) + ')' );
    SQL.Add('ORDER BY Vert_Coverage_Range ASC ' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TRadar_Vertical.Create;
        with rec.FRadar_Coverage do begin
          Coverage_Index           := FieldByName('Coverage_Index').AsInteger;
          Radar_Index              := FieldByName('Radar_Index').AsInteger;
          Coverage_Diagram         := FieldByName('Coverage_Diagram').AsInteger;
          Vert_Coverage_Range      := FieldByName('Vert_Coverage_Range').AsSingle;
          Vert_Cover_Min_Elevation := FieldByName('Vert_Cover_Min_Elevation').AsSingle;
          Vert_Cover_Max_Elevation := FieldByName('Vert_Cover_Max_Elevation').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;

      SQL.Clear;
      SQL.Add('SELECT MIN(Vert_Coverage_Range) as X_MIN, ');
      SQL.Add('MAX(Vert_Cover_Max_Elevation) as Y_MAX, ');
      SQL.Add('MIN(Vert_Cover_Min_Elevation) as Y_MIN ');
      SQL.Add('FROM  Radar_Vertical_Coverage ' );
      SQL.Add('WHERE (Radar_Index = ' +  IntToStr(id) + ')' );
      SQL.Add('AND (Coverage_Diagram = ' +  IntToStr(tipe) + ')' );
      Open;
      xMin  := FieldByName('X_MIN').AsSingle;
      yMax  := FieldByName('Y_MAX').AsSingle;
      yMin  := FieldByName('Y_MIN').AsSingle;
    end;
  end ;
end;

//============================================================================
function TdmTTT.getAllRadar_Vertical_Coverage(const id: integer; var aRec: TList): Integer;
   var
    rec: TRadar_Vertical;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Radar_Vertical_Coverage ' );
    SQL.Add('WHERE (Radar_Index = ' +  IntToStr(id) + ')' );
    SQL.Add('ORDER BY Vert_Coverage_Range ASC ' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TRadar_Vertical.Create;
        with rec.FRadar_Coverage do begin
          Coverage_Index           := FieldByName('Coverage_Index').AsInteger;
          Radar_Index              := FieldByName('Radar_Index').AsInteger;
          Coverage_Diagram         := FieldByName('Coverage_Diagram').AsInteger;
          Vert_Coverage_Range      := FieldByName('Vert_Coverage_Range').AsSingle;
          Vert_Cover_Min_Elevation := FieldByName('Vert_Cover_Min_Elevation').AsSingle;
          Vert_Cover_Max_Elevation := FieldByName('Vert_Cover_Max_Elevation').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end ;
end;


//-----------------------------------------------------------------------------

//function TdmTTT.DeleteRadar_Vertical_Coverage(const id,tipe: string): integer;
//begin
//  result := -1;
//  with ZQ do begin
//      Close;
//      SQL.Clear;
//      SQL.Add('DELETE FROM Radar_Vertical_Coverage  ');
//      SQL.Add('WHERE Radar_Index = ' +  id + ' ' );
//      if tipe <> '' then
//        SQL.Add('AND Coverage_Diagram = ' +  tipe );
//      ExecSQL;
//   end;
//end;

//-------------------------------------------------------------------

function TdmTTT.insertRadar_Vertical_Coverage(rec: TRadar_Vertical): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FRadar_Coverage do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Radar_Vertical_Coverage ');
      SQL.Add
        ('(Radar_Index,Coverage_Diagram,Vert_Coverage_Range,Vert_Cover_Min_Elevation,Vert_Cover_Max_Elevation)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Radar_Index) + ',');
      SQL.Add(IntToStr(Coverage_Diagram) + ',');
      SQL.Add(FloatToStr(Vert_Coverage_Range) + ',');
      SQL.Add(FloatToStr(Vert_Cover_Min_Elevation) + ',');
      SQL.Add(FloatToStr(Vert_Cover_Max_Elevation) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------
function TdmTTT.SonouboytoSonarClassification(id: Integer): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Sonobuoy_Definition a LEFT JOIN Sonar_Definition b ';
    ssql := ssql + 'ON a.Sonar_Index = b.Sonar_Classification ';
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateResourceOverlay_Map(var rec: TResource_Overlay_Mapping;
const  id: integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Resource_Overlay_Mapping  ');
      SQL.Add('SET ');
      SQL.Add('Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add('Overlay_Index = ' + IntToStr(Overlay_Index) + ',');
      SQL.Add('Force_Designation = ' + IntToStr(Force_Designation));
    end;
    SQL.Add(' WHERE (Overlay_Instance_Index = ' + IntToStr(id) + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.delete_Resource_Overlay_Mapping(var rec: TResource_Overlay_Mapping;
const id : integer) : integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Resource_Overlay_Mapping  ');
      SQL.Add('WHERE ');
      SQL.Add('Overlay_Index = ' + IntToStr(id) );
    end;
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteAll_Resource_Overlay_Mapping(const id : string) : integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Overlay_Mapping  ');
    SQL.Add('WHERE ');
    SQL.Add('Resource_Alloc_Index = ' + id );
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetHosted_Platform(const v_id, host_id: Integer;
  var aRec: TList):integer;
var

  rec: THosted_Platform;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := ssql + 'SELECT * FROM ';
    ssql := ssql + 'Hosted_Platform a ';

    if v_id <> 0 then
    begin
      ssql := ssql + 'JOIN Vehicle_Definition b ';
      ssql := ssql + 'ON a.Hosted_Vehicle_Index = b.Vehicle_Index ';
      ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(v_id) + ') ';
      if host_id <> 0 then
        ssql := ssql + 'AND (a.Hosted_Vehicle_Index = ' + IntToStr(host_id)
          + ')';
    end
    else if host_id <> 0 then
    begin
      ssql := ssql + 'JOIN Vehicle_Definition b ';
      ssql := ssql + 'ON a.Vehicle_Index = b.Vehicle_Index ';
      ssql := ssql + 'WHERE (a.Hosted_Vehicle_Index = ' + IntToStr(host_id)
      + ')';
    end
    else if (v_id = 0) and (host_id = 0) then
    begin
      ssql := ssql + 'JOIN Vehicle_Definition b ';
      ssql := ssql + 'ON a.Hosted_Vehicle_Index = b.Vehicle_Index ';
      ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(v_id) + ') ';
    end;

    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := THosted_Platform.Create;

        if v_id <> 0 then
        begin
          with rec.FData do
          begin
            Slave_Index := FieldByName('Slave_Index').AsInteger;
            Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
            Hosted_Vehicle_Index := FieldByName('Hosted_Vehicle_Index').AsInteger;
            Quantity := FieldByName('Quantity').AsInteger;
          end;
        end;

        with rec.FVehicle do
        begin
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics')
            .AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross')
            .AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
            .AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact')
            .AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
            .AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName
            ('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName
            ('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName
            ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName
            ('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
            .AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
            .AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier')
            .AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
            .AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
            .AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName
            ('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
            .AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
            .AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
            .AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
            .AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName
            ('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName
            ('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName
            ('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName
            ('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName
            ('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName
            ('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName
            ('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
            .AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
            .AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName
            ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName
            ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
            .AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName
            ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName
            ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName
            ('Air_Drop_Torpedo_Max_Speed')
            .AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName
            ('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName
            ('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
            .AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName
            ('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := FieldByName
            ('UHF_Mid_Course_Update_Capable').AsBoolean;
//          SATCOM_Mid_Course_Update_Capable    := FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;
          Font_id := FieldByName('Font_id').AsInteger;
          Symbol_id := FieldByName('Symbol_id').AsInteger;
          Quantity_Group_Personal := FieldByName('Quantity_Group_Personal').AsInteger;
          Vbs_Class_Name := FieldByName('Vbs_Class_Name').AsString;
          Logistics_Index := FieldByName('Logistics_Index').AsInteger;
          Tactical_Symbol_Name := FieldByName('Tactical_Symbol_Name').AsString;
          GangwayPosition := FieldByName('GangwayPosition').AsInteger;
          DWT := FieldByName('DWT').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateHosted_Platform(const id: string;
  var rec: THosted_Platform): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Hosted_Platform ');
      SQL.Add('SET ');
      SQL.Add('Vehicle_Index = ' + IntToStr(Vehicle_Index) + ',');
      SQL.Add('Hosted_Vehicle_Index = ' + IntToStr(Hosted_Vehicle_Index) + ',');
      SQL.Add('Quantity = ' + IntToStr(Quantity));
    end;

    SQL.Add(' WHERE (Slave_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertHosted_Platform(var rec: THosted_Platform): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Hosted_Platform ');
      SQL.Add('(Vehicle_Index,Hosted_Vehicle_Index,Quantity)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Hosted_Vehicle_Index) + ',');
      SQL.Add(IntToStr(Quantity) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Hosted_Platform ');
      SQL.Add('WHERE Vehicle_Index = '+ IntToStr(Vehicle_Index) +' ');
      SQL.Add('AND Hosted_Vehicle_Index = ' + IntToStr(Hosted_Vehicle_Index));
      Open;

      Slave_Index := FieldByName('Slave_Index').AsInteger;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.DeleteHosted_Platform(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Hosted_Platform  ');
    SQL.Add('WHERE (Slave_Index = ' +  id + ')' );
    ExecSQL;
   end;
end;

//------------------------------------------------------------------------------

function TdmTTT.DeleteHosted_PlatformByVehicle(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Hosted_Platform  ');
    SQL.Add('WHERE (Vehicle_Index = ' +  id + ')' );
    ExecSQL;
   end;
end;

//------------- sonobuoy -------------------------------------------------------

function TdmTTT.getAllSonobuoy_On_Board(const id, index: Integer;
  var aRec: TList): Integer;
var

  rec: TSonobuoy_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Sonobuoy_On_Board a JOIN Sonobuoy_Definition b ';
    ssql := ssql +
      'ON a.Sonobuoy_Index = b.Sonobuoy_Index JOIN Sonar_Definition c ';
    ssql := ssql +
      'ON b.Sonar_Index = c.Sonar_Index LEFT JOIN Note_Storage d ';
    ssql := ssql +
      'ON b.Sonobuoy_Index = d.Sonobuoy_Index LEFT JOIN Vehicle_Definition e ';
    ssql := ssql + 'ON a.Vehicle_Index = e.Vehicle_Index ';

    if index = 1 then
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 '
    else if index = 0 then
    begin
      // jika id tidak sama dg 0
      if id <> 0 then
      begin
        ssql := ssql + 'WHERE (a.Vehicle_index = ' + IntToStr(id) + ')';
      end;
    end
    else if index = 2 then
      ssql := ssql + 'WHERE (a.Sonobuoy_Instance_Index = ' + IntToStr(id) + ')'
    else
      ssql := ssql + 'WHERE a.Vehicle_Index > 0 AND a.Sonobuoy_Index =' +
        IntToStr(index);

    SQL.Add(ssql);
    SQL.Add('ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;

    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TSonobuoy_On_Board.Create;

        with rec.FData do
        begin
          Sonobuoy_Instance_Index := FieldByName('Sonobuoy_Instance_Index')
            .AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Instance_Type := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Quantity := FieldByName('Quantity').AsInteger;
          Sonar_Instance_Index := FieldByName('Sonar_Instance_Index').AsInteger;
        end;

        with rec.FDef do
        begin
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sonobuoy_Type := FieldByName('Sonobuoy_Type').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Endurance_Time := FieldByName('Endurance_Time').AsInteger;
          Max_Depth := FieldByName('Max_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          CPA_Detection_Capable := FieldByName('CPA_Detection_Capable')
            .AsInteger;
          CPA_Range_Limit := FieldByName('CPA_Range_Limit').AsSingle;
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        with rec.FVehicle.FData do
        begin
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
        end;

        with rec.FSonar.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllSonobuoy(const id_vec,id: Integer; var sList: TList;
  var rec: TSonobuoy_On_Board): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Sonobuoy_Definition a LEFT JOIN Sonar_Definition b ';
    ssql := ssql + 'ON a.Sonar_Index = b.Sonar_Index ';
    ssql := ssql + 'LEFT JOIN Note_Storage c ON a.Sonobuoy_Index = c.Sonobuoy_Index ';
    if id_vec <> 0 then
    begin
      ssql := ssql + 'JOIN Sonar_On_Board d ON a.Sonar_Index = d.Sonar_Index ';
      ssql := ssql + 'WHERE d.Vehicle_Index = ' + IntToStr(id_vec);
    end
    else if id <> 0 then
      ssql := ssql + 'WHERE a.Sonobuoy_Index = ' + IntToStr(id);

    SQL.Add(ssql);
    SQL.Add(' ORDER BY a.Class_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(sList) then
        sList := TList.Create
      else
        sList.Clear;

      while not ZQ.Eof do
      begin
        rec := TSonobuoy_On_Board.Create;

        with rec.FDef do
        begin
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sonobuoy_Type := FieldByName('Sonobuoy_Type').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Endurance_Time := FieldByName('Endurance_Time').AsInteger;
          Max_Depth := FieldByName('Max_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          CPA_Detection_Capable := FieldByName('CPA_Detection_Capable')
            .AsInteger;
          CPA_Range_Limit := FieldByName('CPA_Range_Limit').AsSingle;
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
        end;

        with rec.FSonar.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        sList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.getPISonobuoy(var sList: TList; ra_id: Integer;
  force: Integer): Integer;
var

  rec: TSonobuoy_On_Board;
begin
  result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Instance a JOIN Sonobuoy_Definition b ');
    SQL.Add('ON a.Sonobuoy_Index = b.Sonobuoy_Index ');
    SQL.Add('WHERE a.Resource_Alloc_index = ' + IntToStr(ra_id) + ' AND ');
    SQL.Add('Force_Designation =' + IntToStr(force));
    Open;

    result := RecordCount;

    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(sList) then
        sList := TList.Create
      else
        sList.Clear;

      while not ZQ.Eof do
      begin
        rec := TSonobuoy_On_Board.Create;
        with rec.FDef do
        begin
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sonobuoy_Type := FieldByName('Sonobuoy_Type').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
        end;
        with rec.FPI do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index')
            .AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Track_ID := FieldByName('Track_ID').AsString;
        end;

        sList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.updateSonobuoy_Def(rec: TSonobuoy_On_Board;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Sonobuoy_Definition ');
      SQL.Add('SET ');
      SQL.Add('Class_Identifier =''' + Class_Identifier + ''',');
      SQL.Add('Sonobuoy_Type =' + IntToStr(Sonobuoy_Type) + ',');
      SQL.Add('Platform_Domain =' + IntToStr(Platform_Domain) + ',');
      SQL.Add('Platform_Category =' + IntToStr(Platform_Category) + ',');
      SQL.Add('Platform_Type =' + IntToStr(Platform_Type) + ',');
      SQL.Add('Endurance_Time =' + IntToStr(Endurance_Time) + ',');
      SQL.Add('Max_Depth =' + FloatToStr(Max_Depth) + ',');
      SQL.Add('Length =' + FloatToStr(Length) + ',');
      SQL.Add('Width =' + FloatToStr(Width) + ',');
      SQL.Add('Height =' + FloatToStr(Height) + ',');
      SQL.Add('Front_Acoustic_Cross =' + FloatToStr(Front_Acoustic_Cross)
          + ',');
      SQL.Add('Side_Acoustic_Cross =' + FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add('Damage_Capacity =' + IntToStr(Damage_Capacity) + ',');
      SQL.Add('CPA_Detection_Capable =' + IntToStr(CPA_Detection_Capable)
          + ',');
      SQL.Add('CPA_Range_Limit =' + FloatToStr(CPA_Range_Limit) + ',');
      SQL.Add('Sonar_Index =' + IntToStr(Sonar_Index));
      SQL.Add(' WHERE (Sonobuoy_Index = ' + id + ')');
    end;

    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertSonobuoy_Def(rec: TSonobuoy_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FDef do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Sonobuoy_Definition ');
      SQL.Add(
        '(Class_Identifier,Sonobuoy_Type,Platform_Domain,Platform_Category,');
      SQL.Add(
        'Platform_Type,Endurance_Time,Max_Depth,Length,Width,Height,Front_Acoustic_Cross,');
      SQL.Add(
        'Side_Acoustic_Cross,Damage_Capacity,CPA_Detection_Capable,CPA_Range_Limit,Sonar_Index)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Class_Identifier + ''',');
      SQL.Add(IntToStr(Sonobuoy_Type) + ',');
      SQL.Add(IntToStr(Platform_Domain) + ',');
      SQL.Add(IntToStr(Platform_Category) + ',');
      SQL.Add(IntToStr(Platform_Type) + ',');
      SQL.Add(IntToStr(Endurance_Time) + ',');
      SQL.Add(FloatToStr(Max_Depth) + ',');
      SQL.Add(FloatToStr(Length) + ',');
      SQL.Add(FloatToStr(Width) + ',');
      SQL.Add(FloatToStr(Height) + ',');
      SQL.Add(FloatToStr(Front_Acoustic_Cross) + ',');
      SQL.Add(FloatToStr(Side_Acoustic_Cross) + ',');
      SQL.Add(IntToStr(Damage_Capacity) + ',');
      SQL.Add(IntToStr(CPA_Detection_Capable) + ',');
      SQL.Add(FloatToStr(CPA_Range_Limit) + ',');
      SQL.Add(IntToStr(Sonar_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Sonobuoy_Index FROM Sonobuoy_Definition ');
      SQL.Add('WHERE Class_Identifier =' + quotedStr(Class_Identifier));
      Open;
      with rec.FDef do
      begin
        Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteSonobuoy_Def(id: Integer): Integer;
begin
  result := -1;
  deleteNote(6,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Sonobuoy_Definition ');
    SQL.Add('WHERE Sonobuoy_Index =' + IntToStr(id));
    ExecSQL;
  end;

end;

/// /====================================================
function TdmTTT.DeleteSonobuoy_On_Board(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Sonobuoy_On_Board  ');
    SQL.Add('WHERE (Sonobuoy_Instance_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

/// /====================================================
function TdmTTT.InsertSonobuoy_On_Board(var rec: TSonobuoy_On_Board): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Sonobuoy_On_Board  ');
      SQL.Add('(Instance_Identifier,Instance_Type,Vehicle_Index');
      SQL.Add(',Sonobuoy_Index,Quantity,Sonar_Instance_Index)  ');
      SQL.Add('VALUES (');
      // SQL.Add(IntToStr(Sonobuoy_Instance_Index)+',');
      SQL.Add(QuotedStr(Instance_Identifier) + ',');
      SQL.Add(IntToStr(Instance_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Sonobuoy_Index) + ',');
      SQL.Add(IntToStr(Quantity) + ',');
      SQL.Add(IntToStr(Sonar_Instance_Index) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Sonobuoy_On_Board ');
      SQL.Add('WHERE Instance_Identifier = '+ QuotedStr(Instance_Identifier) + ' ');
      SQL.Add('AND Sonobuoy_Index = ' + IntToStr(Sonobuoy_Index) + ' ');
      SQL.Add('AND Vehicle_Index = ' + IntToStr(Vehicle_Index) );
      Open;

      Sonobuoy_Instance_Index := FieldByName('Sonobuoy_Instance_Index').AsInteger;
    end;

  end;
end;

function TdmTTT.GetSonarOnBoardIndexBySonobuoy(Vid, aSonarID, aInstance_Type, aSonar_Instance_Index : Integer): Boolean;
begin
  result := false;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Sonar_Instance_Index FROM Sonar_On_Board ');
    SQL.Add('WHERE Instance_Type = '+ IntToStr(aInstance_Type) + ' ');
    SQL.Add('AND Sonar_Index = ' + IntToStr(aSonarID) );
    SQL.Add('AND Vehicle_Index = ' + IntToStr(Vid) );
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      aSonar_Instance_Index := Fields[0].AsInteger;
    end;

  end;
end;


////====================================================
function TdmTTT.UpdateSonobuoy_On_Board(const id: string;
  var rec: TSonobuoy_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Sonobuoy_On_Board  ');
      SQL.Add('SET ' );
      //SQL.Add('Sonobuoy_Instance_Index = '+IntToStr(Sonobuoy_Instance_Index)+',');
      SQL.Add('Instance_Identifier = '+ QuotedStr(Instance_Identifier)+',');
      SQL.Add('Instance_Type = '+IntToStr(Instance_Type)+',');
      SQL.Add('Vehicle_Index = '+IntToStr(Vehicle_Index)+',');
      SQL.Add('Sonobuoy_Index = '+IntToStr(Sonobuoy_Index)+',');
      SQL.Add('Quantity = '+IntToStr(Quantity)+',');
      SQL.Add('Sonar_Instance_Index = '+IntToStr(Sonar_Instance_Index)+' ');
    end;
    SQL.Add('WHERE (Sonobuoy_Instance_Index = ' +  id + ')' );
    ExecSQL;
  end;
end;
// ------------------------------------------------------------------------------

function TdmTTT.getSonobuoyByLibrary(const id_Library: Integer;
  var vList: TList): Integer;
var
  rec: TSonobuoy_On_Board;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM  Platform_Library_Entry a ';
    ssql := ssql +
      'join Sonobuoy_Definition b on a.Sonobuoy_Index = b.Sonobuoy_Index ';
    ssql := ssql +
      'LEFT JOIN Sonar_Definition c on b.Sonar_Index = c.Sonar_Index ';
    ssql := ssql + 'WHERE a.Library_Index = ' + IntToStr(id_Library) + ' ';
    ssql := ssql + 'AND a.Platform_Type = 7';

//     ShowMessage(ssql);
    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin
      First;

      if not Assigned(vList) then
        vList := TList.Create
      else
        vList.Clear;

      while not ZQ.Eof do
      begin
        rec := TSonobuoy_On_Board.Create;

        with rec.FDef do
        begin
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
          Class_Identifier := FieldByName('Class_Identifier').AsString;
          Sonobuoy_Type := FieldByName('Sonobuoy_Type').AsInteger;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Endurance_Time := FieldByName('Endurance_Time').AsInteger;
          Max_Depth := FieldByName('Max_Depth').AsSingle;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          CPA_Detection_Capable := FieldByName('CPA_Detection_Capable')
            .AsInteger;
          CPA_Range_Limit := FieldByName('CPA_Range_Limit').AsSingle;
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
        end;

        with rec.FSonar.FDef do
        begin
          Sonar_Index := FieldByName('Sonar_Index').AsInteger;
          Sonar_Identifier := FieldByName('Sonar_Identifier').AsString;
        end;

        vList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// -------------------------------------------------------------------

function TdmTTT.GetBomb_OnBoard(const id: Integer; var aRec: TList) :integer;
var

  rec: TBomb_Definition;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Point_Effect_On_Board a JOIN Bomb_Definition b ');
    SQL.Add('ON a.Bomb_Index = b.Bomb_Index ');
    SQL.Add('WHERE (a.Vehicle_Index = ' + IntToStr(id) + ')');
    SQL.Add(' ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TBomb_Definition.Create;

        with rec.FPoint.FData do
        begin
          Point_Effect_Index  := FieldByName('Point_Effect_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Quantity            := FieldByName('Quantity').AsInteger;
          Gun_Index           := FieldByName('Gun_Index').AsInteger;
          Bomb_Index          := FieldByName('Bomb_Index').AsInteger;
          Mount_Type          := FieldByName('Mount_Type').AsInteger;
          Instance_Type       := FieldByName('Instance_Type').AsInteger;
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          TurretID            := FieldByName('TurretID').AsInteger;
        end;

        with rec.FData do
        begin
          Bomb_Index := FieldByName('Bomb_Index').AsInteger;
          Bomb_Identifier := FieldByName('Bomb_Identifier').AsString;
          Bomb_Type := FieldByName('Bomb_Type').AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;

        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetAllBomb(const id: Integer; var aRec: TList): Integer;
var

  rec: TBomb_Definition;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Bomb_Definition a INNER JOIN Bomb_POH_vs_Range b ');
    SQL.Add
      ('ON a.Bomb_Index = b.Bomb_Index INNER JOIN Point_Effect_On_Board c ');
    SQL.Add('ON a.Bomb_Index = c.Bomb_Index LEFT JOIN Note_Storage d ');
    SQL.Add('ON a.Bomb_Index = d.Bomb_Index ');
    SQL.Add('WHERE (c.Vehicle_Index = ' + IntToStr(id) + ')');
    SQL.Add(' ORDER BY a.Bomb_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TBomb_Definition.Create;

        with rec.FData do
        begin
          Bomb_Index := FieldByName('Bomb_Index').AsInteger;
          Bomb_Identifier := FieldByName('Bomb_Identifier').AsString;
          Bomb_Type := FieldByName('Bomb_Type').AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;

        end;

        with rec.FBomb_POH do
        begin
          List_Index := FieldByName('List_Index').AsInteger;
          Bomb_Index := FieldByName('Bomb_Index').AsInteger;
          Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
          Range := FieldByName('Range').AsSingle;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetBomb(const id: Integer; var sList: TList;
  var rec: TBomb_Definition): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Bomb_Definition ';
    ssql := ssql + 'a LEFT JOIN Note_Storage b ON a.Bomb_Index = b.Bomb_Index ';
    if id <> 0 then
      ssql := ssql + 'WHERE a.Bomb_Index =' + IntToStr(id);

    ssql := ssql + ' ORDER BY BOmb_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(sList) then
        sList := TList.Create
      else
        sList.Clear;

      while not ZQ.Eof do
      begin
        rec := TBomb_Definition.Create;

        with rec.FData do
        begin
          Bomb_Index := FieldByName('Bomb_Index').AsInteger;
          Bomb_Identifier := FieldByName('Bomb_Identifier').AsString;
          Bomb_Type := FieldByName('Bomb_Type').AsInteger;
          Lethality := FieldByName('Lethality').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_SubSur_Capable := FieldByName('Anti_SubSur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;

        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        sList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.updateBomb_Def(rec: TBomb_Definition; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Bomb_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Bomb_Identifier = ''' + Bomb_Identifier + ''',');
      SQL.Add('Bomb_Type = ' + IntToStr(Bomb_Type) + ',');
      SQL.Add('Lethality = ' + IntToStr(Lethality) + ',');
      SQL.Add('Min_Range = ' + FloatToStr(Min_Range) + ',');
      SQL.Add('Max_Range = ' + FloatToStr(Max_Range) + ',');
      SQL.Add('Anti_Sur_Capable = ' + IntToStr(Anti_Sur_Capable) + ',');
      SQL.Add('Anti_SubSur_Capable = ' + IntToStr(Anti_SubSur_Capable) + ',');
      SQL.Add('Anti_Land_Capable = ' + IntToStr(Anti_Land_Capable) + ',');
      SQL.Add('Anti_Amphibious_Capable = '+IntToStr(Anti_Amphibious_Capable));
    end;
    SQL.Add(' WHERE (Bomb_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertBomb_Def(rec: TBomb_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Bomb_Definition ');
      SQL.Add(
        '(Bomb_Identifier,Bomb_Type,Lethality,Min_Range,Max_Range,Anti_Sur_Capable,Anti_SubSur_Capable,,Anti_Amphibious_Capable)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Bomb_Identifier + ''',');
      SQL.Add(IntToStr(Bomb_Type) + ',');
      SQL.Add(IntToStr(Lethality) + ',');
      SQL.Add(FloatToStr(Min_Range) + ',');
      SQL.Add(FloatToStr(Max_Range) + ',');
      SQL.Add(IntToStr(Anti_Sur_Capable) + ',');
      SQL.Add(IntToStr(Anti_SubSur_Capable) + ',');
      SQL.Add(IntToStr(Anti_Land_Capable) + ')');
      SQL.Add(IntToStr(Anti_Amphibious_Capable) + ')');

      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Bomb_Index FROM Bomb_Definition ');
      SQL.Add('WHERE Bomb_Identifier =' + quotedStr(Bomb_Identifier));
      Open;
      with rec.FData do
      begin
        Bomb_Index := FieldByName('Bomb_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteBomb(id: Integer): Integer;
begin
  result := -1;
  deleteNote(14,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Bomb_Definition ');
    SQL.Add('WHERE Bomb_Index =' + IntToStr(id));
    ExecSQL;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.GetAllGun(const id: Integer; var aRec: TList): Integer;
var
  rec: TGun_Definition;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Point_Effect_On_Board a INNER JOIN Gun_Definition b ');
    SQL.Add('ON a.Gun_Index = b.Gun_Index INNER JOIN Gun_POH_vs_Range c ');
    SQL.Add('ON b.Gun_Index = c.Gun_Index LEFT JOIN Note_Storage d ');
    SQL.Add('ON b.Gun_Index = d.Gun_Index ');
    SQL.Add(' WHERE (a.Vehicle_Index = ' + IntToStr(id) + ')');
    SQL.Add(' ORDER BY b.Gun_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGun_Definition.Create;

        with rec.FData do
        begin
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Gun_Identifier := FieldByName('Gun_Identifier').AsString;
          Gun_Category := FieldByName('Gun_Category').AsInteger;
          Rate_of_Fire := FieldByName('Rate_of_Fire').AsInteger;
          Lethality_per_Round := FieldByName('Lethality_per_Round').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Air_Min_Range := FieldByName('Air_Min_Range').AsSingle;
          Air_Max_Range := FieldByName('Air_Max_Range').AsSingle;
          Fire_Cntl_Director_Req := FieldByName('Fire_Cntl_Director_Req')
            .AsInteger;
          Chaff_Capable_Gun := FieldByName('Chaff_Capable_Gun').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;

          Automode_Capable := FieldByName('Automode_Capable').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Gun_Average_Shell_Velocity := FieldByName
            ('Gun_Average_Shell_Velocity').AsSingle;
          Man_Gun_Max_Elevation := FieldByName('Man_Gun_Max_Elevation')
            .AsSingle;
          Man_Gun_Min_Elevation := FieldByName('Man_Gun_Min_Elevation')
            .AsSingle;
          Man_Gun_Rotation_Rate := FieldByName('Man_Gun_Rotation_Rate')
            .AsSingle;
          Man_Gun_Elevation_Rate := FieldByName('Man_Gun_Elevation_Rate')
            .AsSingle;
          Man_Gun_Num_Rounds_Per_Load := FieldByName
            ('Man_Gun_Num_Rounds_Per_Load').AsInteger;
          Man_Gun_Time_to_Reload := FieldByName('Man_Gun_Time_to_Reload')
            .AsSingle;
          Man_Gun_Muzzle_Velocity := FieldByName('Man_Gun_Muzzle_Velocity')
            .AsSingle;
          NGS_Capable := FieldByName('NGS_Capable').AsInteger;
          NGS_MinDeflectionError := FieldByName('NGS_MinDeflectionError')
            .AsSingle;
          NGS_MaxDeflectionError := FieldByName('NGS_MaxDeflectionError')
            .AsSingle;
          NGS_MinRangeError := FieldByName('NGS_MinRangeError').AsSingle;
          NGS_MaxRangeError := FieldByName('NGS_MaxRangeError').AsSingle;
          NGS_MaxDispersionError := FieldByName('NGS_MaxDispersionError')
            .AsSingle;
          NGS_MaxDamageRadius := FieldByName('NGS_MaxDamageRadius').AsSingle;
          NGS_EffectiveRadius := FieldByName('NGS_EffectiveRadius').AsSingle;
          NGS_DamageRating := FieldByName('NGS_DamageRating').AsInteger;
        end;

        with rec.FGun_POH do
        begin
          List_Index := FieldByName('List_Index').AsInteger;
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Target_Type := FieldByName('Target_Type').AsInteger;
          Prob_of_Hit := FieldByName('Prob_of_Hit').AsSingle;
          Range := FieldByName('Range').AsSingle;

        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGun_OnBoard(const id: Integer; var aRec: TList) :integer;
var
  rec: TGun_Definition;
  k,b_num : integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Point_Effect_On_Board a JOIN Gun_Definition b ');
    SQL.Add('ON a.Gun_Index = b.Gun_Index ');
    SQL.Add('WHERE (a.Vehicle_Index = ' + IntToStr(id) + ')');
    SQL.Add(' ORDER BY a.Instance_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGun_Definition.Create;

        with rec.FPoint.FData do
        begin
          Point_Effect_Index  := FieldByName('Point_Effect_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          Quantity            := FieldByName('Quantity').AsInteger;
          Gun_Index           := FieldByName('Gun_Index').AsInteger;
          Mount_Type          := FieldByName('Mount_Type').AsInteger;
          Vehicle_Index       := FieldByName('Vehicle_Index').AsInteger;
          Instance_Type       := FieldByName('Instance_Type').AsInteger;
          TurretID            := FieldByName('TurretID').AsInteger;
        end;

        with rec.FData do
        begin
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Gun_Identifier := FieldByName('Gun_Identifier').AsString;
          Gun_Category := FieldByName('Gun_Category').AsInteger;
          Rate_of_Fire := FieldByName('Rate_of_Fire').AsInteger;
          Lethality_per_Round := FieldByName('Lethality_per_Round').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Air_Min_Range := FieldByName('Air_Min_Range').AsSingle;
          Air_Max_Range := FieldByName('Air_Max_Range').AsSingle;
          Fire_Cntl_Director_Req := FieldByName('Fire_Cntl_Director_Req')
            .AsInteger;
          Chaff_Capable_Gun := FieldByName('Chaff_Capable_Gun').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;

          Automode_Capable := FieldByName('Automode_Capable').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Gun_Average_Shell_Velocity := FieldByName
            ('Gun_Average_Shell_Velocity').AsSingle;
          Man_Gun_Max_Elevation := FieldByName('Man_Gun_Max_Elevation')
            .AsSingle;
          Man_Gun_Min_Elevation := FieldByName('Man_Gun_Min_Elevation')
            .AsSingle;
          Man_Gun_Rotation_Rate := FieldByName('Man_Gun_Rotation_Rate')
            .AsSingle;
          Man_Gun_Elevation_Rate := FieldByName('Man_Gun_Elevation_Rate')
            .AsSingle;
          Man_Gun_Num_Rounds_Per_Load := FieldByName
            ('Man_Gun_Num_Rounds_Per_Load').AsInteger;
          Man_Gun_Time_to_Reload := FieldByName('Man_Gun_Time_to_Reload')
            .AsSingle;
          Man_Gun_Muzzle_Velocity := FieldByName('Man_Gun_Muzzle_Velocity')
            .AsSingle;
          NGS_Capable := FieldByName('NGS_Capable').AsInteger;
          NGS_MinDeflectionError := FieldByName('NGS_MinDeflectionError')
            .AsSingle;
          NGS_MaxDeflectionError := FieldByName('NGS_MaxDeflectionError')
            .AsSingle;
          NGS_MinRangeError := FieldByName('NGS_MinRangeError').AsSingle;
          NGS_MaxRangeError := FieldByName('NGS_MaxRangeError').AsSingle;
          NGS_MaxDispersionError := FieldByName('NGS_MaxDispersionError')
            .AsSingle;
          NGS_MaxDamageRadius := FieldByName('NGS_MaxDamageRadius').AsSingle;
          NGS_EffectiveRadius := FieldByName('NGS_EffectiveRadius').AsSingle;
          NGS_DamageRating := FieldByName('NGS_DamageRating').AsInteger;
        end;

        aRec.Add(rec);
        Zq.Next;
      end;



      for k := 0 to aRec.Count - 1 do
      begin
        rec := aRec.Items[k];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Point_Effect_On_Board a JOIN Blind_Zone_Definition b ');
        SQL.Add('ON a.Point_Effect_Index = b.Point_Effect_Index ');
        SQL.Add('WHERE (a.Point_Effect_Index = ' + IntToStr
            (rec.FPoint.FData.Point_Effect_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          //added by bebe
          b_num := FieldByName('BlindZone_Number').AsInteger;
          if b_num = 1 then
          begin
            with rec.FPoint.FBZone_1 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Point_Effect_Index := FieldByName('Point_Effect_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end
          else if b_num = 2 then
          begin
            with rec.FPoint.FBZone_2 do
            begin
              Blind_Zone_Index := FieldByName('Blind_Zone_Index').AsInteger;
              Blind_Zone_Type := FieldByName('Blind_Zone_Type').AsInteger;
              BlindZone_Number := FieldByName('BlindZone_Number').AsInteger;
              Point_Effect_Index := FieldByName('Point_Effect_Index').AsInteger;
              Start_Angle := FieldByName('Start_Angle').AsSingle;
              End_Angle := FieldByName('End_Angle').AsSingle;
            end;
          end;

          ZQ.Next;

        end;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.GetGun(const id: Integer; var sList: TList;
  var rec: TGun_Definition): Integer;
var
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Gun_Definition ';
    ssql := ssql + 'a LEFT JOIN Note_Storage b ON a.Gun_Index = b.Gun_Index ';
    if id <> 0 then
      ssql := ssql + 'WHERE a.Gun_Index = ' + IntToStr(id);

    ssql := ssql + ' ORDER BY Gun_Identifier ';
    SQL.Add(ssql);
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;

      if not Assigned(sList) then
        sList := TList.Create
      else
        sList.Clear;

      while not ZQ.Eof do
      begin
        rec := TGun_Definition.Create;

        with rec.FData do
        begin
          Gun_Index := FieldByName('Gun_Index').AsInteger;
          Gun_Identifier := FieldByName('Gun_Identifier').AsString;
          Gun_Category := FieldByName('Gun_Category').AsInteger;
          Rate_of_Fire := FieldByName('Rate_of_Fire').AsInteger;
          Lethality_per_Round := FieldByName('Lethality_per_Round').AsInteger;
          Min_Range := FieldByName('Min_Range').AsSingle;
          Max_Range := FieldByName('Max_Range').AsSingle;
          Air_Min_Range := FieldByName('Air_Min_Range').AsSingle;
          Air_Max_Range := FieldByName('Air_Max_Range').AsSingle;
          Fire_Cntl_Director_Req := FieldByName('Fire_Cntl_Director_Req')
            .AsInteger;
          Chaff_Capable_Gun := FieldByName('Chaff_Capable_Gun').AsInteger;
          Anti_Sur_Capable := FieldByName('Anti_Sur_Capable').AsInteger;
          Anti_Land_Capable := FieldByName('Anti_Land_Capable').AsInteger;
          Anti_Air_Capable := FieldByName('Anti_Air_Capable').AsInteger;
          Anti_Amphibious_Capable := FieldByName('Anti_Amphibious_Capable').AsInteger;

          Automode_Capable := FieldByName('Automode_Capable').AsInteger;
          Max_Target_Altitude_Delta := FieldByName('Max_Target_Altitude_Delta')
            .AsInteger;
          Gun_Average_Shell_Velocity := FieldByName
            ('Gun_Average_Shell_Velocity').AsSingle;
          Man_Gun_Max_Elevation := FieldByName('Man_Gun_Max_Elevation')
            .AsSingle;
          Man_Gun_Min_Elevation := FieldByName('Man_Gun_Min_Elevation')
            .AsSingle;
          Man_Gun_Rotation_Rate := FieldByName('Man_Gun_Rotation_Rate')
            .AsSingle;
          Man_Gun_Elevation_Rate := FieldByName('Man_Gun_Elevation_Rate')
            .AsSingle;
          Man_Gun_Num_Rounds_Per_Load := FieldByName
            ('Man_Gun_Num_Rounds_Per_Load').AsInteger;
          Man_Gun_Time_to_Reload := FieldByName('Man_Gun_Time_to_Reload')
            .AsSingle;
          Man_Gun_Muzzle_Velocity := FieldByName('Man_Gun_Muzzle_Velocity')
            .AsSingle;
          NGS_Capable := FieldByName('NGS_Capable').AsInteger;
          NGS_MinDeflectionError := FieldByName('NGS_MinDeflectionError')
            .AsSingle;
          NGS_MaxDeflectionError := FieldByName('NGS_MaxDeflectionError')
            .AsSingle;
          NGS_MinRangeError := FieldByName('NGS_MinRangeError').AsSingle;
          NGS_MaxRangeError := FieldByName('NGS_MaxRangeError').AsSingle;
          NGS_MaxDispersionError := FieldByName('NGS_MaxDispersionError')
            .AsSingle;
          NGS_MaxDamageRadius := FieldByName('NGS_MaxDamageRadius').AsSingle;
          NGS_EffectiveRadius := FieldByName('NGS_EffectiveRadius').AsSingle;
          NGS_DamageRating := FieldByName('NGS_DamageRating').AsInteger;
        end;

        with rec.FNote do
        begin
          Note_Index := FieldByName('Note_Index').AsInteger;
          Note_Type := FieldByName('Note_Type').AsInteger;
          Notes := FieldByName('Notes').AsString;
        end;

        sList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateGun_Def(rec: TGun_Definition; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Gun_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Gun_Identifier = ''' + Gun_Identifier + ''',');
      SQL.Add('Gun_Category = ' + IntToStr(Gun_Category) + ',');
      SQL.Add('Rate_of_Fire = ' + IntToStr(Rate_of_Fire) + ',');
      SQL.Add('Lethality_per_Round = ' + IntToStr(Lethality_per_Round) + ',');
      SQL.Add('Min_Range = ' + FloatToStr(Min_Range) + ',');
      SQL.Add('Max_Range = ' + FloatToStr(Max_Range) + ',');
      SQL.Add('Air_Min_Range = ' + FloatToStr(Air_Min_Range) + ',');
      SQL.Add('Air_Max_Range = ' + FloatToStr(Air_Max_Range) + ',');
      SQL.Add('Fire_Cntl_Director_Req = ' + IntToStr(Fire_Cntl_Director_Req)
          + ',');
      SQL.Add('Chaff_Capable_Gun = ' + IntToStr(Chaff_Capable_Gun) + ',');
      SQL.Add('Anti_Sur_Capable = ' + IntToStr(Anti_Sur_Capable) + ',');
      SQL.Add('Anti_Land_Capable = ' + IntToStr(Anti_Land_Capable) + ',');
      SQL.Add('Anti_Air_Capable = ' + IntToStr(Anti_Air_Capable) + ',');
      SQL.Add('Anti_Amphibious_Capable = ' + IntToStr(Anti_Amphibious_Capable) + ',');
      SQL.Add('Firearms = ' + IntToStr(Firearms) + ',');

      SQL.Add('Automode_Capable = ' + IntToStr(Automode_Capable) + ',');
      SQL.Add('Max_Target_Altitude_Delta = ' + IntToStr
          (Max_Target_Altitude_Delta) + ',');
      SQL.Add('Gun_Average_Shell_Velocity = ' + FloatToStr
          (Gun_Average_Shell_Velocity) + ',');
      SQL.Add('Man_Gun_Max_Elevation = ' + FloatToStr(Man_Gun_Max_Elevation)
          + ',');
      SQL.Add('Man_Gun_Min_Elevation = ' + FloatToStr(Man_Gun_Min_Elevation)
          + ',');
      SQL.Add('Man_Gun_Rotation_Rate = ' + FloatToStr(Man_Gun_Rotation_Rate)
          + ',');
      SQL.Add('Man_Gun_Elevation_Rate = ' + FloatToStr(Man_Gun_Elevation_Rate)
          + ',');
      SQL.Add('Man_Gun_Num_Rounds_Per_Load = ' + IntToStr
          (Man_Gun_Num_Rounds_Per_Load) + ',');
      SQL.Add('Man_Gun_Time_to_Reload = ' + FloatToStr(Man_Gun_Time_to_Reload)
          + ',');
      SQL.Add('Man_Gun_Muzzle_Velocity = ' + FloatToStr
          (Man_Gun_Muzzle_Velocity) + ',');
      SQL.Add('NGS_Capable = ' + IntToStr(NGS_Capable) + ',');
      SQL.Add('NGS_MinDeflectionError = ' + FloatToStr(NGS_MinDeflectionError)
          + ',');
      SQL.Add('NGS_MaxDeflectionError = ' + FloatToStr(NGS_MaxDeflectionError)
          + ',');
      SQL.Add('NGS_MinRangeError = ' + FloatToStr(NGS_MinRangeError) + ',');
      SQL.Add('NGS_MaxRangeError = ' + FloatToStr(NGS_MaxRangeError) + ',');
      SQL.Add('NGS_MaxDispersionError = ' + FloatToStr(NGS_MaxDispersionError)
          + ',');
      SQL.Add('NGS_MaxDamageRadius = ' + FloatToStr(NGS_MaxDamageRadius) + ',');
      SQL.Add('NGS_EffectiveRadius = ' + FloatToStr(NGS_EffectiveRadius) + ',');
      SQL.Add('NGS_DamageRating = ' + IntToStr(NGS_DamageRating));
    end;
    SQL.Add(' WHERE (Gun_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertGun_Def(rec: TGun_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Gun_Definition ');
      SQL.Add(
        '(Gun_Identifier,Gun_Category,Rate_of_Fire,Lethality_per_Round,Min_Range,');
      SQL.Add(
        'Max_Range,Air_Min_Range,Air_Max_Range,Fire_Cntl_Director_Req,Chaff_Capable_Gun,');
      SQL.Add(
        'Anti_Sur_Capable,Anti_Land_Capable,Anti_Air_Capable,Anti_Amphibious_Capable,Automode_Capable,Max_Target_Altitude_Delta,');
      SQL.Add(
        'Gun_Average_Shell_Velocity,Man_Gun_Max_Elevation,Man_Gun_Min_Elevation,Man_Gun_Rotation_Rate,');
      SQL.Add(
        'Man_Gun_Elevation_Rate,Man_Gun_Num_Rounds_Per_Load,Man_Gun_Time_to_Reload,Man_Gun_Muzzle_Velocity,');
      SQL.Add(
        'NGS_Capable,NGS_MinDeflectionError,NGS_MaxDeflectionError,NGS_MinRangeError,NGS_MaxRangeError,');
      SQL.Add(
        'NGS_MaxDispersionError,NGS_MaxDamageRadius,NGS_EffectiveRadius,NGS_DamageRating,Firearms)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Gun_Identifier + ''',');
      SQL.Add(IntToStr(Gun_Category) + ',');
      SQL.Add(IntToStr(Rate_of_Fire) + ',');
      SQL.Add(IntToStr(Lethality_per_Round) + ',');
      SQL.Add(FloatToStr(Min_Range) + ',');
      SQL.Add(FloatToStr(Max_Range) + ',');
      SQL.Add(FloatToStr(Air_Min_Range) + ',');
      SQL.Add(FloatToStr(Air_Max_Range) + ',');
      SQL.Add(IntToStr(Fire_Cntl_Director_Req) + ',');
      SQL.Add(IntToStr(Chaff_Capable_Gun) + ',');
      SQL.Add(IntToStr(Anti_Sur_Capable) + ',');
      SQL.Add(IntToStr(Anti_Land_Capable) + ',');
      SQL.Add(IntToStr(Anti_Air_Capable) + ',');
      SQL.Add(IntToStr(Anti_Amphibious_Capable) + ',');
      SQL.Add(IntToStr(Automode_Capable) + ',');
      SQL.Add(IntToStr(Max_Target_Altitude_Delta) + ',');
      SQL.Add(FloatToStr(Gun_Average_Shell_Velocity) + ',');
      SQL.Add(FloatToStr(Man_Gun_Max_Elevation) + ',');
      SQL.Add(FloatToStr(Man_Gun_Min_Elevation) + ',');
      SQL.Add(FloatToStr(Man_Gun_Rotation_Rate) + ',');
      SQL.Add(FloatToStr(Man_Gun_Elevation_Rate) + ',');
      SQL.Add(IntToStr(Man_Gun_Num_Rounds_Per_Load) + ',');
      SQL.Add(FloatToStr(Man_Gun_Time_to_Reload) + ',');
      SQL.Add(FloatToStr(Man_Gun_Muzzle_Velocity) + ',');
      SQL.Add(IntToStr(NGS_Capable) + ',');
      SQL.Add(FloatToStr(NGS_MinDeflectionError) + ',');
      SQL.Add(FloatToStr(NGS_MaxDeflectionError) + ',');
      SQL.Add(FloatToStr(NGS_MinRangeError) + ',');
      SQL.Add(FloatToStr(NGS_MaxRangeError) + ',');
      SQL.Add(FloatToStr(NGS_MaxDispersionError) + ',');
      SQL.Add(FloatToStr(NGS_MaxDamageRadius) + ',');
      SQL.Add(FloatToStr(NGS_EffectiveRadius) + ',');
      SQL.Add(IntToStr(NGS_DamageRating) + ')');
      SQL.Add(IntToStr(Firearms) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Gun_Index FROM Gun_Definition ');
      SQL.Add('WHERE Gun_Identifier =' + quotedStr(Gun_Identifier));
      Open;
      with rec.FData do
      begin
        Gun_Index := FieldByName('Gun_Index').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteGun(id: Integer): Integer;
begin
  result := -1;
  deleteNote(13,IntToStr(id));
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Gun_Definition ');
    SQL.Add('WHERE Gun_Index =' + IntToStr(id));
    ExecSQL;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllGun_POH_vs_Range(const id,tipe: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
var
    rec: TGun_Definition;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Gun_POH_vs_Range ' );
    SQL.Add('WHERE (Gun_Index = ' +  IntToStr(id) + ')' );
    if tipe <> 0 then
      SQL.Add('AND (Target_Type = ' +  IntToStr(tipe) + ')' );
    SQL.Add('ORDER BY Range ASC ' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGun_Definition.Create;
        with rec.FGun_POH do begin
          List_Index    := FieldByName('List_Index').AsInteger;
          Gun_Index     := FieldByName('Gun_Index').AsInteger;
          Target_Type   := FieldByName('Target_Type').AsInteger;
          Prob_of_Hit   := FieldByName('Prob_of_Hit').AsSingle;
          Range         := FieldByName('Range').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;

      SQL.Clear;
      SQL.Add('SELECT MIN(Range) as X_MIN, ');
      SQL.Add('MAX(Prob_of_Hit) as Y_MAX, ');
      SQL.Add('MIN(Prob_of_Hit) as Y_MIN ');
      SQL.Add('FROM  Gun_POH_vs_Range ' );
      SQL.Add('WHERE (Gun_Index = ' +  IntToStr(id) + ')' );
      SQL.Add('AND (Target_Type = ' +  IntToStr(tipe) + ')' );
      Open;
      xMin  := FieldByName('X_MIN').AsSingle;
      yMax  := FieldByName('Y_MAX').AsSingle;
      yMin  := FieldByName('Y_MIN').AsSingle;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.DeleteGun_POH_vs_Range(const id,tipe: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Gun_POH_vs_Range  ');
      SQL.Add('WHERE (Gun_Index = ' +  id + ')' );
      SQL.Add('AND (Target_Type = ' +  tipe + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.insertGun_POH_vs_Range(rec: TGun_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FGun_POH do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Gun_POH_vs_Range ');
      SQL.Add
        ('(Gun_Index,Target_Type,Prob_of_Hit,Range)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Gun_Index) + ',');
      SQL.Add(FloatToStr(Target_Type) + ',');
      SQL.Add(FloatToStr(Prob_of_Hit) + ',');
      SQL.Add(FloatToStr(Range) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getCubicle_GroupMemberResidu(const deploy_id: Integer;
  const ra_id: Integer; const force: Integer; var gList: TList): boolean;
var
  rec: TCubicle_Group_Assignment;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT b.Platform_Instance_Index ');
    SQL.Add('FROM Platform_Instance b ');
    SQL.Add('WHERE b.Resource_Alloc_Index = ' + IntToStr(ra_id) + ' ');
    SQL.Add('AND b.Force_Designation = ' + IntToStr(force) + ' ');
    SQL.Add('AND b.Platform_Instance_Index NOT IN (');
    SQL.Add('SELECT a.Platform_Instance_Index ');
    SQL.Add('FROM Cubicle_Group_Assignment a ');
    SQL.Add('WHERE a.Deployment_Index = ' + IntToStr(deploy_id) + ')');

    Open;

    result := RecordCount > 0;
    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(gList) then
        gList := TList.Create
      else
        gList.Clear;

      while not ZQ.Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;
        { with rec.FData do begin
          Deployment_Index    := FieldByName('Deployment_Index').AsInteger;
          end; }
        with rec.FPlatform do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          { Instance_Name           := FieldByName('Instance_Name').AsString;
            Force_Designation       := FieldByName('Force_Designation').AsInteger;
            Resource_Alloc_Index    := FieldByName('Resource_Alloc_Index').AsInteger; }
        end;

        gList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllCubicle_Groups(const id, force: Integer;
  var cList: TList; var rec: TCubicle_Group): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := ssql + 'SELECT * FROM Cubicle_Group ';


    ssql := ssql + 'WHERE (Deployment_Index = ' + IntToStr(id) + ') ';
    if force <> 0 then
      ssql := ssql + 'AND (Force_Designation = ' + IntToStr(force) + ')';


    if force <> 0 then
      ssql := ssql + 'WHERE (Force_Designation = ' + IntToStr(force) + ')';

    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(cList) then
        cList := TList.Create
      else
        cList.Clear;

      while not ZQ.Eof do
      begin
        rec := TCubicle_Group.Create;
        with rec.FData do
        begin
          Group_Index := FieldByName('Group_Index').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
          Group_Identifier := FieldByName('Group_Identifier').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Tracks_Block := FieldByName('Tracks_Block').AsInteger;
          Track_Block_Start := FieldByName('Track_Block_Start').AsInteger;
          Track_Block_End := FieldByName('Track_Block_End').AsInteger;
          Zulu_Zulu := FieldByName('Zulu_Zulu').AsInteger;
        end;
        cList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getCubicle_GroupsByScenario(const scenario_id, force:integer;
    var aRec: TList): Integer;
var
  rec: TCubicle_Group_Assignment;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;

    ssql := ssql +
      'SELECT distinct a.Group_Index, a.Deployment_Index,  a.Group_identifier, a.Force_designation ';
    ssql := ssql +
      'FROM Cubicle_Group a INNER JOIN Asset_Deployment_Definition b ';
    ssql := ssql +
      'ON a.Deployment_Index = b.Deployment_Index INNER JOIN Scenario_Definition c ';
    ssql := ssql +
      'ON b.Scenario_Index = c.Scenario_Index WHERE ';
    ssql := ssql + ' c.Scenario_Index = '+inttostr(scenario_id)+' AND a.Force_Designation = '+IntToStr(force);
    ssql := ssql + ' ORDER BY a.Group_Index';

    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;

        with rec.FData do
        begin
          Group_Index := FieldByName('Group_Index').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
          Group_Identifier := FieldByName('Group_Identifier').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

//------------------------------------------------------------------------------------

function TdmTTT.getCubicle_GroupsByResource(const ra_id, force: Integer;
  var aRec: TList): Integer;
var
  rec: TCubicle_Group_Assignment;

  // channelAssgn    : TCubicle_Channel_Assignment ;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;

    ssql := ssql +
      'SELECT distinct a.Group_Index, a.Deployment_Index,  a.Group_identifier, a.Force_designation ';
    ssql := ssql +
      'FROM Cubicle_Group a INNER JOIN Cubicle_Group_Assignment b ';
    ssql := ssql +
      'ON a.Group_Index = b.Group_Index INNER JOIN Platform_Instance c ';
    ssql := ssql +
      'ON b.Platform_Instance_Index = c.Platform_Instance_Index WHERE ';

    if ra_id <> 0 then
    begin
      ssql := ssql + 'c.Resource_Alloc_Index = ' + IntToStr(ra_id);
      if force <> 0 then
        ssql := ssql + ' AND a.Force_Designation = ' + IntToStr(force);
    end;

    ssql := ssql + ' ORDER BY a.Group_Index';

    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;

        with rec.FData do
        begin
          Group_Index := FieldByName('Group_Index').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
          Group_Identifier := FieldByName('Group_Identifier').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
      {
        for j := 0 to aRec.Count - 1 do
        begin
        rec := aRec.Items[j];

        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Cubicle_Group_Channel_Assgnmnt ');
        SQL.Add('WHERE (Group_Index = ' + IntToStr(rec.FData.Group_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
        channelAssgn := TCubicle_Channel_Assignment.Create;

        with channelAssgn.FData do
        begin
        Group_Index           := FieldByName('Group_Index').AsInteger;
        Channel_Slot          := FieldByName('Channel_Slot').AsInteger;
        Comms_Channel_Index   := FieldByName('Comms_Channel_Index').AsInteger;
        end;

        rec.Cubicle_Group.Channel_Assgmnt.Add(channelAssgn);
        ZQ.Next;
        end;
        end; }

    end;
  end;
end;

function TdmTTT.DeleteWaypointByID(const id: integer): Integer;
begin
  result := -1;
  with ZQ do
  begin

    SQL.Clear;
    SQL.Add('DELETE FROM Waypoint_Data ');
    SQL.Add('WHERE Waypoint_Index = ' + IntToStr(id));
    ExecSQL;

    SQL.Clear;
    SQL.Add('DELETE FROM Waypoint ');
    SQL.Add('WHERE Waypoint_Index = ' + IntToStr(id));
    ExecSQL;

  end;
end;

function TdmTTT.DeleteWaypointDataByID(const id: integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    SQL.Clear;
    SQL.Add('DELETE FROM Waypoint_Data ');
    SQL.Add('WHERE Waypoint_Index = ' + IntToStr(id));
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteAllCubicle_Group(deploy_id: string): Integer;
var Ass_List : TList;
    rec: TCubicle_Group;
    I: Integer;
begin
  result := -1;
  rec := TCubicle_Group.Create;
  with ZQ do
  begin
    Close;
    getAllCubicle_Groups(StrToInt(deploy_id),0,Ass_List,rec);
    for I := 0 to Ass_List.Count - 1 do
    begin
      SQL.Clear;
      SQL.Add('DELETE FROM Cubicle_Group_Assignment ');
      SQL.Add('WHERE Group_Index = ' + IntToStr(TCubicle_Group(Ass_List[I]).FData.Group_Index) );
      ExecSQL;

      SQL.Clear;
      SQL.Add('DELETE FROM Cubicle_Group_Channel_Assgnmnt ');
      SQL.Add('WHERE Group_Index = ' + IntToStr(TCubicle_Group(Ass_List[I]).FData.Group_Index) );
      ExecSQL;
    end;

    SQL.Clear;
    SQL.Add('DELETE FROM Cubicle_Group ');
    SQL.Add('WHERE Deployment_Index = ' + deploy_id );
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteCubicle_Group(id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;

    SQL.Clear;
    SQL.Add('DELETE FROM Cubicle_Group_Assignment ');
    SQL.Add('WHERE Group_Index = ' + id );
    ExecSQL;

    SQL.Clear;
    SQL.Add('DELETE FROM Cubicle_Group_Channel_Assgnmnt ');
    SQL.Add('WHERE Group_Index = ' + id );
    ExecSQL;

    SQL.Clear;
    SQL.Add('DELETE FROM Cubicle_Group ');
    SQL.Add('WHERE Group_Index = ' + id );
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------
function TdmTTT.getPlatform_GroupsByResource(const ra_id, force: Integer;
      var aRec: TList): Integer;
var
  rec: TCubicle_Group_Assignment;

  // channelAssgn    : TCubicle_Channel_Assignment ;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := ssql +
      'SELECT distinct a.Group_Index, a.Deployment_Index,  a.Group_identifier, a.Force_designation ';
    ssql := ssql +
      'FROM Cubicle_Group a INNER JOIN Cubicle_Group_Assignment b ';
    ssql := ssql +
      'ON a.Group_Index = b.Group_Index INNER JOIN Platform_Instance c ';
    ssql := ssql +
      'ON b.Platform_Instance_Index = c.Platform_Instance_Index WHERE ';

    if ra_id <> 0 then
    begin
      ssql := ssql + 'c.Resource_Alloc_Index = ' + IntToStr(ra_id);
      if force <> 0 then
        ssql := ssql + ' AND a.Force_Designation = ' + IntToStr(force);
    end;

    ssql := ssql + ' ORDER BY a.Group_Index';
    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;

        with rec.FData do
        begin
          Group_Index := FieldByName('Group_Index').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
          Group_Identifier := FieldByName('Group_Identifier').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
      {
        for j := 0 to aRec.Count - 1 do
        begin
        rec := aRec.Items[j];

        Close;
        SQL.Clear;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Cubicle_Group_Channel_Assgnmnt ');
        SQL.Add('WHERE (Group_Index = ' + IntToStr(rec.FData.Group_Index) + ')');
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
        channelAssgn := TCubicle_Channel_Assignment.Create;

        with channelAssgn.FData do
        begin
        Group_Index           := FieldByName('Group_Index').AsInteger;
        Channel_Slot          := FieldByName('Channel_Slot').AsInteger;
        Comms_Channel_Index   := FieldByName('Comms_Channel_Index').AsInteger;
        end;

        rec.Cubicle_Group.Channel_Assgmnt.Add(channelAssgn);
        ZQ.Next;
        end;
        end; }

    end;
  end;
end;

//-----------------------------------------------------------------------------

function TdmTTT.getCubicle_GroupsByGroup(const id: Integer;
  var rec: TCubicle_Group): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := ssql + 'SELECT * FROM Cubicle_Group ';

    if id <> 0 then
      ssql := ssql + 'WHERE (Group_Index = ' + IntToStr(id) + ') ';

    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not ZQ.IsEmpty then
    begin
      if not Assigned(rec) then
        rec := TCubicle_Group.Create;
      with rec.FData do
      begin
        Group_Index := FieldByName('Group_Index').AsInteger;
        Deployment_Index := FieldByName('Deployment_Index').AsInteger;
        Group_Identifier := FieldByName('Group_Identifier').AsString;
        Force_Designation := FieldByName('Force_Designation').AsInteger;
        Tracks_Block := FieldByName('Tracks_Block').AsInteger;
        Track_Block_Start := FieldByName('Track_Block_Start').AsInteger;
        Track_Block_End := FieldByName('Track_Block_End').AsInteger;
        Zulu_Zulu := FieldByName('Zulu_Zulu').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Ship_On_Sonar(const id: Integer;
  var rec: TRecGame_Ship_On_Sonar): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Ship_On_Sonar a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Sonar_Frequency := FieldByName('Sonar_Frequency').AsSingle;
        Distant_Ship_Effect := FieldByName('Distant_Ship_Effect').AsSingle;
        Light_Ship_Effect := FieldByName('Light_Ship_Effect').AsSingle;
        Medium_Ship_Effect := FieldByName('Medium_Ship_Effect').AsSingle;
        Heavy_Ship_Effect := FieldByName('Heavy_Ship_Effect').AsSingle;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateGame_Defaults(rec: TGame_Defaults; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Defaults  ');
      SQL.Add('SET ');
      SQL.Add('Defaults_Identifier = ''' + Defaults_Identifier + ''',');
      SQL.Add('Init_AOP = ' + IntToStr(Init_AOP) + ',');
      SQL.Add('AOP_Decrease_Rate = ' + FloatToStr(AOP_Decrease_Rate) + ',');
      SQL.Add('Sono_Num_2_Initiate = ' + IntToStr(Sono_Num_2_Initiate) + ',');
      SQL.Add('Trans_Range_2_Air = ' + FloatToStr(Trans_Range_2_Air) + ',');
      SQL.Add('Trans_Range_2_Sur = ' + FloatToStr(Trans_Range_2_Sur) + ',');
      SQL.Add('Init_AOP_Modifier = ' + FloatToStr(Init_AOP_Modifier) + ',');
      SQL.Add('Visual_Detect_Range = ' + FloatToStr(Visual_Detect_Range) + ',');
      SQL.Add('Known_Cross_Section = ' + FloatToStr(Known_Cross_Section) + ',');
      SQL.Add('Max_Visual_Range = ' + FloatToStr(Max_Visual_Range) + ',');
      SQL.Add('EO_Detection_Factor = ' + FloatToStr(EO_Detection_Factor) + ',');
      SQL.Add('Visual_Detection_Factor = ' + FloatToStr
          (Visual_Detection_Factor) + ',');
      SQL.Add('EO_Ident_Factor = ' + FloatToStr(EO_Ident_Factor) + ',');
      SQL.Add('Visual_Ident_Factor = ' + FloatToStr(Visual_Ident_Factor) + ',');
      SQL.Add('Sine_Period_Distance = ' + FloatToStr(Sine_Period_Distance)
          + ',');
      SQL.Add('Sine_Period_Amplitude = ' + FloatToStr(Sine_Period_Amplitude)
          + ',');
      SQL.Add('Short_Period_Distance = ' + FloatToStr(Short_Period_Distance)
          + ',');
      SQL.Add('Short_Period_Amplitude = ' + FloatToStr(Short_Period_Amplitude)
          + ',');
      SQL.Add('Long_Period_Distance = ' + FloatToStr(Long_Period_Distance)
          + ',');
      SQL.Add('Long_Period_Amplitude = ' + FloatToStr(Long_Period_Amplitude)
          + ',');
      SQL.Add('Very_Period_Distance = ' + FloatToStr(Very_Period_Distance)
          + ',');
      SQL.Add('Very_Period_Amplitude = ' + FloatToStr(Very_Period_Amplitude)
          + ',');
      SQL.Add('Air_Lost_Time = ' + IntToStr(Air_Lost_Time) + ',');
      SQL.Add('Sur_Lost_Time = ' + IntToStr(Sur_Lost_Time) + ',');
      SQL.Add('Sub_Lost_Time = ' + IntToStr(Sub_Lost_Time) + ',');
      SQL.Add('ESM_Bearing_Lost_Time = ' + IntToStr(ESM_Bearing_Lost_Time)
          + ',');
      SQL.Add('Sonar_Bearing_Lost_Time = ' + IntToStr(Sonar_Bearing_Lost_Time)
          + ',');
      SQL.Add('Stale_Air_Time = ' + IntToStr(Stale_Air_Time) + ',');
      SQL.Add('Stale_Sur_Time = ' + IntToStr(Stale_Sur_Time) + ',');
      SQL.Add('Stale_Sub_Time = ' + IntToStr(Stale_Sub_Time) + ',');
      SQL.Add('Stale_ESM_Bearing_Time = ' + IntToStr(Stale_ESM_Bearing_Time)
          + ',');
      SQL.Add('Stale_Sonar_Bearing_Time = ' + IntToStr
          (Stale_Sonar_Bearing_Time) + ',');
      SQL.Add('POD_Check_Time = ' + IntToStr(POD_Check_Time) + ',');
      SQL.Add('TMA_Range_Rate = ' + FloatToStr(TMA_Range_Rate) + ',');
      SQL.Add('Frequency_Identity_Weighting = ' + FloatToStr
          (Frequency_Identity_Weighting) + ',');
      SQL.Add('PRF_Identity_Weighting = ' + FloatToStr(PRF_Identity_Weighting)
          + ',');
      SQL.Add('Pulsewidth_Identity_Weighting = ' + FloatToStr
          (Pulsewidth_Identity_Weighting) + ',');
      SQL.Add('Scan_Period_Identity_Weighting = ' + FloatToStr
          (Scan_Period_Identity_Weighting) + ',');
      SQL.Add('Crew_Eff_Heading_Error = ' + FloatToStr(Crew_Eff_Heading_Error)
          + ',');
      SQL.Add('Crew_Eff_Speed_Error = ' + FloatToStr(Crew_Eff_Speed_Error)
          + ',');
      SQL.Add('TMA_Relative_Bearing_Rate = ' + FloatToStr
          (TMA_Relative_Bearing_Rate) + ',');
      SQL.Add('Passive_Sonar_Max_Course_Error = ' + FloatToStr
          (Passive_Sonar_Max_Course_Error) + ',');
      SQL.Add('Passive_Sonar_Max_Speed_Error = ' + FloatToStr
          (Passive_Sonar_Max_Speed_Error) + ',');
      SQL.Add('ESM_Error_Corr_Rate = ' + FloatToStr(ESM_Error_Corr_Rate) + ',');
      SQL.Add('Chaff_Altitude_Threshold = ' + FloatToStr
          (Chaff_Altitude_Threshold) + ',');
      SQL.Add('MHS_Flash_Delay_Time = ' + FloatToStr(MHS_Flash_Delay_Time)
          + ',');
      SQL.Add('MHS_Immed_Delay_Time = ' + FloatToStr(MHS_Immed_Delay_Time)
          + ',');
      SQL.Add('MHS_Priority_Delay_Time = ' + FloatToStr
          (MHS_Priority_Delay_Time) + ',');
      SQL.Add('MHS_Routine_Delay_Time = ' + FloatToStr(MHS_Routine_Delay_Time)
          + ',');
      SQL.Add('Max_UWT_Range = ' + FloatToStr(Max_UWT_Range) + ',');
      SQL.Add('Max_HF_Detect_Range = ' + FloatToStr(Max_HF_Detect_Range) + ',');
      SQL.Add('Max_UHF_Detect_Range = ' + FloatToStr(Max_UHF_Detect_Range)
          + ',');
      SQL.Add('Max_IFF_Range = ' + FloatToStr(Max_IFF_Range) + ',');
      SQL.Add('Track_History_Air_Sample_Rate = ' + IntToStr
          (Track_History_Air_Sample_Rate) + ',');
      SQL.Add('Track_History_Air_Max_Points = ' + IntToStr
          (Track_History_Air_Max_Points) + ',');
      SQL.Add('Track_History_Sample_Rate = ' + IntToStr
          (Track_History_Sample_Rate) + ',');
      SQL.Add('Track_History_Max_Points = ' + IntToStr
          (Track_History_Max_Points) + ',');
      SQL.Add('Auto_Gun_Interception_Range = ' + FloatToStr
          (Auto_Gun_Interception_Range) + ',');
      SQL.Add('Auto_Gun_Threshold_Speed = ' + FloatToStr
          (Auto_Gun_Threshold_Speed) + ',');
      SQL.Add('Clutter_Reduction_Scale = ' + FloatToStr
          (Clutter_Reduction_Scale) + ',');
      SQL.Add('Jam_Break_Lock_Time_Interval = ' + IntToStr
          (Jam_Break_Lock_Time_Interval) + ',');
      SQL.Add('Missile_Reacquisition_Time = ' + IntToStr
          (Missile_Reacquisition_Time) + ',');
      SQL.Add('Seduction_Bloom_Altitude = ' + IntToStr
          (Seduction_Bloom_Altitude) + ',');
      SQL.Add('Seduction_Bloom_Range = ' + FloatToStr(Seduction_Bloom_Range)
          + ',');
      SQL.Add('HF_Datalink_MHS_Trans_Freq = ' + FloatToStr
          (HF_Datalink_MHS_Trans_Freq) + ',');
      SQL.Add('UHF_Datalink_MHS_Trans_Freq = ' + FloatToStr
          (UHF_Datalink_MHS_Trans_Freq) + ',');
      SQL.Add('Max_Num_Radar_Classes = ' + IntToStr(Max_Num_Radar_Classes)
          + ',');
      SQL.Add('Max_Num_Sonar_Classes = ' + IntToStr(Max_Num_Sonar_Classes)
          + ',');
      SQL.Add('Max_Num_Sonobuoy_Classes = ' + IntToStr
          (Max_Num_Sonobuoy_Classes) + ',');
      SQL.Add('Max_Num_EO_Classes = ' + IntToStr(Max_Num_EO_Classes) + ',');
      SQL.Add('Max_Num_ESM_Classes = ' + IntToStr(Max_Num_ESM_Classes) + ',');
      SQL.Add('Max_Num_MAD_Classes = ' + IntToStr(Max_Num_MAD_Classes) + ',');
      SQL.Add('Max_Num_Fitted_Weap_Classes = ' + IntToStr
          (Max_Num_Fitted_Weap_Classes) + ',');
      SQL.Add('Max_Num_Point_Effect_Classes = ' + IntToStr
          (Max_Num_Point_Effect_Classes) + ',');
      SQL.Add('HAFO_Min_Range = ' + FloatToStr(HAFO_Min_Range) + ',');
      SQL.Add('HAFO_Max_Range = ' + FloatToStr(HAFO_Max_Range) + ',');
      SQL.Add('Engage_Guide_Stale_Target_Time = ' + IntToStr
          (Engage_Guide_Stale_Target_Time) + ',');
      SQL.Add('Outrun_Guide_Stale_Target_Time = ' + IntToStr
          (Outrun_Guide_Stale_Target_Time) + ',');
      SQL.Add('Shadow_Guide_Stale_Target_Time = ' + IntToStr
          (Shadow_Guide_Stale_Target_Time) + ',');
      SQL.Add('Sonobuoy_Air_Deceleration = ' + FloatToStr
          (Sonobuoy_Air_Deceleration) + ',');
      SQL.Add('Sonobuoy_Air_Descent_Rate = ' + FloatToStr
          (Sonobuoy_Air_Descent_Rate) + ',');
      SQL.Add('Depth_Charge_Air_Deceleration = ' + FloatToStr
          (Depth_Charge_Air_Deceleration) + ',');
      SQL.Add('Depth_Charge_Air_Descent_Rate = ' + FloatToStr
          (Depth_Charge_Air_Descent_Rate) + ',');
      SQL.Add('Missile_Sea_Check_Interval = ' + IntToStr
          (Missile_Sea_Check_Interval));
    end;
    SQL.Add(' WHERE (Defaults_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertGame_Defaults(var rec: TGame_Defaults): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Defaults ');
      SQL.Add(
        '(Defaults_Identifier,Init_AOP,AOP_Decrease_Rate,Sono_Num_2_Initiate,');
      SQL.Add(
        'Trans_Range_2_Air,Trans_Range_2_Sur,Init_AOP_Modifier,Visual_Detect_Range,Known_Cross_Section,');
      SQL.Add(
        'Max_Visual_Range,EO_Detection_Factor,Visual_Detection_Factor,EO_Ident_Factor,Visual_Ident_Factor,');
      SQL.Add(
        'Sine_Period_Distance,Sine_Period_Amplitude,Short_Period_Distance,Short_Period_Amplitude,');
      SQL.Add(
        'Long_Period_Distance,Long_Period_Amplitude,Very_Period_Distance,Very_Period_Amplitude,');
      SQL.Add(
        'Air_Lost_Time,Sur_Lost_Time,Sub_Lost_Time,ESM_Bearing_Lost_Time,Sonar_Bearing_Lost_Time,');
      SQL.Add(
        'Stale_Air_Time,Stale_Sur_Time,Stale_Sub_Time,Stale_ESM_Bearing_Time,Stale_Sonar_Bearing_Time,');
      SQL.Add(
        'POD_Check_Time,TMA_Range_Rate,Frequency_Identity_Weighting,PRF_Identity_Weighting,');
      SQL.Add(
        'Pulsewidth_Identity_Weighting,Scan_Period_Identity_Weighting,Crew_Eff_Heading_Error,');
      SQL.Add(
        'Crew_Eff_Speed_Error,TMA_Relative_Bearing_Rate,Passive_Sonar_Max_Course_Error,');
      SQL.Add(
        'Passive_Sonar_Max_Speed_Error,ESM_Error_Corr_Rate,Chaff_Altitude_Threshold,MHS_Flash_Delay_Time,');
      SQL.Add(
        'MHS_Immed_Delay_Time,MHS_Priority_Delay_Time,MHS_Routine_Delay_Time,Max_UWT_Range,');
      SQL.Add(
        'Max_HF_Detect_Range,Max_UHF_Detect_Range,Max_IFF_Range,Track_History_Air_Sample_Rate,');
      SQL.Add(
        'Track_History_Air_Max_Points,Track_History_Sample_Rate,Track_History_Max_Points,');
      SQL.Add(
        'Auto_Gun_Interception_Range,Auto_Gun_Threshold_Speed,Clutter_Reduction_Scale,');
      SQL.Add(
        'Jam_Break_Lock_Time_Interval,Missile_Reacquisition_Time,Seduction_Bloom_Altitude,');
      SQL.Add(
        'Seduction_Bloom_Range,HF_Datalink_MHS_Trans_Freq,UHF_Datalink_MHS_Trans_Freq,Max_Num_Radar_Classes,');
      SQL.Add(
        'Max_Num_Sonar_Classes,Max_Num_Sonobuoy_Classes,Max_Num_EO_Classes,Max_Num_ESM_Classes,');
      SQL.Add(
        'Max_Num_MAD_Classes,Max_Num_Fitted_Weap_Classes,Max_Num_Point_Effect_Classes,');
      SQL.Add(
        'HAFO_Min_Range,HAFO_Max_Range,Engage_Guide_Stale_Target_Time,Outrun_Guide_Stale_Target_Time,');
      SQL.Add(
        'Shadow_Guide_Stale_Target_Time,Sonobuoy_Air_Deceleration,Sonobuoy_Air_Descent_Rate,');
      SQL.Add(
        'Depth_Charge_Air_Deceleration,Depth_Charge_Air_Descent_Rate,Missile_Sea_Check_Interval)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Defaults_Identifier + ''',');
      SQL.Add(IntToStr(Init_AOP) + ',');
      SQL.Add(FloatToStr(AOP_Decrease_Rate) + ',');
      SQL.Add(IntToStr(Sono_Num_2_Initiate) + ',');
      SQL.Add(FloatToStr(Trans_Range_2_Air) + ',');
      SQL.Add(FloatToStr(Trans_Range_2_Sur) + ',');
      SQL.Add(FloatToStr(Init_AOP_Modifier) + ',');
      SQL.Add(FloatToStr(Visual_Detect_Range) + ',');
      SQL.Add(FloatToStr(Known_Cross_Section) + ',');
      SQL.Add(FloatToStr(Max_Visual_Range) + ',');
      SQL.Add(FloatToStr(EO_Detection_Factor) + ',');
      SQL.Add(FloatToStr(Visual_Detection_Factor) + ',');
      SQL.Add(FloatToStr(EO_Ident_Factor) + ',');
      SQL.Add(FloatToStr(Visual_Ident_Factor) + ',');
      SQL.Add(FloatToStr(Sine_Period_Distance) + ',');
      SQL.Add(FloatToStr(Sine_Period_Amplitude) + ',');
      SQL.Add(FloatToStr(Short_Period_Distance) + ',');
      SQL.Add(FloatToStr(Short_Period_Amplitude) + ',');
      SQL.Add(FloatToStr(Long_Period_Distance) + ',');
      SQL.Add(FloatToStr(Long_Period_Amplitude) + ',');
      SQL.Add(FloatToStr(Very_Period_Distance) + ',');
      SQL.Add(FloatToStr(Very_Period_Amplitude) + ',');
      SQL.Add(IntToStr(Air_Lost_Time) + ',');
      SQL.Add(IntToStr(Sur_Lost_Time) + ',');
      SQL.Add(IntToStr(Sub_Lost_Time) + ',');
      SQL.Add(IntToStr(ESM_Bearing_Lost_Time) + ',');
      SQL.Add(IntToStr(Sonar_Bearing_Lost_Time) + ',');
      SQL.Add(IntToStr(Stale_Air_Time) + ',');
      SQL.Add(IntToStr(Stale_Sur_Time) + ',');
      SQL.Add(IntToStr(Stale_Sub_Time) + ',');
      SQL.Add(IntToStr(Stale_ESM_Bearing_Time) + ',');
      SQL.Add(IntToStr(Stale_Sonar_Bearing_Time) + ',');
      SQL.Add(IntToStr(POD_Check_Time) + ',');
      SQL.Add(FloatToStr(TMA_Range_Rate) + ',');
      SQL.Add(FloatToStr(Frequency_Identity_Weighting) + ',');
      SQL.Add(FloatToStr(PRF_Identity_Weighting) + ',');
      SQL.Add(FloatToStr(Pulsewidth_Identity_Weighting) + ',');
      SQL.Add(FloatToStr(Scan_Period_Identity_Weighting) + ',');
      SQL.Add(FloatToStr(Crew_Eff_Heading_Error) + ',');
      SQL.Add(FloatToStr(Crew_Eff_Speed_Error) + ',');
      SQL.Add(FloatToStr(TMA_Relative_Bearing_Rate) + ',');
      SQL.Add(FloatToStr(Passive_Sonar_Max_Course_Error) + ',');
      SQL.Add(FloatToStr(Passive_Sonar_Max_Speed_Error) + ',');
      SQL.Add(FloatToStr(ESM_Error_Corr_Rate) + ',');
      SQL.Add(FloatToStr(Chaff_Altitude_Threshold) + ',');
      SQL.Add(FloatToStr(MHS_Flash_Delay_Time) + ',');
      SQL.Add(FloatToStr(MHS_Immed_Delay_Time) + ',');
      SQL.Add(FloatToStr(MHS_Priority_Delay_Time) + ',');
      SQL.Add(FloatToStr(MHS_Routine_Delay_Time) + ',');
      SQL.Add(FloatToStr(Max_UWT_Range) + ',');
      SQL.Add(FloatToStr(Max_HF_Detect_Range) + ',');
      SQL.Add(FloatToStr(Max_UHF_Detect_Range) + ',');
      SQL.Add(FloatToStr(Max_IFF_Range) + ',');
      SQL.Add(IntToStr(Track_History_Air_Sample_Rate) + ',');
      SQL.Add(IntToStr(Track_History_Air_Max_Points) + ',');
      SQL.Add(IntToStr(Track_History_Sample_Rate) + ',');
      SQL.Add(IntToStr(Track_History_Max_Points) + ',');
      SQL.Add(FloatToStr(Auto_Gun_Interception_Range) + ',');
      SQL.Add(FloatToStr(Auto_Gun_Threshold_Speed) + ',');
      SQL.Add(FloatToStr(Clutter_Reduction_Scale) + ',');
      SQL.Add(IntToStr(Jam_Break_Lock_Time_Interval) + ',');
      SQL.Add(IntToStr(Missile_Reacquisition_Time) + ',');
      SQL.Add(IntToStr(Seduction_Bloom_Altitude) + ',');
      SQL.Add(FloatToStr(Seduction_Bloom_Range) + ',');
      SQL.Add(FloatToStr(HF_Datalink_MHS_Trans_Freq) + ',');
      SQL.Add(FloatToStr(UHF_Datalink_MHS_Trans_Freq) + ',');
      SQL.Add(IntToStr(Max_Num_Radar_Classes) + ',');
      SQL.Add(IntToStr(Max_Num_Sonar_Classes) + ',');
      SQL.Add(IntToStr(Max_Num_Sonobuoy_Classes) + ',');
      SQL.Add(IntToStr(Max_Num_EO_Classes) + ',');
      SQL.Add(IntToStr(Max_Num_ESM_Classes) + ',');
      SQL.Add(IntToStr(Max_Num_MAD_Classes) + ',');
      SQL.Add(IntToStr(Max_Num_Fitted_Weap_Classes) + ',');
      SQL.Add(IntToStr(Max_Num_Point_Effect_Classes) + ',');
      SQL.Add(FloatToStr(HAFO_Min_Range) + ',');
      SQL.Add(FloatToStr(HAFO_Max_Range) + ',');
      SQL.Add(IntToStr(Engage_Guide_Stale_Target_Time) + ',');
      SQL.Add(IntToStr(Outrun_Guide_Stale_Target_Time) + ',');
      SQL.Add(IntToStr(Shadow_Guide_Stale_Target_Time) + ',');
      SQL.Add(FloatToStr(Sonobuoy_Air_Deceleration) + ',');
      SQL.Add(FloatToStr(Sonobuoy_Air_Descent_Rate) + ',');
      SQL.Add(FloatToStr(Depth_Charge_Air_Deceleration) + ',');
      SQL.Add(FloatToStr(Depth_Charge_Air_Descent_Rate) + ',');
      SQL.Add(IntToStr(Missile_Sea_Check_Interval) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Game_Defaults ');
      SQL.Add('WHERE Defaults_Identifier = '+ QuotedStr(Defaults_Identifier));
      Open;
      rec.FData.Defaults_Index := FieldByName('Defaults_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteGame_Defaults(id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Game_Defaults ');
    SQL.Add('WHERE Defaults_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.getCubicle_GroupMember(var cGroup: TCubicle_Group;
  var pfList: TList): Integer;
var
  i, pi_Index: Integer;
  pi: TPlatform_Instance;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Cubicle_Group_Assignment a JOIN Platform_Instance b ');
    SQL.Add('ON a.Platform_Instance_Index = b.Platform_Instance_Index ');
    SQL.Add('WHERE (a.Group_Index = ' + IntToStr(cGroup.FData.Group_Index)
        + ')');
    SQL.Add('ORDER BY a.Group_Index');

    Open;
    // where group_index cGroup.FData.Group_Index;
    while not ZQ.Eof do
    begin

      pi_Index := ZQ.FieldByName('Platform_Instance_Index').AsInteger;

      for i := 0 to pfList.Count - 1 do
      begin
        pi := pfList[i];
        if pi.FData.Platform_Instance_Index = pi_Index then
          cGroup.PlatformInstances.Add(pi);
      end;
      ZQ.Next;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getCubicle_GroupMemberByPlatform(const pi: Integer;
  var rec: TCubicle_Group_Assignment): Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Cubicle_Group_Assignment a JOIN Platform_Instance b ');
    SQL.Add('ON a.Platform_Instance_Index = b.Platform_Instance_Index ');
    SQL.Add('WHERE (a.Platform_Instance_Index = ' + IntToStr(pi) + ')');

    Open;
    // where group_index cGroup.FData.Group_Index;
    result := RecordCount;
    if not IsEmpty then
    begin

      First;
      if not Assigned(rec) then
        rec := TCubicle_Group_Assignment.Create;
      with rec.FPlatform do
      begin
        Platform_Instance_Index := FieldByName('Platform_Instance_Index')
          .AsInteger;
        Instance_Name := FieldByName('Instance_Name').AsString;
      end;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getMaxCubicle_Group(var recMax: Integer): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT MAX(Group_Index) as last');
    SQL.Add('FROM Cubicle_Group ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      recMax := Fields[0].AsInteger;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.UpdatePlatformLogistics(rec: TLogistics): Integer;
begin
  result := -1;
  with ZQ do
  begin
//    with rec.FPlatformLogistics do
//    begin
//      Close;
//      SQL.Clear;
//      SQL.Add('UPDATE Platform_Logistics ');
//      SQL.Add('SET ');
//      SQL.Add('PA = '+ IntToStr(PA) + ',');
//      SQL.Add('BA = ' + IntToStr(BA) + ',');
//      SQL.Add('TA = ' + IntToStr(TA) + ',');
//      SQL.Add('HSD = ' + IntToStr(HSD) + ',');
//      SQL.Add('ML = ' + FloatToStr(ML) + ',');
//      SQL.Add('AT = ' + FloatToStr(AT) + ',');
//      SQL.Add('AVTUR = ' + IntToStr(AVTUR) + ',');
//      SQL.Add('Food = ' + FloatToStr(Food) + ',');
//      SQL.Add('Water = ' + FloatToStr(Water) + ' ');
//      SQL.Add(' WHERE (Platform_Instance_Index = ' + IntToStr(Platform_Instance_Index) + ')');
//    end;
//    ExecSQL;
  end;
end;

function TdmTTT.updateCubicle_Groups(var rec: TCubicle_Group;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Cubicle_Group ');
      SQL.Add('SET ');
      SQL.Add('Group_Identifier=''' + Group_Identifier + ''',');
      SQL.Add('Deployment_Index=' + IntToStr(Deployment_Index) + ',');
      SQL.Add('Force_Designation=' + IntToStr(Force_Designation) + ',');
      SQL.Add('Track_Block_Start=' + IntToStr(Track_Block_Start) + ',');
      SQL.Add('Track_Block_End=' + IntToStr(Track_Block_End) + '');
    end;

    SQL.Add(' WHERE (Group_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertCubicle_Groups(var rec: TCubicle_Group): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Cubicle_Group ');
      SQL.Add(
        '(Group_Identifier,Deployment_Index,Force_Designation,Track_Block_Start,Track_Block_End)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Group_Identifier + ''',');
      SQL.Add(IntToStr(Deployment_Index) + ',');
      SQL.Add(IntToStr(Force_Designation) + ',');
      SQL.Add(IntToStr(Track_Block_Start) + ',');
      SQL.Add(IntToStr(Track_Block_End) + ')');
      // ShowMessage(SQL.Text);
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetAllCubicle_Group_Channel_Assgnmnt(const id: Integer;
  var cList: TList): boolean;
var
  rec: TCubicle_Group_Assignment;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Cubicle_Group_Channel_Assgnmnt ');
    SQL.Add('WHERE (Group_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(cList) then
        cList := TList.Create
      else
        cList.Clear;

      while not ZQ.Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;
        with rec.FChannel do
        begin
          Group_Index := FieldByName('Group_Index').AsInteger;
          Channel_Slot := FieldByName('Channel_Slot').AsInteger;
          Comms_Channel_Index := FieldByName('Comms_Channel_Index').AsInteger;
        end;

        cList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetCubicle_Group_Channel_Assgnmnt(const group_id, id,
  sign: Integer; var cList: TList): boolean;
var
  rec: TCubicle_Group_Assignment;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Cubicle_Group_Channel_Assgnmnt WHERE ');
    if sign = 1 then
      SQL.Add('Group_Index = ' + IntToStr(group_id))
    else if sign = 2 then
      SQL.Add('Comms_Channel_Index =' + IntToStr(id))
    else if sign = 3 then
    begin
      SQL.Add('Group_Index =' + IntToStr(group_id));
      SQL.Add(' AND Comms_Channel_Index =' + IntToStr(id));
    end;

    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;

      if not Assigned(cList) then
        cList := TList.Create
      else
        cList.Clear;

      while not ZQ.Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;
        with rec.FChannel do
        begin
          Group_Index := FieldByName('Group_Index').AsInteger;
          Channel_Slot := FieldByName('Channel_Slot').AsInteger;
          Comms_Channel_Index := FieldByName('Comms_Channel_Index').AsInteger;
        end;

        cList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.InsertCubicle_Group_Channel_Assgnmnt
  (var rec: TCubicle_Group_Assignment): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FChannel do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Cubicle_Group_Channel_Assgnmnt  ');
      SQL.Add('(Group_Index,Channel_Slot,Comms_Channel_Index)');
      SQL.Add('VALUES ( ');
      SQL.Add(IntToStr(Group_Index) + ',');
      SQL.Add(IntToStr(Channel_Slot) + ',');
      SQL.Add(IntToStr(Comms_Channel_Index) + ')');
    end;
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.UpdateCubicle_Group_Channel_Assgnmnt(const id: string;
  var rec: TCubicle_Group_Assignment): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FChannel do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Cubicle_Group_Channel_Assgnmnt  ');
      SQL.Add('SET ');
      SQL.Add('Channel_Slot = ' + IntToStr(Channel_Slot) + ',');
      SQL.Add('Comms_Channel_Index = ' + IntToStr(Comms_Channel_Index) + ' ');
    end;
    SQL.Add('WHERE (Group_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetAllCubicle_Group_Assignment(const id: Integer;
  var cList: TList): boolean;
var
  rec: TCubicle_Group_Assignment;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Cubicle_Group_Assignment ');
    SQL.Add('WHERE (Group_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(cList) then
        cList := TList.Create
      else
        cList.Clear;

      while not ZQ.Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;
        with rec.FCubicle do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Group_Index := FieldByName('Group_Index').AsInteger;
          Command_Priority := FieldByName('Command_Priority').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
        end;

        cList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAllCubicle_Group_AssignmentByDeployID(const id: Integer;
  var cList: TList): boolean;
var
  rec: TCubicle_Group_Assignment;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Cubicle_Group_Assignment ');
    SQL.Add('WHERE (Deployment_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(cList) then
        cList := TList.Create
      else
        cList.Clear;

      while not ZQ.Eof do
      begin
        rec := TCubicle_Group_Assignment.Create;
        with rec.FCubicle do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Group_Index := FieldByName('Group_Index').AsInteger;
          Command_Priority := FieldByName('Command_Priority').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
        end;

        cList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.InsertCubicle_Group_Assignment
  (var rec: TCubicle_Group_Assignment): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FCubicle do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Cubicle_Group_Assignment ');
      SQL.Add('VALUES ( ');
      SQL.Add(IntToStr(Platform_Instance_Index) + ',');
      SQL.Add(IntToStr(Group_Index) + ',');
      SQL.Add(IntToStr(Command_Priority) + ',');
      SQL.Add(IntToStr(Deployment_Index) + ')');
    end;
    // ShowMessage(SQL.Text);
    ExecSQL;
  end;
end;

function TdmTTT.CekEmbarkLibrary(aName: String): Boolean;
begin
  result := False;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Embark_Library ');
    SQL.Add('WHERE Embark_Identifier = ' + quotedStr(aName));
    Open;

    result := RecordCount > 0;
  end;
end;

function TdmTTT.CekFormationAlreadyExist(rec: TFormation): Boolean;
begin
  Result := False;
  with ZQ do
  begin
    with rec.FFormation_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM Formation_Definition');
      SQL.Add('WHERE Formation_Index = '+ IntToStr(Formation_Index)+ ' AND ');
      SQL.Add('Deployment_Index = '+ IntToStr(Deployment_Index));
    end;
    Open;

    result := RecordCount > 0;
  end;
end;

function TdmTTT.CekMemberAlreadyExist(rec: TFormation): Boolean;
begin
  Result := False;
  with ZQ do
  begin
    with rec.FForm_Assign do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM Formation_Assignment');
      SQL.Add('WHERE Platform_Instance_Index = '+ IntToStr(Platform_Instance_Index)+ ' AND ');
      SQL.Add('Formation_Index = '+ IntToStr(Formation_Index));
    end;
    Open;

    result := RecordCount > 0;

  end;
end;

function TdmTTT.CekMotionNameAlreadyExist(aName: String): Boolean;
begin
  Result := False;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Motion_Characteristics');
    SQL.Add('WHERE Motion_Identifier = '+ QuotedStr(aName));
    Open;

    result := RecordCount > 0;

  end;
end;


function TdmTTT.CekOverlayInsert(aName: String): Boolean;
begin
  result := False;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Overlay_Definition');
    SQL.Add('WHERE Overlay_Identifier = ' + quotedStr(aName));
    Open;

    result := RecordCount > 0;
  end;
end;

function TdmTTT.CekRadarNameAlreadyExist(aName: String): Boolean;
begin
  Result := False;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Radar_Definition');
    SQL.Add('WHERE Radar_Identifier = '+ QuotedStr(aName));
    Open;

    result := RecordCount > 0;

  end;
end;

function TdmTTT.CekRuntimeDefault(const RA_ID : Integer): Boolean;
begin
  Result := False;
  with ZQ do
  begin

    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Resource_Library_Mapping');
    SQL.Add('WHERE Resource_Alloc_Index = '+ IntToStr(RA_ID)+' AND Library_Index = 1');

    Open;

    result := RecordCount > 0;
  end;

end;

function TdmTTT.CekRuntimePlatformInsert(aName: string): Boolean;
begin
  result := False;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Runtime_Platform_Library');
    SQL.Add('WHERE Library_Name = ' + quotedStr(aName));
    Open;

    result := RecordCount > 0;
  end;
end;

function TdmTTT.CekScenarioNameAlreadyExist(const aName: string): Boolean;
begin
  Result := False;
  with ZQ do
  begin

    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Scenario_Definition');
    SQL.Add('WHERE Scenario_Identifier = '+ QuotedStr(aName));

    Open;

    result := RecordCount > 0;
  end;
end;

function TdmTTT.CekUserLoginNameAlreadyExist(const aUserName: string): Boolean;
begin
  Result := False;
  with ZQ do
  begin

    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM User_Login');
    SQL.Add('WHERE USERNAME = '+ QuotedStr(aUserName));

    Open;

    result := RecordCount > 0;
  end;
end;

function TdmTTT.CekWaypointName(WaypointName: String): Boolean;
begin
  Result := False;
  with ZQ do
  begin

    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Waypoint');
    SQL.Add('WHERE Waypoint_Name = '+ QuotedStr(WaypointName));

    Open;

    result := RecordCount > 0;
  end;
end;

function TdmTTT.CekPlatformAlreadyExist(rec: TPlatform_Instance): Boolean;
begin
  Result := False;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM Platform_Instance');
      SQL.Add('WHERE Platform_Instance_Index = '+ IntToStr(Platform_Instance_Index)+ ' AND ');
      SQL.Add('Resource_Alloc_Index = '+ IntToStr(Resource_Alloc_Index));
    end;
    Open;

    result := RecordCount > 0;

  end;
end;

function TdmTTT.CekPlatformAlreadyInsertInGroupAssignment(
  var rec: TCubicle_Group_Assignment): Boolean;
begin
  Result := False;
  with ZQ do
  begin
    with rec.FCubicle do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM Cubicle_Group_Assignment');
      SQL.Add('WHERE Platform_Instance_Index = '+ IntToStr(Platform_Instance_Index)+ ' AND ');
      SQL.Add('Group_Index = '+ IntToStr(Group_Index));
//      SQL.Add('Deployment_Index = '+ IntToStr(Deployment_Index));

    end;
    Open;

    result := RecordCount > 0;

  end;
end;

function TdmTTT.CekPlatformCapabilityIdentifier(CapIdent: string): Boolean;
begin
 Result := False;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Capability');
    SQL.Add('WHERE Capability_Identifier = '+ QuotedStr(CapIdent));

    Open;
    result := RecordCount > 0;
  end;
end;

function TdmTTT.CekPlottingInsert(aName: string): Boolean;
begin
  Result := false;

  if not ZConn.Connected  then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Plotting_Definition');
    SQL.Add('WHERE Plotting_Name = '+ QuotedStr(aName));
    Open;

    Result := RecordCount > 0;
  end;
end;

function TdmTTT.CekBase_Location(aName: String): Boolean;
begin
  Result := False;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Base_Location');
    SQL.Add('WHERE Base_Identifier = ' + QuotedStr(aName));
    Open;

    Result := RecordCount > 0;
  end;

end;

function TdmTTT.CekCubicleGroupAlreadyExist(var rec: TCubicle_Group): Boolean;
begin
  Result := False;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('SELECT * ');
      SQL.Add('FROM Cubicle_Group');
      SQL.Add('WHERE Group_Index = '+ IntToStr(Group_Index)+ ' AND ');
      SQL.Add('Deployment_Index = '+ IntToStr(Deployment_Index));

    end;
    Open;

    result := RecordCount > 0;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteCubicle_Group_Assignment(const id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Cubicle_Group_Assignment ');
    SQL.Add('WHERE Platform_Instance_Index =' + IntToStr(id));
    ExecSQL;
  end;
end;
//-----------------------------------------------------------------------------

function TdmTTT.DeleteCubicle_Group_Channel_Assgnmnt(
  const Group_id, comm_id : Integer): Integer;

begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE Cubicle_Group_Channel_Assgnmnt ');
    SQL.Add('WHERE Group_Index =' + IntToStr(Group_id));
    SQL.Add('AND Comms_Channel_Index =' + IntToStr(comm_id));
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetCubicle_Group_Assignment(const id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Cubicle_Group_Assignment ');
    SQL.Add('WHERE Platform_Instance_Index =' + IntToStr(id));
    Open;

    result := RecordCount;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.UpdateCubicle_Group_Assignment(const id: string;
  var rec: TCubicle_Group_Assignment): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FCubicle do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Cubicle_Group_Assignment  ');
      SQL.Add('SET ');
      SQL.Add('Platform_Instance_Index = ' + IntToStr(Platform_Instance_Index)
          + ',');
      SQL.Add('Command_Priority = ' + IntToStr(Command_Priority) + ',');
      SQL.Add('Deployment_Index = ' + IntToStr(Deployment_Index) + ' ');
    end;
    SQL.Add('WHERE (Group_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetAllGame_Defaults(const id: Integer; var pList: TList): Integer;
var
  rec: TGame_Defaults;
  ssql: string;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM Game_Defaults ';

    if id <> 0 then
      ssql := ssql + 'WHERE Defaults_Index =' + IntToStr(id);

    ssql := ssql + 'ORDER BY Defaults_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount;

    if not IsEmpty then
    begin

      First;

      if not Assigned(pList) then
        pList := TList.Create
      else
        pList.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Defaults.Create;
        with rec.FData do
        begin
          Defaults_Index := FieldByName('Defaults_Index').AsInteger;
          Defaults_Identifier := FieldByName('Defaults_Identifier').AsString;
          Init_AOP := FieldByName('Init_AOP').AsInteger;
          AOP_Decrease_Rate := FieldByName('AOP_Decrease_Rate').AsSingle;
          Sono_Num_2_Initiate := FieldByName('Sono_Num_2_Initiate').AsInteger;
          Trans_Range_2_Air := FieldByName('Trans_Range_2_Air').AsSingle;
          Trans_Range_2_Sur := FieldByName('Trans_Range_2_Sur').AsSingle;
          Init_AOP_Modifier := FieldByName('Init_AOP_Modifier').AsSingle;
          Visual_Detect_Range := FieldByName('Visual_Detect_Range').AsSingle;
          Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
          Max_Visual_Range := FieldByName('Max_Visual_Range').AsSingle;
          EO_Detection_Factor := FieldByName('EO_Detection_Factor').AsSingle;
          Visual_Detection_Factor := FieldByName('Visual_Detection_Factor')
            .AsSingle;
          EO_Ident_Factor := FieldByName('EO_Ident_Factor').AsSingle;
          Visual_Ident_Factor := FieldByName('Visual_Ident_Factor').AsSingle;
          Sine_Period_Distance := FieldByName('Sine_Period_Distance').AsSingle;
          Sine_Period_Amplitude := FieldByName('Sine_Period_Amplitude')
            .AsSingle;
          Short_Period_Distance := FieldByName('Short_Period_Distance')
            .AsSingle;
          Short_Period_Amplitude := FieldByName('Short_Period_Amplitude')
            .AsSingle;
          Long_Period_Distance := FieldByName('Long_Period_Distance').AsSingle;
          Long_Period_Amplitude := FieldByName('Long_Period_Amplitude')
            .AsSingle;
          Very_Period_Distance := FieldByName('Very_Period_Distance').AsSingle;
          Very_Period_Amplitude := FieldByName('Very_Period_Amplitude')
            .AsSingle;
          Air_Lost_Time := FieldByName('Air_Lost_Time').AsInteger;
          Sur_Lost_Time := FieldByName('Sur_Lost_Time').AsInteger;
          Sub_Lost_Time := FieldByName('Sub_Lost_Time').AsInteger;
          ESM_Bearing_Lost_Time := FieldByName('ESM_Bearing_Lost_Time')
            .AsInteger;
          Sonar_Bearing_Lost_Time := FieldByName('Sonar_Bearing_Lost_Time')
            .AsInteger;
          Stale_Air_Time := FieldByName('Stale_Air_Time').AsInteger;
          Stale_Sur_Time := FieldByName('Stale_Sur_Time').AsInteger;
          Stale_Sub_Time := FieldByName('Stale_Sub_Time').AsInteger;
          Stale_ESM_Bearing_Time := FieldByName('Stale_ESM_Bearing_Time')
            .AsInteger;
          Stale_Sonar_Bearing_Time := FieldByName('Stale_Sonar_Bearing_Time')
            .AsInteger;
          POD_Check_Time := FieldByName('POD_Check_Time').AsInteger;
          TMA_Range_Rate := FieldByName('TMA_Range_Rate').AsSingle;
          Frequency_Identity_Weighting := FieldByName
            ('Frequency_Identity_Weighting').AsSingle;
          PRF_Identity_Weighting := FieldByName('PRF_Identity_Weighting')
            .AsSingle;
          Pulsewidth_Identity_Weighting := FieldByName
            ('Pulsewidth_Identity_Weighting').AsSingle;
          Scan_Period_Identity_Weighting := FieldByName
            ('Scan_Period_Identity_Weighting').AsSingle;
          Crew_Eff_Heading_Error := FieldByName('Crew_Eff_Heading_Error')
            .AsSingle;
          Crew_Eff_Speed_Error := FieldByName('Crew_Eff_Speed_Error').AsSingle;
          TMA_Relative_Bearing_Rate := FieldByName('TMA_Relative_Bearing_Rate')
            .AsSingle;
          Passive_Sonar_Max_Course_Error := FieldByName
            ('Passive_Sonar_Max_Course_Error').AsSingle;
          Passive_Sonar_Max_Speed_Error := FieldByName
            ('Passive_Sonar_Max_Speed_Error').AsSingle;
          ESM_Error_Corr_Rate := FieldByName('ESM_Error_Corr_Rate').AsSingle;
          Chaff_Altitude_Threshold := FieldByName('Chaff_Altitude_Threshold')
            .AsSingle;
          MHS_Flash_Delay_Time := FieldByName('MHS_Flash_Delay_Time').AsSingle;
          MHS_Immed_Delay_Time := FieldByName('MHS_Immed_Delay_Time').AsSingle;
          MHS_Priority_Delay_Time := FieldByName('MHS_Priority_Delay_Time')
            .AsSingle;
          MHS_Routine_Delay_Time := FieldByName('MHS_Routine_Delay_Time')
            .AsSingle;
          Max_UWT_Range := FieldByName('Max_UWT_Range').AsSingle;
          Max_HF_Detect_Range := FieldByName('Max_HF_Detect_Range').AsSingle;
          Max_UHF_Detect_Range := FieldByName('Max_UHF_Detect_Range').AsSingle;
          Max_IFF_Range := FieldByName('Max_IFF_Range').AsSingle;
          Track_History_Air_Sample_Rate := FieldByName
            ('Track_History_Air_Sample_Rate').AsInteger;
          Track_History_Air_Max_Points := FieldByName
            ('Track_History_Air_Max_Points').AsInteger;
          Track_History_Sample_Rate := FieldByName('Track_History_Sample_Rate')
            .AsInteger;
          Track_History_Max_Points := FieldByName('Track_History_Max_Points')
            .AsInteger;
          Auto_Gun_Interception_Range := FieldByName
            ('Auto_Gun_Interception_Range').AsSingle;
          Auto_Gun_Threshold_Speed := FieldByName('Auto_Gun_Threshold_Speed')
            .AsSingle;
          Clutter_Reduction_Scale := FieldByName('Clutter_Reduction_Scale')
            .AsSingle;
          Jam_Break_Lock_Time_Interval := FieldByName
            ('Jam_Break_Lock_Time_Interval').AsInteger;
          Missile_Reacquisition_Time := FieldByName
            ('Missile_Reacquisition_Time')
            .AsInteger;
          Seduction_Bloom_Altitude := FieldByName('Seduction_Bloom_Altitude')
            .AsInteger;
          Seduction_Bloom_Range := FieldByName('Seduction_Bloom_Range')
            .AsSingle;
          HF_Datalink_MHS_Trans_Freq := FieldByName
            ('HF_Datalink_MHS_Trans_Freq').AsSingle;
          UHF_Datalink_MHS_Trans_Freq := FieldByName
            ('UHF_Datalink_MHS_Trans_Freq').AsSingle;
          Max_Num_Radar_Classes := FieldByName('Max_Num_Radar_Classes')
            .AsInteger;
          Max_Num_Sonar_Classes := FieldByName('Max_Num_Sonar_Classes')
            .AsInteger;
          Max_Num_Sonobuoy_Classes := FieldByName('Max_Num_Sonobuoy_Classes')
            .AsInteger;
          Max_Num_EO_Classes := FieldByName('Max_Num_EO_Classes').AsInteger;
          Max_Num_ESM_Classes := FieldByName('Max_Num_ESM_Classes').AsInteger;
          Max_Num_MAD_Classes := FieldByName('Max_Num_MAD_Classes').AsInteger;
          Max_Num_Fitted_Weap_Classes := FieldByName
            ('Max_Num_Fitted_Weap_Classes').AsInteger;
          Max_Num_Point_Effect_Classes := FieldByName
            ('Max_Num_Point_Effect_Classes').AsInteger;
          HAFO_Min_Range := FieldByName('HAFO_Min_Range').AsSingle;
          HAFO_Max_Range := FieldByName('HAFO_Max_Range').AsSingle;
          Engage_Guide_Stale_Target_Time := FieldByName
            ('Engage_Guide_Stale_Target_Time').AsInteger;
          Outrun_Guide_Stale_Target_Time := FieldByName
            ('Outrun_Guide_Stale_Target_Time').AsInteger;
          Shadow_Guide_Stale_Target_Time := FieldByName
            ('Shadow_Guide_Stale_Target_Time').AsInteger;
          Sonobuoy_Air_Deceleration := FieldByName('Sonobuoy_Air_Deceleration')
            .AsSingle;
          Sonobuoy_Air_Descent_Rate := FieldByName('Sonobuoy_Air_Descent_Rate')
            .AsSingle;
          Depth_Charge_Air_Deceleration := FieldByName
            ('Depth_Charge_Air_Deceleration').AsSingle;
          Depth_Charge_Air_Descent_Rate := FieldByName
            ('Depth_Charge_Air_Descent_Rate').AsSingle;
          Missile_Sea_Check_Interval := FieldByName
            ('Missile_Sea_Check_Interval')
            .AsInteger;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Defaults(const id: Integer; var rec: TRecGame_Defaults)
  : boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Defaults a JOIN Resource_Allocation b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (b.Resource_Alloc_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Defaults_Identifier := FieldByName('Defaults_Identifier').AsString;
        Init_AOP := FieldByName('Init_AOP').AsInteger;
        AOP_Decrease_Rate := FieldByName('AOP_Decrease_Rate').AsSingle;
        Sono_Num_2_Initiate := FieldByName('Sono_Num_2_Initiate').AsInteger;
        Trans_Range_2_Air := FieldByName('Trans_Range_2_Air').AsSingle;
        Trans_Range_2_Sur := FieldByName('Trans_Range_2_Sur').AsSingle;
        Init_AOP_Modifier := FieldByName('Init_AOP_Modifier').AsSingle;
        Visual_Detect_Range := FieldByName('Visual_Detect_Range').AsSingle;
        Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
        Max_Visual_Range := FieldByName('Max_Visual_Range').AsSingle;
        EO_Detection_Factor := FieldByName('EO_Detection_Factor').AsSingle;
        Visual_Detection_Factor := FieldByName('Visual_Detection_Factor')
          .AsSingle;
        EO_Ident_Factor := FieldByName('EO_Ident_Factor').AsSingle;
        Visual_Ident_Factor := FieldByName('Visual_Ident_Factor').AsSingle;
        Sine_Period_Distance := FieldByName('Sine_Period_Distance').AsSingle;
        Sine_Period_Amplitude := FieldByName('Sine_Period_Amplitude').AsSingle;
        Short_Period_Distance := FieldByName('Short_Period_Distance').AsSingle;
        Short_Period_Amplitude := FieldByName('Short_Period_Amplitude')
          .AsSingle;
        Long_Period_Distance := FieldByName('Long_Period_Distance').AsSingle;
        Long_Period_Amplitude := FieldByName('Long_Period_Amplitude').AsSingle;
        Very_Period_Distance := FieldByName('Very_Period_Distance').AsSingle;
        Very_Period_Amplitude := FieldByName('Very_Period_Amplitude').AsSingle;
        Air_Lost_Time := FieldByName('Air_Lost_Time').AsInteger;
        Sur_Lost_Time := FieldByName('Sur_Lost_Time').AsInteger;
        Sub_Lost_Time := FieldByName('Sub_Lost_Time').AsInteger;
        ESM_Bearing_Lost_Time := FieldByName('ESM_Bearing_Lost_Time').AsInteger;
        Sonar_Bearing_Lost_Time := FieldByName('Sonar_Bearing_Lost_Time')
          .AsInteger;
        Stale_Air_Time := FieldByName('Stale_Air_Time').AsInteger;
        Stale_Sur_Time := FieldByName('Stale_Sur_Time').AsInteger;
        Stale_Sub_Time := FieldByName('Stale_Sub_Time').AsInteger;
        Stale_ESM_Bearing_Time := FieldByName('Stale_ESM_Bearing_Time')
          .AsInteger;
        Stale_Sonar_Bearing_Time := FieldByName('Stale_Sonar_Bearing_Time')
          .AsInteger;
        POD_Check_Time := FieldByName('POD_Check_Time').AsInteger;
        TMA_Range_Rate := FieldByName('TMA_Range_Rate').AsSingle;
        Frequency_Identity_Weighting := FieldByName
          ('Frequency_Identity_Weighting').AsSingle;
        PRF_Identity_Weighting := FieldByName('PRF_Identity_Weighting')
          .AsSingle;
        Pulsewidth_Identity_Weighting := FieldByName
          ('Pulsewidth_Identity_Weighting').AsSingle;
        Scan_Period_Identity_Weighting := FieldByName
          ('Scan_Period_Identity_Weighting').AsSingle;
        Crew_Eff_Heading_Error := FieldByName('Crew_Eff_Heading_Error')
          .AsSingle;
        Crew_Eff_Speed_Error := FieldByName('Crew_Eff_Speed_Error').AsSingle;
        TMA_Relative_Bearing_Rate := FieldByName('TMA_Relative_Bearing_Rate')
          .AsSingle;
        Passive_Sonar_Max_Course_Error := FieldByName
          ('Passive_Sonar_Max_Course_Error').AsSingle;
        Passive_Sonar_Max_Speed_Error := FieldByName
          ('Passive_Sonar_Max_Speed_Error').AsSingle;
        ESM_Error_Corr_Rate := FieldByName('ESM_Error_Corr_Rate').AsSingle;
        Chaff_Altitude_Threshold := FieldByName('Chaff_Altitude_Threshold')
          .AsSingle;
        MHS_Flash_Delay_Time := FieldByName('MHS_Flash_Delay_Time').AsSingle;
        MHS_Immed_Delay_Time := FieldByName('MHS_Immed_Delay_Time').AsSingle;
        MHS_Priority_Delay_Time := FieldByName('MHS_Priority_Delay_Time')
          .AsSingle;
        MHS_Routine_Delay_Time := FieldByName('MHS_Routine_Delay_Time')
          .AsSingle;
        Max_UWT_Range := FieldByName('Max_UWT_Range').AsSingle;
        Max_HF_Detect_Range := FieldByName('Max_HF_Detect_Range').AsSingle;
        Max_UHF_Detect_Range := FieldByName('Max_UHF_Detect_Range').AsSingle;
        Max_IFF_Range := FieldByName('Max_IFF_Range').AsSingle;
        Track_History_Air_Sample_Rate := FieldByName
          ('Track_History_Air_Sample_Rate').AsInteger;
        Track_History_Air_Max_Points := FieldByName
          ('Track_History_Air_Max_Points').AsInteger;
        Track_History_Sample_Rate := FieldByName('Track_History_Sample_Rate')
          .AsInteger;
        Track_History_Max_Points := FieldByName('Track_History_Max_Points')
          .AsInteger;
        Auto_Gun_Interception_Range := FieldByName
          ('Auto_Gun_Interception_Range').AsSingle;
        Auto_Gun_Threshold_Speed := FieldByName('Auto_Gun_Threshold_Speed')
          .AsSingle;
        Clutter_Reduction_Scale := FieldByName('Clutter_Reduction_Scale')
          .AsSingle;
        Jam_Break_Lock_Time_Interval := FieldByName
          ('Jam_Break_Lock_Time_Interval').AsInteger;
        Missile_Reacquisition_Time := FieldByName('Missile_Reacquisition_Time')
          .AsInteger;
        Seduction_Bloom_Altitude := FieldByName('Seduction_Bloom_Altitude')
          .AsInteger;
        Seduction_Bloom_Range := FieldByName('Seduction_Bloom_Range').AsSingle;
        HF_Datalink_MHS_Trans_Freq := FieldByName('HF_Datalink_MHS_Trans_Freq')
          .AsSingle;
        UHF_Datalink_MHS_Trans_Freq := FieldByName
          ('UHF_Datalink_MHS_Trans_Freq').AsSingle;
        Max_Num_Radar_Classes := FieldByName('Max_Num_Radar_Classes').AsInteger;
        Max_Num_Sonar_Classes := FieldByName('Max_Num_Sonar_Classes').AsInteger;
        Max_Num_Sonobuoy_Classes := FieldByName('Max_Num_Sonobuoy_Classes')
          .AsInteger;
        Max_Num_EO_Classes := FieldByName('Max_Num_EO_Classes').AsInteger;
        Max_Num_ESM_Classes := FieldByName('Max_Num_ESM_Classes').AsInteger;
        Max_Num_MAD_Classes := FieldByName('Max_Num_MAD_Classes').AsInteger;
        Max_Num_Fitted_Weap_Classes := FieldByName
          ('Max_Num_Fitted_Weap_Classes')
          .AsInteger;
        Max_Num_Point_Effect_Classes := FieldByName
          ('Max_Num_Point_Effect_Classes').AsInteger;
        HAFO_Min_Range := FieldByName('HAFO_Min_Range').AsSingle;
        HAFO_Max_Range := FieldByName('HAFO_Max_Range').AsSingle;
        Engage_Guide_Stale_Target_Time := FieldByName
          ('Engage_Guide_Stale_Target_Time').AsInteger;
        Outrun_Guide_Stale_Target_Time := FieldByName
          ('Outrun_Guide_Stale_Target_Time').AsInteger;
        Shadow_Guide_Stale_Target_Time := FieldByName
          ('Shadow_Guide_Stale_Target_Time').AsInteger;
        Sonobuoy_Air_Deceleration := FieldByName('Sonobuoy_Air_Deceleration')
          .AsSingle;
        Sonobuoy_Air_Descent_Rate := FieldByName('Sonobuoy_Air_Descent_Rate')
          .AsSingle;
        Depth_Charge_Air_Deceleration := FieldByName
          ('Depth_Charge_Air_Deceleration').AsSingle;
        Depth_Charge_Air_Descent_Rate := FieldByName
          ('Depth_Charge_Air_Descent_Rate').AsSingle;
        Missile_Sea_Check_Interval := FieldByName('Missile_Sea_Check_Interval')
          .AsInteger;
      end;

    end;
  end;

end;

// ------------------------------------------------------------------------------
{
  function TdmTTT.GetFormation_Definition(const id: integer;
  var rec: TFormation_Definition): boolean;
  begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
  Close;
  SQL.Clear;
  SQL.Add('SELECT * ');
  SQL.Add('FROM Formation_Definition a ' );
  SQL.Add('WHERE (a.Deployment_Index = ' +  IntToStr(id) + ')' );
  Open;

  result := RecordCount > 0;
  if not IsEmpty then begin
  First;
  if not Assigned(rec) then
  rec := TFormation_Definition.Create;
  with rec.FData do begin
  Formation_Index         := FieldByName('Formation_Index').AsInteger;
  Formation_Identifier    := FieldByName('Formation_Identifier').AsString;
  Force_Designation       := FieldByName('Force_Designation').AsInteger;
  Formation_Leader        := FieldByName('Formation_Leader').AsInteger;
  Angle_Type              := FieldByName('Angle_Type').AsInteger;
  Deployment_Index        := FieldByName('Deployment_Index').AsInteger;
  end;
  end;
  end;
  end;
  }
// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Cloud_On_ESM(const id: Integer;
  var rec: TRecGame_Cloud_On_ESM): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Cloud_On_ESM a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Radar_Frequency := FieldByName('Radar_Frequency').AsSingle;
        Cloud_0_Effect := FieldByName('Cloud_0_Effect').AsSingle;
        Cloud_1_Effect := FieldByName('Cloud_1_Effect').AsSingle;
        Cloud_2_Effect := FieldByName('Cloud_2_Effect').AsSingle;
        Cloud_3_Effect := FieldByName('Cloud_3_Effect').AsSingle;
        Cloud_4_Effect := FieldByName('Cloud_4_Effect').AsSingle;
        Cloud_5_Effect := FieldByName('Cloud_5_Effect').AsSingle;
        Cloud_6_Effect := FieldByName('Cloud_6_Effect').AsSingle;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Cloud_On_Radar(const id: Integer;
  var rec: TRecGame_Cloud_On_Radar): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Cloud_On_Radar a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Radar_Frequency := FieldByName('Radar_Frequency').AsSingle;
        Cloud_0_Effect := FieldByName('Cloud_0_Effect').AsSingle;
        Cloud_1_Effect := FieldByName('Cloud_1_Effect').AsSingle;
        Cloud_2_Effect := FieldByName('Cloud_2_Effect').AsSingle;
        Cloud_3_Effect := FieldByName('Cloud_3_Effect').AsSingle;
        Cloud_4_Effect := FieldByName('Cloud_4_Effect').AsSingle;
        Cloud_5_Effect := FieldByName('Cloud_5_Effect').AsSingle;
        Cloud_6_Effect := FieldByName('Cloud_6_Effect').AsSingle;
      end;
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Default_IFF_Mode_Code(const id: Integer;
  var rec: TRecGame_Default_IFF_Mode_Code): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Default_IFF_Mode_Code a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Force_Designation := FieldByName('Force_Designation').AsInteger;
        IFF_Device_Type := FieldByName('IFF_Device_Type').AsInteger;
        IFF_Mode := FieldByName('IFF_Mode').AsInteger;
        IFF_Code := FieldByName('IFF_Code').AsInteger;
        Mode_State := FieldByName('Mode_State').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllGame_Default_IFF_Mode_Code(const id: integer;
      var aRec: TList): Integer;
var
    rec: TGame_Default_IFF_Mode_Code;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Default_IFF_Mode_Code ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Default_IFF_Mode_Code.Create;
        with rec.FData do begin
          Defaults_Index      := FieldByName('Defaults_Index').AsInteger;
          Force_Designation   := FieldByName('Force_Designation').AsInteger;
          IFF_Device_Type     := FieldByName('IFF_Device_Type').AsInteger;
          IFF_Mode            := FieldByName('IFF_Mode').AsInteger;
          IFF_Code            := FieldByName('IFF_Code').AsInteger;
          Mode_State          := FieldByName('Mode_State').AsInteger;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.InsertGame_Default_IFF_Mode_Code(var rec: TGame_Default_IFF_Mode_Code): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.fdata do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Default_IFF_Mode_Code  ');
      SQL.Add('(Defaults_Index,Force_Designation,IFF_Device_Type,');
      SQL.Add('IFF_Mode,IFF_Code,Mode_State)  ');
      SQL.Add('VALUES ( ' );
      SQL.Add(IntToStr(Defaults_Index)+',');
      SQL.Add(IntToStr(Force_Designation)+',');
      SQL.Add(IntToStr(IFF_Device_Type)+',');
      SQL.Add(IntToStr(IFF_Mode)+',');
      SQL.Add(IntToStr(IFF_Code)+',');
      SQL.Add(IntToStr(Mode_State)+')');
    end;
    ExecSQL;
  end;
end;
//-------------------------------------------------------------------

function TdmTTT.UpdateGame_Default_IFF_Mode_Code(const id,force,iff_type,iff_mode: Integer;
  var rec: TGame_Default_IFF_Mode_Code): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Default_IFF_Mode_Code  ');
      SQL.Add('SET ' );
      SQL.Add('Mode_State = '+IntToStr(Mode_State)+' ');
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ') ' );
    SQL.Add('AND (Force_Designation = ' +  IntToStr(force) + ') ' );
    SQL.Add('AND (IFF_Device_Type = ' +  IntToStr(iff_type) + ') ' );
    SQL.Add('AND (IFF_Mode = ' +  IntToStr(iff_mode) + ') ' );
    ExecSQL;
  end;
end;
//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Default_IFF_Mode_Code(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Default_IFF_Mode_Code  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;
//-------------------------------------------------------------------

function TdmTTT.GetGame_Rainfall_On_ESM(const id: Integer;
  var rec: TRecGame_Rainfall_On_ESM): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Rainfall_On_ESM  a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Radar_Frequency := FieldByName('Radar_Frequency').AsSingle;
        Rain_0_Effect := FieldByName('Rain_0_Effect').AsSingle;
        Rain_1_Effect := FieldByName('Rain_1_Effect').AsSingle;
        Rain_2_Effect := FieldByName('Rain_2_Effect').AsSingle;
        Rain_3_Effect := FieldByName('Rain_3_Effect').AsSingle;
        Rain_4_Effect := FieldByName('Rain_4_Effect').AsSingle;
        Rain_5_Effect := FieldByName('Rain_5_Effect').AsSingle;
        Rain_6_Effect := FieldByName('Rain_6_Effect').AsSingle;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Rainfall_On_Missile_Seeker(const id: Integer;
  var rec: TRecGame_Rainfall_On_Missile_Seeker): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Rainfall_On_Missile_Seeker a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Guide_Type := FieldByName('Guide_Type').AsInteger;
        Rain_0_Effect := FieldByName('Rain_0_Effect').AsSingle;
        Rain_1_Effect := FieldByName('Rain_1_Effect').AsSingle;
        Rain_2_Effect := FieldByName('Rain_2_Effect').AsSingle;
        Rain_3_Effect := FieldByName('Rain_3_Effect').AsSingle;
        Rain_4_Effect := FieldByName('Rain_4_Effect').AsSingle;
        Rain_5_Effect := FieldByName('Rain_5_Effect').AsSingle;
        Rain_6_Effect := FieldByName('Rain_6_Effect').AsSingle;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Rainfall_On_Radar(const id: Integer;
  var rec: TRecGame_Rainfall_On_Radar): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Rainfall_On_Radar a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Radar_Frequency := FieldByName('Radar_Frequency').AsSingle;
        Rain_0_Effect := FieldByName('Rain_0_Effect').AsSingle;
        Rain_1_Effect := FieldByName('Rain_1_Effect').AsSingle;
        Rain_2_Effect := FieldByName('Rain_2_Effect').AsSingle;
        Rain_3_Effect := FieldByName('Rain_3_Effect').AsSingle;
        Rain_4_Effect := FieldByName('Rain_4_Effect').AsSingle;
        Rain_5_Effect := FieldByName('Rain_5_Effect').AsSingle;
        Rain_6_Effect := FieldByName('Rain_6_Effect').AsSingle;
      end;
    end;
  end;
end;
// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Rainfall_On_Sonar(const id: Integer;
  var rec: TRecGame_Rainfall_On_Sonar): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Rainfall_On_Sonar a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Sonar_Frequency := FieldByName('Sonar_Frequency').AsSingle;
        Rain_0_Effect := FieldByName('Rain_0_Effect').AsSingle;
        Rain_1_Effect := FieldByName('Rain_1_Effect').AsSingle;
        Rain_2_Effect := FieldByName('Rain_2_Effect').AsSingle;
        Rain_3_Effect := FieldByName('Rain_3_Effect').AsSingle;
        Rain_4_Effect := FieldByName('Rain_4_Effect').AsSingle;
        Rain_5_Effect := FieldByName('Rain_5_Effect').AsSingle;
        Rain_6_Effect := FieldByName('Rain_6_Effect').AsSingle;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Sea_On_Missile_Safe_Altitude(const id: Integer;
  var rec: TRecGame_Sea_On_Missile_Safe_Altitude): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Sea_On_Missile_Safe_Altitude a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Sea_State := FieldByName('Sea_State').AsInteger;
        Effect_on_Missile_Safe_Altitude := FieldByName
          ('Effect_on_Missile_Safe_Altitud').AsSingle;
        // Effect_on_Missile_Safe_Altitude   := FieldByName('Effect_on_Missile_Safe_Altitude').AsSingle;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Sea_On_Radar(const id: Integer;
  var rec: TRecGame_Sea_On_Radar): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Sea_On_Radar a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Sea_State := FieldByName('Sea_State').AsInteger;
        Effect_on_Radar := FieldByName('Effect_on_Radar').AsSingle;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGame_Sea_On_Sonar(const id: Integer;
  var rec: TRecGame_Sea_On_Sonar): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Game_Sea_On_Sonar a JOIN Game_Defaults b ');
    SQL.Add('ON a.Defaults_Index = b.Defaults_Index ');
    SQL.Add('WHERE (a.Defaults_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      with rec do
      begin
        Defaults_Index := FieldByName('Defaults_Index').AsInteger;
        Sonar_Frequency := FieldByName('Sonar_Frequency').AsSingle;
        Sea_0_Effect := FieldByName('Sea_0_Effect').AsSingle;
        Sea_1_Effect := FieldByName('Sea_1_Effect').AsSingle;
        Sea_2_Effect := FieldByName('Sea_2_Effect').AsSingle;
        Sea_3_Effect := FieldByName('Sea_3_Effect').AsSingle;
        Sea_4_Effect := FieldByName('Sea_4_Effect').AsSingle;
        Sea_5_Effect := FieldByName('Sea_5_Effect').AsSingle;
        Sea_6_Effect := FieldByName('Sea_6_Effect').AsSingle;
        Sea_7_Effect := FieldByName('Sea_7_Effect').AsSingle;
        Sea_8_Effect := FieldByName('Sea_8_Effect').AsSingle;
        Sea_9_Effect := FieldByName('Sea_9_Effect').AsSingle;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetScripted_Behav(const id: Integer;
  var rec: TScripted_Behav_Definition): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ2 do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Scripted_Behav_Definition ');
    SQL.Add('WHERE (Scripted_Event_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;
      if not Assigned(rec) then
        rec := TScripted_Behav_Definition.Create;

      with rec.FData do
      begin
        Scripted_Event_Index := FieldByName('Scripted_Event_Index').AsInteger;
        Number_of_Event := FieldByName('Number_of_Event').AsInteger;
        Platform_Event_Index := FieldByName('Platform_Event_Index').AsInteger;
        Speed := FieldByName('Speed').AsInteger;
        Altitude := FieldByName('Altitude').AsSingle;
        Vert_Speed := FieldByName('Vert_Speed').AsInteger;
        Waypoint_Latitude := FieldByName('Waypoint_Latitude').AsFloat;
        Waypoint_Longitude := FieldByName('Waypoint_Longitude').AsFloat;
        Cartesian_Waypoint_X := FieldByName('Cartesian_Waypoint_X').AsSingle;
        Cartesian_Waypoint_Y := FieldByName('Cartesian_Waypoint_Y').AsSingle;
        Time_Waypoint := FieldByName('Time_Waypoint').AsInteger;
        Time_2_Waypoint := FieldByName('Time_2_Waypoint').AsInteger;
        HF_Datalink_Activate := FieldByName('HF_Datalink_Activate').AsInteger;
        UHF_Datalink_Activate := FieldByName('UHF_Datalink_Activate').AsInteger;
        Sonobuoy_Resource_Index := FieldByName('Sonobuoy_Resource_Index')
          .AsInteger;
        Sonobuoy_Instance_Index := FieldByName('Sonobuoy_Instance_Index')
          .AsInteger;
        Deploy_Sonobuoys := FieldByName('Deploy_Sonobuoys').AsInteger;
        Sonobuoy_Spacing := FieldByName('Sonobuoy_Spacing').AsSingle;
        Num_Sonobuoys_2_Drop := FieldByName('Num_Sonobuoys_2_Drop').AsInteger;
        Sonobuoy_Depth := FieldByName('Sonobuoy_Depth').AsSingle;
        Jammer_Control := FieldByName('Jammer_Control').AsInteger;
        Remove_from_Game := FieldByName('Remove_from_Game').AsInteger;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetScripted_Pattern(const id: Integer;
  var rec: TScripted_Pattern_Point): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ2 do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Scripted_Pattern_Point ');
    SQL.Add('WHERE (Scripted_Pattern_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;
      if not Assigned(rec) then
        rec := TScripted_Pattern_Point.Create;

      with rec.FData do
      begin
        Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index')
          .AsInteger;
        Point_Number := FieldByName('Point_Number').AsInteger;
        Pattern_Index := FieldByName('Pattern_Index').AsInteger;
        Heading := FieldByName('Heading').AsSingle;
        Range := FieldByName('Range').AsSingle;
        Speed := FieldByName('Speed').AsInteger;
        Altitude := FieldByName('Altitude').AsSingle;
        Vert_Speed := FieldByName('Vert_Speed').AsInteger;
        Time_Waypoint := FieldByName('Time_Waypoint').AsInteger;
        Time_2_Waypoint := FieldByName('Time_2_Waypoint').AsInteger;
        HF_Datalink_Activate := FieldByName('HF_Datalink_Activate').AsInteger;
        UHF_Datalink_Activate := FieldByName('UHF_Datalink_Activate').AsInteger;
        Sonobuoy_Instance_Index := FieldByName('Sonobuoy_Instance_Index')
          .AsInteger;
        Deploy_Sonobuoys := FieldByName('Deploy_Sonobuoys').AsInteger;
        Sonobuoy_Spacing := FieldByName('Sonobuoy_Spacing').AsSingle;
        Num_Sonobuoys_2_Drop := FieldByName('Num_Sonobuoys_2_Drop').AsInteger;
        Sonobuoy_Depth := FieldByName('Sonobuoy_Depth').AsSingle;
        Jammer_Control := FieldByName('Jammer_Control').AsInteger;
        Remove_from_Game := FieldByName('Remove_from_Game').AsInteger;
      end;

    end;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.InsertScripted_Pattern_Point(var rec: TScripted_Pattern_Point): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Scripted_Pattern_Point  ');
      SQL.Add('(Point_Number, Pattern_Index, Heading, ' );
      SQL.Add('Range, Speed, Altitude, Vert_Speed, Time_Waypoint, Time_2_Waypoint, ' );
      SQL.Add('HF_Datalink_Activate, UHF_Datalink_Activate, ' );
      SQL.Add('Deploy_Sonobuoys, Sonobuoy_Spacing, Num_Sonobuoys_2_Drop, Sonobuoy_Depth, ' );
      SQL.Add('Jammer_Control, Remove_from_Game) ' );
      SQL.Add('VALUES ( ' );
      SQL.Add(IntToStr(Point_Number)+',');
      SQL.Add(IntToStr(Pattern_Index)+',');
      SQL.Add(FloatToStr(Heading)+',');
      SQL.Add(FloatToStr(Range)+',');
      SQL.Add(IntToStr(Speed)+',');
      SQL.Add(FloatToStr(Altitude)+',');
      SQL.Add(IntToStr(Vert_Speed)+',');
      SQL.Add(IntToStr(Time_Waypoint)+',');
      SQL.Add(IntToStr(Time_2_Waypoint)+',');
      SQL.Add(IntToStr(HF_Datalink_Activate)+',');
      SQL.Add(IntToStr(UHF_Datalink_Activate)+',');
      SQL.Add(IntToStr(Deploy_Sonobuoys)+',');
      SQL.Add(FloatToStr(Sonobuoy_Spacing)+',');
      SQL.Add(IntToStr(Num_Sonobuoys_2_Drop)+',');
      SQL.Add(FloatToStr(Sonobuoy_Depth)+',');
      SQL.Add(IntToStr(Jammer_Control)+',');
      SQL.Add(IntToStr(Remove_from_Game)+')');
    end;
    ExecSQL;
    SQL.Clear;
    SQL.Add('SELECT * FROM Scripted_Pattern_Point ');
    SQL.Add('WHERE Heading =' + floattostr(rec.FData.Heading));
    Open;
    rec.FData.Scripted_Pattern_Index := FieldByName('Scripted_Pattern_Index').AsInteger;
    end;
  //end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.GetRainfall_On_ESM(var aRec: TList): boolean;
var
  rec: TGame_Rainfall_On_ESM;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Rainfall_On_ESM');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Rainfall_On_ESM.Create;

        with rec.FData do
        begin
          Radar_Frequency := FieldByName('Radar_Frequency').AsSingle;
          Rain_0_Effect := FieldByName('Rain_0_Effect').AsSingle;
          Rain_1_Effect := FieldByName('Rain_1_Effect').AsSingle;
          Rain_2_Effect := FieldByName('Rain_2_Effect').AsSingle;
          Rain_3_Effect := FieldByName('Rain_3_Effect').AsSingle;
          Rain_4_Effect := FieldByName('Rain_4_Effect').AsSingle;
          Rain_5_Effect := FieldByName('Rain_5_Effect').AsSingle;
          Rain_6_Effect := FieldByName('Rain_6_Effect').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetRainfall_On_Missile(var aRec: TList): boolean;
var
  rec: TGame_Rainfall_On_Missile_Seeker;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Rainfall_On_Missile_Seeker');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Rainfall_On_Missile_Seeker.Create;

        with rec.FData do
        begin
          Guide_Type := FieldByName('Guide_Type').AsInteger;
          Rain_0_Effect := FieldByName('Rain_0_Effect').AsSingle;
          Rain_1_Effect := FieldByName('Rain_1_Effect').AsSingle;
          Rain_2_Effect := FieldByName('Rain_2_Effect').AsSingle;
          Rain_3_Effect := FieldByName('Rain_3_Effect').AsSingle;
          Rain_4_Effect := FieldByName('Rain_4_Effect').AsSingle;
          Rain_5_Effect := FieldByName('Rain_5_Effect').AsSingle;
          Rain_6_Effect := FieldByName('Rain_6_Effect').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetRainfall_On_Radar(var aRec: TList): boolean;
var
  rec: TGame_Rainfall_On_Radar;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Rainfall_On_Radar ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Rainfall_On_Radar.Create;

        with rec.FData do
        begin
          Radar_Frequency := FieldByName('Radar_Frequency').AsSingle;
          Rain_0_Effect := FieldByName('Rain_0_Effect').AsSingle;
          Rain_1_Effect := FieldByName('Rain_1_Effect').AsSingle;
          Rain_2_Effect := FieldByName('Rain_2_Effect').AsSingle;
          Rain_3_Effect := FieldByName('Rain_3_Effect').AsSingle;
          Rain_4_Effect := FieldByName('Rain_4_Effect').AsSingle;
          Rain_5_Effect := FieldByName('Rain_5_Effect').AsSingle;
          Rain_6_Effect := FieldByName('Rain_6_Effect').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetRainfall_On_Sonar(var aRec: TList): boolean;
var
  rec: TGame_Rainfall_On_Sonar;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Rainfall_On_Sonar');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Rainfall_On_Sonar.Create;

        with rec.FData do
        begin
          Sonar_Frequency := FieldByName('Sonar_Frequency').AsSingle;
          Rain_0_Effect := FieldByName('Rain_0_Effect').AsSingle;
          Rain_1_Effect := FieldByName('Rain_1_Effect').AsSingle;
          Rain_2_Effect := FieldByName('Rain_2_Effect').AsSingle;
          Rain_3_Effect := FieldByName('Rain_3_Effect').AsSingle;
          Rain_4_Effect := FieldByName('Rain_4_Effect').AsSingle;
          Rain_5_Effect := FieldByName('Rain_5_Effect').AsSingle;
          Rain_6_Effect := FieldByName('Rain_6_Effect').AsSingle;

        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateRainfall_On_Sonar(rec: TRainfall_On_Sonar;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Rainfall_On_Sonar  ');
      SQL.Add('SET ');
      SQL.Add('Rain_0_Effect = ' + FloatToStr(Rain_0_Effect) + ',');
      SQL.Add('Rain_1_Effect = ' + FloatToStr(Rain_1_Effect) + ',');
      SQL.Add('Rain_2_Effect = ' + FloatToStr(Rain_2_Effect) + ',');
      SQL.Add('Rain_3_Effect = ' + FloatToStr(Rain_3_Effect) + ',');
      SQL.Add('Rain_4_Effect = ' + FloatToStr(Rain_4_Effect) + ',');
      SQL.Add('Rain_5_Effect = ' + FloatToStr(Rain_5_Effect) + ',');
      SQL.Add('Rain_6_Effect = ' + FloatToStr(Rain_6_Effect));
    end;
    SQL.Add('WHERE (Sonar_Frequency = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertRainfall_On_Sonar(rec: TRainfall_On_Sonar): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Rainfall_On_Sonar] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Rainfall_On_Sonar ');
      SQL.Add(
        '(Sonar_Frequency,Rain_0_Effect,Rain_1_Effect,Rain_2_Effect,Rain_3_Effect,Rain_4_Effect,Rain_5_Effect,Rain_6_Effect)');
      SQL.Add(' VALUES (');
      SQL.Add(FloatToStr(Sonar_Frequency) + ',');
      SQL.Add(FloatToStr(Rain_0_Effect) + ',');
      SQL.Add(FloatToStr(Rain_1_Effect) + ',');
      SQL.Add(FloatToStr(Rain_2_Effect) + ',');
      SQL.Add(FloatToStr(Rain_3_Effect) + ',');
      SQL.Add(FloatToStr(Rain_4_Effect) + ',');
      SQL.Add(FloatToStr(Rain_5_Effect) + ',');
      SQL.Add(FloatToStr(Rain_6_Effect) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllGame_Rainfall_On_Radar(const id: integer;
        var aRec: TList): Integer;
var
    rec: TGame_Rainfall_On_Radar;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Rainfall_On_Radar ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Rainfall_On_Radar.Create;
        with rec.FData do begin
          Defaults_Index    := FieldByName('Defaults_Index').AsInteger;
          Radar_Frequency   := FieldByName('Radar_Frequency').AsSingle;
          Rain_0_Effect     := FieldByName('Rain_0_Effect').AsSingle;
          Rain_1_Effect     := FieldByName('Rain_1_Effect').AsSingle;
          Rain_2_Effect     := FieldByName('Rain_2_Effect').AsSingle;
          Rain_3_Effect     := FieldByName('Rain_3_Effect').AsSingle;
          Rain_4_Effect     := FieldByName('Rain_4_Effect').AsSingle;
          Rain_5_Effect     := FieldByName('Rain_5_Effect').AsSingle;
          Rain_6_Effect     := FieldByName('Rain_6_Effect').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateGame_Rainfall_On_Radar(const id,freq: string;
  var rec: TGame_Rainfall_On_Radar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Rainfall_On_Radar  ');
      SQL.Add('SET ' );
      SQL.Add('Rain_0_Effect = '+FloatToStr(Rain_0_Effect)+',');
      SQL.Add('Rain_1_Effect = '+FloatToStr(Rain_1_Effect)+',');
      SQL.Add('Rain_2_Effect = '+FloatToStr(Rain_2_Effect)+',');
      SQL.Add('Rain_3_Effect = '+FloatToStr(Rain_3_Effect)+',');
      SQL.Add('Rain_4_Effect = '+FloatToStr(Rain_4_Effect)+',');
      SQL.Add('Rain_5_Effect = '+FloatToStr(Rain_5_Effect)+',');
      SQL.Add('Rain_6_Effect = '+FloatToStr(Rain_6_Effect));
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  id + ') AND (Radar_Frequency = ' + freq + ')' );
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.InsertGame_Rainfall_On_Radar(const id,freq: string;
  var rec: TGame_Rainfall_On_Radar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Rainfall_On_Radar  ');
      SQL.Add('(Defaults_Index,Radar_Frequency,Rain_0_Effect,Rain_1_Effect,');
      SQL.Add('Rain_2_Effect,Rain_3_Effect,Rain_4_Effect,Rain_5_Effect,Rain_6_Effect) ');
      SQL.Add('VALUES ( ' );
      SQL.Add(id+',');
      SQL.Add(freq+',');
      SQL.Add(FloatToStr(Rain_0_Effect)+',');
      SQL.Add(FloatToStr(Rain_1_Effect)+',');
      SQL.Add(FloatToStr(Rain_2_Effect)+',');
      SQL.Add(FloatToStr(Rain_3_Effect)+',');
      SQL.Add(FloatToStr(Rain_4_Effect)+',');
      SQL.Add(FloatToStr(Rain_5_Effect)+',');
      SQL.Add(FloatToStr(Rain_6_Effect)+')');
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Rainfall_On_Radar(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Rainfall_On_Radar  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.getAllGame_Rainfall_On_ESM(const id: integer;
      var aRec: TList): Integer;
var
    rec: TGame_Rainfall_On_ESM;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Rainfall_On_ESM ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Rainfall_On_ESM.Create;
        with rec.FData do begin
          Defaults_Index    := FieldByName('Defaults_Index').AsInteger;
          Radar_Frequency   := FieldByName('Radar_Frequency').AsSingle;
          Rain_0_Effect     := FieldByName('Rain_0_Effect').AsSingle;
          Rain_1_Effect     := FieldByName('Rain_1_Effect').AsSingle;
          Rain_2_Effect     := FieldByName('Rain_2_Effect').AsSingle;
          Rain_3_Effect     := FieldByName('Rain_3_Effect').AsSingle;
          Rain_4_Effect     := FieldByName('Rain_4_Effect').AsSingle;
          Rain_5_Effect     := FieldByName('Rain_5_Effect').AsSingle;
          Rain_6_Effect     := FieldByName('Rain_6_Effect').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateGame_Rainfall_On_ESM(const id,freq: string;
  var rec: TGame_Rainfall_On_ESM): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Rainfall_On_ESM  ');
      SQL.Add('SET ' );
      SQL.Add('Rain_0_Effect = '+FloatToStr(Rain_0_Effect)+',');
      SQL.Add('Rain_1_Effect = '+FloatToStr(Rain_1_Effect)+',');
      SQL.Add('Rain_2_Effect = '+FloatToStr(Rain_2_Effect)+',');
      SQL.Add('Rain_3_Effect = '+FloatToStr(Rain_3_Effect)+',');
      SQL.Add('Rain_4_Effect = '+FloatToStr(Rain_4_Effect)+',');
      SQL.Add('Rain_5_Effect = '+FloatToStr(Rain_5_Effect)+',');
      SQL.Add('Rain_6_Effect = '+FloatToStr(Rain_6_Effect));
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  id + ') AND (Radar_Frequency = ' + freq + ')' );
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.InsertGame_Rainfall_On_ESM(const id,freq: string;
  var rec: TGame_Rainfall_On_ESM): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Rainfall_On_ESM  ');
      SQL.Add('(Defaults_Index,Radar_Frequency,Rain_0_Effect,Rain_1_Effect,');
      SQL.Add('Rain_2_Effect,Rain_3_Effect,Rain_4_Effect,Rain_5_Effect,Rain_6_Effect) ');
      SQL.Add('VALUES ( ' );
      SQL.Add(id+',');
      SQL.Add(freq+',');
      SQL.Add(FloatToStr(Rain_0_Effect)+',');
      SQL.Add(FloatToStr(Rain_1_Effect)+',');
      SQL.Add(FloatToStr(Rain_2_Effect)+',');
      SQL.Add(FloatToStr(Rain_3_Effect)+',');
      SQL.Add(FloatToStr(Rain_4_Effect)+',');
      SQL.Add(FloatToStr(Rain_5_Effect)+',');
      SQL.Add(FloatToStr(Rain_6_Effect)+')');
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Rainfall_On_ESM(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Rainfall_On_ESM  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.getAllGame_Rainfall_On_Missile_Seeker(const id: integer;
      var aRec: TList): Integer;
var
    rec: TGame_Rainfall_On_Missile_Seeker;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Rainfall_On_Missile_Seeker ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Rainfall_On_Missile_Seeker.Create;
        with rec.FData do begin
          Defaults_Index    := FieldByName('Defaults_Index').AsInteger;
          Guide_Type        := FieldByName('Guide_Type').AsInteger;
          Rain_0_Effect     := FieldByName('Rain_0_Effect').AsSingle;
          Rain_1_Effect     := FieldByName('Rain_1_Effect').AsSingle;
          Rain_2_Effect     := FieldByName('Rain_2_Effect').AsSingle;
          Rain_3_Effect     := FieldByName('Rain_3_Effect').AsSingle;
          Rain_4_Effect     := FieldByName('Rain_4_Effect').AsSingle;
          Rain_5_Effect     := FieldByName('Rain_5_Effect').AsSingle;
          Rain_6_Effect     := FieldByName('Rain_6_Effect').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateGame_Rainfall_On_Missile_Seeker(const id,gType: string;
  var rec: TGame_Rainfall_On_Missile_Seeker): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Rainfall_On_Missile_Seeker  ');
      SQL.Add('SET ' );
      SQL.Add('Rain_0_Effect = '+FloatToStr(Rain_0_Effect)+',');
      SQL.Add('Rain_1_Effect = '+FloatToStr(Rain_1_Effect)+',');
      SQL.Add('Rain_2_Effect = '+FloatToStr(Rain_2_Effect)+',');
      SQL.Add('Rain_3_Effect = '+FloatToStr(Rain_3_Effect)+',');
      SQL.Add('Rain_4_Effect = '+FloatToStr(Rain_4_Effect)+',');
      SQL.Add('Rain_5_Effect = '+FloatToStr(Rain_5_Effect)+',');
      SQL.Add('Rain_6_Effect = '+FloatToStr(Rain_6_Effect));
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  id + ') AND (Guide_Type = ' + gType + ')' );
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.InsertGame_Rainfall_On_Missile_Seeker(const id,gType: string;
  var rec: TGame_Rainfall_On_Missile_Seeker): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Rainfall_On_Missile_Seeker  ');
      SQL.Add('(Defaults_Index,Guide_Type,Rain_0_Effect,Rain_1_Effect,');
      SQL.Add('Rain_2_Effect,Rain_3_Effect,Rain_4_Effect,Rain_5_Effect,Rain_6_Effect) ');
      SQL.Add('VALUES ( ' );
      SQL.Add(id+',');
      SQL.Add(gType+',');
      SQL.Add(FloatToStr(Rain_0_Effect)+',');
      SQL.Add(FloatToStr(Rain_1_Effect)+',');
      SQL.Add(FloatToStr(Rain_2_Effect)+',');
      SQL.Add(FloatToStr(Rain_3_Effect)+',');
      SQL.Add(FloatToStr(Rain_4_Effect)+',');
      SQL.Add(FloatToStr(Rain_5_Effect)+',');
      SQL.Add(FloatToStr(Rain_6_Effect)+')');
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Rainfall_On_Missile_Seeker(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Rainfall_On_Missile_Seeker  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.getAllGame_Rainfall_On_Sonar(const id: integer;
      var aRec: TList): Integer;
var
    rec: TGame_Rainfall_On_Sonar;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Rainfall_On_Sonar ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Rainfall_On_Sonar.Create;
        with rec.FData do begin
          Defaults_Index    := FieldByName('Defaults_Index').AsInteger;
          Sonar_Frequency   := FieldByName('Sonar_Frequency').AsSingle;
          Rain_0_Effect     := FieldByName('Rain_0_Effect').AsSingle;
          Rain_1_Effect     := FieldByName('Rain_1_Effect').AsSingle;
          Rain_2_Effect     := FieldByName('Rain_2_Effect').AsSingle;
          Rain_3_Effect     := FieldByName('Rain_3_Effect').AsSingle;
          Rain_4_Effect     := FieldByName('Rain_4_Effect').AsSingle;
          Rain_5_Effect     := FieldByName('Rain_5_Effect').AsSingle;
          Rain_6_Effect     := FieldByName('Rain_6_Effect').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateGame_Rainfall_On_Sonar(const id,freq: string;
  var rec: TGame_Rainfall_On_Sonar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Rainfall_On_Sonar  ');
      SQL.Add('SET ' );
      SQL.Add('Rain_0_Effect = '+FloatToStr(Rain_0_Effect)+',');
      SQL.Add('Rain_1_Effect = '+FloatToStr(Rain_1_Effect)+',');
      SQL.Add('Rain_2_Effect = '+FloatToStr(Rain_2_Effect)+',');
      SQL.Add('Rain_3_Effect = '+FloatToStr(Rain_3_Effect)+',');
      SQL.Add('Rain_4_Effect = '+FloatToStr(Rain_4_Effect)+',');
      SQL.Add('Rain_5_Effect = '+FloatToStr(Rain_5_Effect)+',');
      SQL.Add('Rain_6_Effect = '+FloatToStr(Rain_6_Effect));
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  id + ') AND (Guide_Type = ' + freq + ')' );
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.InsertGame_Rainfall_On_Sonar(const id,freq: string;
  var rec: TGame_Rainfall_On_Sonar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Rainfall_On_Sonar  ');
      SQL.Add('(Defaults_Index,Sonar_Frequency,Rain_0_Effect,Rain_1_Effect,');
      SQL.Add('Rain_2_Effect,Rain_3_Effect,Rain_4_Effect,Rain_5_Effect,Rain_6_Effect) ');
      SQL.Add('VALUES ( ' );
      SQL.Add(id+',');
      SQL.Add(freq+',');
      SQL.Add(FloatToStr(Rain_0_Effect)+',');
      SQL.Add(FloatToStr(Rain_1_Effect)+',');
      SQL.Add(FloatToStr(Rain_2_Effect)+',');
      SQL.Add(FloatToStr(Rain_3_Effect)+',');
      SQL.Add(FloatToStr(Rain_4_Effect)+',');
      SQL.Add(FloatToStr(Rain_5_Effect)+',');
      SQL.Add(FloatToStr(Rain_6_Effect)+')');
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Rainfall_On_Sonar(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Rainfall_On_Sonar  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.GetCloud_Effect_On_ESM(var aRec: TList): boolean;
var
  rec: TGame_Cloud_On_ESM;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Cloud_Effects_On_ESM');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Cloud_On_ESM.Create;

        with rec.FData do
        begin
          Radar_Frequency := FieldByName('Radar_Frequency').AsSingle;
          Cloud_0_Effect := FieldByName('Cloud_0_Effect').AsSingle;
          Cloud_1_Effect := FieldByName('Cloud_1_Effect').AsSingle;
          Cloud_2_Effect := FieldByName('Cloud_2_Effect').AsSingle;
          Cloud_3_Effect := FieldByName('Cloud_3_Effect').AsSingle;
          Cloud_4_Effect := FieldByName('Cloud_4_Effect').AsSingle;
          Cloud_5_Effect := FieldByName('Cloud_5_Effect').AsSingle;
          Cloud_6_Effect := FieldByName('Cloud_6_Effect').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetCloud_Effect_On_Radar(var aRec: TList): boolean;
var
  rec: TGame_Cloud_On_Radar;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Cloud_Effects_On_Radar');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Cloud_On_Radar.Create;

        with rec.FData do
        begin
          Radar_Frequency := FieldByName('Radar_Frequency').AsSingle;
          Cloud_0_Effect := FieldByName('Cloud_0_Effect').AsSingle;
          Cloud_1_Effect := FieldByName('Cloud_1_Effect').AsSingle;
          Cloud_2_Effect := FieldByName('Cloud_2_Effect').AsSingle;
          Cloud_3_Effect := FieldByName('Cloud_3_Effect').AsSingle;
          Cloud_4_Effect := FieldByName('Cloud_4_Effect').AsSingle;
          Cloud_5_Effect := FieldByName('Cloud_5_Effect').AsSingle;
          Cloud_6_Effect := FieldByName('Cloud_6_Effect').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetSeaStateOnMissile(var sea: TSingleArray): boolean;
var
  i: Integer;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ2 do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sea_State_On_Missile_Safe_Altitude ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      SetLength(sea, RecordCount);
      i := 0;
      while not ZQ2.Eof do
      begin
        sea[i] := FieldByName('Effect_on_Missile_Safe_Altitud').AsSingle;
        Inc(i);
        Next;
      end;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetSeaStateOnRadar(var sea: TSingleArray): boolean;
var
  i: Integer;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ2 do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sea_State_On_Radar ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      SetLength(sea, RecordCount);
      i := 0;
      while not ZQ2.Eof do
      begin
        sea[i] := FieldByName('Effect_on_Radar').AsSingle;
        Inc(i);
        Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetSea_State_On_Radar(var aRec: TList): boolean;
var
    rec: TGame_Sea_On_Radar;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sea_State_On_Radar ' );
    Open;

    result := RecordCount > 0;
    if not IsEmpty then begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Sea_On_Radar.Create;

        with rec.FData do
        begin
          Sea_State         := FieldByName('Sea_State').AsInteger;
          Effect_on_Radar   := FieldByName('Effect_on_Radar').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.GetSea_State_On_Missile(var aRec: TList): boolean;
var
    rec: TSea_State_On_Missile_Safe_Altitude;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sea_State_On_Missile_Safe_Altitude ' );
    Open;

    result := RecordCount > 0;
    if not IsEmpty then begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TSea_State_On_Missile_Safe_Altitude.Create;

        with rec.FData do
        begin
          Sea_State         := FieldByName('Sea_State').AsInteger;
          Effect_on_Missile_Safe_Altitude   := FieldByName('Effect_on_Missile_Safe_Altitud').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.GetSea_State_On_Sonar(var aRec: TList): boolean;
var
    rec: TGame_Sea_On_Sonar;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sea_State_On_Sonar ' );
    Open;

    result := RecordCount > 0;
    if not IsEmpty then begin
      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Sea_On_Sonar.Create;

        with rec.FData do
        begin
          Sonar_Frequency := FieldByName('Sonar_Frequency').AsInteger;
          Sea_0_Effect    := FieldByName('Sea_0_Effect').AsSingle;
          Sea_1_Effect    := FieldByName('Sea_1_Effect').AsSingle;
          Sea_2_Effect    := FieldByName('Sea_2_Effect').AsSingle;
          Sea_3_Effect    := FieldByName('Sea_3_Effect').AsSingle;
          Sea_4_Effect    := FieldByName('Sea_4_Effect').AsSingle;
          Sea_5_Effect    := FieldByName('Sea_5_Effect').AsSingle;
          Sea_6_Effect    := FieldByName('Sea_6_Effect').AsSingle;
          Sea_7_Effect    := FieldByName('Sea_7_Effect').AsSingle;
          Sea_8_Effect    := FieldByName('Sea_8_Effect').AsSingle;
          Sea_9_Effect    := FieldByName('Sea_9_Effect').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.GetSeaStateOnSonar(var sea: TSeaStateSonarArray): boolean;
var
  i: Integer;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ2 do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Sea_State_On_Sonar ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      SetLength(sea, RecordCount);
      i := 0;

      with sea[i] do
      begin
        Sonar_Frequency := FieldByName('Sonar_Frequency').AsSingle;
        Sea_0_Effect := FieldByName('Sea_0_Effect').AsSingle;
        Sea_1_Effect := FieldByName('Sea_1_Effect').AsSingle;
        Sea_2_Effect := FieldByName('Sea_2_Effect').AsSingle;
        Sea_3_Effect := FieldByName('Sea_3_Effect').AsSingle;
        Sea_4_Effect := FieldByName('Sea_4_Effect').AsSingle;
        Sea_5_Effect := FieldByName('Sea_5_Effect').AsSingle;
        Sea_6_Effect := FieldByName('Sea_6_Effect').AsSingle;
        Sea_7_Effect := FieldByName('Sea_7_Effect').AsSingle;
        Sea_8_Effect := FieldByName('Sea_8_Effect').AsSingle;
        Sea_9_Effect := FieldByName('Sea_9_Effect').AsSingle;
      end;
      Next;
      Inc(i);
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateSeaStateOnSonar(rec: TSea_State_On_Sonar;
  id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Sea_State_On_Sonar  ');
      SQL.Add('SET ');
      SQL.Add('Sea_0_Effect = ' + FloatToStr(Sea_0_Effect) + ',');
      SQL.Add('Sea_1_Effect = ' + FloatToStr(Sea_1_Effect) + ',');
      SQL.Add('Sea_2_Effect = ' + FloatToStr(Sea_2_Effect) + ',');
      SQL.Add('Sea_3_Effect = ' + FloatToStr(Sea_3_Effect) + ',');
      SQL.Add('Sea_4_Effect = ' + FloatToStr(Sea_4_Effect) + ',');
      SQL.Add('Sea_5_Effect = ' + FloatToStr(Sea_5_Effect) + ',');
      SQL.Add('Sea_6_Effect = ' + FloatToStr(Sea_6_Effect) + ',');
      SQL.Add('Sea_7_Effect = ' + FloatToStr(Sea_7_Effect) + ',');
      SQL.Add('Sea_8_Effect = ' + FloatToStr(Sea_8_Effect) + ',');
      SQL.Add('Sea_9_Effect = ' + FloatToStr(Sea_9_Effect));
    end;
    SQL.Add('WHERE (Sonar_Frequency = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertSeaStateOnSonar(rec: TSea_State_On_Sonar): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Sea_State_On_Sonar] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Sea_State_On_Sonar ');
      SQL.Add(
        '(Sonar_Frequency,Sea_0_Effect,Sea_1_Effect,Sea_2_Effect,Sea_3_Effect,Sea_4_Effect,');
      SQL.Add(
        'Sea_5_Effect,Sea_6_Effect,Sea_7_Effect,Sea_8_Effect,Sea_9_Effect)');
      SQL.Add(' VALUES (');
      SQL.Add(FloatToStr(Sonar_Frequency) + ',');
      SQL.Add(FloatToStr(Sea_0_Effect) + ',');
      SQL.Add(FloatToStr(Sea_1_Effect) + ',');
      SQL.Add(FloatToStr(Sea_2_Effect) + ',');
      SQL.Add(FloatToStr(Sea_3_Effect) + ',');
      SQL.Add(FloatToStr(Sea_4_Effect) + ',');
      SQL.Add(FloatToStr(Sea_5_Effect) + ',');
      SQL.Add(FloatToStr(Sea_6_Effect) + ',');
      SQL.Add(FloatToStr(Sea_7_Effect) + ',');
      SQL.Add(FloatToStr(Sea_8_Effect) + ',');
      SQL.Add(FloatToStr(Sea_9_Effect) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllGame_Sea_On_Radar(const id: integer;
      var aRec: TList): Integer;
var
    rec: TGame_Sea_On_Radar;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Sea_On_Radar ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Sea_On_Radar.Create;
        with rec.FData do begin
          Defaults_Index    := FieldByName('Defaults_Index').AsInteger;
          Sea_State         := FieldByName('Sea_State').AsInteger;
          Effect_on_Radar   := FieldByName('Effect_on_Radar').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateGame_Sea_On_Radar(const id,sea: string;
  var rec: TGame_Sea_On_Radar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Sea_On_Radar  ');
      SQL.Add('SET ' );
      SQL.Add('Effect_on_Radar = '+FloatToStr(Effect_on_Radar));
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  id + ') AND (Sea_State = ' + sea + ')' );
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.InsertGame_Sea_On_Radar(const id,sea: string;
  var rec: TGame_Sea_On_Radar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Sea_On_Radar  ');
      SQL.Add('(Defaults_Index,Sea_State,Effect_on_Radar)  ');
      SQL.Add('VALUES ( ' );
      SQL.Add(id+',');
      SQL.Add(sea+',');
      SQL.Add(FloatToStr(Effect_on_Radar)+')');
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Sea_On_Radar(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Sea_On_Radar  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.getAllGame_Sea_On_Missile_Safe_Altitude(const id: integer;
      var aRec: TList): Integer;
var
    rec: TGame_Sea_On_Missile_Safe_Altitude;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Sea_On_Missile_Safe_Altitude ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Sea_On_Missile_Safe_Altitude.Create;
        with rec.FData do begin
          Defaults_Index                    := FieldByName('Defaults_Index').AsInteger;
          Sea_State                         := FieldByName('Sea_State').AsInteger;
          Effect_on_Missile_Safe_Altitude   := FieldByName('Effect_on_Missile_Safe_Altitud').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateGame_Sea_On_Missile_Safe_Altitude(const id,sea: string;
  var rec: TGame_Sea_On_Missile_Safe_Altitude): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Sea_On_Missile_Safe_Altitude  ');
      SQL.Add('SET ' );
      SQL.Add('Effect_on_Missile_Safe_Altitud = '+FloatToStr(Effect_on_Missile_Safe_Altitude));
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  id + ') AND (Sea_State = ' + sea + ')' );
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.InsertGame_Sea_On_Missile_Safe_Altitude(const id,sea: string;
  var rec: TGame_Sea_On_Missile_Safe_Altitude): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Sea_On_Missile_Safe_Altitude  ');
      SQL.Add('(Defaults_Index,Sea_State,Effect_on_Missile_Safe_Altitud)  ');
      SQL.Add('VALUES ( ' );
      SQL.Add(id+',');
      SQL.Add(sea+',');
      SQL.Add(FloatToStr(Effect_on_Missile_Safe_Altitude)+')');
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Sea_On_Missile_Safe_Altitude(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Sea_On_Missile_Safe_Altitude  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.getAllGame_Sea_On_Sonar(const id: integer;
      var aRec: TList): Integer;
var
    rec: TGame_Sea_On_Sonar;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Sea_On_Sonar ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Sea_On_Sonar.Create;
        with rec.FData do begin
          Defaults_Index    := FieldByName('Defaults_Index').AsInteger;
          Sonar_Frequency   := FieldByName('Sonar_Frequency').AsSingle;
          Sea_0_Effect      := FieldByName('Sea_0_Effect').AsSingle;
          Sea_1_Effect      := FieldByName('Sea_1_Effect').AsSingle;
          Sea_2_Effect      := FieldByName('Sea_2_Effect').AsSingle;
          Sea_3_Effect      := FieldByName('Sea_3_Effect').AsSingle;
          Sea_4_Effect      := FieldByName('Sea_4_Effect').AsSingle;
          Sea_5_Effect      := FieldByName('Sea_5_Effect').AsSingle;
          Sea_6_Effect      := FieldByName('Sea_6_Effect').AsSingle;
          Sea_7_Effect      := FieldByName('Sea_7_Effect').AsSingle;
          Sea_8_Effect      := FieldByName('Sea_8_Effect').AsSingle;
          Sea_9_Effect      := FieldByName('Sea_9_Effect').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateGame_Sea_On_Sonar(const id,freq: string;
  var rec: TGame_Sea_On_Sonar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Sea_On_Sonar  ');
      SQL.Add('SET ' );
      SQL.Add('Sea_0_Effect = '+FloatToStr(Sea_0_Effect)+',');
      SQL.Add('Sea_1_Effect = '+FloatToStr(Sea_1_Effect)+',');
      SQL.Add('Sea_2_Effect = '+FloatToStr(Sea_2_Effect)+',');
      SQL.Add('Sea_3_Effect = '+FloatToStr(Sea_3_Effect)+',');
      SQL.Add('Sea_4_Effect = '+FloatToStr(Sea_4_Effect)+',');
      SQL.Add('Sea_5_Effect = '+FloatToStr(Sea_5_Effect)+',');
      SQL.Add('Sea_6_Effect = '+FloatToStr(Sea_6_Effect)+',');
      SQL.Add('Sea_7_Effect = '+FloatToStr(Sea_7_Effect)+',');
      SQL.Add('Sea_8_Effect = '+FloatToStr(Sea_8_Effect)+',');
      SQL.Add('Sea_9_Effect = '+FloatToStr(Sea_9_Effect));
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  id + ') AND (Sonar_Frequency = ' + freq + ')' );
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.InsertGame_Sea_On_Sonar(const id,freq: string;
  var rec: TGame_Sea_On_Sonar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Sea_On_Sonar  ');
      SQL.Add('(Defaults_Index,Sonar_Frequency,Sea_0_Effect,Sea_1_Effect,Sea_2_Effect,');
      SQL.Add('Sea_3_Effect,Sea_4_Effect,Sea_5_Effect,Sea_6_Effect,Sea_7_Effect,');
      SQL.Add('Sea_8_Effect,Sea_9_Effect)  ');
      SQL.Add('VALUES ( ' );
      SQL.Add(id+',');
      SQL.Add(freq+',');
      SQL.Add(FloatToStr(Sea_0_Effect)+',');
      SQL.Add(FloatToStr(Sea_1_Effect)+',');
      SQL.Add(FloatToStr(Sea_2_Effect)+',');
      SQL.Add(FloatToStr(Sea_3_Effect)+',');
      SQL.Add(FloatToStr(Sea_4_Effect)+',');
      SQL.Add(FloatToStr(Sea_5_Effect)+',');
      SQL.Add(FloatToStr(Sea_6_Effect)+',');
      SQL.Add(FloatToStr(Sea_7_Effect)+',');
      SQL.Add(FloatToStr(Sea_8_Effect)+',');
      SQL.Add(FloatToStr(Sea_9_Effect)+')');
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Sea_On_Sonar(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Sea_On_Sonar  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.GetShipNoiseOnSonar(var ship: TShipNoiseOnSonarArray): boolean;
var
  i: Integer;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ2 do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Ship_Noise_On_Sonar ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      SetLength(ship, RecordCount);
      i := 0;

      with ship[i] do
      begin
        Sonar_Frequency := FieldByName('Sonar_Frequency').AsSingle;
        Distant_Ship_Effect := FieldByName('Distant_Ship_Effect').AsSingle;
        Light_Ship_Effect := FieldByName('Light_Ship_Effect').AsSingle;
        Medium_Ship_Effect := FieldByName('Medium_Ship_Effect').AsSingle;
        Heavy_Ship_Effect := FieldByName('Heavy_Ship_Effect').AsSingle;
      end;
      Next;
      Inc(i);
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetShip_Noise_On_Sonar(var aRec: TList): boolean;
var
  rec: TGame_Ship_On_Sonar;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Ship_Noise_On_Sonar ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TGame_Ship_On_Sonar.Create;

        with rec.FData do
        begin
          Sonar_Frequency     := FieldByName('Sonar_Frequency').AsSingle;
          Distant_Ship_Effect := FieldByName('Distant_Ship_Effect').AsSingle;
          Light_Ship_Effect   := FieldByName('Light_Ship_Effect').AsSingle;
          Medium_Ship_Effect  := FieldByName('Medium_Ship_Effect').AsSingle;
          Heavy_Ship_Effect   := FieldByName('Heavy_Ship_Effect').AsSingle;
        end;

        aRec.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateShipNoiseOnSonar(rec: TShip_Noise_On_Sonar;
  id: string): Integer;
begin
  Result := 0;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Ship_Noise_On_Sonar  ');
      SQL.Add('SET ');
      SQL.Add('Distant_Ship_Effect = ' + FloatToStr(Distant_Ship_Effect) + ',');
      SQL.Add('Light_Ship_Effect = ' + FloatToStr(Light_Ship_Effect) + ',');
      SQL.Add('Medium_Ship_Effect = ' + FloatToStr(Medium_Ship_Effect) + ',');
      SQL.Add('Heavy_Ship_Effect = ' + FloatToStr(Heavy_Ship_Effect));
    end;
    SQL.Add('WHERE (Sonar_Frequency = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertShipNoiseOnSonar(rec: TShip_Noise_On_Sonar): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Ship_Noise_On_Sonar] ON;');
      ExecSQL;
      SQL.Clear;  }
      SQL.Add('INSERT INTO Ship_Noise_On_Sonar ');
      SQL.Add(
        '(Sonar_Frequency,Distant_Ship_Effect,Light_Ship_Effect,Medium_Ship_Effect,Heavy_Ship_Effect)');
      SQL.Add(' VALUES (');
      SQL.Add(FloatToStr(Sonar_Frequency) + ',');
      SQL.Add(FloatToStr(Distant_Ship_Effect) + ',');
      SQL.Add(FloatToStr(Light_Ship_Effect) + ',');
      SQL.Add(FloatToStr(Medium_Ship_Effect) + ',');
      SQL.Add(FloatToStr(Heavy_Ship_Effect) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllGame_Ship_On_Sonar(const id: integer;
      var aRec: TList): Integer;
var
    rec: TGame_Ship_On_Sonar;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Game_Ship_On_Sonar ' );
    SQL.Add('WHERE (Defaults_Index = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TGame_Ship_On_Sonar.Create;
        with rec.FData do begin
          Defaults_Index        := FieldByName('Defaults_Index').AsInteger;
          Sonar_Frequency       := FieldByName('Sonar_Frequency').AsSingle;
          Distant_Ship_Effect   := FieldByName('Distant_Ship_Effect').AsSingle;
          Light_Ship_Effect     := FieldByName('Light_Ship_Effect').AsSingle;
          Medium_Ship_Effect    := FieldByName('Medium_Ship_Effect').AsSingle;
          Heavy_Ship_Effect     := FieldByName('Heavy_Ship_Effect').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateGame_Ship_On_Sonar(const id,freq: string;
  var rec: TGame_Ship_On_Sonar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Game_Ship_On_Sonar  ');
      SQL.Add('SET ' );
      SQL.Add('Distant_Ship_Effect = '+FloatToStr(Distant_Ship_Effect)+',');
      SQL.Add('Light_Ship_Effect = '+FloatToStr(Light_Ship_Effect)+',');
      SQL.Add('Medium_Ship_Effect = '+FloatToStr(Medium_Ship_Effect)+',');
      SQL.Add('Heavy_Ship_Effect = '+FloatToStr(Heavy_Ship_Effect)+',');
    end;
    SQL.Add('WHERE (Defaults_Index = ' +  id + ') AND (Sonar_Frequency = ' + freq + ')' );
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.InsertGame_Ship_On_Sonar(const id,freq: string;
  var rec: TGame_Ship_On_Sonar): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Game_Ship_On_Sonar  ');
      SQL.Add('(Defaults_Index,Sonar_Frequency,Distant_Ship_Effect,Light_Ship_Effect,');
      SQL.Add('Medium_Ship_Effect,Heavy_Ship_Effect)  ');
      SQL.Add('VALUES ( ' );
      SQL.Add(id+',');
      SQL.Add(freq+',');
      SQL.Add(FloatToStr(Distant_Ship_Effect)+',');
      SQL.Add(FloatToStr(Light_Ship_Effect)+',');
      SQL.Add(FloatToStr(Medium_Ship_Effect)+',');
      SQL.Add(FloatToStr(Heavy_Ship_Effect)+')');
    end;
    ExecSQL;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.DeleteGame_Ship_On_Sonar(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Game_Ship_On_Sonar  ');
      SQL.Add('WHERE (Defaults_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.GetOperatingMode(var operate: TString): boolean;
var
  i: Integer;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ2 do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Operating_Mode ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      SetLength(operate, RecordCount);
      i := 0;
      while not ZQ2.Eof do
      begin
        operate[i] := FieldByName('Operating_Mode_Name').AsString;
        Inc(i);
        Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetLinkDefinition(const id: Integer; var aRec: TList): Integer;
var
  linkDef: TLink;
begin
  result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Link_Definition ');
    SQL.Add('WHERE Deployment_Index = ' + IntToStr(id));
    Open;

    result := RecordCount;

    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        linkDef := TLink.Create;

        with linkDef.FLink_Def do
        begin
          Link_Index := FieldByName('Link_Index').AsInteger;
          Link_Identifier_Num := FieldByName('Link_Identifier_Num').AsInteger;
          Link_Force := FieldByName('Link_Force').AsInteger;
          Link_Controller := FieldByName('Link_Controller').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
          Trans_Mode := FieldByName('Trans_Mode').AsInteger;
          Link_Identifier := FieldByName('Link_Identifier').AsString;
        end;

        aRec.Add(linkDef);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetLinkParticipant(lPart: TLink; pfList: TList): Integer;
var
  i, pi_Index: Integer;
  pi: TPlatform_Instance;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Link_Participant a JOIN Platform_Instance b ');
    SQL.Add('ON a.Participating_Unit = b.Platform_Instance_Index ');
    SQL.Add('WHERE (a.Link_Index = ' + IntToStr(lPart.FLink_Def.Link_Index)
        + ')');

    Open;
    // where Link_index lPart.FLink_Def.Link_Index;
    while not ZQ.Eof do
    begin

      pi_Index := ZQ.FieldByName('Platform_Instance_Index').AsInteger;

      for i := 0 to pfList.Count - 1 do
      begin
        pi := pfList[i];
        if pi.FData.Platform_Instance_Index = pi_Index then
          lPart.Participant.Add(pi);
      end;
      ZQ.Next;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateLink_Def(rec: TLink; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FLink_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Link_Definition ');
      SQL.Add('SET ');
      SQL.Add('Link_Identifier=''' + Link_Identifier + ''',');
      SQL.Add('Link_Identifier_Num=' + IntToStr(Link_Identifier_Num) + ',');
      SQL.Add('Link_Force=' + IntToStr(Link_Force) + ',');
      SQL.Add('Link_Controller=' + IntToStr(Link_Controller) + ',');
      SQL.Add('Deployment_Index=' + IntToStr(Deployment_Index) + ',');
      SQL.Add('Trans_Mode=' + IntToStr(Trans_Mode));
    end;

    SQL.Add(' WHERE (Link_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertLink_Def(rec: TLink): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FLink_Def do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Link_Definition] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Link_Definition ');
      SQL.Add(
        '(Link_Index,Link_Identifier,Link_Identifier_Num,Link_Force,Link_Controller,Deployment_Index,Trans_Mode)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Link_Index) + ',');
      SQL.Add('''' + Link_Identifier + ''',');
      SQL.Add(IntToStr(Link_Identifier_Num) + ',');
      SQL.Add(IntToStr(Link_Force) + ',');
      SQL.Add(IntToStr(Link_Controller) + ',');
      SQL.Add(IntToStr(Deployment_Index) + ',');
      SQL.Add(IntToStr(Trans_Mode) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateLink_Part(rec: TLink; link_id: string;
  deploy_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FLink_Part do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Link_Participant ');
      SQL.Add('SET ');
      SQL.Add('Participating_Unit =' + IntToStr(Participating_Unit) + ',');
      SQL.Add('Deployment_Index =' + IntToStr(Deployment_Index) + ',');
      SQL.Add('PU_Octal_Code =' + IntToStr(PU_Octal_Code));
    end;

    SQL.Add(' WHERE Link_Index = ' + link_id + ' AND ');
    SQL.Add('Deployment_Index=' + deploy_id);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertLink_Part(rec: TLink): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FLink_Part do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Link_Participant] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Link_Participant ');
      SQL.Add('(Link_Index,Participating_Unit,Deployment_Index,PU_Octal_Code)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Link_Index) + ',');
      SQL.Add(IntToStr(Participating_Unit) + ',');
      SQL.Add(IntToStr(Deployment_Index) + ',');
      SQL.Add(IntToStr(PU_Octal_Code) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteLink_Part(link_id: string; deploy_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Link_Participant ');
    SQL.Add('WHERE Link_Index = ' + link_id + ' AND ');
    SQL.Add('Deployment_Index=' + deploy_id);
    ExecSQL;

  end;
end;

function TdmTTT.deletePlatformLogistics(id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Logistics ');
    SQL.Add('WHERE Platform_Instance_Index = ' + inttostr(id));
    ExecSQL;

  end;
end;

function TdmTTT.deleteAllLink_Part(deploy_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Link_Participant ');
    SQL.Add('WHERE Deployment_Index=' + deploy_id);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteAllLink_Def(deploy_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Link_Definition ');
    SQL.Add('WHERE Deployment_Index=' + deploy_id);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetFormationDefinition(const id: Integer;
  var aRec: TList): Integer;
var
  formationDef: TFormation;
begin
  result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Formation_Definition a LEFT JOIN Platform_Instance b ');
    SQL.Add('ON a.Formation_Leader = b.Platform_Instance_Index ');
    SQL.Add('WHERE a.Deployment_Index = ' + IntToStr(id));
    Open;

    result := RecordCount;

    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        formationDef := TFormation.Create;

        with formationDef.FFormation_Def do
        begin
          Formation_Index := FieldByName('Formation_Index').AsInteger;
          Formation_Identifier := FieldByName('Formation_Identifier').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Formation_Leader := FieldByName('Formation_Leader').AsInteger;
          Angle_Type := FieldByName('Angle_Type').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
        end;

        with formationDef.FPlatform_Instance do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
        end;

        aRec.Add(formationDef);
        ZQ.Next;

      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteFormationDefinition_ByLeader(const id: string): Integer;
var
  aRec: TList;
  formationDef: TFormation;
  I: Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Formation_Definition ');
    SQL.Add('WHERE Formation_Leader = ' + id);
    Open;

    result := RecordCount;

    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      aRec := TList.Create;

      while not ZQ.Eof do
      begin
        formationDef := TFormation.Create;

        with formationDef.FFormation_Def do
        begin
          Formation_Index := FieldByName('Formation_Index').AsInteger;
          Formation_Identifier := FieldByName('Formation_Identifier').AsString;
          Force_Designation := FieldByName('Force_Designation').AsInteger;
          Formation_Leader := FieldByName('Formation_Leader').AsInteger;
          Angle_Type := FieldByName('Angle_Type').AsInteger;
          Deployment_Index := FieldByName('Deployment_Index').AsInteger;
        end;

        aRec.Add(formationDef);
        ZQ.Next;

      end;

      for I := 0 to aRec.Count - 1 do
      begin
        deleteAllFormation_Assign(IntToStr(TFormation(aRec[I]).FFormation_Def.Formation_Index));
      end;

      SQL.Clear;
      SQL.Add('DELETE FROM Formation_Definition ');
      SQL.Add('WHERE Formation_Leader = ' + id );
      ExecSQL;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetFormation_ByPlatform(const id: string): Integer;
var

  formationDef: TFormation;

begin
  result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Formation_Definition ');
    SQL.Add('WHERE Formation_Leader = ' + id);
    Open;

    result := RecordCount;

    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Formation_Assignment ');
    SQL.Add('WHERE Platform_Instance_Index = ' + id);
    Open;

    result := result + RecordCount;

  end;
end;

// --------------------------------------------------------------------

function TdmTTT.GetFontNameTaktis(var pList: tlist): Boolean;
var
  FFontTaktis : TFontTaktis;
begin
  Result := True;
  if not ZConn.Connected then
    Exit;
  with  ZQ do
  begin
    Close;
    SQL.Clear;
    sql.Add('SELECT * ');
    SQL.Add('FROM Font_Taktis');
    Open;
      if not ZQ.IsEmpty then
    begin
      if not Assigned(pList) then
        pList := TList.Create
      else
        pList.Clear;

      while not ZQ.Eof do
      begin
        FFontTaktis := TFontTaktis.Create;
        with FFontTaktis.fdata do
        begin
          FONT_ID := FieldByName('Plotting_Index').AsInteger;
          FONT_NAME := FieldByName('Plotting_Name').AsString;
          FONT_INDEX := FieldByName('Plotting_Type').AsInteger;
          KETERANGAN := FieldByName('Plotting_Group').AsString;
        end;

        pList.Add(FFontTaktis);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetFormationAssignment(var fAssign: TFormation;
  var pfList: TList): Integer;
var
  pi_Index: Integer;
  pi: TPlatform_Instance;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Formation_Assignment a JOIN Platform_Instance b ');
    SQL.Add('ON a.Platform_Instance_Index = b.Platform_Instance_Index ');
    SQL.Add('WHERE (a.Formation_Index = ' + IntToStr
        (fAssign.FFormation_Def.Formation_Index) + ')');

    Open;
    // where Link_index lPart.FLink_Def.Link_Index;

    if not ZQ.IsEmpty then
    begin
      if not Assigned(pfList) then
        pfList := TList.Create
      else
        pfList.Clear;

      while not ZQ.Eof do
      begin
        fAssign := TFormation.Create;
        pi_Index := ZQ.FieldByName('Platform_Instance_Index').AsInteger;
        // ambil datanya
        with fAssign.FForm_Assign do
        begin
          Formation_Index := FieldByName('Formation_Index').AsInteger;
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Angle_Offset := FieldByName('Angle_Offset').AsSingle;
          Range_from_Leader := FieldByName('Range_from_Leader').AsSingle;
          Altitude := FieldByName('Altitude').AsSingle;
        end;

        with fAssign.FPlatform_Instance do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
        end;

        pfList.Add(fAssign);
        {
          for i := 0 to pfList.Count - 1 do
          begin
          pi := pfList[i];
          if pi.FData.Platform_Instance_Index = pi_Index then
          fAssign.Assignment.Add(pi);
          end;
          }
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------


function TdmTTT.GetFormation_Assignment(const id: Integer;
  var pfList: TList): Integer;
var
  pi_Index: Integer;
  fAssign: TFormation;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Formation_Assignment a JOIN Platform_Instance b ');
    SQL.Add('ON a.Platform_Instance_Index = b.Platform_Instance_Index ');
    SQL.Add('WHERE (a.Formation_Index = ' + IntToStr(id) + ')');

    Open;
    // where Link_index lPart.FLink_Def.Link_Index;

    if not ZQ.IsEmpty then
    begin
      if not Assigned(pfList) then
        pfList := TList.Create
      else
//        pfList.Clear;

      while not ZQ.Eof do
      begin
        fAssign := TFormation.Create;

        with fAssign.FForm_Assign do
        begin
          Formation_Index := FieldByName('Formation_Index').AsInteger;
          Platform_Instance_Index := FieldByName('Platform_Instance_Index')
            .AsInteger;
          Angle_Offset := FieldByName('Angle_Offset').AsSingle;
          Range_from_Leader := FieldByName('Range_from_Leader').AsSingle;
          Altitude := FieldByName('Altitude').AsSingle;
        end;

        with fAssign.FPlatform_Instance do
        begin
          Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
          Instance_Name := FieldByName('Instance_Name').AsString;
        end;

        pfList.Add(fAssign);
        {
          for i := 0 to pfList.Count - 1 do
          begin
          pi := pfList[i];
          if pi.FData.Platform_Instance_Index = pi_Index then
          fAssign.Assignment.Add(pi);
          end;
          }
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateFormation_Def(rec: TFormation; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FFormation_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Formation_Definition ');
      SQL.Add('SET ');
      SQL.Add('Formation_Identifier =''' + Formation_Identifier + ''',');
      // SQL.Add('Formation_Index ='+ IntToStr(Formation_Index)+',' );
      SQL.Add('Force_Designation =' + IntToStr(Force_Designation) + ',');
      SQL.Add('Formation_Leader =' + IntToStr(Formation_Leader) + ',');
      SQL.Add('Angle_Type=' + IntToStr(Angle_Type));

      SQL.Add(' WHERE (Deployment_Index = ' + id + 'AND Formation_Index = ' +
          IntToStr(Formation_Index) + ')');
    end;
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteFormation_Def(id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Formation_Definition ');
    SQL.Add('WHERE Formation_Index = ' + id );
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------
function TdmTTT.insertFormation_Def(rec: TFormation): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FFormation_Def do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Formation_Definition ');
      SQL.Add(
        '(Deployment_Index,Formation_Identifier,Force_Designation,Formation_Leader,Angle_Type)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Deployment_Index) + ',');
      SQL.Add('''' + Formation_Identifier + ''',');
      SQL.Add(IntToStr(Force_Designation) + ',');
      SQL.Add(IntToStr(Formation_Leader) + ',');
      SQL.Add(IntToStr(Angle_Type) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Formation_Index FROM Formation_Definition ');
      SQL.Add('WHERE Formation_Identifier = ' + quotedStr(Formation_Identifier));
      SQL.Add(' AND Deployment_Index = ' + IntToStr(Deployment_Index));
      Open;

      Formation_Index := FieldByName('Formation_Index').AsInteger;

    end;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.updateFormation_Assign(rec: TFormation; form_id: string;
  pi_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FForm_Assign do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Formation_Assignment ');
      SQL.Add('SET ');
      SQL.Add('Angle_Offset =' + FloatToStr(Angle_Offset) + ',');
      SQL.Add('Range_from_Leader =' + FloatToStr(Range_from_Leader) + ',');
      SQL.Add('Altitude =' + FloatToStr(Altitude));
    end;

    SQL.Add(' WHERE Formation_Index = ' + form_id + ' AND ');
    SQL.Add('Platform_Instance_Index = ' + pi_id);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertFormation_Assign(rec: TFormation): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FForm_Assign do
    begin
      Close;
      SQL.Clear;
      { SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Formation_Assignment] ON;');
        ExecSQL;
        SQL.Clear; }
      SQL.Add('INSERT INTO Formation_Assignment ');
      SQL.Add(
        '(Platform_Instance_Index,Formation_Index,Angle_Offset,Range_from_Leader,Altitude)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Platform_Instance_Index) + ',');
      SQL.Add(IntToStr(Formation_Index) + ',');
      SQL.Add(FloatToStr(Angle_Offset) + ',');
      SQL.Add(FloatToStr(Range_from_Leader) + ',');
      SQL.Add(FloatToStr(Altitude) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteFormation_Assign(form_id: string; pi_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Formation_Assignment ');
    SQL.Add('WHERE Formation_Index = ' + form_id + ' AND ');
    SQL.Add('Platform_Instance_Index = ' + pi_id);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteAllFormation_Assign(form_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Formation_Assignment ');
    SQL.Add('WHERE Formation_Index = ' + form_id );
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteFormation_AssignByPI_Index(PI_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Formation_Assignment ');
    SQL.Add('WHERE Platform_Instance_Index = ' + PI_id );
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetAll_Brigade(var pList: TList): Boolean;
var
  rec: TPersonel;
begin
  result := False;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROM Personel_Brigade');


    Open;
    Result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList := TList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPersonel.Create;
        rec.Id := FieldByName('Brigade_Index').AsInteger;
        rec.Identifier := FieldByName('Brigade_Identifier').AsString;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAll_Resource_Plotting_Mapping(const id: Integer;
  var recList: TList): Boolean;
var
  rec: TResource_Allocation;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Resource_Plotting_Mapping a JOIN Plotting_Definition b');
    SQL.Add('on a.Plotting_Index = b.Plotting_Index');
    SQL.Add('WHERE Resource_Alloc_Index = ' + IntToStr(id));// + ' AND ');
//    SQL.Add('Force_Designation = '+ IntToStr(force));
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;
      if not Assigned(recList) then
        recList := TList.Create
      else
        recList.Clear;

      while not ZQ.Eof do
      begin
        rec := TResource_Allocation.Create;
        with rec.FPlotting do
        begin
          Resource_Alloc_Index := FieldByName('Resource_Alloc_Index').AsInteger;
          Plotting_Index := FieldByName('Plotting_Index').AsInteger;
          Plotting_Name := FieldByName('Plotting_Name').AsString;
          Date := FieldByName('Date').AsFloat;
          Force := FieldByName('Force').AsInteger;

        end;
        recList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetBase_Location(const id: Integer; var pList: TList;
  var rec: TBase_Location): Boolean;
begin
  Result := False;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQl.Add('SELECT * FROM Base_Location ');
    SQL.Add('ORDER BY Base_Identifier ');

    Open;

    Result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList := TList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TBase_Location.Create;
        with rec.FData do
        begin
          Base_Index := FieldByName('Base_Index').AsInteger;
          Base_Identifier := FieldByName('Base_Identifier').AsString;
          Longitude := FieldByName('Longitude').AsFloat;
          Latitude := FieldByName('Latitude').AsFloat;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetBatalyon(const id: Integer; var pList: TList): Boolean;
var
  rec: TPersonel;
begin
  result := False;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT a1.Brigade_Index, a1.Brigade_Identifier, a1.last_updated,');//dng
    SQL.Add('b2.BataLyon_Index, b2.Batalyon_Identifier ');
    SQL.Add('FROM Personel_Brigade a1 JOIN Personel_Batalyon b2 ON ');
    SQL.Add('a1.Brigade_Index = b2.Brigade_Index ');
    SQL.Add('WHERE a1.Brigade_Index = ' + IntToStr(id));

    Open;
    Result := RecordCount > 0;
    if not Assigned(pList) then
      pList := TList.Create
    else
      pList.Clear;

    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TPersonel.Create;
        TBrigade(rec).Id := FieldByName('Brigade_Index').AsInteger;
        TBrigade(rec).Identifier := FieldByName('Brigade_Identifier').AsString;
        TBrigade(rec).last_updated := FieldByName('last_updated').AsDateTime; //dng
        TBatalyon(rec).Id := FieldByName('Batalyon_Index').AsInteger;
        TBatalyon(rec).Identifier := FieldByName('Batalyon_Identifier').AsString;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetDefaultDefinition(var def: TDefaultDef): boolean;
var
  i: Integer;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ2 do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Default_Definition ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      SetLength(def, RecordCount);
      i := 0;

      with def[i] do
      begin
        Init_AOP := FieldByName('Init_AOP').AsInteger;
        AOP_Decrease_Rate := FieldByName('AOP_Decrease_Rate').AsSingle;
        Sono_Num_2_Initiate := FieldByName('Sono_Num_2_Initiate').AsInteger;
        Trans_Range_2_Air := FieldByName('Trans_Range_2_Air').AsSingle;
        Trans_Range_2_Sur := FieldByName('Trans_Range_2_Sur').AsSingle;
        Init_AOP_Modifier := FieldByName('Init_AOP_Modifier').AsSingle;
        Visual_Detect_Range := FieldByName('Visual_Detect_Range').AsSingle;
        Known_Cross_Section := FieldByName('Known_Cross_Section').AsSingle;
        Max_Visual_Range := FieldByName('Max_Visual_Range').AsSingle;
        EO_Detection_Factor := FieldByName('EO_Detection_Factor').AsSingle;
        Visual_Detection_Factor := FieldByName('Visual_Detection_Factor')
          .AsSingle;
        EO_Ident_Factor := FieldByName('EO_Ident_Factor').AsSingle;
        Visual_Ident_Factor := FieldByName('Visual_Ident_Factor').AsSingle;
        Sine_Period_Distance := FieldByName('Sine_Period_Distance').AsSingle;
        Sine_Period_Amplitude := FieldByName('Sine_Period_Amplitude').AsSingle;
        Short_Period_Distance := FieldByName('Short_Period_Distance').AsSingle;
        Short_Period_Amplitude := FieldByName('Short_Period_Amplitude')
          .AsSingle;
        Long_Period_Distance := FieldByName('Long_Period_Distance').AsSingle;
        Long_Period_Amplitude := FieldByName('Long_Period_Amplitude').AsSingle;
        Very_Period_Distance := FieldByName('Very_Period_Distance').AsSingle;
        Very_Period_Amplitude := FieldByName('Very_Period_Amplitude').AsSingle;
        Air_Lost_Time := FieldByName('Air_Lost_Time').AsInteger;
        Sur_Lost_Time := FieldByName('Sur_Lost_Time').AsInteger;
        Sub_Lost_Time := FieldByName('Sub_Lost_Time').AsInteger;
        ESM_Bearing_Lost_Time := FieldByName('ESM_Bearing_Lost_Time').AsInteger;
        Sonar_Bearing_Lost_Time := FieldByName('Sonar_Bearing_Lost_Time')
          .AsInteger;
        Stale_Air_Time := FieldByName('Stale_Air_Time').AsInteger;
        Stale_Sur_Time := FieldByName('Stale_Sur_Time').AsInteger;
        Stale_Sub_Time := FieldByName('Stale_Sub_Time').AsInteger;
        Stale_ESM_Bearing_Time := FieldByName('Stale_ESM_Bearing_Time')
          .AsInteger;
        Stale_Sonar_Bearing_Time := FieldByName('Stale_Sonar_Bearing_Time')
          .AsInteger;
        POD_Check_Time := FieldByName('POD_Check_Time').AsInteger;
        TMA_Range_Rate := FieldByName('TMA_Range_Rate').AsSingle;
        Frequency_Identity_Weighting := FieldByName
          ('Frequency_Identity_Weighting').AsSingle;
        PRF_Identity_Weighting := FieldByName('PRF_Identity_Weighting')
          .AsSingle;
        Pulsewidth_Identity_Weighting := FieldByName
          ('Pulsewidth_Identity_Weighting').AsSingle;
        Scan_Period_Identity_Weighting := FieldByName
          ('Scan_Period_Identity_Weighting').AsSingle;
        Crew_Eff_Heading_Error := FieldByName('Crew_Eff_Heading_Error')
          .AsSingle;
        Crew_Eff_Speed_Error := FieldByName('Crew_Eff_Speed_Error').AsSingle;
        TMA_Relative_Bearing_Rate := FieldByName('TMA_Relative_Bearing_Rate')
          .AsSingle;
        Passive_Sonar_Max_Course_Error := FieldByName
          ('Passive_Sonar_Max_Course_Error').AsSingle;
        Passive_Sonar_Max_Speed_Error := FieldByName
          ('Passive_Sonar_Max_Speed_Error').AsSingle;
        ESM_Error_Corr_Rate := FieldByName('ESM_Error_Corr_Rate').AsSingle;
        Chaff_Altitude_Threshold := FieldByName('Chaff_Altitude_Threshold')
          .AsSingle;
        MHS_Flash_Delay_Time := FieldByName('MHS_Flash_Delay_Time').AsSingle;
        MHS_Immed_Delay_Time := FieldByName('MHS_Immed_Delay_Time').AsSingle;
        MHS_Priority_Delay_Time := FieldByName('MHS_Priority_Delay_Time')
          .AsSingle;
        MHS_Routine_Delay_Time := FieldByName('MHS_Routine_Delay_Time')
          .AsSingle;
        Max_UWT_Range := FieldByName('Max_UWT_Range').AsSingle;
        Max_HF_Detect_Range := FieldByName('Max_HF_Detect_Range').AsSingle;
        Max_UHF_Detect_Range := FieldByName('Max_UHF_Detect_Range').AsSingle;
        Max_IFF_Range := FieldByName('Max_IFF_Range').AsSingle;
        Track_History_Air_Sample_Rate := FieldByName
          ('Track_History_Air_Sample_Rate').AsInteger;
        Track_History_Air_Max_Points := FieldByName
          ('Track_History_Air_Max_Points').AsInteger;
        Track_History_Sample_Rate := FieldByName('Track_History_Sample_Rate')
          .AsInteger;
        Track_History_Max_Points := FieldByName('Track_History_Max_Points')
          .AsInteger;
        Auto_Gun_Interception_Range := FieldByName
          ('Auto_Gun_Interception_Range').AsSingle;
        Auto_Gun_Threshold_Speed := FieldByName('Auto_Gun_Threshold_Speed')
          .AsSingle;
        Clutter_Reduction_Scale := FieldByName('Clutter_Reduction_Scale')
          .AsSingle;
        Jam_Break_Lock_Time_Interval := FieldByName
          ('Jam_Break_Lock_Time_Interval').AsInteger;
        Missile_Reacquisition_Time := FieldByName('Missile_Reacquisition_Time')
          .AsInteger;
        Seduction_Bloom_Altitude := FieldByName('Seduction_Bloom_Altitude')
          .AsInteger;
        Seduction_Bloom_Range := FieldByName('Seduction_Bloom_Range').AsSingle;
        HF_Datalink_MHS_Trans_Freq := FieldByName('HF_Datalink_MHS_Trans_Freq')
          .AsSingle;
        UHF_Datalink_MHS_Trans_Freq := FieldByName
          ('UHF_Datalink_MHS_Trans_Freq').AsSingle;
        Max_Num_Radar_Classes := FieldByName('Max_Num_Radar_Classes').AsInteger;
        Max_Num_Sonar_Classes := FieldByName('Max_Num_Sonar_Classes').AsInteger;
        Max_Num_Sonobuoy_Classes := FieldByName('Max_Num_Sonobuoy_Classes')
          .AsInteger;
        Max_Num_EO_Classes := FieldByName('Max_Num_EO_Classes').AsInteger;
        Max_Num_ESM_Classes := FieldByName('Max_Num_ESM_Classes').AsInteger;
        Max_Num_MAD_Classes := FieldByName('Max_Num_MAD_Classes').AsInteger;
        Max_Num_Fitted_Weap_Classes := FieldByName
          ('Max_Num_Fitted_Weap_Classes')
          .AsInteger;
        Max_Num_Point_Effect_Classes := FieldByName
          ('Max_Num_Point_Effect_Classes').AsInteger;
        HAFO_Min_Range := FieldByName('HAFO_Min_Range').AsSingle;
        HAFO_Max_Range := FieldByName('HAFO_Max_Range').AsSingle;
        Engage_Guide_Stale_Target_Time := FieldByName
          ('Engage_Guide_Stale_Target_Time').AsInteger;
        Outrun_Guide_Stale_Target_Time := FieldByName
          ('Outrun_Guide_Stale_Target_Time').AsInteger;
        Shadow_Guide_Stale_Target_Time := FieldByName
          ('Shadow_Guide_Stale_Target_Time').AsInteger;
        Sonobuoy_Air_Deceleration := FieldByName('Sonobuoy_Air_Deceleration')
          .AsSingle;
        Sonobuoy_Air_Descent_Rate := FieldByName('Sonobuoy_Air_Descent_Rate')
          .AsSingle;
        Depth_Charge_Air_Deceleration := FieldByName
          ('Depth_Charge_Air_Deceleration').AsSingle;
        Depth_Charge_Air_Descent_Rate := FieldByName
          ('Depth_Charge_Air_Descent_Rate').AsSingle;
        Missile_Sea_Check_Interval := FieldByName('Missile_Sea_Check_Interval')
          .AsInteger;
      end;
      Next;
      Inc(i);
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.GetDefaultIFFMode(var iff: TIFFMode): boolean;
var
  i: Integer;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ2 do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Default_IFF_Mode_Code ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      SetLength(iff, RecordCount);
      i := 0;

      with iff[i] do
      begin
        Force_Designation := FieldByName('Force_Designation').AsInteger;
        IFF_Device_Type := FieldByName('IFF_Device_Type').AsInteger;
        IFF_Mode := FieldByName('IFF_Mode').AsInteger;
        IFF_Code := FieldByName('IFF_Code').AsInteger;
        Mode_State := FieldByName('Mode_State').AsInteger;
      end;
      Next;
      Inc(i);
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetGeoAreaDefinition_byGA(const id: Integer;
  var aRec: TList): Integer;
var
  geoDef: TGeo_Area_Def;
  geoPoint: TGeo_Area_Point;
  condEvent: TConditional_Event;

begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Geo_Area_Definition ');
    SQL.Add('WHERE Game_Area_Index = ' + IntToStr(id));
    Open;

    result := RecordCount;
    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        geoDef := TGeo_Area_Def.Create;

        with geoDef.FData do
        begin
          Geo_Area_Index := FieldByName('Geo_Area_Index').AsInteger;
          Geo_Area_Identifier := FieldByName('Geo_Area_Identifier').AsString;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        end;

        aRec.Add(geoDef);
        ZQ.Next;
      end;
    end;
  end;
end;


// ------------------------------------------------------------------------------

function TdmTTT.GetGeoAreaDefinition(const id: Integer;
  var aRec: TList): Integer;
var
  geoDef: TGeo_Area_Def;
  geoPoint: TGeo_Area_Point;
  condEvent: TConditional_Event;
  i, J: Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Geo_Area_Definition ');
    SQL.Add('WHERE Game_Area_Index = ' + IntToStr(id));
    Open;

    result := RecordCount;
    if not ZQ.IsEmpty then
    begin
      ZQ.First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        geoDef := TGeo_Area_Def.Create;

        with geoDef.FData do
        begin
          Geo_Area_Index := FieldByName('Geo_Area_Index').AsInteger;
          Geo_Area_Identifier := FieldByName('Geo_Area_Identifier').AsString;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        end;

        aRec.Add(geoDef);
        ZQ.Next;
      end;

      for i := 0 to aRec.Count - 1 do
      begin
        geoDef := aRec.Items[i];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Geo_Area_Point ');
        SQL.Add('WHERE Geo_Area_Index =' + IntToStr(geoDef.FData.Geo_Area_Index)
          );
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          geoPoint := TGeo_Area_Point.Create;

          with geoPoint.FData do
          begin
            Geo_Area_Index := FieldByName('Geo_Area_Index').AsInteger;
            Point_Number := FieldByName('Point_Number').AsInteger;
            Latitude := FieldByName('Latitude').AsFloat;
            Longitude := FieldByName('Longitude').AsFloat;
            X_Position := FieldByName('X_Position').AsSingle;
            Y_Position := FieldByName('Y_Position').AsSingle;
          end;

          geoDef.point.Add(geoPoint);
          ZQ.Next;
        end;
      end;

      for J := 0 to aRec.Count - 1 do
      begin
        geoDef := aRec.Items[J];
        Close;
        SQL.Add('SELECT * ');
        SQL.Add('FROM Conditional_Event_Definition ');
        SQL.Add('WHERE Geo_Area_Index =' + IntToStr(geoDef.FData.Geo_Area_Index)
          );
        Open;

        ZQ.First;

        while not ZQ.Eof do
        begin
          condEvent := TConditional_Event.Create;

          with condEvent.FData do
          begin
            Conditional_Event_Index := FieldByName('Conditional_Event_Index')
              .AsInteger;
            Conditional_Identifier := FieldByName('Conditional_Identifier')
              .AsString;
            Conditional_Event_Type := FieldByName('Conditional_Event_Type')
              .AsInteger;
            Response_Speed := FieldByName('Response_Speed').AsInteger;
            Response_Altitude := FieldByName('Response_Altitude').AsInteger;
            Response_Range := FieldByName('Response_Range').AsSingle;
            Cleared_2_Attack := FieldByName('Cleared_2_Attack').AsInteger;
            Check_Fuel := FieldByName('Check_Fuel').AsInteger;
            Fuel_Condition := FieldByName('Fuel_Condition').AsInteger;
            Fuel_Threshold := FieldByName('Fuel_Threshold').AsSingle;
            Check_Weapons := FieldByName('Check_Weapons').AsInteger;
            Weapons_Condition := FieldByName('Weapons_Condition').AsInteger;
            Weapons_Inventory := FieldByName('Weapons_Inventory').AsInteger;
            Check_Damage := FieldByName('Check_Damage').AsInteger;
            Damage_Condition := FieldByName('Damage_Condition').AsInteger;
            Current_Damage_State := FieldByName('Current_Damage_State')
              .AsSingle;
            Hit_By_Weapon := FieldByName('Hit_By_Weapon').AsInteger;
            Lock_By_FCR_or_Weap := FieldByName('Lock_By_FCR_or_Weap').AsInteger;
            Check_Target_Domain := FieldByName('Check_Target_Domain').AsInteger;
            Target_Plat_Domain := FieldByName('Target_Plat_Domain').AsInteger;
            Check_Target_Type := FieldByName('Check_Target_Type').AsInteger;
            Target_Plat_Type := FieldByName('Target_Plat_Type').AsInteger;
            Check_Target_Threat := FieldByName('Check_Target_Threat').AsInteger;
            Target_Plat_Threat_Class := FieldByName('Target_Plat_Threat_Class')
              .AsInteger;
            Check_Target_Duration := FieldByName('Check_Target_Duration')
              .AsInteger;
            Target_Duration_State := FieldByName('Target_Duration_State')
              .AsInteger;
            Target_Range_Duration := FieldByName('Target_Range_Duration')
              .AsInteger;
            Check_Target_Range := FieldByName('Check_Target_Range').AsInteger;
            Target_Range_Condition := FieldByName('Target_Range_Condition')
              .AsInteger;
            Target_Plat_Range := FieldByName('Target_Plat_Range').AsSingle;
            Check_Target_Delta := FieldByName('Check_Target_Delta').AsInteger;
            Target_Delta_Condition := FieldByName('Target_Delta_Condition')
              .AsInteger;
            Target_Plat_Altitude_Delta := FieldByName
              ('Target_Plat_Altitude_Delta').AsSingle;
            Check_Target_Altitude := FieldByName('Check_Target_Altitude')
              .AsInteger;
            Target_Altitude_Condition := FieldByName
              ('Target_Altitude_Condition')
              .AsInteger;
            Target_Platform_Altitude := FieldByName('Target_Platform_Altitude')
              .AsSingle;
            Check_Target_Speed := FieldByName('Check_Target_Speed').AsInteger;
            Target_Speed_Condition := FieldByName('Target_Speed_Condition')
              .AsInteger;
            Target_Platform_Speed := FieldByName('Target_Platform_Speed')
              .AsSingle;
            Check_Own_Position := FieldByName('Check_Own_Position').AsInteger;
            Own_In_Geo := FieldByName('Own_In_Geo').AsInteger;
            Check_Encountered_Position := FieldByName
              ('Check_Encountered_Position').AsInteger;
            Encountered_In_Geo := FieldByName('Encountered_In_Geo').AsInteger;
            Geo_Area_Index := FieldByName('Geo_Area_Index').AsInteger;
          end;

          geoDef.Event.Add(condEvent);
          ZQ.Next;
        end;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateGeo_Area_Def(rec: TGeo_Area_Def; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Geo_Area_Definition ');
      SQL.Add('SET ');
      SQL.Add('Geo_Area_Identifier =''' + Geo_Area_Identifier + ''',');
      SQL.Add('Game_Area_Index =' + IntToStr(Game_Area_Index));
    end;

    SQL.Add(' WHERE (Geo_Area_Index = ' + id + ')');
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertGeo_Area_Def(rec: TGeo_Area_Def): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Geo_Area_Definition] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Geo_Area_Definition ');
      SQL.Add('(Geo_Area_Index,Geo_Area_Identifier,Game_Area_Index)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Geo_Area_Index) + ',');
      SQL.Add('''' + Geo_Area_Identifier + ''',');
      SQL.Add(IntToStr(Game_Area_Index) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateGeo_Area_Point(rec: TGeo_Area_Point; id: string;
  point: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Geo_Area_Point ');
      SQL.Add('SET ');
      SQL.Add('Latitude =' + FloatToStr(Latitude) + ',');
      SQL.Add('Longitude =' + FloatToStr(Longitude) + ',');
      SQL.Add('X_Position =' + FloatToStr(X_Position) + ',');
      SQL.Add('Y_Position =' + FloatToStr(Y_Position));
    end;

    SQL.Add(' WHERE Geo_Area_Index = ' + id + ' AND ');
    SQL.Add('Point_Number = ' + point);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertGeo_Area_Point(rec: TGeo_Area_Point): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Geo_Area_Point] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Geo_Area_Point');
      SQL.Add(
        '(Geo_Area_Index,Point_Number,Latitude,Longitude,X_Position,Y_Position)'
        );
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Geo_Area_Index) + ',');
      SQL.Add(IntToStr(Point_Number) + ',');
      SQL.Add(FloatToStr(Latitude) + ',');
      SQL.Add(FloatToStr(Longitude) + ',');
      SQL.Add(FloatToStr(X_Position) + ',');
      SQL.Add(FloatToStr(Y_Position) + ')');
      ExecSQL;
    end;
  end;
end;

//------------------------------------------------------------------------------
function TdmTTT.InsertGlobal_Convergence_Zone(
  var rec: TGlobal_Convergence_Zone): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Global_Convergence_Zone');
      SQL.Add(
        '(Converge_Index,Game_Enviro_Index,Occurance_Range,Width,Signal_Reduction_Term,Increase_per_CZ,Max_Sonar_Depth)'
        );
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Converge_Index) + ',');
      SQL.Add(IntToStr(Game_Enviro_Index) + ',');
      SQL.Add(FloatToStr(Occurance_Range) + ',');
      SQL.Add(FloatToStr(Width) + ',');
      SQL.Add(FloatToStr(Signal_Reduction_Term) + ',');
      SQL.Add(FloatToStr(Increase_per_CZ) + ',');
      SQL.Add(FloatToStr(Max_Sonar_Depth) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.updateResourceGeo_Area_Map(rec: TResource_Geo_Area_Map;
  geo_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Resource_Geo_Area_Mapping ');
      SQL.Add('SET ');
      SQL.Add('Resource_Alloc_Index = ' + IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add('Geo_Area_Index =' + IntToStr(Geo_Area_Index) + ',');
      SQL.Add('Force_Designation =' + IntToStr(Force_Designation));
    end;

    SQL.Add(' WHERE Geo_Area_Instance_Index = ' + geo_id);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertResourceGeo_Area_Map(rec: TResource_Geo_Area_Map)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Resource_Geo_Area_Mapping');
      SQL.Add('(Resource_Alloc_Index,Geo_Area_Index,Force_Designation)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add(IntToStr(Geo_Area_Index) + ',');
      SQL.Add(IntToStr(Force_Designation) + ')');
      ExecSQL;
    end;
  end;
end;
// ------------------------------------------------------------------------------

function TdmTTT.insertResourceOverlay_Map(rec: TResource_Overlay_Mapping)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Resource_Overlay_Mapping');
      SQL.Add('(Resource_Alloc_Index,Overlay_Index,Force_Designation)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Resource_Alloc_Index) + ',');
      SQL.Add(IntToStr(Overlay_Index) + ',');
      SQL.Add(IntToStr(Force_Designation) + ')');
      ExecSQL;
    end;
  end;
end;
// ------------------------------------------------------------------------------

function TdmTTT.updateNote(rec: TNote_Storage; index: Integer; id: String): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Note_Storage ');
      SQL.Add('SET ');
      SQL.Add('Note_Type = ' + IntToStr(index) + ',');
      SQL.Add('Notes = ''' + Notes + '''');
      SQL.Add('WHERE ');
      case index of
        1:
          SQL.Add('Vehicle_Index = ' + id);
        2:
          SQL.Add('Missile_Index = ' + id);
        3:
          SQL.Add('Mine_Index = ' + id);
        4:
          SQL.Add('Torpedo_Index = ' + id);
        5:
          SQL.Add('Satellite_Index = ' + id);
        6:
          SQL.Add('Sonobuoy_Index = ' + id);
        7:
          SQL.Add('Radar_Index = ' + id);
        8:
          SQL.Add('FCR_Index = ' + id);
        9:
          SQL.Add('Sonar_Index = ' + id);
        10:
          SQL.Add('ESM_Index = ' + id);
        11:
          SQL.Add('MAD_Index = ' + id);
        12:
          SQL.Add('EO_Index = ' + id);
        13:
          SQL.Add('Gun_Index = ' + id);
        14:
          SQL.Add('Bomb_Index = ' + id);
        15:
          SQL.Add('Jammer_Index = ' + id);
        16:
          SQL.Add('Defensive_Jammer_Index = ' + id);
        17:
          SQL.Add('Towed_Decoy_Index = ' + id);
        18:
          SQL.Add('Floating_Decoy_Index = ' + id);
        19:
          SQL.Add('Chaff_Index = ' + id);
        20:
          SQL.Add('Decoy_Index = ' + id);
        21:
          SQL.Add('Air_Bubble_Index = ' + id);
        22:
          SQL.Add('Pattern_Index = ' + id);
        23:
          SQL.Add('Infrared_decoy_Index = ' + id);
      end;
      ExecSQL;
    end;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertNote(rec: TNote_Storage; index: Integer; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Note_Storage] ON;');
      ExecSQL;
      SQL.Clear; }
      SQL.Add('INSERT INTO Note_Storage');
      SQL.Add('(Note_Type,Notes,');
      case index of
        1:
          SQL.Add('Vehicle_Index)');
        2:
          SQL.Add('Missile_Index)');
        3:
          SQL.Add('Mine_Index)');
        4:
          SQL.Add('Torpedo_Index)');
        5:
          SQL.Add('Satellite_Index)');
        6:
          SQL.Add('Sonobuoy_Index)');
        7:
          SQL.Add('Radar_Index)');
        8:
          SQL.Add('FCR_Index )');
        9:
          SQL.Add('Sonar_Index )');
        10:
          SQL.Add('ESM_Index )');
        11:
          SQL.Add('MAD_Index)');
        12:
          SQL.Add('EO_Index)');
        13:
          SQL.Add('Gun_Index)');
        14:
          SQL.Add('Bomb_Index)');
        15:
          SQL.Add('Jammer_Index )');
        16:
          SQL.Add('Defensive_Jammer_Index )');
        17:
          SQL.Add('Towed_Decoy_Index)');
        18:
          SQL.Add('Floating_Decoy_Index)');
        19:
          SQL.Add('Chaff_Index)');
        20:
          SQL.Add('Decoy_Index)');
        21:
          SQL.Add('Air_Bubble_Index)');
        22:
          SQL.Add('Pattern_Index)');
        23:
          SQL.Add('Infrared_decoy_Index)');
      end;
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(index) + ',');
      SQL.Add('''' + Notes + ''',');
      SQL.Add(id + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteNote(index: Integer; id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Note_Storage ');
    SQL.Add('WHERE (');
    case index of
        1:
          SQL.Add('Vehicle_Index');
        2:
          SQL.Add('Missile_Index');
        3:
          SQL.Add('Mine_Index');
        4:
          SQL.Add('Torpedo_Index');
        5:
          SQL.Add('Satellite_Index');
        6:
          SQL.Add('Sonobuoy_Index');
        7:
          SQL.Add('Radar_Index');
        8:
          SQL.Add('FCR_Index');
        9:
          SQL.Add('Sonar_Index');
        10:
          SQL.Add('ESM_Index');
        11:
          SQL.Add('MAD_Index');
        12:
          SQL.Add('EO_Index');
        13:
          SQL.Add('Gun_Index');
        14:
          SQL.Add('Bomb_Index');
        15:
          SQL.Add('Jammer_Index');
        16:
          SQL.Add('Defensive_Jammer_Index');
        17:
          SQL.Add('Towed_Decoy_Index');
        18:
          SQL.Add('Floating_Decoy_Index');
        19:
          SQL.Add('Chaff_Index');
        20:
          SQL.Add('Decoy_Index');
        21:
          SQL.Add('Air_Bubble_Index');
        22:
          SQL.Add('Pattern_Index');
        23:
          SQL.Add('Infrared_Decoy_Index');
    end;
    SQL.Add(' = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetNote(const index,id: integer): boolean;
begin
  result := false;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Note_Storage ' );
    SQL.Add('WHERE (' );

    case index of
        1:
          SQL.Add('Vehicle_Index');
        2:
          SQL.Add('Missile_Index');
        3:
          SQL.Add('Mine_Index');
        4:
          SQL.Add('Torpedo_Index');
        5:
          SQL.Add('Satellite_Index');
        6:
          SQL.Add('Sonobuoy_Index');
        7:
          SQL.Add('Radar_Index');
        8:
          SQL.Add('FCR_Index');
        9:
          SQL.Add('Sonar_Index');
        10:
          SQL.Add('ESM_Index');
        11:
          SQL.Add('MAD_Index');
        12:
          SQL.Add('EO_Index');
        13:
          SQL.Add('Gun_Index');
        14:
          SQL.Add('Bomb_Index');
        15:
          SQL.Add('Jammer_Index');
        16:
          SQL.Add('Defensive_Jammer_Index');
        17:
          SQL.Add('Towed_Decoy_Index');
        18:
          SQL.Add('Floating_Decoy_Index');
        19:
          SQL.Add('Chaff_Index');
        20:
          SQL.Add('Decoy_Index');
        21:
          SQL.Add('Air_Bubble_Index');
        22:
          SQL.Add('Pattern_Index');
        23:
          SQL.Add('Infrared_Decoy_Index');
    end;

    SQL.Add(' = ' +  IntToStr(id) + ')' );
    Open;

    result := RecordCount > 0;
//    if not IsEmpty then begin
//      First;
//      if not Assigned(rec) then
//        rec := TNote_Storage.Create;
//      with rec do begin
//        Note_Index  := FieldByName('Note_Index').AsInteger;
//        Note_Type   := FieldByName('Note_Type').AsInteger;
//        Notes       := FieldByName('Notes').AsString;
//      end;
//    end;
  end;
end;

//-------------------------------------------------------------------

function TdmTTT.insertPredifened_Pattern(rec: TPredefined_Pattern): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      {SQL.Add('SET IDENTITY_INSERT Runtime_DB.[dbo].[Predefined_Pattern] ON;');
      ExecSQL;
      SQL.Clear;   }
      SQL.Add('INSERT INTO Predefined_Pattern ');
      SQL.Add(
        '(Pattern_Index, Pattern_Indentifier, Pattern_Type, Vehicle_Index,');
      SQL.Add('Pattern_Termination, Termination_Heading)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Pattern_Index) + ',');
      SQL.Add(''' ' + Pattern_Identifier + ''',');
      SQL.Add(IntToStr(Pattern_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Pattern_Termination) + ',');
      SQL.Add(FloatToStr(Termination_Heading) + ')');
      ExecSQL;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.getBlind(var bList: TList; const index,id,number: Integer):integer;
var rec: TBlind_Zone;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Blind_Zone_Definition ');
    SQL.Add('WHERE  ');
    case index of
      1 : SQL.Add('FCR_Instance_index ='+ IntToStr(id));
      2 : SQL.Add('ESM_Instance_Index ='+ IntToStr(id));
      3 : SQL.Add('EO_Instance_Index ='+ IntToStr(id));
      4 : SQL.Add('Visual_Instance_Index ='+ IntToStr(id));
      5 : SQL.Add('Point_Effect_Index ='+ IntToStr(id));
      6 : SQL.Add('Fitted_Weap_Index ='+ IntToStr(id));
      7 : SQL.Add('Sonar_Instance_Index ='+ IntToStr(id));
      8 : SQL.Add('Radar_Instance_Index ='+ IntToStr(id));
      9 : SQL.Add('Blind_Zone_Index ='+ IntToStr(id));
    end;
    if number <> 0 then
      SQL.Add(' AND BlindZone_Number = '+ IntToStr(number));

    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(bList) then
        bList := TList.Create;
    end;

    while not ZQ.Eof do
    begin
        rec := TBlind_Zone.Create;
      with rec.FData do
      begin
        Blind_Zone_Index    := FieldByName('Blind_Zone_Index').AsInteger;
        Blind_Zone_Type     := FieldByName('Blind_Zone_Type').AsInteger;
        BlindZone_Number    := FieldByName('BlindZone_Number').AsInteger;
        FCR_Instance_Index  := FieldByName('FCR_Instance_Index').AsInteger;
        ESM_Instance_Index  := FieldByName('ESM_Instance_Index').AsInteger;
        EO_Instance_Index   := FieldByName('EO_Instance_Index').AsInteger;
        Visual_Instance_Index := FieldByName('Visual_Instance_Index').AsInteger;
        Point_Effect_Index    := FieldByName('Point_Effect_Index').AsInteger;
        Fitted_Weap_Index     := FieldByName('Fitted_Weap_Index').AsInteger;
        Sonar_Instance_Index  := FieldByName('Sonar_Instance_Index').AsInteger;
        Radar_Instance_Index  := FieldByName('Radar_Instance_Index').AsInteger;
        Start_Angle           := FieldByName('Start_Angle').AsFloat;
        End_Angle             := FieldByName('End_Angle').AsFloat;
      end;
      bList.Add(rec);
      ZQ.Next;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.updateBlind(var rec: TBlind_Zone;const blind_id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Blind_Zone_Definition ');
      SQL.Add('SET ');
      SQL.Add('Blind_Zone_Type = ' + IntToStr(Blind_Zone_Type) + ',');
      SQL.Add('BlindZone_Number =' + IntToStr(BlindZone_Number) + ',');
      SQL.Add('Start_Angle = ' + FloatToStr(Start_Angle) + ',');
      SQL.Add('End_Angle =' + FloatToStr(End_Angle));
      SQL.Add(' WHERE Blind_Zone_Index = ' + blind_id);
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertBlind(var rec: TBlind_Zone;const index,id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Blind_Zone_Definition ');
      SQL.Add(
        '(Blind_Zone_Type,BlindZone_Number,Start_Angle,End_Angle,');
      case index of
        1:
          SQL.Add('FCR_Instance_Index)');
        2:
          SQL.Add('ESM_Instance_Index)');
        3:
          SQL.Add('EO_Instance_Index)');
        4:
          SQL.Add('Visual_Instance_Index)');
        5:
          SQL.Add('Point_Effect_Index)');
        6:
          SQL.Add('Fitted_Weap_Index)');
        7:
          SQL.Add('Sonar_Instance_Index)');
        8:
          SQL.Add('Radar_Instance_Index)');
      end;
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Blind_Zone_Type) + ',');
      SQL.Add(IntToStr(BlindZone_Number) + ',');
      SQL.Add(FloatToStr(Start_Angle) + ',');
      SQL.Add(FloatToStr(End_Angle) + ',');
      case index of
        1:
          SQL.Add(IntToStr(id) + ')');
        2:
          SQL.Add(IntToStr(id) + ')');
        3:
          SQL.Add(IntToStr(id) + ')');
        4:
          SQL.Add(IntToStr(id) + ')');
        5:
          SQL.Add(IntToStr(id) + ')');
        6:
          SQL.Add(IntToStr(id) + ')');
        7:
          SQL.Add(IntToStr(id) + ')');
        8:
          SQL.Add(IntToStr(id) + ')');
      end;
      ExecSQL;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.deleteBlind(index: integer; const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition WHERE ');
    case index of
        1:
          SQL.Add('');
        2:
          SQL.Add('ESM_Instance_Index');
        3:
          SQL.Add('EO_Instance_Index');
        4:
          SQL.Add('Visual_Instance_Index');
        5:
          SQL.Add('Point_Effect_Index');
        6:
          SQL.Add('Fitted_Weap_Index');
        7:
          SQL.Add('Sonar_Instance_Index');
        8:
          SQL.Add('Radar_Instance_Index');
    end;
    SQL.Add(' = ' + id );
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.deleteBlind_byNum(index: integer; const id,num: integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Blind_Zone_Definition WHERE ');
    case index of
        1:
          SQL.Add('FCR_Instance_index');
        2:
          SQL.Add('ESM_Instance_Index');
        3:
          SQL.Add('EO_Instance_Index');
        4:
          SQL.Add('Visual_Instance_Index');
        5:
          SQL.Add('Point_Effect_Index');
        6:
          SQL.Add('Fitted_Weap_Index');
        7:
          SQL.Add('Sonar_Instance_Index');
        8:
          SQL.Add('Radar_Instance_Index');
    end;
    SQL.Add(' = ' + IntToStr(id) );
    SQL.Add(' AND BlindZone_Number = '+ IntToStr(num));
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.updateHelicopter(rec: THelicopter_Land_Launch_Limits;
  index: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Helicopter_Land_Launch_Limits ');
      SQL.Add('SET ');
      SQL.Add('Max_Relative_Wind_Magnitude = ' + FloatToStr
          (Max_Relative_Wind_Magnitude) + ',');
      SQL.Add('Max_Turn_Rate_To_Launch =' + IntToStr(Max_Turn_Rate_To_Launch)
          + ',');
      SQL.Add('Max_Turn_Rate_To_Land = ' + IntToStr(Max_Turn_Rate_To_Land)
          + ',');
      SQL.Add('Max_Landing_Altitude =' + FloatToStr(Max_Landing_Altitude)
          + ',');
      SQL.Add('Max_Relative_Speed = ' + IntToStr(Max_Relative_Speed) + ',');
      SQL.Add('Approach_Range =' + FloatToStr(Approach_Range) + ',');
      SQL.Add('Approach_Center_Bearing =' + IntToStr(Approach_Center_Bearing)
          + ',');
      SQL.Add('Approach_Sector_Width =' + IntToStr(Approach_Sector_Width));
    end;

    SQL.Add(' WHERE Vehicle_Index = ' + index);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertHelicopter(rec: THelicopter_Land_Launch_Limits): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Helicopter_Land_Launch_Limits ');
      SQL.Add(
        '(Vehicle_Index,Max_Relative_Wind_Magnitude,Max_Turn_Rate_To_Launch,Max_Turn_Rate_To_Land,');
      SQL.Add(
        'Max_Landing_Altitude,Max_Relative_Speed,Approach_Range,Approach_Center_Bearing,Approach_Sector_Width)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(FloatToStr(Max_Relative_Wind_Magnitude) + ',');
      SQL.Add(IntToStr(Max_Turn_Rate_To_Launch) + ',');
      SQL.Add(IntToStr(Max_Turn_Rate_To_Land) + ',');
      SQL.Add(FloatToStr(Max_Landing_Altitude) + ',');
      SQL.Add(IntToStr(Max_Relative_Speed) + ',');
      SQL.Add(FloatToStr(Approach_Range) + ',');
      SQL.Add(IntToStr(Approach_Center_Bearing) + ',');
      SQL.Add(IntToStr(Approach_Sector_Width) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------
function TdmTTT.GetHelicopter(const id: Integer; var aRec: TList): Integer;
var rec: THelicopter_Land_Launch_Limits;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Helicopter_Land_Launch_Limits ');
    SQL.Add('WHERE (Vehicle_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := THelicopter_Land_Launch_Limits.Create;

        with rec.FData do
        begin
          Vehicle_Index                := FieldByName('Vehicle_Index').AsInteger;
          Max_Relative_Wind_Magnitude  := FieldByName('Max_Relative_Wind_Magnitude').Assingle;
          Max_Turn_Rate_To_Launch      := FieldByName('Max_Turn_Rate_To_Launch').Asinteger;
          Max_Turn_Rate_To_Land        := FieldByName('Max_Turn_Rate_To_Land').Asinteger;
          Max_Landing_Altitude         := FieldByName('Max_Landing_Altitude').Assingle;
          Max_Relative_Speed           := FieldByName('Max_Relative_Speed').Asinteger;
          Approach_Range               := FieldByName('Approach_Range').Assingle;
          Approach_Center_Bearing      := FieldByName('Approach_Center_Bearing').Asinteger;
          Approach_Sector_Width        := FieldByName('Approach_Sector_Width').Asinteger;
        end;

        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------
function TdmTTT.deleteHelicopter(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Helicopter_Land_Launch_Limits ');
    SQL.Add('WHERE Vehicle_Index = ' + id);

    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.UpdateUserLogin(rec: TUser_Login): Integer;
begin
   result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE User_Login ');
      SQL.Add('SET ');
      SQL.Add('NAME =' + QuotedStr(Name) + ',');
      SQL.Add('USERNAME =' + QuotedStr(Username) + ',');
      SQL.Add('PASSWORD = ' + QuotedStr(Password) + ',');
      SQL.Add('PRIVILEGE =' + QuotedStr(Privilege));

      SQL.Add(' WHERE LOGIN_INDEX = ' + inttostr(Login_index));
    end;
    ExecSQL;
  end;
end;


function TdmTTT.updateMotion(rec: TMotion_Characteristics;
  index: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Motion_Characteristics ');
      SQL.Add('SET ');
      SQL.Add('Motion_Identifier =''' + Motion_Identifier + ''',');
      SQL.Add('Motion_Type =' + IntToStr(Motion_Type) + ',');
      SQL.Add('Max_Altitude = ' + FloatToStr(Max_Altitude) + ',');
      SQL.Add('Max_Depth =' + FloatToStr(Max_Depth) + ',');
      SQL.Add('Min_Ground_Speed = ' + FloatToStr(Min_Ground_Speed) + ',');
      SQL.Add('Cruise_Ground_Speed =' + FloatToStr(Cruise_Ground_Speed) + ',');
      SQL.Add('High_Ground_Speed =' + FloatToStr(High_Ground_Speed) + ',');
      SQL.Add('Max_Ground_Speed =' + FloatToStr(Max_Ground_Speed) + ',');
      SQL.Add('Acceleration = ' + FloatToStr(Acceleration) + ',');
      SQL.Add('Deceleration =' + FloatToStr(Deceleration) + ',');
      SQL.Add('Normal_Climb_Rate = ' + FloatToStr(Normal_Climb_Rate) + ',');
      SQL.Add('Max_Climb_Rate =' + FloatToStr(Max_Climb_Rate) + ',');
      SQL.Add('Normal_Descent_Rate =' + FloatToStr(Normal_Descent_Rate) + ',');
      SQL.Add('Max_Descent_Rate =' + FloatToStr(Max_Descent_Rate) + ',');
      SQL.Add('Vertical_Accel = ' + FloatToStr(Vertical_Accel) + ',');
      SQL.Add('Standard_Turn_Rate =' + FloatToStr(Standard_Turn_Rate) + ',');
      SQL.Add('Tight_Turn_Rate = ' + FloatToStr(Tight_Turn_Rate) + ',');
      SQL.Add('Max_Helm_Angle =' + FloatToStr(Max_Helm_Angle) + ',');
      SQL.Add('Helm_Angle_Rate =' + FloatToStr(Helm_Angle_Rate) + ',');
      SQL.Add('Speed_Reduce_In_Turn =' + FloatToStr(Speed_Reduce_In_Turn)
          + ',');
      SQL.Add('Time_To_Reduce_Speed = ' + FloatToStr(Time_To_Reduce_Speed)
          + ',');
      SQL.Add('Min_Speed_To_Reduce =' + FloatToStr(Min_Speed_To_Reduce) + ',');
      SQL.Add('Rate_of_Turn_Rate_Chg = ' + FloatToStr(Rate_of_Turn_Rate_Chg)
          + ',');
      SQL.Add('Min_Pitch_Angle =' + FloatToStr(Min_Pitch_Angle) + ',');
      SQL.Add('Max_Pitch_Angle =' + FloatToStr(Max_Pitch_Angle) + ',');
      SQL.Add('Max_Roll_Angle =' + FloatToStr(Max_Roll_Angle) + ',');
      SQL.Add('Endurance_Type =' + IntToStr(Endurance_Type) + ',');
      SQL.Add('Endurance_Time =' + IntToStr(Endurance_Time) + ',');
      SQL.Add('Max_Effective_Range =' + FloatToStr(Max_Effective_Range) + ',');
      SQL.Add('Fuel_Unit_Type = ' + IntToStr(Fuel_Unit_Type) + ',');
      SQL.Add('Max_Fuel_Capacity =' + FloatToStr(Max_Fuel_Capacity) + ',');
      SQL.Add('Min_Speed_Fuel_Consume = ' + FloatToStr(Min_Speed_Fuel_Consume)
          + ',');
      SQL.Add('Cruise_Speed_Fuel_Consume =' + FloatToStr
          (Cruise_Speed_Fuel_Consume) + ',');
      SQL.Add('High_Speed_Fuel_Consume =' + FloatToStr(High_Speed_Fuel_Consume)
          + ',');
      SQL.Add('Max_Speed_Fuel_Consume =' + FloatToStr(Max_Speed_Fuel_Consume));
    end;

    SQL.Add(' WHERE Motion_Index = ' + index);
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertPlatformLogistics(rec: TLogistics): Integer;
begin
  result := -1;
  with ZQ do
  begin
//    with rec.FPlatformLogistics do
//    begin
//      Close;
//      SQL.Clear;
//      SQL.Add('INSERT INTO Platform_Logistics ');
//      SQL.Add(
//        '(Platform_Instance_Index,PA,BA,TA,HSD,ML,');
//      SQL.Add(
//        'AT,AVTUR,Food,Water)');
//
//      SQL.Add(' VALUES (');
//      SQL.Add(IntToStr(Platform_Instance_Index) + ',');
//      SQL.Add(IntToStr(PA) + ',');
//      SQL.Add(IntToStr(BA) + ',');
//      SQL.Add(IntToStr(TA) + ',');
//      SQL.Add(IntToStr(HSD) + ',');
//      SQL.Add(FloatToStr(ML) + ',');
//      SQL.Add(FloatToStr(AT) + ',');
//      SQL.Add(IntToStr(AVTUR) + ',');
//      SQL.Add(FloatToStr(Food) + ',');
//      SQL.Add(FloatToStr(Water) + ')');
//
//      ExecSQL;
//
//    end;
  end;
end;

function TdmTTT.InsertUserLogin(rec: TUser_Login): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO User_Login ');
      SQL.Add(
        '(NAME,USERNAME,PASSWORD,PRIVILEGE)');

      SQL.Add(' VALUES (');
      SQL.Add(QuotedStr(Name) + ',');
      SQL.Add(QuotedStr(Username) + ',');
      SQL.Add(QuotedStr(Password) + ',');
      SQL.Add(QuotedStr(Privilege) + ')');


      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT LOGIN_INDEX FROM User_Login ');
      SQL.Add('WHERE NAME =' + quotedStr(Name));
      Open;
      with rec.FData do
      begin
        Login_index := FieldByName('LOGIN_INDEX').AsInteger;
      end;

    end;
  end;
end;

function TdmTTT.insertMotion(rec: TMotion_Characteristics): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Motion_Characteristics ');
      SQL.Add(
        '(Motion_Identifier,Motion_Type,Max_Altitude,Max_Depth,Min_Ground_Speed,Cruise_Ground_Speed,');
      SQL.Add(
        'High_Ground_Speed,Max_Ground_Speed,Acceleration,Deceleration,Normal_Climb_Rate,Max_Climb_Rate,');
      SQL.Add(
        'Normal_Descent_Rate,Max_Descent_Rate,Vertical_Accel,Standard_Turn_Rate,Tight_Turn_Rate,');
      SQL.Add(
        'Max_Helm_Angle,Helm_Angle_Rate,Speed_Reduce_In_Turn,Time_To_Reduce_Speed,Min_Speed_To_Reduce,');
      SQL.Add(
        'Rate_of_Turn_Rate_Chg,Min_Pitch_Angle,Max_Pitch_Angle,Max_Roll_Angle,Endurance_Type,Endurance_Time,');
      SQL.Add(
        'Max_Effective_Range,Fuel_Unit_Type,Max_Fuel_Capacity,Min_Speed_Fuel_Consume,Cruise_Speed_Fuel_Consume,');
      SQL.Add('High_Speed_Fuel_Consume,Max_Speed_Fuel_Consume)');
      SQL.Add(' VALUES (');
      SQL.Add('''' + Motion_Identifier + ''',');
      SQL.Add(IntToStr(Motion_Type) + ',');
      SQL.Add(FloatToStr(Max_Altitude) + ',');
      SQL.Add(FloatToStr(Max_Depth) + ',');
      SQL.Add(FloatToStr(Min_Ground_Speed) + ',');
      SQL.Add(FloatToStr(Cruise_Ground_Speed) + ',');
      SQL.Add(FloatToStr(High_Ground_Speed) + ',');
      SQL.Add(FloatToStr(Max_Ground_Speed) + ',');
      SQL.Add(FloatToStr(Acceleration) + ',');
      SQL.Add(FloatToStr(Deceleration) + ',');
      SQL.Add(FloatToStr(Normal_Climb_Rate) + ',');
      SQL.Add(FloatToStr(Max_Climb_Rate) + ',');
      SQL.Add(FloatToStr(Normal_Descent_Rate) + ',');
      SQL.Add(FloatToStr(Max_Descent_Rate) + ',');
      SQL.Add(FloatToStr(Vertical_Accel) + ',');
      SQL.Add(FloatToStr(Standard_Turn_Rate) + ',');
      SQL.Add(FloatToStr(Tight_Turn_Rate) + ',');
      SQL.Add(FloatToStr(Max_Helm_Angle) + ',');
      SQL.Add(FloatToStr(Helm_Angle_Rate) + ',');
      SQL.Add(FloatToStr(Speed_Reduce_In_Turn) + ',');
      SQL.Add(FloatToStr(Time_To_Reduce_Speed) + ',');
      SQL.Add(FloatToStr(Min_Speed_To_Reduce) + ',');
      SQL.Add(FloatToStr(Rate_of_Turn_Rate_Chg) + ',');
      SQL.Add(FloatToStr(Min_Pitch_Angle) + ',');
      SQL.Add(FloatToStr(Max_Pitch_Angle) + ',');
      SQL.Add(FloatToStr(Max_Roll_Angle) + ',');
      SQL.Add(IntToStr(Endurance_Type) + ',');
      SQL.Add(IntToStr(Endurance_Time) + ',');
      SQL.Add(FloatToStr(Max_Effective_Range) + ',');
      SQL.Add(IntToStr(Fuel_Unit_Type) + ',');
      SQL.Add(FloatToStr(Max_Fuel_Capacity) + ',');
      SQL.Add(FloatToStr(Min_Speed_Fuel_Consume) + ',');
      SQL.Add(FloatToStr(Cruise_Speed_Fuel_Consume) + ',');
      SQL.Add(FloatToStr(High_Speed_Fuel_Consume) + ',');
      SQL.Add(FloatToStr(Max_Speed_Fuel_Consume) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Motion_Index FROM Motion_Characteristics ');
      SQL.Add('WHERE Motion_Identifier =' + quotedStr(Motion_Identifier));
      Open;
      with rec.FData do
      begin
        Motion_Index := FieldByName('Motion_Index').AsInteger;
      end;

    end;
  end;
end;

//function TdmTTT.InsertWaypointDef(WaypointDef : TWaypoint_Def) : integer;
//var
//  query : string;
//  num : integer;
//begin
//  with WaypointDef.FData do
//  begin
//  query := 'Insert into Waypoint (Waypoint_Name, Termination, Waypoint_Centre_Lat, ' +
//            'Waypoint_Centre_Long, Dimension) values (' +
//     QuotedStr(Waypoint_Name) + ',' + IntToStr(Termination) + ','+ FloatToStr(Waypoint_Centre_Lat)+','+
//     FloatToStr(Waypoint_Centre_Long)+ ',' + FloatToStr(Dimension)+ ')';
//  end;
//
//  with zq do begin
//    ParamCheck := True;
//    SQL.Clear;
//    SQL.Add(query);
//    ExecSQL;
//  end;
//
//  query := 'SELECT MAX(Waypoint_Index) as NUM FROM Waypoint';
//  with zq do begin
//    SQL.Clear;
//    SQL.Add(query);
//    Open;
//
//    num := 0;
//    if RecordCount > 0 then
//    begin
//      num := FieldByName('NUM').AsInteger;
//    end;
//    Close;
//
//  end;
//  result := num;
//end;

//function TdmTTT.UpdateWaypointDef(WaypointDef : TWaypoint_Def): integer;
//begin
//  result := -1;
//  with ZQ do
//  begin
//    with WaypointDef.FData do
//    begin
//      Close;
//      SQL.Clear;
//      SQL.Add('UPDATE Waypoint ');
//      SQL.Add('SET ');
//      SQL.Add('Waypoint_Name =' + QuotedStr(Waypoint_Name) + ',');
//      SQL.Add('Termination =' + IntToStr(Termination)+ ',');
//      SQL.Add('Waypoint_Centre_Lat =' + FloatToStr(Waypoint_Centre_Lat)+ ',');
//      SQL.Add('Waypoint_Centre_Long =' + FloatToStr(Waypoint_Centre_Long)+ ',');
//      SQL.Add('Dimension =' + FloatToStr(Dimension));
//      SQL.Add(' WHERE Waypoint_Index = ' + IntToStr(Waypoint_Index));
//    end;
//    ExecSQL;
//  end;
//end;

// ------------------------------------------------------------------------------

function TdmTTT.deleteMotion(id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Motion_Characteristics ');
    SQL.Add('WHERE Motion_Index = ' + IntToStr(id));
    ExecSQL;

  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.getAllPOD_vs_SNR_Point(const id: integer;
      var aRec: TList; var xMin,yMax,yMin: Double): Integer;
var
    rec: TPOD_vs_SNR_Point;
begin
  result := -1;
  if not zConn.Connected then Exit;

  with ZQ do begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  POD_vs_SNR_Point ' );
    SQL.Add('WHERE (Curve_Definition_Index = ' +  IntToStr(id) + ') ' );
    SQL.Add('ORDER BY SNR_Ratio ASC ' );
    Open;

    result := RecordCount;
    if not IsEmpty then begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do begin
        rec := TPOD_vs_SNR_Point.Create;
        with rec.FData do begin
          List_Index                := FieldByName('List_Index').AsInteger;
          Curve_Definition_Index    := FieldByName('Curve_Definition_Index').AsInteger;
          SNR_Ratio                 := FieldByName('SNR_Ratio').AsSingle;
          Prob_of_Detection         := FieldByName('Prob_of_Detection').AsSingle;
        end;
        aRec.Add(rec);
         ZQ.Next;
      end;

      SQL.Clear;
      SQL.Add('SELECT MIN(SNR_Ratio) as X_MIN, ');
      SQL.Add('MAX(Prob_of_Detection) as Y_MAX, ');
      SQL.Add('MIN(Prob_of_Detection) as Y_MIN ');
      SQL.Add('FROM  POD_vs_SNR_Point ' );
      SQL.Add('WHERE (Curve_Definition_Index = ' +  IntToStr(id) + ') ' );
      Open;
      xMin  := FieldByName('X_MIN').AsSingle;
      yMax  := FieldByName('Y_MAX').AsSingle;
      yMin  := FieldByName('Y_MIN').AsSingle;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.updatePOD_vs_SNR_Point(rec: TPOD_vs_SNR_Point;
  index: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE POD_vs_SNR_Point  ');
      SQL.Add('SET ');
      SQL.Add('Curve_Definition_Index = ' + IntToStr(Curve_Definition_Index)
          + ',');
      SQL.Add('SNR_Ratio = ' + FloatToStr(SNR_Ratio) + ',');
      SQL.Add('Prob_of_Detection = ' + FloatToStr(Prob_of_Detection));
    end;
    SQL.Add('WHERE (List_Index = ' + index + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.insertPOD_vs_SNR_Point(rec: TPOD_vs_SNR_Point): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO POD_vs_SNR_Point ');
      SQL.Add
        ('(Curve_Definition_Index,SNR_Ratio,Prob_of_Detection)');
      SQL.Add(' VALUES (');
      SQL.Add(IntToStr(Curve_Definition_Index) + ',');
      SQL.Add(FloatToStr(SNR_Ratio) + ',');
      SQL.Add(FloatToStr(Prob_of_Detection) + ')');
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeletePOD_vs_SNR_Point(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM POD_vs_SNR_Point  ');
      SQL.Add('WHERE (Curve_Definition_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;

//-------------------------------------------------------------------

function TdmTTT.GetMotion_Characteristics(const id: Integer;
  var rec: TMotion_Characteristics): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Motion_Characteristics ');
    SQL.Add('WHERE (Motion_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      if not Assigned(rec) then
        rec := TMotion_Characteristics.Create;
      with rec.FData do
      begin
        Motion_Index := FieldByName('Motion_Index').AsInteger;
        Motion_Identifier := FieldByName('Motion_Identifier').AsString;
        Motion_Type := FieldByName('Motion_Type').AsInteger;
        Max_Altitude := FieldByName('Max_Altitude').AsSingle;
        Max_Depth := FieldByName('Max_Depth').AsSingle;
        Min_Ground_Speed := FieldByName('Min_Ground_Speed').AsSingle;
        Cruise_Ground_Speed := FieldByName('Cruise_Ground_Speed').AsSingle;
        High_Ground_Speed := FieldByName('High_Ground_Speed').AsSingle;
        Max_Ground_Speed := FieldByName('Max_Ground_Speed').AsSingle;
        Acceleration := FieldByName('Acceleration').AsSingle;
        Deceleration := FieldByName('Deceleration').AsSingle;
        Normal_Climb_Rate := FieldByName('Normal_Climb_Rate').AsSingle;
        Max_Climb_Rate := FieldByName('Max_Climb_Rate').AsSingle;
        Normal_Descent_Rate := FieldByName('Normal_Descent_Rate').AsSingle;
        Max_Descent_Rate := FieldByName('Max_Descent_Rate').AsSingle;
        Vertical_Accel := FieldByName('Vertical_Accel').AsSingle;
        Standard_Turn_Rate := FieldByName('Standard_Turn_Rate').AsSingle;
        Tight_Turn_Rate := FieldByName('Tight_Turn_Rate').AsSingle;
        Max_Helm_Angle := FieldByName('Max_Helm_Angle').AsSingle;
        Helm_Angle_Rate := FieldByName('Helm_Angle_Rate').AsSingle;
        Speed_Reduce_In_Turn := FieldByName('Speed_Reduce_In_Turn').AsSingle;
        Time_To_Reduce_Speed := FieldByName('Time_To_Reduce_Speed').AsSingle;
        Min_Speed_To_Reduce := FieldByName('Min_Speed_To_Reduce').AsSingle;
        Rate_of_Turn_Rate_Chg := FieldByName('Rate_of_Turn_Rate_Chg').AsSingle;
        Min_Pitch_Angle := FieldByName('Min_Pitch_Angle').AsSingle;
        Max_Pitch_Angle := FieldByName('Max_Pitch_Angle').AsSingle;
        Max_Roll_Angle := FieldByName('Max_Roll_Angle').AsSingle;
        Endurance_Type := FieldByName('Endurance_Type').AsInteger;
        Endurance_Time := FieldByName('Endurance_Time').AsInteger;
        Max_Effective_Range := FieldByName('Max_Effective_Range').AsSingle;
        Fuel_Unit_Type := FieldByName('Fuel_Unit_Type').AsInteger;
        Max_Fuel_Capacity := FieldByName('Max_Fuel_Capacity').AsSingle;
        Min_Speed_Fuel_Consume := FieldByName('Min_Speed_Fuel_Consume').AsFloat;
        Cruise_Speed_Fuel_Consume := FieldByName('Cruise_Speed_Fuel_Consume')
          .AsFloat;
        High_Speed_Fuel_Consume := FieldByName('High_Speed_Fuel_Consume')
          .AsFloat;
        Max_Speed_Fuel_Consume := FieldByName('Max_Speed_Fuel_Consume').AsFloat;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetAllUserLogin(mList: TList): Integer;
var
  rec: TUser_Login;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM User_Login ');
    SQL.Add('ORDER BY LOGIN_INDEX');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(mList) then
        mList := TList.Create
      else
        mList.Clear;
    end;

    while not ZQ.Eof do
    begin
      rec := TUser_Login.Create;
      with rec.FData do
      begin
        Login_index   := FieldByName('LOGIN_INDEX').AsInteger;
        Name          := FieldByName('NAME').AsString;
        Username      := FieldByName('USERNAME').AsString;
        Password      := FieldByName('PASSWORD').AsString;
        Privilege     := FieldByName('PRIVILEGE').AsString;
      end;

      mList.Add(rec);
      ZQ.Next;
    end;
  end;
end;

function TdmTTT.GetValidasiUserLogin(const aUser, aPass : string;
  rec: TUser_Login): Boolean;
begin
  result := False;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM User_Login ');
    SQL.Add('WHERE USERNAME = '+ QuotedStr(aUser));
    SQL.Add('AND PASSWORD = '+ QuotedStr(aPass));
    Open;

    result := RecordCount > 0;


    while not ZQ.Eof do
    begin
      with rec.FData do
      begin
        Login_index   := FieldByName('LOGIN_INDEX').AsInteger;
        Name          := FieldByName('NAME').AsString;
        Username      := FieldByName('USERNAME').AsString;
        Password      := FieldByName('PASSWORD').AsString;
        Privilege     := FieldByName('PRIVILEGE').AsString;
      end;
       ZQ.Next;
    end;

  end;
end;

function TdmTTT.getVecIndexFromIdent(const aIdent: string): integer;
begin
  result := 0;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Vehicle_Index ');
    SQL.Add('FROM Vehicle_Definition ');
    SQL.Add('WHERE Vehicle_Identifier = ' + QuotedStr(aIdent));
    Open;

    if not ZQ.IsEmpty then
    begin
      result := FieldByName('Vehicle_Index').AsInteger;
    end;
  end;
end;

function TdmTTT.getFontByID(const id: Integer; var FontTaktis: TFontTaktis): Integer;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Font_Taktis ');
    SQL.Add('WHERE FONT_ID = ' + IntToStr(ID));
    Open;

    if not ZQ.IsEmpty then
    begin
      if not Assigned(FontTaktis) then
        FontTaktis := TFontTaktis.Create;

      with FontTaktis.FData do
      begin
        FONT_ID := FieldByName('FONT_ID').AsInteger;
        FONT_NAME := FieldByName('FONT_NAME').AsString;
        FONT_INDEX := FieldByName('FONT_INDEX').AsInteger;
        KETERANGAN := FieldByName('KETERANGAN').AsString;
      end;
    end;
  end;
end;

function TdmTTT.getAllFontTaktis(mList: TList; aFontType : Byte): Integer;
var
  rec: TFontTaktis;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Font_Taktis ');

    if aFontType = 0 then
      SQL.Add('WHERE FONT_ID >= 221 and FONT_ID <= 404')
    else if aFontType = 1 then
      SQL.Add('WHERE FONT_ID >= 10 and FONT_ID <= 220')
    else if aFontType = 2 then
      SQL.Add('WHERE FONT_ID >= 405 and FONT_ID <= 539');

    SQL.Add('order by FONT_ID');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(mList) then
        mList := TList.Create;
    end;

    while not ZQ.Eof do
    begin
      rec := TFontTaktis.Create;
      with rec.FData do
      begin
        FONT_ID := FieldByName('FONT_ID').AsInteger;
        FONT_NAME := FieldByName('FONT_NAME').AsString;
        FONT_INDEX := FieldByName('FONT_INDEX').AsInteger;
        KETERANGAN := FieldByName('KETERANGAN').AsString;

      end;

      mList.Add(rec);
      ZQ.Next;
    end;
  end;
end;

function TdmTTT.GetAllGameReport(plist: TList ; rec: TRuntime_Game_Report): integer;
begin
if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Game_Report a left Join Scenario_Definition b on a.Scenario_Index = b.Scenario_Index');
    SQL.Add('ORDER BY a.Game_Name');
    Open;

    result := RecordCount ;
    if not Assigned(plist) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        Rec := TRuntime_Game_Report.Create;
        with Rec.fdata do
        begin
          Id_Game        := FieldByName('Id_Game_Report').AsInteger;
          Scenario_index := FieldByName('Scenario_Index').AsInteger;
          Game_Name      := FieldByName('Game_Name').AsString;
          Start_Time     := FieldByName('TimeStart').AsFloat;
          End_Time       := FieldByName('TimeEnd').AsFloat;
          Description    := FieldByName('Description').AsString;
          Scenario_Name  := FieldByName('Scenario_Identifier').AsString;
          Subject        := FieldByName('Subject').AsString;
        end;
        pList.Add(Rec);
        ZQ.Next;
      end;
    end;
  end;
end;
//
//function TdmTTT.getAllDefaultLogistics(mList: TList): Integer;
//var
//  rec: TLogistics;
//begin
//  result := -1;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    SQL.Add('SELECT * ');
//    SQL.Add('FROM Default_Logistics ');
//    SQL.Add('ORDER BY Logistics_Identifier');
//    Open;
//
//    result := RecordCount;
//    if not IsEmpty then
//    begin
//      First;
//      if not Assigned(mList) then
//        mList := TList.Create;
//    end;
//
//    while not ZQ.Eof do
//    begin
//      rec := TLogistics.Create;
//      with rec.FData do
//      begin
//        Logistics_Index       := FieldByName('Logistics_Index').AsInteger;
//        Logistics_Identifier  := FieldByName('Logistics_Identifier').AsString;
//        PA                    := FieldByName('PA').AsInteger;
//        BA                    := FieldByName('BA').AsInteger;
//        TA                    := FieldByName('TA').AsInteger;
//        HSD                   := FieldByName('HSD').AsSingle;
//        ML                    := FieldByName('ML').AsSingle;
//        AT                    := FieldByName('AT').AsSingle;
//        AVTUR                 := FieldByName('AVTUR').AsSingle;
//        Food                  := FieldByName('Food').AsSingle;
//        Water                 := FieldByName('Water').AsSingle;
//        HSD_Consumption       := FieldByName('HSD_Consumption').AsSingle;
//        ML_Consumption        := FieldByName('ML_Consumption').AsSingle;
//        AT_Consumption        := FieldByName('AT_Consumption').AsSingle;
//        AVTUR_Consumption     := FieldByName('AVTUR_Consumption').AsSingle;
//        Food_Consumption      := FieldByName('Food_Consumption').AsSingle;
//        Water_Consumption     := FieldByName('Water_Consumption').AsSingle;
//        Fuel_TrS              := FieldByName('Fuel_TrS').AsSingle;
//        Lubricants_TrS        := FieldByName('Lubricants_TrS').AsSingle;
//        Fresh_Water_TrS       := FieldByName('Fresh_Water_TrS').AsSingle;
//        Water_TrS             := FieldByName('Water_TrS').AsSingle;
//        Food_TrS              := FieldByName('Food_TrS').AsSingle;
//      end;
//
//      mList.Add(rec);
//      ZQ.Next;
//    end;
//  end;
//end;


function TdmTTT.GetPlatform_Logistics(const id: Integer;
  var rec: TLogistics): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Logistics ');
    SQL.Add('WHERE (Platform_Instance_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
//      First;
//      if not Assigned(rec) then
//        rec := TLogistics.Create;
//      with rec.FPlatformLogistics do
//      begin
//        Platform_Instance_Index := FieldByName('Platform_Instance_Index').AsInteger;
//        PA                      := FieldByName('PA').AsInteger;
//        BA                      := FieldByName('BA').AsInteger;
//        TA                      := FieldByName('TA').AsInteger;
//        HSD                     := FieldByName('HSD').AsInteger;
//        ML                      := FieldByName('ML').AsInteger;
//        AT                      := FieldByName('AT').AsInteger;
//        AVTUR                   := FieldByName('AVTUR').AsInteger;
//        Food                    := FieldByName('Food').AsInteger;
//        Water                   := FieldByName('Water').AsInteger;
//      end;
    end;
  end;
end;

function TdmTTT.GetPlatoon(const id: Integer; var pList: TList): Boolean;
var
  rec: TPersonel;
begin
  result := False;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT c3.Kompi_Index, c3.Kompi_Identifier, ');
    SQL.Add('d4.Pleton_Index, d4.Pleton_Identifier ');
    SQL.Add('FROM Personel_Brigade a1 JOIN Personel_Batalyon b2 ON ');
    SQL.Add('a1.brigade_index = b2.brigade_index JOIN personel_kompi c3 ON ');
    SQL.Add('b2.batalyon_index = c3.batalyon_index JOIN personel_pleton d4 ON ');
    SQL.Add('c3.kompi_index = d4.kompi_index ');
    SQL.Add('WHERE c3.Kompi_Index = ' + IntToStr(id));

    Open;
    Result := RecordCount > 0;
    if not Assigned(pList) then
      pList := TList.Create
    else
      pList.Clear;

    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TPersonel.Create;
        TKompi(rec).Id := FieldByName('Kompi_Index').AsInteger;
        TKompi(rec).Identifier := FieldByName('Kompi_Identifier').AsString;
        TPlatoon(rec).Id := FieldByName('Pleton_Index').AsInteger;
        TPlatoon(rec).Identifier := FieldByName('Pleton_Identifier').AsString;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPlotting_Definition(const id: Integer; var pList: TList;
  rec: TRuntime_Plotting_Definition): Integer;
begin
  Result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROm Plotting_Definition');
    SQL.Add('ORDER BY Plotting_Index');
    Open;

    Result := RecordCount;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
      pList.Clear;


    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TRuntime_Plotting_Definition.Create;
        with rec.FData do
        begin
          Plotting_Index := FieldByName('Plotting_Index').AsInteger;
          Plotting_Name := FieldByName('Plotting_Name').AsString;
          Plotting_Type := FieldByName('Plotting_Type').AsInteger;
          Plotting_Group := FieldByName('Plotting_Group').AsInteger;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPlotting_DefinitionByID(const id: Integer;
  rec: TRuntime_Plotting_Definition): Integer;
begin
Result := -1;
  if not ZConn.Connected then
    exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT *');
    SQL.Add('FROm Plotting_Definition');
    SQL.Add('Where (Plotting_Index = ' + IntToStr(id) + ')');
    Open;

    Result := RecordCount;

    if not IsEmpty then
    begin
      First;
      rec := TRuntime_Plotting_Definition.Create;
        with rec.FData do
        begin
          Plotting_Index := FieldByName('Plotting_Index').AsInteger;
          Plotting_Name := FieldByName('Plotting_Name').AsString;
          Plotting_Type := FieldByName('Plotting_Type').AsInteger;
          Plotting_Group := FieldByName('Plotting_Group').AsInteger;
        end;

    end;
  end;
end;
//
//function TdmTTT.GetDefault_Logistics(const id: Integer;
//  var rec: TLogistics): boolean;
//begin
//  result := false;
//  if not ZConn.Connected then
//    exit;
//
//  with ZQ do
//  begin
//    Close;
//    SQL.Clear;
//    SQL.Add('SELECT * ');
//    SQL.Add('FROM Default_Logistics ');
//    SQL.Add('WHERE (Logistics_Index = ' + IntToStr(id) + ')');
//    Open;
//
//    rec := TLogistics.Create;
//
//    result := RecordCount > 0;
//    if not IsEmpty then
//    begin
//      First;
////      if not Assigned(rec) then
////        rec := TLogistics.Create;
//      with rec.FData do
//      begin
//        Logistics_Index       := FieldByName('Logistics_Index').AsInteger;
//        Logistics_Identifier  := FieldByName('Logistics_Identifier').AsString;
//        PA                    := FieldByName('PA').AsInteger;
//        BA                    := FieldByName('BA').AsInteger;
//        TA                    := FieldByName('TA').AsInteger;
//        HSD                   := FieldByName('HSD').AsSingle;
//        ML                    := FieldByName('ML').AsSingle;
//        AT                    := FieldByName('AT').AsSingle;
//        AVTUR                 := FieldByName('AVTUR').AsSingle;
//        Food                  := FieldByName('Food').AsSingle;
//        Water                 := FieldByName('Water').AsSingle;
//        HSD_Consumption       := FieldByName('HSD_Consumption').AsSingle;
//        ML_Consumption        := FieldByName('ML_Consumption').AsSingle;
//        AT_Consumption        := FieldByName('AT_Consumption').AsSingle;
//        AVTUR_Consumption     := FieldByName('AVTUR_Consumption').AsSingle;
//        Food_Consumption      := FieldByName('Food_Consumption').AsSingle;
//        Water_Consumption     := FieldByName('Water_Consumption').AsSingle;
//        Fuel_TrS              := FieldByName('Fuel_TrS').AsSingle;
//        Lubricants_TrS        := FieldByName('Lubricants_TrS').AsSingle;
//        Fresh_Water_TrS       := FieldByName('Fresh_Water_TrS').AsSingle;
//        Water_TrS             := FieldByName('Water_TrS').AsSingle;
//        Food_TrS              := FieldByName('Food_TrS').AsSingle;
//      end;
//    end;
//  end;
//end;

function TdmTTT.getAllMotion_Characteristics(mList: TList): Integer;
var
  rec: TMotion_Characteristics;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Motion_Characteristics ');
    SQL.Add('ORDER BY Motion_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(mList) then
        mList := TList.Create
      else
        mList.Clear;
    end;

    while not ZQ.Eof do
    begin
      rec := TMotion_Characteristics.Create;
      with rec.FData do
      begin
        Motion_Index := FieldByName('Motion_Index').AsInteger;
        Motion_Identifier := FieldByName('Motion_Identifier').AsString;
        Motion_Type := FieldByName('Motion_Type').AsInteger;
        Max_Altitude := FieldByName('Max_Altitude').AsSingle;
        Max_Depth := FieldByName('Max_Depth').AsSingle;
        Min_Ground_Speed := FieldByName('Min_Ground_Speed').AsSingle;
        Cruise_Ground_Speed := FieldByName('Cruise_Ground_Speed').AsSingle;
        High_Ground_Speed := FieldByName('High_Ground_Speed').AsSingle;
        Max_Ground_Speed := FieldByName('Max_Ground_Speed').AsSingle;
        Acceleration := FieldByName('Acceleration').AsSingle;
        Deceleration := FieldByName('Deceleration').AsSingle;
        Normal_Climb_Rate := FieldByName('Normal_Climb_Rate').AsSingle;
        Max_Climb_Rate := FieldByName('Max_Climb_Rate').AsSingle;
        Normal_Descent_Rate := FieldByName('Normal_Descent_Rate').AsSingle;
        Max_Descent_Rate := FieldByName('Max_Descent_Rate').AsSingle;
        Vertical_Accel := FieldByName('Vertical_Accel').AsSingle;
        Standard_Turn_Rate := FieldByName('Standard_Turn_Rate').AsSingle;
        Tight_Turn_Rate := FieldByName('Tight_Turn_Rate').AsSingle;
        Max_Helm_Angle := FieldByName('Max_Helm_Angle').AsSingle;
        Helm_Angle_Rate := FieldByName('Helm_Angle_Rate').AsSingle;
        Speed_Reduce_In_Turn := FieldByName('Speed_Reduce_In_Turn').AsSingle;
        Time_To_Reduce_Speed := FieldByName('Time_To_Reduce_Speed').AsSingle;
        Min_Speed_To_Reduce := FieldByName('Min_Speed_To_Reduce').AsSingle;
        Rate_of_Turn_Rate_Chg := FieldByName('Rate_of_Turn_Rate_Chg').AsSingle;
        Min_Pitch_Angle := FieldByName('Min_Pitch_Angle').AsSingle;
        Max_Pitch_Angle := FieldByName('Max_Pitch_Angle').AsSingle;
        Max_Roll_Angle := FieldByName('Max_Roll_Angle').AsSingle;
        Endurance_Type := FieldByName('Endurance_Type').AsInteger;
        Endurance_Time := FieldByName('Endurance_Time').AsInteger;
        Max_Effective_Range := FieldByName('Max_Effective_Range').AsSingle;
        Fuel_Unit_Type := FieldByName('Fuel_Unit_Type').AsInteger;
        Max_Fuel_Capacity := FieldByName('Max_Fuel_Capacity').AsSingle;
        Min_Speed_Fuel_Consume := FieldByName('Min_Speed_Fuel_Consume').AsFloat;
        Cruise_Speed_Fuel_Consume := FieldByName('Cruise_Speed_Fuel_Consume')
          .AsFloat;
        High_Speed_Fuel_Consume := FieldByName('High_Speed_Fuel_Consume')
          .AsFloat;
        Max_Speed_Fuel_Consume := FieldByName('Max_Speed_Fuel_Consume').AsFloat;
      end;

      mList.Add(rec);
      ZQ.Next;
    end;
  end;
end;

function TdmTTT.getAllMotion_CharacteristicsUsedByVec(mList: TList): Integer;
var
  rec: TMotion_Characteristics;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT distinct Motion_Characteristics, b.* ');
    SQL.Add('FROM Vehicle_Definition a ');
    SQL.Add('INNER JOIN Motion_Characteristics b on a.Motion_Characteristics = b.Motion_Index');
    SQL.Add('ORDER BY Motion_Identifier');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin
      First;
      if not Assigned(mList) then
        mList := TList.Create
      else
        mList.Clear;
    end;

    while not ZQ.Eof do
    begin
      rec := TMotion_Characteristics.Create;
      with rec.FData do
      begin
        Motion_Index := FieldByName('Motion_Index').AsInteger;
        Motion_Identifier := FieldByName('Motion_Identifier').AsString;
        Motion_Type := FieldByName('Motion_Type').AsInteger;
        Max_Altitude := FieldByName('Max_Altitude').AsSingle;
        Max_Depth := FieldByName('Max_Depth').AsSingle;
        Min_Ground_Speed := FieldByName('Min_Ground_Speed').AsSingle;
        Cruise_Ground_Speed := FieldByName('Cruise_Ground_Speed').AsSingle;
        High_Ground_Speed := FieldByName('High_Ground_Speed').AsSingle;
        Max_Ground_Speed := FieldByName('Max_Ground_Speed').AsSingle;
        Acceleration := FieldByName('Acceleration').AsSingle;
        Deceleration := FieldByName('Deceleration').AsSingle;
        Normal_Climb_Rate := FieldByName('Normal_Climb_Rate').AsSingle;
        Max_Climb_Rate := FieldByName('Max_Climb_Rate').AsSingle;
        Normal_Descent_Rate := FieldByName('Normal_Descent_Rate').AsSingle;
        Max_Descent_Rate := FieldByName('Max_Descent_Rate').AsSingle;
        Vertical_Accel := FieldByName('Vertical_Accel').AsSingle;
        Standard_Turn_Rate := FieldByName('Standard_Turn_Rate').AsSingle;
        Tight_Turn_Rate := FieldByName('Tight_Turn_Rate').AsSingle;
        Max_Helm_Angle := FieldByName('Max_Helm_Angle').AsSingle;
        Helm_Angle_Rate := FieldByName('Helm_Angle_Rate').AsSingle;
        Speed_Reduce_In_Turn := FieldByName('Speed_Reduce_In_Turn').AsSingle;
        Time_To_Reduce_Speed := FieldByName('Time_To_Reduce_Speed').AsSingle;
        Min_Speed_To_Reduce := FieldByName('Min_Speed_To_Reduce').AsSingle;
        Rate_of_Turn_Rate_Chg := FieldByName('Rate_of_Turn_Rate_Chg').AsSingle;
        Min_Pitch_Angle := FieldByName('Min_Pitch_Angle').AsSingle;
        Max_Pitch_Angle := FieldByName('Max_Pitch_Angle').AsSingle;
        Max_Roll_Angle := FieldByName('Max_Roll_Angle').AsSingle;
        Endurance_Type := FieldByName('Endurance_Type').AsInteger;
        Endurance_Time := FieldByName('Endurance_Time').AsInteger;
        Max_Effective_Range := FieldByName('Max_Effective_Range').AsSingle;
        Fuel_Unit_Type := FieldByName('Fuel_Unit_Type').AsInteger;
        Max_Fuel_Capacity := FieldByName('Max_Fuel_Capacity').AsSingle;
        Min_Speed_Fuel_Consume := FieldByName('Min_Speed_Fuel_Consume').AsFloat;
        Cruise_Speed_Fuel_Consume := FieldByName('Cruise_Speed_Fuel_Consume')
          .AsFloat;
        High_Speed_Fuel_Consume := FieldByName('High_Speed_Fuel_Consume')
          .AsFloat;
        Max_Speed_Fuel_Consume := FieldByName('Max_Speed_Fuel_Consume').AsFloat;
      end;

      mList.Add(rec);
      ZQ.Next;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetSubArea_Enviro_Definition(const id: Integer;
  var rectList: TList): boolean;
var
  rec: TSubArea_Enviro_Definition;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM SubArea_Enviro_Definition ');

    SQL.Add('WHERE (Game_Enviro_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not Assigned(rectList) then
    begin
      rectList.Create;
    end
    else
    begin
      rectList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TSubArea_Enviro_Definition.Create;

        with rec.FRect do
        begin
          Left := FieldByName('X_Position_1').AsInteger;
          Top := FieldByName('Y_Position_1').AsInteger;
          Right := FieldByName('X_Position_2').AsInteger;
          Bottom := FieldByName('Y_Position_2').AsInteger;
        end;
        with rec.FData do
        begin
          Enviro_Index := FieldByName('Enviro_Index').AsInteger;
          Game_Enviro_Index := FieldByName('Game_Enviro_Index').AsInteger;
          Enviro_Identifier := FieldByName('Enviro_Identifier').AsString;
          X_Position_1 := FieldByName('X_Position_1').AsSingle;
          Y_Position_1 := FieldByName('Y_Position_1').AsSingle;
          X_Position_2 := FieldByName('X_Position_2').AsSingle;
          Y_Position_2 := FieldByName('Y_Position_2').AsSingle;
          Latitude_1 := FieldByName('Latitude_1').AsFloat;
          Longitude_1 := FieldByName('Longitude_1').AsFloat;
          Latitude_2 := FieldByName('Latitude_2').AsFloat;
          Longitude_2 := FieldByName('Longitude_2').AsFloat;
          Wind_Speed := FieldByName('Wind_Speed').AsSingle;
          Wind_Direction := FieldByName('Wind_Direction').AsSingle;
          Daytime_Visual_Modifier := FieldByName('Daytime_Visual_Modifier')
            .AsSingle;
          Nighttime_Visual_Modifier := FieldByName('Nighttime_Visual_Modifier')
            .AsSingle;
          Daytime_Infrared_Modifier := FieldByName('Daytime_Infrared_Modifier')
            .AsSingle;
          Nighttime_Infrared_Modifier := FieldByName
            ('Nighttime_Infrared_Modifier').AsSingle;
          Rain_Rate := FieldByName('Rain_Rate').AsInteger;
          Cloud_Base_Height := FieldByName('Cloud_Base_Height').AsSingle;
          Cloud_Attenuation := FieldByName('Cloud_Attenuation').AsInteger;
          Sea_State := FieldByName('Sea_State').AsInteger;
          Ocean_Current_Speed := FieldByName('Ocean_Current_Speed').AsSingle;
          Ocean_Current_Direction := FieldByName('Ocean_Current_Direction')
            .AsSingle;
          Thermal_Layer_Depth := FieldByName('Thermal_Layer_Depth').AsSingle;
          Sound_Velocity_Type := FieldByName('Sound_Velocity_Type').AsInteger;
          Surface_Sound_Speed := FieldByName('Surface_Sound_Speed').AsSingle;
          Layer_Sound_Speed := FieldByName('Layer_Sound_Speed').AsSingle;
          Bottom_Sound_Speed := FieldByName('Bottom_Sound_Speed').AsSingle;
          Bottomloss_Coefficient := FieldByName('Bottomloss_Coefficient')
            .AsInteger;
          Ave_Ocean_Depth := FieldByName('Ave_Ocean_Depth').AsSingle;
          CZ_Active := FieldByName('CZ_Active').AsInteger;
          Surface_Ducting_Active := FieldByName('Surface_Ducting_Active')
            .AsInteger;
          Upper_Limit_Sur_Duct_Depth := FieldByName
            ('Upper_Limit_Sur_Duct_Depth').AsSingle;
          Lower_Limit_Sur_Duct_Depth := FieldByName
            ('Lower_Limit_Sur_Duct_Depth').AsSingle;
          Sub_Ducting_Active := FieldByName('Sub_Ducting_Active').AsInteger;
          Upper_Limit_Sub_Duct_Depth := FieldByName
            ('Upper_Limit_Sub_Duct_Depth').AsSingle;
          Lower_Limit_Sub_Duct_Depth := FieldByName
            ('Lower_Limit_Sub_Duct_Depth').AsSingle;
          Shipping_Rate := FieldByName('Shipping_Rate').AsInteger;
          Shadow_Zone_Trans_Loss := FieldByName('Shadow_Zone_Trans_Loss')
            .AsSingle;
          Atmospheric_Refract_Modifier := FieldByName
            ('Atmospheric_Refract_Modifier').AsSingle;
          Barometric_Pressure := FieldByName('Barometric_Pressure').AsSingle;
          Air_Temperature := FieldByName('Air_Temperature').AsSingle;
          Surface_Temperature := FieldByName('Surface_Temperature').AsSingle;
          HF_Black_Hole := FieldByName('HF_Black_Hole').AsInteger;
        end;
        rectList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// -------------------------------------------------------------------------------

function TdmTTT.InsertSubArea_Enviro_Definition
  (var rec: TSubArea_Enviro_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO SubArea_Enviro_Definition ');
      SQL.Add(
        '(Game_Enviro_Index,Enviro_Identifier,X_Position_1,Y_Position_1,X_Position_2, ');
      SQL.Add(
        'Y_Position_2,Latitude_1,Longitude_1,Latitude_2,Longitude_2,Wind_Speed,Wind_Direction,');
      SQL.Add(
        'Daytime_Visual_Modifier,Nighttime_Visual_Modifier,Daytime_Infrared_Modifier,Nighttime_Infrared_Modifier,');
      SQL.Add(
        'Rain_Rate,Cloud_Base_Height,Cloud_Attenuation,Sea_State,Ocean_Current_Speed,Ocean_Current_Direction,');
      SQL.Add(
        'Thermal_Layer_Depth,Sound_Velocity_Type,Surface_Sound_Speed,Layer_Sound_Speed,Bottom_Sound_Speed,');
      SQL.Add(
        'Bottomloss_Coefficient,Ave_Ocean_Depth,CZ_Active,Surface_Ducting_Active,');
      SQL.Add(
        'Upper_Limit_Sur_Duct_Depth,Lower_Limit_Sur_Duct_Depth,Sub_Ducting_Active,Upper_Limit_Sub_Duct_Depth,');
      SQL.Add(
        'Lower_Limit_Sub_Duct_Depth,Shipping_Rate,Shadow_Zone_Trans_Loss,Atmospheric_Refract_Modifier,');
      SQL.Add(
        'Barometric_Pressure,Air_Temperature,Surface_Temperature,HF_Black_Hole)'
        ); ;
      SQL.Add('VALUES (');
      SQL.Add(IntToStr(Game_Enviro_Index) + ',');
      SQL.Add('''' + Enviro_Identifier + ''',');
      SQL.Add(FloatToStr(X_Position_1) + ',');
      SQL.Add(FloatToStr(Y_Position_1) + ',');
      SQL.Add(FloatToStr(X_Position_2) + ',');
      SQL.Add(FloatToStr(Y_Position_2) + ',');
      SQL.Add(FloatToStr(Latitude_1) + ',');
      SQL.Add(FloatToStr(Longitude_1) + ',');
      SQL.Add(FloatToStr(Latitude_2) + ',');
      SQL.Add(FloatToStr(Longitude_2) + ',');
      SQL.Add(FloatToStr(Wind_Speed) + ',');
      SQL.Add(FloatToStr(Wind_Direction) + ',');
      SQL.Add(FloatToStr(Daytime_Visual_Modifier) + ',');
      SQL.Add(FloatToStr(Nighttime_Visual_Modifier) + ',');
      SQL.Add(FloatToStr(Daytime_Infrared_Modifier) + ',');
      SQL.Add(FloatToStr(Nighttime_Infrared_Modifier) + ',');
      SQL.Add(IntToStr(Rain_Rate) + ',');
      SQL.Add(FloatToStr(Cloud_Base_Height) + ',');
      SQL.Add(IntToStr(Cloud_Attenuation) + ',');
      SQL.Add(IntToStr(Sea_State) + ',');
      SQL.Add(FloatToStr(Ocean_Current_Speed) + ',');
      SQL.Add(FloatToStr(Ocean_Current_Direction) + ',');
      SQL.Add(FloatToStr(Thermal_Layer_Depth) + ',');
      SQL.Add(IntToStr(Sound_Velocity_Type) + ',');
      SQL.Add(FloatToStr(Surface_Sound_Speed) + ',');
      SQL.Add(FloatToStr(Layer_Sound_Speed) + ',');
      SQL.Add(FloatToStr(Bottom_Sound_Speed) + ',');
      SQL.Add(IntToStr(Bottomloss_Coefficient) + ',');
      SQL.Add(FloatToStr(Ave_Ocean_Depth) + ',');
      SQL.Add(IntToStr(CZ_Active) + ',');
      SQL.Add(IntToStr(Surface_Ducting_Active) + ',');
      SQL.Add(FloatToStr(Upper_Limit_Sur_Duct_Depth) + ',');
      SQL.Add(FloatToStr(Lower_Limit_Sur_Duct_Depth) + ',');
      SQL.Add(IntToStr(Sub_Ducting_Active) + ',');
      SQL.Add(FloatToStr(Upper_Limit_Sub_Duct_Depth) + ',');
      SQL.Add(FloatToStr(Lower_Limit_Sub_Duct_Depth) + ',');
      SQL.Add(IntToStr(Shipping_Rate) + ',');
      SQL.Add(FloatToStr(Shadow_Zone_Trans_Loss) + ',');
      SQL.Add(FloatToStr(Atmospheric_Refract_Modifier) + ',');
      SQL.Add(FloatToStr(Barometric_Pressure) + ',');
      SQL.Add(FloatToStr(Air_Temperature) + ',');
      SQL.Add(FloatToStr(Surface_Temperature) + ',');
      SQL.Add(IntToStr(HF_Black_Hole) + ')');
      {
        TestQuery.note.Text := SQL.Text;
        TestQuery.Show;
        }
      ExecSQL;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.UpdateSubArea_Enviro_Definition(const id: string;
  var rec: TSubArea_Enviro_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE SubArea_Enviro_Definition  ');
      SQL.Add('SET  ');
      SQL.Add('Game_Enviro_Index = ' + IntToStr(Game_Enviro_Index) + ',');
      SQL.Add('Enviro_Identifier = ''' + (Enviro_Identifier) + ''',');
      SQL.Add('X_Position_1 = ' + FloatToStr(X_Position_1) + ',');
      SQL.Add('Y_Position_1 = ' + FloatToStr(Y_Position_1) + ',');
      SQL.Add('X_Position_2 = ' + FloatToStr(X_Position_2) + ',');
      SQL.Add('Y_Position_2 = ' + FloatToStr(Y_Position_2) + ',');
      SQL.Add('Latitude_1 = ' + FloatToStr(Latitude_1) + ',');
      SQL.Add('Longitude_1 = ' + FloatToStr(Longitude_1) + ',');
      SQL.Add('Latitude_2 = ' + FloatToStr(Latitude_2) + ',');
      SQL.Add('Longitude_2 = ' + FloatToStr(Longitude_2) + ',');
      SQL.Add('Wind_Speed = ' + FloatToStr(Wind_Speed) + ',');
      SQL.Add('Wind_Direction = ' + FloatToStr(Wind_Direction) + ',');
      SQL.Add('Daytime_Visual_Modifier = ' + FloatToStr
          (Daytime_Visual_Modifier) + ',');
      SQL.Add('Nighttime_Visual_Modifier = ' + FloatToStr
          (Nighttime_Visual_Modifier) + ',');
      SQL.Add('Daytime_Infrared_Modifier = ' + FloatToStr
          (Daytime_Infrared_Modifier) + ',');
      SQL.Add('Nighttime_Infrared_Modifier = ' + FloatToStr
          (Nighttime_Infrared_Modifier) + ',');
      SQL.Add('Rain_Rate = ' + IntToStr(Rain_Rate) + ',');
      SQL.Add('Cloud_Base_Height = ' + FloatToStr(Cloud_Base_Height) + ',');
      SQL.Add('Cloud_Attenuation = ' + IntToStr(Cloud_Attenuation) + ',');
      SQL.Add('Sea_State = ' + IntToStr(Sea_State) + ',');
      SQL.Add('Ocean_Current_Speed = ' + FloatToStr(Ocean_Current_Speed) + ',');
      SQL.Add('Ocean_Current_Direction = ' + FloatToStr
          (Ocean_Current_Direction) + ',');
      SQL.Add('Thermal_Layer_Depth = ' + FloatToStr(Thermal_Layer_Depth) + ',');
      SQL.Add('Sound_Velocity_Type = ' + IntToStr(Sound_Velocity_Type) + ',');
      SQL.Add('Surface_Sound_Speed = ' + FloatToStr(Surface_Sound_Speed) + ',');
      SQL.Add('Layer_Sound_Speed = ' + FloatToStr(Layer_Sound_Speed) + ',');
      SQL.Add('Bottom_Sound_Speed = ' + FloatToStr(Bottom_Sound_Speed) + ',');
      SQL.Add('Bottomloss_Coefficient = ' + IntToStr(Bottomloss_Coefficient)
          + ',');
      SQL.Add('Ave_Ocean_Depth = ' + FloatToStr(Ave_Ocean_Depth) + ',');
      SQL.Add('CZ_Active = ' + IntToStr(CZ_Active) + ',');
      SQL.Add('Surface_Ducting_Active = ' + IntToStr(Surface_Ducting_Active)
          + ',');
      SQL.Add('Upper_Limit_Sur_Duct_Depth = ' + FloatToStr
          (Upper_Limit_Sur_Duct_Depth) + ',');
      SQL.Add('Lower_Limit_Sur_Duct_Depth = ' + FloatToStr
          (Lower_Limit_Sur_Duct_Depth) + ',');
      SQL.Add('Sub_Ducting_Active = ' + IntToStr(Sub_Ducting_Active) + ',');
      SQL.Add('Upper_Limit_Sub_Duct_Depth = ' + FloatToStr
          (Upper_Limit_Sub_Duct_Depth) + ',');
      SQL.Add('Lower_Limit_Sub_Duct_Depth = ' + FloatToStr
          (Lower_Limit_Sub_Duct_Depth) + ',');
      SQL.Add('Shipping_Rate = ' + IntToStr(Shipping_Rate) + ',');
      SQL.Add('Shadow_Zone_Trans_Loss = ' + FloatToStr(Shadow_Zone_Trans_Loss)
          + ',');
      SQL.Add('Atmospheric_Refract_Modifier = ' + FloatToStr
          (Atmospheric_Refract_Modifier) + ',');
      SQL.Add('Barometric_Pressure = ' + FloatToStr(Barometric_Pressure) + ',');
      SQL.Add('Air_Temperature = ' + FloatToStr(Air_Temperature) + ',');
      SQL.Add('Surface_Temperature = ' + FloatToStr(Surface_Temperature) + ',');
      SQL.Add('HF_Black_Hole = ' + IntToStr(HF_Black_Hole) + ' ');
    end;
    SQL.Add('WHERE (Enviro_Index = ' + id + ')');

    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

function TdmTTT.DeleteSubArea_Enviro_Definition(const id_enviro: Integer;
  const id_gameArea: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    SQL.Clear;
    SQL.Add('DELETE from SubArea_Enviro_Definition');
    SQL.Add('WHERE (Enviro_Index = ' + IntToStr(id_enviro)
        + ') AND (Game_Enviro_Index =' + IntToStr(id_gameArea) + ')');
    ExecSQL;
  end;
end;
// -------------------------------------------------------------------

function TdmTTT.DeleteAllSubArea_Enviro_Definition(const id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    SQL.Clear;
    SQL.Add('DELETE from SubArea_Enviro_Definition');
    SQL.Add('WHERE (Game_Enviro_Index =' + IntToStr(id) + ')');
    ExecSQL;
  end;
end;

// -------------------------------------------------------------------

function TdmTTT.GetNameRuntime_Platform_LibraryByID(const id: Integer): string;
  var
  ssql: string;
begin
  result := '';
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Runtime_Platform_Library ');
    SQL.Add('WHERE Platform_Library_Index =' + IntToStr(id));
    Open;
    if not IsEmpty then
    begin
      First;
      Result := FieldByName('Library_Name').AsString;
    end;
  end;
end;

function TdmTTT.GetVehicleIdentifierByID(const id: Integer): string;
  var
  ssql: string;
begin
  result := '';
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Vehicle_Definition ');
    SQL.Add('WHERE Vehicle_Index =' + IntToStr(id));
    Open;
    if not IsEmpty then
    begin
      First;
      Result := FieldByName('Vehicle_Identifier').AsString;
    end;
  end;
end;

function TdmTTT.GetRuntime_Platform_Library(const id: Integer;
  var pList: TList; var rec: TRuntime_Platform_Library): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Runtime_Platform_Library ';

    if id <> 0 then
      ssql := ssql + 'WHERE (Platform_Library_Index = ' + IntToStr(id) + ')';

    ssql := ssql + 'ORDER BY Library_Name ';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRuntime_Platform_Library.Create;
        with rec.FData do
        begin
          Platform_Library_Index := FieldByName('Platform_Library_Index')
            .AsInteger;
          Library_Name := FieldByName('Library_Name').AsString;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetRuntime_Platform_LibraryByResourceAlloc(const id: Integer;
  var pList: TList; var rec: TRuntime_Platform_Library): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Runtime_Platform_Library a ';
    ssql := ssql +
      'join Resource_Library_Mapping b on a.Platform_Library_Index = b.Library_Index ';

//    if id <> 0 then
      ssql := ssql + 'WHERE (b.Resource_Alloc_Index = ' + IntToStr(id) + ')';

    SQL.Add(ssql);
    // ShowMessage(SQL.Text);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRuntime_Platform_Library.Create;
        with rec.FData do
        begin
          Platform_Library_Index := FieldByName('Platform_Library_Index')
            .AsInteger;
          Library_Name := FieldByName('Library_Name').AsString;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetTargetIdentifierFromClass(const vId: integer;
  var pList: TList): boolean;
var
  ssql: string;
  rec: TPlatform_Instance_Identifier;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Platform_Instance_Identifier ';
    ssql := ssql + 'WHERE Vehicle_Index = ' + IntToStr(vId) ;
    SQL.Add(ssql);
    Open;

    if not Assigned(pList) then
      pList := TList.Create
    else
      pList.Clear;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Instance_Identifier.Create;
        with rec.FData do
        begin
          Instance_Ident_Index := FieldByName('Instance_Ident_Index').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Instance_Identifier := FieldByName('Instance_Identifier').AsString;
          vbs_class_name := FieldByName('vbs_class_name').AsString;
          model_path := FieldByName('model_path').AsString;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetTargetListFromVec_Def(var pList: TList): boolean;
var
  ssql: string;
  rec : TVehicle_Definition;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Vehicle_Definition ';
    ssql := ssql + 'WHERE Platform_Domain = 8 ' ;   //target
    ssql := ssql + 'ORDER BY  Vehicle_Identifier' ;
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin

      First;

      if not Assigned(pList) then
        pList := TList.Create
      else
        pList.Clear;

      while not ZQ.Eof do
      begin
        rec := TVehicle_Definition.Create;
        with rec.FData do
        begin

          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Vehicle_Identifier := FieldByName('Vehicle_Identifier').AsString;
          Platform_Domain := FieldByName('Platform_Domain').AsInteger;
          Platform_Category := FieldByName('Platform_Category').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Motion_Characteristics := FieldByName('Motion_Characteristics')
            .AsInteger;
          Length := FieldByName('Length').AsSingle;
          Width := FieldByName('Width').AsSingle;
          Height := FieldByName('Height').AsSingle;
          Draft := FieldByName('Draft').AsSingle;
          Front_Radar_Cross := FieldByName('Front_Radar_Cross').AsSingle;
          Side_Radar_Cross := FieldByName('Side_Radar_Cross').AsSingle;
          Front_Acoustic_Cross := FieldByName('Front_Acoustic_Cross').AsSingle;
          Side_Acoustic_Cross := FieldByName('Side_Acoustic_Cross').AsSingle;
          Magnetic_Cross := FieldByName('Magnetic_Cross').AsSingle;
          Front_Visual_EO_Cross := FieldByName('Front_Visual_EO_Cross')
            .AsSingle;
          Side_Visual_EO_Cross := FieldByName('Side_Visual_EO_Cross').AsSingle;
          Front_Infrared_Cross := FieldByName('Front_Infrared_Cross').AsSingle;
          Side_Infrared_Cross := FieldByName('Side_Infrared_Cross').AsSingle;
          LSpeed_Acoustic_Intens := FieldByName('LSpeed_Acoustic_Intens')
            .AsSingle;
          Below_Cav_Acoustic_Intens := FieldByName('Below_Cav_Acoustic_Intens')
            .AsSingle;
          Above_Cav_Acoustic_Intens := FieldByName('Above_Cav_Acoustic_Intens')
            .AsSingle;
          HSpeed_Acoustic_Intens := FieldByName('HSpeed_Acoustic_Intens')
            .AsSingle;
          Cavitation_Speed_Switch := FieldByName('Cavitation_Speed_Switch')
            .AsSingle;
          Time_of_Weapon_Impact := FieldByName('Time_of_Weapon_Impact')
            .AsInteger;
          Chaff_Seduction_Capable := FieldByName('Chaff_Seduction_Capable')
            .AsBoolean;
          Seduction_Mode_Prob := FieldByName('Seduction_Mode_Prob').AsSingle;
          Min_Delay_Between_Chaff_Rounds := FieldByName
            ('Min_Delay_Between_Chaff_Rounds').AsInteger;
          Max_Chaff_Salvo_Size := FieldByName('Max_Chaff_Salvo_Size').AsInteger;
          SARH_POH_Modifier := FieldByName('SARH_POH_Modifier').AsSingle;
          CG_POH_Modifier := FieldByName('CG_POH_Modifier').AsSingle;
          TARH_POH_Modifier := FieldByName('TARH_POH_Modifier').AsSingle;
          IR_POH_Modifier := FieldByName('IR_POH_Modifier').AsSingle;
          AR_POH_Modifier := FieldByName('AR_POH_Modifier').AsSingle;
          Active_Acoustic_Tor_POH_Mod := FieldByName
            ('Active_Acoustic_Tor_POH_Mod').AsSingle;
          Passive_Acoustic_Tor_POH_Mod := FieldByName
            ('Passive_Acoustic_Tor_POH_Mod').AsSingle;
          Active_Passive_Tor_POH_Mod := FieldByName
            ('Active_Passive_Tor_POH_Mod').AsSingle;
          Wake_Home_POH_Modifier := FieldByName('Wake_Home_POH_Modifier')
            .AsSingle;
          Wire_Guide_POH_Modifier := FieldByName('Wire_Guide_POH_Modifier')
            .AsSingle;
          Mag_Mine_POH_Modifier := FieldByName('Mag_Mine_POH_Modifier')
            .AsSingle;
          Press_Mine_POH_Modifier := FieldByName('Press_Mine_POH_Modifier')
            .AsSingle;
          Impact_Mine_POH_Modifier := FieldByName('Impact_Mine_POH_Modifier')
            .AsSingle;
          Acoustic_Mine_POH_Modifier := FieldByName
            ('Acoustic_Mine_POH_Modifier').AsSingle;
          Sub_Comm_Antenna_Height := FieldByName('Sub_Comm_Antenna_Height')
            .AsSingle;
          Rel_Comm_Antenna_Height := FieldByName('Rel_Comm_Antenna_Height')
            .AsSingle;
          Max_Comm_Operating_Depth := FieldByName('Max_Comm_Operating_Depth')
            .AsSingle;
          HF_Link_Capable := FieldByName('HF_Link_Capable').AsBoolean;
          UHF_Link_Capable := FieldByName('UHF_Link_Capable').AsBoolean;
          HF_Voice_Capable := FieldByName('HF_Voice_Capable').AsBoolean;
          VHF_Voice_Capable := FieldByName('VHF_Voice_Capable').AsBoolean;
          UHF_Voice_Capable := FieldByName('UHF_Voice_Capable').AsBoolean;
          SATCOM_Voice_Capable := FieldByName('SATCOM_Voice_Capable').AsBoolean;
          UWT_Voice_Capable := FieldByName('UWT_Voice_Capable').AsBoolean;
          HF_MHS_Capable := FieldByName('HF_MHS_Capable').AsBoolean;
          UHF_MHS_Capable := FieldByName('UHF_MHS_Capable').AsBoolean;
          SATCOM_MHS_Capable := FieldByName('SATCOM_MHS_Capable').AsBoolean;
          Damage_Capacity := FieldByName('Damage_Capacity').AsInteger;
          Plat_Basing_Capability := FieldByName('Plat_Basing_Capability')
            .AsBoolean;
          Chaff_Capability := FieldByName('Chaff_Capability').AsBoolean;
          Readying_Time := FieldByName('Readying_Time').AsInteger;
          Sonobuoy_Capable := FieldByName('Sonobuoy_Capable').AsBoolean;
          Nav_Light_Capable := FieldByName('Nav_Light_Capable').AsBoolean;
          Periscope_Depth := FieldByName('Periscope_Depth').AsSingle;
          Periscope_Height_Above_Water := FieldByName
            ('Periscope_Height_Above_Water').AsSingle;
          Periscope_Front_Radar_Xsection := FieldByName
            ('Periscope_Front_Radar_Xsection').AsSingle;
          Periscope_Side_Radar_Xsection := FieldByName
            ('Periscope_Side_Radar_Xsection').AsSingle;
          Periscope_Front_Vis_Xsection := FieldByName
            ('Periscope_Front_Vis_Xsection').AsSingle;
          Periscope_Side_Vis_Xsection := FieldByName
            ('Periscope_Side_Vis_Xsection').AsSingle;
          Periscope_Front_IR_Xsection := FieldByName
            ('Periscope_Front_IR_Xsection').AsSingle;
          Periscope_Side_IR_Xsection := FieldByName
            ('Periscope_Side_IR_Xsection').AsSingle;
          Engagement_Range := FieldByName('Engagement_Range').AsSingle;
          Auto_Air_Defense_Capable := FieldByName('Auto_Air_Defense_Capable')
            .AsBoolean;
          Alert_State_Time := FieldByName('Alert_State_Time').AsSingle;
          Detectability_Type := FieldByName('Detectability_Type').AsInteger;
          Max_Sonobuoys_To_Monitor := FieldByName('Max_Sonobuoys_To_Monitor')
            .AsInteger;
          Sonobuoy_Deploy_Max_Altitude := FieldByName
            ('Sonobuoy_Deploy_Max_Altitude').AsInteger;
          Sonobuoy_Deploy_Min_Altitude := FieldByName
            ('Sonobuoy_Deploy_Min_Altitude').AsInteger;
          Sonobuoy_Deploy_Max_Speed := FieldByName('Sonobuoy_Deploy_Max_Speed')
            .AsInteger;
          Air_Drop_Torpedo_Max_Altitude := FieldByName
            ('Air_Drop_Torpedo_Max_Altitude').AsInteger;
          Air_Drop_Torpedo_Min_Altitude := FieldByName
            ('Air_Drop_Torpedo_Min_Altitude').AsInteger;
          Air_Drop_Torpedo_Max_Speed := FieldByName
            ('Air_Drop_Torpedo_Max_Speed')
            .AsInteger;
          TMA_Rate_Factor := FieldByName('TMA_Rate_Factor').AsSingle;
          HMS_Noise_Reduction_Factor := FieldByName
            ('HMS_Noise_Reduction_Factor').AsSingle;
          TAS_Noise_Reduction_Factor := FieldByName
            ('TAS_Noise_Reduction_Factor').AsSingle;
          Infrared_Decoy_Capable := FieldByName('Infrared_Decoy_Capable')
            .AsBoolean;
          HF_Mid_Course_Update_Capable := FieldByName
            ('HF_Mid_Course_Update_Capable').AsBoolean;
          UHF_Mid_Course_Update_Capable := ZQ.FieldByName
            ('UHF_Mid_Course_Update_Capable').AsBoolean;
          DWT := FieldByName('DWT').AsSingle;

//          SATCOM_Mid_Course_Update_Capable := ZQ.FieldByName('SATCOM_Mid_Course_Update_Capable').AsBoolean;

          Font_id := FieldByName
            ('font_id').AsInteger;
          Symbol_id := FieldByName
            ('symbol_id').AsInteger;
          Quantity_Group_Personal := FieldByName
            ('Quantity_Group_Personal').AsInteger;
          Vbs_Class_Name := FieldByName
            ('vbs_class_name').AsString;
          Platform_Capability_Index := FieldByName('Platform_Capability_Index').AsInteger;  //dng
          Logistics_Index := FieldByName('Logistics_Index').AsInteger;
          Tactical_Symbol_Name := FieldByName
            ('Tactical_Symbol_Name').AsString;
          GangwayPosition := FieldByName('GangwayPosition').AsInteger;
          DWT := FieldByName('DWT').AsSingle;
          last_updated := FieldByName('last_updated').AsDateTime;
        end;

        pList.Add(rec);
        ZQ.Next;

      end;
    end;
  end;
end;

function TdmTTT.GetWaypointByResourceAlloc(const id: Integer;
  var pList: TList): boolean;
var
  ssql: string;
  rec : TWaypoint_Def;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Waypoint a ';
    ssql := ssql +
      'join Resource_Waypoint_Mapping b on a.Waypoint_Index = b.Waypoint_Index ';

//    if id <> 0 then
      ssql := ssql + 'WHERE (b.Resource_Alloc_Index = ' + IntToStr(id) + ')';

    SQL.Add(ssql);
    // ShowMessage(SQL.Text);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TWaypoint_Def.Create;
        with rec.FData do
        begin
          Waypoint_Index := FieldByName('Waypoint_Index')
            .AsInteger;
          Waypoint_Name := FieldByName('Waypoint_Name').AsString;
          Termination := FieldByName('Termination').AsInteger;
          Waypoint_Centre_Lat :=  FieldByName('Waypoint_Centre_Lat').AsFloat;
          Waypoint_Centre_Long :=  FieldByName('Waypoint_Centre_Long').AsFloat;
          Dimension := FieldByName('Dimension').AsSingle;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.InsertRuntime_Platform_Library
  (var rec: TRuntime_Platform_Library): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Runtime_Platform_Library(Library_Name)  ');
      SQL.Add('VALUES (');
      SQL.Add('''' + Library_Name + ''')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Runtime_Platform_Library ');
      SQL.Add('WHERE Library_Name =' + quotedStr(Library_Name));
      Open;

      Platform_Library_Index := FieldByName('Platform_Library_Index').AsInteger;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.InsertRuntime_Platform_LibraryByResourceAlloc(const id: string;
  var rec: TRuntime_Platform_Library): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Resource_Library_Mapping  ');
      SQL.Add('(Resource_Alloc_Index,Library_Index)  ');
      SQL.Add('VALUES (');
      SQL.Add('''' + id + ''', ' + IntToStr(Platform_Library_Index) + ')');
    end;
    ExecSQL;
  end;
end;

function TdmTTT.InsertWaypointByResourceAlloc(const id: string;
  var rec: TWaypoint_Def): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Resource_Waypoint_Mapping  ');
      SQL.Add('(Resource_Alloc_Index,Waypoint_Index)  ');
      SQL.Add('VALUES (');
      SQL.Add('''' + id + ''', ' + IntToStr(Waypoint_Index) + ')');
    end;
    ExecSQL;
  end;
end;

procedure TdmTTT.InsertWaypointDataPoint(WaypointIndex: Integer;
  Waypoint: TRecWaypoint_Data);
var
  query : string;
begin
  with zq do begin

    query := 'Insert into Waypoint_Data(Waypoint_Index, Scripted_Event_Index, Number_of_Event, '
             + 'Platform_Event_Index, Speed, Altitude, Vert_Speed, Waypoint_Latitude, Waypoint_Longitude, '
             + 'Cartesian_Waypoint_X, Cartesian_Waypoint_Y, Time_Waypoint, Time_2_Waypoint, HF_Datalink_Activate, '
             + 'UHF_Datalink_Activate, Sonobuoy_Resource_Index, Sonobuoy_Instance_Index, Deploy_Sonobuoys, '
             + 'Sonobuoy_Spacing, Num_Sonobuoys_2_Drop, Sonobuoy_Depth, Jammer_Control, Remove_from_Game, '
             + 'StartMode, StartAt) values (:Waypoint_Index, :Scripted_Event_Index , :Number_of_Event, :Platform_Event_Index, :Speed, '
             + ':Altitude, :Vert_Speed, :Waypoint_Latitude, :Waypoint_Longitude, :Cartesian_Waypoint_X, :Cartesian_Waypoint_Y, '
             + ':Time_Waypoint, :Time_2_Waypoint, :HF_Datalink_Activate, :UHF_Datalink_Activate, '
             + ':Sonobuoy_Resource_Index, :Sonobuoy_Instance_Index, :Deploy_Sonobuoys, :Sonobuoy_Spacing, '
             + ':Num_Sonobuoys_2_Drop, :Sonobuoy_Depth, :Jammer_Control, :Remove_from_Game, '
             + ':StartMode, :StartAt)';
    ParamCheck := True;

    SQL.Clear;
    SQL.Add(query);
    Params.ParamByName('Waypoint_Index').Value := WaypointIndex;
    Params.ParamByName('Scripted_Event_Index').Value := Waypoint.Scripted_Event_Index;
    Params.ParamByName('Number_of_Event').Value := Waypoint.Number_of_Event;
    Params.ParamByName('Platform_Event_Index').Value := Waypoint.Platform_Event_Index;
    Params.ParamByName('Speed').Value := Waypoint.Speed;
    Params.ParamByName('Altitude').Value := Waypoint.Altitude;
    Params.ParamByName('Vert_Speed').Value := Waypoint.Vert_Speed;
    Params.ParamByName('Waypoint_Latitude').Value := Waypoint.Waypoint_Latitude;
    Params.ParamByName('Waypoint_Longitude').Value := Waypoint.Waypoint_Longitude;
    Params.ParamByName('Cartesian_Waypoint_X').Value := Waypoint.Cartesian_Waypoint_X;
    Params.ParamByName('Cartesian_Waypoint_Y').Value := Waypoint.Cartesian_Waypoint_Y;
    Params.ParamByName('Time_Waypoint').Value := Waypoint.Time_Waypoint;
    Params.ParamByName('Time_2_Waypoint').Value := Waypoint.Time_2_Waypoint;
    Params.ParamByName('HF_Datalink_Activate').Value := Waypoint.HF_Datalink_Activate;
    Params.ParamByName('UHF_Datalink_Activate').Value := Waypoint.UHF_Datalink_Activate;
    Params.ParamByName('Sonobuoy_Resource_Index').Value := Waypoint.Sonobuoy_Resource_Index;
    Params.ParamByName('Sonobuoy_Instance_Index').Value := Waypoint.Sonobuoy_Instance_Index;
    Params.ParamByName('Deploy_Sonobuoys').Value := Waypoint.Deploy_Sonobuoys;
    Params.ParamByName('Sonobuoy_Spacing').Value := Waypoint.Sonobuoy_Spacing;
    Params.ParamByName('Num_Sonobuoys_2_Drop').Value := Waypoint.Num_Sonobuoys_2_Drop;
    Params.ParamByName('Sonobuoy_Depth').Value := Waypoint.Sonobuoy_Depth;
    Params.ParamByName('Jammer_Control').Value := Waypoint.Jammer_Control;
    Params.ParamByName('Remove_from_Game').Value := Waypoint.Remove_from_Game;
    Params.ParamByName('StartMode').Value := Waypoint.StartMode;
    Params.ParamByName('StartAt').Value := Waypoint.StartAt;

    try
      ExecSQL;
    finally
    end;
  end;

end;

// ------------------------------------------------------------------------------

function TdmTTT.UpdateRuntime_Platform_Library(const id: string;
  var rec: TRuntime_Platform_Library): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Runtime_Platform_Library  ');
      SQL.Add('SET  ');
      SQL.Add('Library_Name = ''' + Library_Name + ''' ');
    end;
    SQL.Add('WHERE (Platform_Library_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteRuntime_Platform_LibraryByResourceAlloc(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Library_Mapping  ');
    SQL.Add('WHERE (Library_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteAllResource_Library_Mapping(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Library_Mapping  ');
    SQL.Add('WHERE (Resource_Alloc_Index = ' + id + ')');
    ExecSQL;
  end;
end;

function TdmTTT.DeleteAllResource_Waypoint_Mapping(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Resource_Waypoint_Mapping  ');
    SQL.Add('WHERE (Resource_Alloc_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteRuntime_Platform_Library(const id: string)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Runtime_Platform_Library  ');
    SQL.Add('WHERE (Platform_Library_Index = ' + id + ')');
    ExecSQL;
  end;
end;
// ------------------------------------------------------------------------------

/// /====================================================
function TdmTTT.InsertPlatform_Library_Entry(var rec: TPlatform_Library_Entry)
  : Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      // Insert Pertama Kali
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Platform_Library_Entry  ');
      SQL.Add('(Library_Index, Platform_Type ');

      if Vehicle_Index <> 0 then
      begin
        SQL.Add(', Vehicle_Index');
      end;

      if Missile_Index <> 0 then
      begin
        SQL.Add(', Missile_Index');
      end;

      if Torpedo_Index <> 0 then
      begin
        SQL.Add(', Torpedo_Index');
      end;

      if Mine_Index <> 0 then
      begin
        SQL.Add(', Mine_Index');
      end;

      if Hybrid_Index <> 0 then
      begin
        SQL.Add(', Hybrid_Index');
      end;

      if Satellite_Index <> 0 then
      begin
        SQL.Add(', Satellite_Index');
      end;

      if Sonobuoy_Index <> 0 then
      begin
        SQL.Add(', Sonobuoy_Index')
      end;

      SQL.Add(') ');

      SQL.Add('VALUES ( ');
      // SQL.Add(IntToStr(Library_Entry_Index)+',');
      SQL.Add(IntToStr(Library_Index) + ',');
      SQL.Add(IntToStr(Platform_Type));

      if Vehicle_Index <> 0 then
      begin
        SQL.Add(',' + IntToStr(Vehicle_Index));
      end;

      if Missile_Index <> 0 then
      begin
        SQL.Add(',' + IntToStr(Missile_Index));
      end;

      if Torpedo_Index <> 0 then
      begin
        SQL.Add(',' + IntToStr(Torpedo_Index));
      end;

      if Mine_Index <> 0 then
      begin
        SQL.Add(',' + IntToStr(Mine_Index));
      end;

      if Hybrid_Index <> 0 then
      begin
        SQL.Add(',' + IntToStr(Hybrid_Index));
      end;

      if Satellite_Index <> 0 then
      begin
        SQL.Add(',' + IntToStr(Satellite_Index));
      end;

      if Sonobuoy_Index <> 0 then
      begin
        SQL.Add(',' + IntToStr(Sonobuoy_Index))
      end;

      SQL.Add(')');

      // ShowMessage(SQL.Text);
    end;
    ExecSQL;
  end;
end;
function TdmTTT.InsertPlottingMapping(var aRec: TResource_Allocation): Integer;
begin
  Result := -1;
  with ZQ do
  begin
    with aRec do
    begin
      SQL.Clear;
      SQL.Add('INSERT INTO Resource_Plotting_Mapping');
      SQL.Add('(Resource_Alloc_Index, Plotting_Index, Plotting_Name, Date, Force)');
      SQL.Add('VALUES(');
      SQL.Add(IntToStr(FData.Resource_Alloc_Index) + ',');
      SQL.Add(IntToStr(FPlotting.Plotting_Index) + ',');
      SQL.Add(QuotedStr(FPlotting.Plotting_Name)+ ',');
      SQL.Add(FloatToStr(FPlotting.Date) + ',');
      SQL.Add(IntToStr(FPlotting.Force) + ')');
      ExecSQL;
    end;

  end;
end;

function TdmTTT.InsertPlotting_Definition( aRec: TrecPlotting_Definition): Integer;
begin
  Result := -1;
  with ZQ do
  begin
    SQL.Clear;
    SQL.Add('INSERT INTO Plotting_Definition');
    SQL.Add('(Plotting_Name, Plotting_Type, Plotting_Group)');
    SQL.Add('VALUES(');
    SQL.Add(QuotedStr(aRec.Plotting_Name)+',');
    SQL.Add(IntToStr(aRec.Plotting_Type)+',') ;
    SQL.Add(IntToStr(aRec.Plotting_Group)+')');
    ExecSQL;
  end;
end;

// -------------------------------------------------------------------

/// /====================================================
function TdmTTT.GetPlatform_Library_Entry(const id: Integer;
  var rec: TPlatform_Library_Entry): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Library_Entry ');

    SQL.Add('WHERE (Library_Entry_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      if not Assigned(rec) then
        rec := TPlatform_Library_Entry.Create;
      with rec.FData do
      begin
        Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
        Library_Index := FieldByName('Library_Index').AsInteger;
        Platform_Type := FieldByName('Platform_Type').AsInteger;
        Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
        Missile_Index := FieldByName('Missile_Index').AsInteger;
        Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
        Mine_Index := FieldByName('Mine_Index').AsInteger;
        Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
        Satellite_Index := FieldByName('Satellite_Index').AsInteger;
        Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
      end;
    end;
  end;
end;

// -------------------------------------------------------------------
function TdmTTT.GetPlatform_Library_Entry_byMiss(const id: Integer;
  var rec: TList): boolean;
var aRec: TPlatform_Library_Entry;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Library_Entry ');
    SQL.Add('WHERE (Missile_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      if not Assigned(rec) then
        rec := TList.Create
      else
        rec.Clear;

      while not ZQ.Eof do
      begin
        aRec := TPlatform_Library_Entry.Create;
        with aRec.FData do
        begin
          Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        end;

        rec.Add(aRec);
        ZQ.Next;
      end;
    end;
  end;
end;

// -------------------------------------------------------------------
function TdmTTT.GetPlatform_Library_Entry_byHybrid(const id: Integer;
  var rec: TList): boolean;
var aRec: TPlatform_Library_Entry;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Platform_Library_Entry ');
    SQL.Add('WHERE (Hybrid_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;

      if not Assigned(rec) then
        rec := TList.Create
      else
        rec.Clear;

      while not ZQ.Eof do
      begin
        aRec := TPlatform_Library_Entry.Create;
        with aRec.FData do
        begin
          Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        end;

        rec.Add(aRec);
        ZQ.Next;
      end;
    end;
  end;
end;

// -------------------------------------------------------------------

function TdmTTT.getAllPlatform_Library_Entry(const id: Integer;
  var aRec: TList): Integer;
var

  rec: TPlatform_Library_Entry;
begin
  result := -1;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM  Platform_Library_Entry ');
    SQL.Add('WHERE (Library_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount;
    if not IsEmpty then
    begin

      First;

      if not Assigned(aRec) then
        aRec := TList.Create
      else
        aRec.Clear;

      while not ZQ.Eof do
      begin
        rec := TPlatform_Library_Entry.Create;
        with rec.FData do
        begin
          Library_Entry_Index := FieldByName('Library_Entry_Index').AsInteger;
          Library_Index := FieldByName('Library_Index').AsInteger;
          Platform_Type := FieldByName('Platform_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Missile_Index := FieldByName('Missile_Index').AsInteger;
          Torpedo_Index := FieldByName('Torpedo_Index').AsInteger;
          Mine_Index := FieldByName('Mine_Index').AsInteger;
          Hybrid_Index := FieldByName('Hybrid_Index').AsInteger;
          Satellite_Index := FieldByName('Satellite_Index').AsInteger;
          Sonobuoy_Index := FieldByName('Sonobuoy_Index').AsInteger;
        end;
        aRec.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAllPlotting_Definition( var pList: TList): Boolean;
var
  rec: TRuntime_Plotting_Definition;
begin
Result := false;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Plotting_Definition');
    SQL.Add('ORDER BY Plotting_Index');
    Open;

    result := RecordCount > 0;
    if not Assigned(plist) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        Rec := TRuntime_Plotting_Definition.Create;
        with Rec.fdata do
        begin
          Plotting_Index := FieldByName('Plotting_Index').AsInteger;
          Plotting_Name := FieldByName('Plotting_Name').AsString;
          Plotting_Type := FieldByName('Plotting_Type').AsInteger;
          Plotting_Group := FieldByName('Plotting_Group').AsInteger;
        end;
        pList.Add(Rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetAllPlotting_DefinitionByID(const id: Integer; var pList: TList;
  rec: TRuntime_Plotting_Definition): Integer;
begin
Result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * FROM Plotting_Definition');
    SQL.Add('Where (Plotting_Index = ' + IntToStr(id) + ')');
    Open;

    result := RecordCount ;
    if not Assigned(plist) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        Rec := TRuntime_Plotting_Definition.Create;
        with Rec.fdata do
        begin
          Plotting_Index := FieldByName('Plotting_Index').AsInteger;
          Plotting_Name := FieldByName('Plotting_Name').AsString;
          Plotting_Type := FieldByName('Plotting_Type').AsInteger;
          Plotting_Group := FieldByName('Plotting_Group').AsInteger;
        end;
        pList.Add(Rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

/// /===================================================

function TdmTTT.UpdatePlatform_Instance_ModelPathByInx(const ins_ident, vbsName, modelPath: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Platform_Instance_Identifier  ');
    SQL.Add('SET ');
    SQL.Add('vbs_class_name = ' + QuotedStr(vbsName));
    SQL.Add(', model_path = ' + QuotedStr(modelPath));
    SQL.Add('WHERE Instance_Ident_Index = ' + ins_ident);
    ExecSQL;
  end;
end;

function TdmTTT.UpdatePlatform_Library_Entry(const index,id,lib_id: Integer): Integer;
var ssql : string;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('UPDATE Platform_Library_Entry  ');
    SQL.Add('SET ');
    case index of
      1: ssql := 'Vehicle_Index = ' + IntToStr(id);
      2: ssql := 'Missile_Index = ' + IntToStr(id) + ',Hybrid_Index = NULL';
      3: ssql := 'Torpedo_Index = ' + IntToStr(id);
      4: ssql := 'Mine_Index = ' + IntToStr(id);
      5: ssql := 'Hybrid_Index = ' + IntToStr(id) + ',Missile_Index = NULL';
      6: ssql := 'Satellite_Index = ' + IntToStr(id);
      7: ssql := 'Sonobuoy_Index = ' + IntToStr(id);
    end;
    SQL.Add(ssql);
    SQL.Add(',Platform_Type = ' + IntToStr(index));

    SQL.Add(' WHERE (Library_Entry_Index = ' + IntToStr(lib_id) + ')');
    ExecSQL;
  end;
end;
function TdmTTT.UpdatePlotting(aRec: TrecPlotting_Definition;
  id: string): Boolean;
begin
  Result := True;
  with ZQ do
  begin
    with aRec do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Plotting_Definition');
      SQL.Add('Set');
      sql.Add('Plotting_Name ='+ QuotedStr(Plotting_Name)+',');
      SQL.Add('Plotting_Type ='+ IntToStr(Plotting_Type)+ ',');
      SQL.Add('Plotting_Group='+ IntToStr(Plotting_Group));
    end;
    SQL.Add('WHERE (Plotting_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// -------------------------------------------------------------------

/// /====================================================
function TdmTTT.DeletePlatform_Library_Entry(const index,lib_id,id: integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Platform_Library_Entry  ');
    SQL.Add('WHERE Library_Index = ' + IntToStr(lib_id) );
    if index <> 0 then
    begin
      SQL.Add(' AND ');
      case index of
        1: SQL.Add('Vehicle_Index ');
        2: SQL.Add('Missile_Index ');
        3: SQL.Add('Torpedo_Index ');
        4: SQL.Add('Mine_Index ');
        5: SQL.Add('Hybrid_Index ');
        6: SQL.Add('Satellite_Index ');
        7: SQL.Add('Sonobuoy_Index ');
      end;
      SQL.Add('= ' + IntToStr(id));
    end;
    ExecSQL;
  end;
end;
function TdmTTT.DeletePlotting(const id: String): Boolean;
begin
  Result := True;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Plotting_Definition');
    SQL.Add('WHERE Plotting_Index =' + id);
    ExecSQL;
  end;
end;

// -------------------------------------------------------------------

function TdmTTT.GetRadar_Interval_List(const id: Integer; var pList: TList;
  var rec: TRadar_Interval_List): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Radar_Interval_List ';

    if id <> 0 then
      ssql := ssql + 'WHERE (Interval_List_Index = ' + IntToStr(id) + ')';

    ssql := ssql + 'ORDER BY Interval_List_Identifier ';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TRadar_Interval_List.Create;
        with rec.FData do
        begin
          Interval_List_Index := FieldByName('Interval_List_Index').AsInteger;
          Interval_List_Identifier := FieldByName('Interval_List_Identifier')
            .AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.UpdateRadar_Interval_List(const id: integer;
  var rec: TRadar_Interval_List): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Radar_Interval_List  ');
      SQL.Add('SET ');
      SQL.Add('Interval_List_Identifier = ' + QuotedStr(Interval_List_Identifier) + ' ');
    end;
    SQL.Add('WHERE (Interval_List_Index = ' + IntToStr(id) + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.InsertRadar_Interval_List(var rec: TRadar_Interval_List): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Radar_Interval_List (Interval_List_Identifier) ');
      SQL.Add('VALUES ( ');
      SQL.Add('''' + Interval_List_Identifier + ''')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT * FROM Radar_Interval_List ');
      SQL.Add('WHERE Interval_List_Identifier =' + quotedStr(Interval_List_Identifier));
      Open;

      Interval_List_Index := FieldByName('Interval_List_Index').AsInteger;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteRadar_Interval_List(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Radar_Interval_List  ');
    SQL.Add('WHERE (Interval_List_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetOverlay_Definition_List(const id: Integer; var pList: TList;
  var rec: TMainOverlay_Definition): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Overlay_Definition ';

    if id <> 0 then
      ssql := ssql + 'WHERE (Overlay_Index = ' + IntToStr(id) + ')';

    ssql := ssql + 'ORDER BY Overlay_Identifier ASC';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TMainOverlay_Definition.Create;
        with rec.FData do
        begin
          Overlay_Index := FieldByName('Overlay_Index').AsInteger;
          Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
          Name := FieldByName('Overlay_Filename').AsString;
          Tipe := FieldByName('Static_Overlay').AsInteger;
          Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
          domain := FieldByName('Domain').AsInteger;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------
function TdmTTT.GetPersonel(const id: Integer; var pList: TList;
  var rec: Tpersonel): Boolean;
begin
  result := False;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT a1.Brigade_Index, ');
    SQL.Add('a1.Brigade_Identifier, b2.Batalyon_Index, b2.Batalyon_Identifier, ');
    SQL.Add('c3.Kompi_Index, c3.Kompi_Identifier, d4.Pleton_Index, ');
    SQL.Add('d4.Pleton_Identifier, e5.Regu_Index, e5.Regu_Identifier ');
    SQL.Add('FROM Personel_Brigade a1 JOIN personel_batalyon b2 ON ');
    SQL.Add('a1.brigade_index = b2.brigade_index JOIN personel_kompi c3 ON ');
    SQL.Add('b2.batalyon_index = c3.batalyon_index JOIN personel_pleton d4 ON ');
    SQL.Add('c3.kompi_index = d4.kompi_index JOIN Personel_Regu e5 ON ');
    SQL.Add('d4.Pleton_Index = e5.Pleton_Index ');
    SQL.Add('WHERE (a1.Brigade_Index = ' + IntToStr(id) + ')');

    Open;
    Result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList := TList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPersonel.Create;
        {with rec.FData do
        begin}
          TGroup(rec).IdBrigade := FieldByName('Brigade_Index').AsInteger;
          TBrigade(rec).Identifier := FieldByName('Brigade_Identifier').AsString;
          TGroup(rec).IdBatalyon := FieldByName('Batalyon_Index').AsInteger;
          TBatalyon(rec).Identifier := FieldByName('Batalyon_Identifier').AsString;
          TGroup(rec).IdKompi := FieldByName('Kompi_Index').AsInteger;
          TKompi(rec).Identifier := FieldByName('Kompi_Identifier').AsString;
          TGroup(rec).IdPlatoon := FieldByName('Pleton_Index').AsInteger;
          TPlatoon(rec).Identifier := FieldByName('Pleton_Identifier').AsString;
          TGroup(rec).Id := FieldByName('Regu_Index').AsInteger;
          TGroup(rec).Identifier := FieldByName('Regu_Identifier').AsString;
//          Brigade_Identifier := FieldByName('Brigade_Identifier').AsString;
//          Batalyon_Index := FieldByName('Batalyon_Index').AsInteger;
//          Batalyon_Identifier := FieldByName('Batalyon_Identifier').AsString;
//          Kompi_Index := FieldByName('Kompi_Index').AsInteger;
//          Kompi_Identifier := FieldByName('Kompi_Identifier').AsString;
//          Pleton_Index := FieldByName('Pleton_Index').AsInteger;
//          Pleton_Identifier := FieldByName('Pleton_Identifier').AsString;
//          Regu_Index := FieldByName('Regu_Index').AsInteger;
//          Regu_Identifier := FieldByName('Regu_Identifier').AsString;
        {end; }
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPersonel_ByRes(const id: Integer; var pList: TList): Boolean;
var
  rec : TPersonel_Embark_Library;
begin
  Result := False;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT Resource_Alloc_Index, Resource_Embark_Library_Mapping.Embark_Library_Index, Brigade_Index, Brigade_Identifier ');
    SQL.Add('FROM Resource_Embark_Library_Mapping LEFT JOIN Personel_Embark_Library ON ');
    SQL.Add('Resource_Embark_Library_Mapping.Embark_Library_Index = Personel_Embark_Library.Embark_Library_Index ');
    SQL.Add('Where (Resource_Alloc_Index = ' + IntToStr(id) + ')');
    Open;

    Result := RecordCount > 0;
    if not Assigned(pList) then
      pList := TList.Create
    else
      pList.Clear;

    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TPersonel_Embark_Library.Create;
        with rec.FData do
        begin
          Embark_Library_Index := FieldByName('Embark_Library_Index').AsInteger;
          Brigade_Index := FieldByName('Brigade_Index').AsInteger;
          Brigade_Identifier := FieldByName('Brigade_Identifier').AsString;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPersonel_Embark_Library(const id: Integer; var pList: Tlist;
  rec: TPersonel{_Embark_Library}): Boolean;
begin
  Result := False;
  if not ZConn.Connected then
    Exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Personel_Embark_Library ');
    SQL.Add('WHERE (Embark_Library_Index = ' + IntToStr(id) + ')');
    Open;

    Result := RecordCount > 0;
    if not Assigned(pList) then
      pList := TList.Create
    else
      pList.Clear;

    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TPersonel.Create;//_Embark_Library.Create;
        {with rec.FData do
        begin }
          rec.Id := FieldByName('Brigade_Index').AsInteger;
          rec.Identifier := FieldByName('Brigade_Identifier').AsString;
          rec.VeId := FieldByName('Vehicle_Index').AsInteger;
        {end;}
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

function TdmTTT.GetPersonel_Mapping(const id: Integer;
  var pList: TList): Boolean;
var
  rec: TPersonel_Embark_Library;
begin
  Result := False;
  if not ZConn.Connected then
    Exit;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Personel_Embark_Library ');
    if id <> 0 then
      SQL.Add('WHERE (Embark_Library_Index = ' + IntToStr(id) + ')');
    Open;

    Result := RecordCount > 0;
    if not Assigned(pList) then
      pList := TList.Create
    else
      pList.Clear;

    if not IsEmpty then
    begin
      First;
      while not ZQ.Eof do
      begin
        rec := TPersonel_Embark_Library.Create;
        with rec.FData do
        begin
          Embark_Library_Index := FieldByName('Embark_Library_Index').AsInteger;
          Brigade_Index := FieldByName('Brigade_Index').AsInteger;
          Brigade_Identifier := FieldByName('Brigade_Identifier').AsString;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
        end;
        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.GetOverlay_Definition_ByID(const id: Integer;
  var rec: TMainOverlay_Definition): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * ';
    ssql := ssql + 'FROM Overlay_Definition ';

    if id <> 0 then
      ssql := ssql + 'WHERE (Overlay_Index = ' + IntToStr(id) + ')';

    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;

    if not IsEmpty then
    begin
      First;

      rec := TMainOverlay_Definition.Create;
      with rec.FData do
      begin
        Overlay_Index := FieldByName('Overlay_Index').AsInteger;
        Overlay_Identifier := FieldByName('Overlay_Identifier').AsString;
        Name := FieldByName('Overlay_Filename').AsString;
        Tipe := FieldByName('Static_Overlay').AsInteger;
        Game_Area_Index := FieldByName('Game_Area_Index').AsInteger;
        domain := FieldByName('Domain').AsInteger;
      end;

    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdateOverlay_Definition_List(const id: string;
  var rec: TMainOverlay_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Overlay_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Overlay_Identifier = ' + (Overlay_Identifier) + ',');
      SQL.Add('Overlay_Filename = ' + (Name) + ',');
      SQL.Add('Static_Overlay = ' + IntToStr(Tipe) + ',');
      SQL.Add('Game_Area_Index = ' + IntToStr(Game_Area_Index) + ',');
      SQL.Add('Domain = ' + IntToStr(domain) + ' ');
    end;
    SQL.Add('WHERE (Overlay_Index = ' + id + ')');
    ExecSQL;
  end;
end;
//------------------------------------------------------------------------------
function TdmTTT.UpdatePersonel_Brigade(const idx: Integer;
  var rec: TPersonel): Integer;
begin
Result := -1;
  with ZQ do
  begin
    with rec do
    begin
      Close;
      SQL.Clear;
        SQL.Add('UPDATE Personel_Brigade ');
        SQL.Add('SET ');
        SQL.Add('Brigade_Identifier = ' + QuotedStr(Identifier)+ ',');
        SQL.Add('last_updated = GETDATE()'); //dng
        SQl.Add('WHERE (Brigade_Index = ' + IntToStr(idx) + ')');
    end;
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.InsertOverlay_Definition_List(const id: string;
  var rec: TMainOverlay_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Overlay_Definition ');
      SQL.Add(
        '(Overlay_Identifier,Overlay_Filename,Static_Overlay,Game_Area_Index,Domain)');
      SQL.Add('VALUES ( ');
      SQL.Add('''' + Overlay_Identifier + ''',');
      SQL.Add('''' + Name + ''',');
      SQL.Add(IntToStr(Tipe) + ',');
      SQL.Add(IntToStr(Game_Area_Index) + ',');
      SQL.Add(IntToStr(domain) + ')');
    end;
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteOverlay_Definition(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Overlay_Definition  ');
    SQL.Add('WHERE (Overlay_Index = ' + id + ')');
    ExecSQL;
  end;
end;

function TdmTTT.DeleteOverlay_Shape(const id: Integer): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Overlay_Shape  ');
    SQL.Add('WHERE Overlay_Index = ' + IntToStr(id));
    ExecSQL;
  end;
end;

function TdmTTT.DeletePersonelBrigade_ByIdBrigade(const id: String): Integer;
begin
  Result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Personel_Brigade WHERE Brigade_Index = ' + id);
    ExecSQL;
  end;
end;

function TdmTTT.DeletePersonel_ByIdBrigade(const id: String): Integer;
begin
  Result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
//    SQl.Add('DELETE FROM Personel_Brigade ');
//    SQl.Add('WHERE Brigade_Index = ' + id);
    SQL.Add('DELETE FROM Personel_Batalyon');
    SQl.Add('WHERE Brigade_Index = ' + id);
    SQL.Add('DELETE FROM Personel_Kompi');
    SQl.Add('WHERE Brigade_Index = ' + id);
    SQL.Add('DELETE FROM Personel_Pleton');
    SQl.Add('WHERE Brigade_Index = ' + id);
    SQL.Add('DELETE FROM Personel_Regu');
    SQl.Add('WHERE Brigade_Index = ' + id);
    ExecSQL;
  end;
end;

function TdmTTT.DeletePersonel_Embark_Library(const lib_id: string): Integer;
begin
  Result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Personel_Embark_Library ');
    SQL.Add('WHERE Embark_Library_Index = ' + lib_id);
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetStudent_Role_List(const id: Integer; var pList: TList;
  var rec: TStudent_Role_List): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := ssql + 'SELECT * FROM Student_Role_List ';

    if id <> 0 then
    begin
      ssql := ssql + 'WHERE (Role_List_Index = ' + IntToStr(id) + ')';
      ssql := ssql + 'ORDER BY Role_List_Identifier'
    end
    else
      ssql := ssql + 'ORDER BY Role_List_Identifier';
    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TStudent_Role_List.Create;
        with rec.FData do
        begin
          Role_List_Index := FieldByName('Role_List_Index').AsInteger;
          Role_List_Identifier := FieldByName('Role_List_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetMaxRecStudent_Role_List(var rec: TStudent_Role_List)
  : boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT MAX(Role_List_Index) as last');
    SQL.Add('FROM Student_Role_List ');
    Open;

    result := RecordCount > 0;
    if not IsEmpty then
    begin
      First;
      if not Assigned(rec) then
        rec := TStudent_Role_List.Create;

    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.DeleteStudent_Role_List(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Student_Role_List  ');
    SQL.Add('WHERE (Role_List_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.GetPOD_vs_SNR_Curve_Definition(const id: Integer; pList: TList;
  var rec: TPOD_vs_SNR_Curve_Definition): boolean;
var
  ssql: string;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    ssql := 'SELECT * FROM POD_vs_SNR_Curve_Definition ';

    if id <> 0 then
      ssql := ssql + 'WHERE (Curve_Definition_Index = ' + IntToStr(id) + ')';

    SQL.Add(ssql);
    Open;

    result := RecordCount > 0;
    if not Assigned(pList) then
    begin
      pList.Create;
    end
    else
    begin
      pList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPOD_vs_SNR_Curve_Definition.Create;
        with rec.FData do
        begin
          Curve_Definition_Index := FieldByName('Curve_Definition_Index')
            .AsInteger;
          Curve_Definition_Identifier := FieldByName
            ('Curve_Definition_Identifier').AsString;
        end;

        pList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

// ------------------------------------------------------------------------------

function TdmTTT.UpdatePOD_vs_SNR_Curve_Definition(const id: string;
  var rec: TPOD_vs_SNR_Curve_Definition): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE POD_vs_SNR_Curve_Definition  ');
      SQL.Add('SET ');
      SQL.Add('Curve_Definition_Identifier = ' + QuotedStr(Curve_Definition_Identifier)
          + ' ');
    end;
    SQL.Add('WHERE (Curve_Definition_Index = ' + id + ')');
    ExecSQL;
  end;
end;

// ------------------------------------------------------------------------------

//function TdmTTT.InsertPOD_vs_SNR_Curve_Definition(
//  var rec: TPOD_vs_SNR_Curve_Definition): Integer;
//begin
//  result := -1;
//  with ZQ do
//  begin
//    with rec.FData do
//    begin
//      Close;
//      SQL.Clear;
//      SQL.Add(
//        'INSERT INTO POD_vs_SNR_Curve_Definition(Curve_Definition_Identifier)  '
//        );
//      SQL.Add('VALUES ( ');
//      SQL.Add('''' + Curve_Definition_Identifier + ''')');
//      ExecSQL;
//
//      SQL.Clear;
//      SQL.Add('SELECT * FROM POD_vs_SNR_Curve_Definition ');
//      SQL.Add('WHERE Curve_Definition_Identifier =' + quotedStr(Curve_Definition_Identifier));
//      Open;
//
//      Curve_Definition_Index := FieldByName('Curve_Definition_Index').AsInteger;
//    end;
//
//  end;
//end;

// ------------------------------------------------------------------------------

function TdmTTT.DeletePOD_vs_SNR_Curve_Definition(const id: string): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM POD_vs_SNR_Curve_Definition  ');
    SQL.Add('WHERE (Curve_Definition_Index = ' + id + ')');
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

procedure TdmTTT.GetCubicle_GroupMemberPlatformID(const grpId: Integer;
  var pi: TIntegerArray);
var
  dPI: TPlatform_Instance;
  bResult: boolean;
  i: Integer;
begin

  with ZQ do
  begin
    Close;
    SQL.Clear;

    SQL.Add('SELECT ');
    SQL.Add(' a.Group_Index, c.Platform_Instance_Index, c.Instance_Name  ');
    SQL.Add('FROM ');
    SQL.Add('  Cubicle_Group_Assignment a ');
    SQL.Add('  JOIN Platform_Instance c ');
    SQL.Add('  ON a.Platform_Instance_Index = c.Platform_Instance_Index ');
    SQL.Add('WHERE ');
    SQL.Add('  a.Group_Index=');

    SQL.Add(IntToStr(grpId));
    Open;
  end;

  SetLength(pi, ZQ.RecordCount);
  i := 0;
  while not ZQ.Eof do
  begin
    pi[i] := ZQ.Fields[1].AsInteger;
    Inc(i);
    ZQ.Next;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.GetPredefined_Pattern(const id: Integer; var mList: TList;
  var rec: TPredefined_Pattern): boolean;
begin
  result := false;
  if not ZConn.Connected then
    exit;

  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT * ');
    SQL.Add('FROM Predefined_Pattern ');
    if id <> 0 then
      SQL.Add('WHERE (Pattern_Index = ' + IntToStr(id) + ')');

    SQL.Add('ORDER BY Pattern_Identifier ');
    Open;

    result := RecordCount > 0;
    if not Assigned(mList) then
    begin
      mList.Create;
    end
    else
    begin
      mList.Clear;
    end;

    if not IsEmpty then
    begin
      First;

      while not ZQ.Eof do
      begin
        rec := TPredefined_Pattern.Create;
        with rec.FData do
        begin
          Pattern_Index := FieldByName('Pattern_Index').AsInteger;
          Pattern_Identifier := FieldByName('Pattern_Identifier').AsString;
          Pattern_Type := FieldByName('Pattern_Type').AsInteger;
          Vehicle_Index := FieldByName('Vehicle_Index').AsInteger;
          Pattern_Termination := FieldByName('Pattern_Termination').AsInteger;
          Termination_Heading := FieldByName('Termination_Heading').AsSingle;
        end;

        mList.Add(rec);
        ZQ.Next;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.InsertPredefined_Pattern(var rec: TPredefined_Pattern): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Predefined_Pattern  ');
      SQL.Add('VALUES ( ');
      SQL.Add('''' + Pattern_Identifier + ''',');
      SQL.Add(IntToStr(Pattern_Type) + ',');
      SQL.Add(IntToStr(Vehicle_Index) + ',');
      SQL.Add(IntToStr(Pattern_Termination) + ',');
      SQL.Add(FloatToStr(Termination_Heading) + ')');
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Pattern_Index FROM Predefined_Pattern ');
      SQL.Add('WHERE Pattern_Identifier =' + quotedStr(Pattern_Identifier));
      Open;
      with rec.FData do
      begin
        Pattern_Index := FieldByName('Pattern_Index').AsInteger;
      end;
    end;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.UpdatePredefined_Pattern(const id: string;
  var rec: TPredefined_Pattern): Integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Predefined_Pattern  ');
      SQL.Add('SET ');
      SQL.Add('Pattern_Identifier = ' + QuotedStr(Pattern_Identifier) + ',');
      SQL.Add('Pattern_Type = ' + IntToStr(Pattern_Type) + ',');
      SQL.Add('Vehicle_Index = ' + IntToStr(Vehicle_Index) + ',');
      SQL.Add('Pattern_Termination = ' + IntToStr(Pattern_Termination) + ',');
      SQL.Add('Termination_Heading = ' + FloatToStr(Termination_Heading) + ' ');
    end;
    SQL.Add('WHERE (Pattern_Index = ' + id + ')');
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.DeletePredefined_Pattern(const id: string;
  var rec: TPredefined_Pattern): Integer;
begin
  result := -1;
  with ZQ do
  begin
    Close;
    SQL.Clear;
    SQL.Add('DELETE FROM Predefined_Pattern  ');
    SQL.Add('WHERE (Pattern_Index = ' + id + ')');
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.InsertPoint_Effect_On_Board(const index:integer;
  var rec: TPoint_Effect_On_Board): integer;
begin
  result := -1;
  with ZQ do begin
    with rec.FData do begin
      Close;
      SQL.Clear;
      SQL.Add('INSERT INTO Point_Effect_On_Board ');
      SQL.Add('(Instance_Identifier,Instance_Type,Vehicle_Index,Mount_Type,Quantity,');
      case index of
        1: begin SQL.Add('Gun_Index,');
                 SQL.Add('TurretID)');
           end;
        2: SQL.Add('Bomb_Index)');
      end;

      SQL.Add('VALUES ( ' );
      SQL.Add(QuotedStr(Instance_Identifier)+',');
      SQL.Add(IntToStr(Instance_Type)+',');
      SQL.Add(IntToStr(Vehicle_Index)+',');
      SQL.Add(IntToStr(Mount_Type)+',');
      SQL.Add(IntToStr(Quantity)+',');
      case index of
        1: begin SQL.Add(IntToStr(Gun_Index)+',');
                 SQL.Add(IntToStr(TurretID)+')');
           end;
        2: SQL.Add(IntToStr(Bomb_Index)+')');
      end;
      ExecSQL;

      SQL.Clear;
      SQL.Add('SELECT Point_Effect_Index FROM Point_Effect_On_Board ');
      SQL.Add('WHERE Instance_Identifier = '+QuotedStr(Instance_Identifier));
      SQL.Add(' AND Vehicle_Index = '+IntToStr(Vehicle_Index));
      Open;

      rec.FData.Point_Effect_Index := FieldByName('Point_Effect_Index').AsInteger;
    end;

  end;
end;

//------------------------------------------------------------------------------
function TdmTTT.UpdatePoint_Effect_On_Board(const id: string; const index: Integer;
var rec: TPoint_Effect_On_Board):integer;
begin
  result := -1;
  with ZQ do
  begin
    with rec.FData do
    begin
      Close;
      SQL.Clear;
      SQL.Add('UPDATE Point_Effect_On_Board ');
      SQL.Add('SET ');
      SQL.Add('Instance_Identifier ='+ QuotedStr(Instance_Identifier)+',');
      SQL.Add('Vehicle_Index ='+ IntToStr(Vehicle_Index) + ',');
      SQL.Add('Instance_Type ='+ IntToStr(Instance_Type) + ',');
      SQL.Add('Mount_Type =' + IntToStr(Mount_Type) + ',');
      SQL.Add('Quantity =' + IntToStr(Quantity) +',');
      case index of
        1:begin SQL.Add('Gun_Index ='+IntToStr(Gun_Index) +',');
                SQL.Add('TurretID ='+IntToStr(TurretID));
          end;

        2:SQL.Add('Bomb_Index ='+IntToStr(Bomb_Index) );
      end;
      SQL.Add(' WHERE Point_Effect_Index ='+ id );
    end;
    ExecSQL;
  end;
end;

//------------------------------------------------------------------------------

function TdmTTT.DeletePoint_Effect_On_Board(const id: string): integer;
begin
  result := -1;
  with ZQ do begin
      Close;
      SQL.Clear;
      SQL.Add('DELETE FROM Point_Effect_On_Board  ');
      SQL.Add('WHERE (Point_Effect_Index = ' +  id + ')' );
      ExecSQL;
   end;
end;


{$ENDREGION}

end.
